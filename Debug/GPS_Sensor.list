
GPS_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b368  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800b478  0800b478  0001b478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb28  0800bb28  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb28  0800bb28  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb28  0800bb28  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb28  0800bb28  0001bb28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb2c  0800bb2c  0001bb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800bb30  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  200001e8  0800bd18  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000838  0800bd18  00020838  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008fab  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f2e  00000000  00000000  000291ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  0002b130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000064b  00000000  00000000  0002b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182f9  00000000  00000000  0002bfcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b807  00000000  00000000  000442c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000849e3  00000000  00000000  0004facb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039c4  00000000  00000000  000d44b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d7e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b460 	.word	0x0800b460

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800b460 	.word	0x0800b460

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_d2lz>:
 8000eec:	b538      	push	{r3, r4, r5, lr}
 8000eee:	4605      	mov	r5, r0
 8000ef0:	460c      	mov	r4, r1
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	4628      	mov	r0, r5
 8000ef8:	4621      	mov	r1, r4
 8000efa:	f7ff fe13 	bl	8000b24 <__aeabi_dcmplt>
 8000efe:	b928      	cbnz	r0, 8000f0c <__aeabi_d2lz+0x20>
 8000f00:	4628      	mov	r0, r5
 8000f02:	4621      	mov	r1, r4
 8000f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f08:	f000 b80a 	b.w	8000f20 <__aeabi_d2ulz>
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f12:	f000 f805 	bl	8000f20 <__aeabi_d2ulz>
 8000f16:	4240      	negs	r0, r0
 8000f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f1c:	bd38      	pop	{r3, r4, r5, pc}
 8000f1e:	bf00      	nop

08000f20 <__aeabi_d2ulz>:
 8000f20:	b5d0      	push	{r4, r6, r7, lr}
 8000f22:	2200      	movs	r2, #0
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <__aeabi_d2ulz+0x34>)
 8000f26:	4606      	mov	r6, r0
 8000f28:	460f      	mov	r7, r1
 8000f2a:	f7ff fb89 	bl	8000640 <__aeabi_dmul>
 8000f2e:	f7ff fe5f 	bl	8000bf0 <__aeabi_d2uiz>
 8000f32:	4604      	mov	r4, r0
 8000f34:	f7ff fb0a 	bl	800054c <__aeabi_ui2d>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <__aeabi_d2ulz+0x38>)
 8000f3c:	f7ff fb80 	bl	8000640 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4630      	mov	r0, r6
 8000f46:	4639      	mov	r1, r7
 8000f48:	f7ff f9c2 	bl	80002d0 <__aeabi_dsub>
 8000f4c:	f7ff fe50 	bl	8000bf0 <__aeabi_d2uiz>
 8000f50:	4621      	mov	r1, r4
 8000f52:	bdd0      	pop	{r4, r6, r7, pc}
 8000f54:	3df00000 	.word	0x3df00000
 8000f58:	41f00000 	.word	0x41f00000

08000f5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_GPIO_Init+0x40>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <MX_GPIO_Init+0x40>)
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_GPIO_Init+0x40>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0320 	and.w	r3, r3, #32
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <MX_GPIO_Init+0x40>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <MX_GPIO_Init+0x40>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <MX_GPIO_Init+0x40>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b0f2      	sub	sp, #456	; 0x1c8
 8000fa4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa6:	f000 fb05 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000faa:	f000 f857 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fae:	f7ff ffd5 	bl	8000f5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fb2:	f000 f9e9 	bl	8001388 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fb6:	f000 fa19 	bl	80013ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 8000fba:	f002 f8f9 	bl	80031b0 <Ringbuf_init>
  HAL_Delay(500);
 8000fbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc2:	f000 fb59 	bl	8001678 <HAL_Delay>
  GPS GPS;
  LKF LKF;
  Input Input;
  Angle Angle;
  EKF_Init(&LKF,&Input);
 8000fc6:	f107 0208 	add.w	r2, r7, #8
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fa2f 	bl	8003434 <EKF_Init>
  GPS_Init(&GPS);
 8000fd6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 faa6 	bl	800352c <GPS_Init>
//	 		  sprintf (Buffer, "%.6f %c\r\n, %.6f%c\r\n  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
//	 				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
//	 		  HAL_UART_Transmit(&huart2,(uint8_t*) Buffer, sizeof(Buffer), HAL_MAX_DELAY);
//	  }

	  	 		  	  	  	  EKF_PredictionStep(&LKF,&Angle,&Input);
 8000fe0:	f107 0208 	add.w	r2, r7, #8
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 fad4 	bl	8003598 <EKF_PredictionStep>
	  	 					  EFK_GPSHandleMeasurement(&GPS,&LKF);
 8000ff0:	f107 021c 	add.w	r2, r7, #28
 8000ff4:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 fa52 	bl	80044a4 <EFK_GPSHandleMeasurement>
	  	 					  sprintf (Buffer, "%.6f\r\n %.6f\r\n  " ,LKF.FriPx,
 8001000:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001004:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fac0 	bl	8000590 <__aeabi_f2d>
 8001010:	4604      	mov	r4, r0
 8001012:	460d      	mov	r5, r1
	  	 							  LKF.FriPy);
 8001014:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001018:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800101c:	685b      	ldr	r3, [r3, #4]
	  	 					  sprintf (Buffer, "%.6f\r\n %.6f\r\n  " ,LKF.FriPx,
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fab6 	bl	8000590 <__aeabi_f2d>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	e9cd 2300 	strd	r2, r3, [sp]
 800102c:	4622      	mov	r2, r4
 800102e:	462b      	mov	r3, r5
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <main+0xb0>)
 8001032:	4808      	ldr	r0, [pc, #32]	; (8001054 <main+0xb4>)
 8001034:	f004 fb76 	bl	8005724 <siprintf>
	  	 					  HAL_UART_Transmit(&huart2,(uint8_t*) Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	2232      	movs	r2, #50	; 0x32
 800103e:	4905      	ldr	r1, [pc, #20]	; (8001054 <main+0xb4>)
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <main+0xb8>)
 8001042:	f001 fae1 	bl	8002608 <HAL_UART_Transmit>
	  	 					  HAL_Delay(1000);
 8001046:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800104a:	f000 fb15 	bl	8001678 <HAL_Delay>
	  	 		  	  	  	  EKF_PredictionStep(&LKF,&Angle,&Input);
 800104e:	e7c7      	b.n	8000fe0 <main+0x40>
 8001050:	0800b478 	.word	0x0800b478
 8001054:	20000204 	.word	0x20000204
 8001058:	20000284 	.word	0x20000284

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b090      	sub	sp, #64	; 0x40
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0318 	add.w	r3, r7, #24
 8001066:	2228      	movs	r2, #40	; 0x28
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fbbd 	bl	80057ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001086:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001090:	2302      	movs	r3, #2
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001098:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800109a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800109e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a0:	f107 0318 	add.w	r3, r7, #24
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fe4f 	bl	8001d48 <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010b0:	f000 f819 	bl	80010e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	2302      	movs	r3, #2
 80010ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2102      	movs	r1, #2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 f8bc 	bl	800224c <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010da:	f000 f804 	bl	80010e6 <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3740      	adds	r7, #64	; 0x40
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ea:	b672      	cpsid	i
}
 80010ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ee:	e7fe      	b.n	80010ee <Error_Handler+0x8>

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_MspInit+0x5c>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4a14      	ldr	r2, [pc, #80]	; (800114c <HAL_MspInit+0x5c>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6193      	str	r3, [r2, #24]
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_MspInit+0x5c>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_MspInit+0x5c>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <HAL_MspInit+0x5c>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	61d3      	str	r3, [r2, #28]
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_MspInit+0x5c>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_MspInit+0x60>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_MspInit+0x60>)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	40021000 	.word	0x40021000
 8001150:	40010000 	.word	0x40010000

08001154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <NMI_Handler+0x4>

0800115a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <MemManage_Handler+0x4>

08001166 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <UsageFault_Handler+0x4>

08001172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
	...

08001198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout>0) timeout--;
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <SysTick_Handler+0x34>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <SysTick_Handler+0x18>
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <SysTick_Handler+0x34>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <SysTick_Handler+0x34>)
 80011ae:	801a      	strh	r2, [r3, #0]
	if(VCCTimeout>0) VCCTimeout--;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <SysTick_Handler+0x38>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	dd04      	ble.n	80011c2 <SysTick_Handler+0x2a>
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <SysTick_Handler+0x38>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3b01      	subs	r3, #1
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <SysTick_Handler+0x38>)
 80011c0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c2:	f000 fa3d 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200002d0 	.word	0x200002d0
 80011d0:	20000000 	.word	0x20000000

080011d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <USART1_IRQHandler+0x10>)
 80011da:	f002 f831 	bl	8003240 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000023c 	.word	0x2000023c

080011e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <USART2_IRQHandler+0x10>)
 80011ee:	f001 fa8f 	bl	8002710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000284 	.word	0x20000284

080011fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <_kill>:

int _kill(int pid, int sig)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001214:	f004 fb3c 	bl	8005890 <__errno>
 8001218:	4603      	mov	r3, r0
 800121a:	2216      	movs	r2, #22
 800121c:	601a      	str	r2, [r3, #0]
  return -1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <_exit>:

void _exit (int status)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001232:	f04f 31ff 	mov.w	r1, #4294967295
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffe7 	bl	800120a <_kill>
  while (1) {}    /* Make sure we hang here */
 800123c:	e7fe      	b.n	800123c <_exit+0x12>

0800123e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	e00a      	b.n	8001266 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001250:	f3af 8000 	nop.w
 8001254:	4601      	mov	r1, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	60ba      	str	r2, [r7, #8]
 800125c:	b2ca      	uxtb	r2, r1
 800125e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3301      	adds	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	429a      	cmp	r2, r3
 800126c:	dbf0      	blt.n	8001250 <_read+0x12>
  }

  return len;
 800126e:	687b      	ldr	r3, [r7, #4]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	e009      	b.n	800129e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	60ba      	str	r2, [r7, #8]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	dbf1      	blt.n	800128a <_write+0x12>
  }
  return len;
 80012a6:	687b      	ldr	r3, [r7, #4]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_close>:

int _close(int file)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d6:	605a      	str	r2, [r3, #4]
  return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <_isatty>:

int _isatty(int file)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f004 faa6 	bl	8005890 <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20005000 	.word	0x20005000
 8001370:	00000400 	.word	0x00000400
 8001374:	20000238 	.word	0x20000238
 8001378:	20000838 	.word	0x20000838

0800137c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_USART1_UART_Init+0x5c>)
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <MX_USART1_UART_Init+0x60>)
 8001390:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_USART1_UART_Init+0x5c>)
 8001394:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001398:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <MX_USART1_UART_Init+0x5c>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <MX_USART1_UART_Init+0x5c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_USART1_UART_Init+0x5c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <MX_USART1_UART_Init+0x5c>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USART1_UART_Init+0x5c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <MX_USART1_UART_Init+0x5c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013be:	4809      	ldr	r0, [pc, #36]	; (80013e4 <MX_USART1_UART_Init+0x5c>)
 80013c0:	f001 f8d2 	bl	8002568 <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ca:	f7ff fe8c 	bl	80010e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  	  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <MX_USART1_UART_Init+0x5c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <MX_USART1_UART_Init+0x5c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0220 	orr.w	r2, r2, #32
 80013dc:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000023c 	.word	0x2000023c
 80013e8:	40013800 	.word	0x40013800

080013ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <MX_USART2_UART_Init+0x50>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 80013f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001424:	f001 f8a0 	bl	8002568 <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800142e:	f7ff fe5a 	bl	80010e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000284 	.word	0x20000284
 800143c:	40004400 	.word	0x40004400

08001440 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0318 	add.w	r3, r7, #24
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a3f      	ldr	r2, [pc, #252]	; (8001558 <HAL_UART_MspInit+0x118>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d13a      	bne.n	80014d6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001460:	4b3e      	ldr	r3, [pc, #248]	; (800155c <HAL_UART_MspInit+0x11c>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a3d      	ldr	r2, [pc, #244]	; (800155c <HAL_UART_MspInit+0x11c>)
 8001466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_UART_MspInit+0x11c>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4b38      	ldr	r3, [pc, #224]	; (800155c <HAL_UART_MspInit+0x11c>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a37      	ldr	r2, [pc, #220]	; (800155c <HAL_UART_MspInit+0x11c>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b35      	ldr	r3, [pc, #212]	; (800155c <HAL_UART_MspInit+0x11c>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0318 	add.w	r3, r7, #24
 80014a2:	4619      	mov	r1, r3
 80014a4:	482e      	ldr	r0, [pc, #184]	; (8001560 <HAL_UART_MspInit+0x120>)
 80014a6:	f000 facb 	bl	8001a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0318 	add.w	r3, r7, #24
 80014bc:	4619      	mov	r1, r3
 80014be:	4828      	ldr	r0, [pc, #160]	; (8001560 <HAL_UART_MspInit+0x120>)
 80014c0:	f000 fabe 	bl	8001a40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	2025      	movs	r0, #37	; 0x25
 80014ca:	f000 f9d0 	bl	800186e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014ce:	2025      	movs	r0, #37	; 0x25
 80014d0:	f000 f9e9 	bl	80018a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014d4:	e03c      	b.n	8001550 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a22      	ldr	r2, [pc, #136]	; (8001564 <HAL_UART_MspInit+0x124>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d137      	bne.n	8001550 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_UART_MspInit+0x11c>)
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_UART_MspInit+0x11c>)
 80014e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ea:	61d3      	str	r3, [r2, #28]
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_UART_MspInit+0x11c>)
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_UART_MspInit+0x11c>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a17      	ldr	r2, [pc, #92]	; (800155c <HAL_UART_MspInit+0x11c>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_UART_MspInit+0x11c>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001510:	2304      	movs	r3, #4
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0318 	add.w	r3, r7, #24
 8001520:	4619      	mov	r1, r3
 8001522:	480f      	ldr	r0, [pc, #60]	; (8001560 <HAL_UART_MspInit+0x120>)
 8001524:	f000 fa8c 	bl	8001a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001528:	2308      	movs	r3, #8
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0318 	add.w	r3, r7, #24
 8001538:	4619      	mov	r1, r3
 800153a:	4809      	ldr	r0, [pc, #36]	; (8001560 <HAL_UART_MspInit+0x120>)
 800153c:	f000 fa80 	bl	8001a40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	2026      	movs	r0, #38	; 0x26
 8001546:	f000 f992 	bl	800186e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800154a:	2026      	movs	r0, #38	; 0x26
 800154c:	f000 f9ab 	bl	80018a6 <HAL_NVIC_EnableIRQ>
}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40013800 	.word	0x40013800
 800155c:	40021000 	.word	0x40021000
 8001560:	40010800 	.word	0x40010800
 8001564:	40004400 	.word	0x40004400

08001568 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001568:	f7ff ff08 	bl	800137c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800156c:	480b      	ldr	r0, [pc, #44]	; (800159c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800156e:	490c      	ldr	r1, [pc, #48]	; (80015a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001570:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001584:	4c09      	ldr	r4, [pc, #36]	; (80015ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001592:	f004 f983 	bl	800589c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001596:	f7ff fd03 	bl	8000fa0 <main>
  bx lr
 800159a:	4770      	bx	lr
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80015a4:	0800bb30 	.word	0x0800bb30
  ldr r2, =_sbss
 80015a8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80015ac:	20000838 	.word	0x20000838

080015b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC1_2_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_Init+0x28>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_Init+0x28>)
 80015be:	f043 0310 	orr.w	r3, r3, #16
 80015c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f947 	bl	8001858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	200f      	movs	r0, #15
 80015cc:	f000 f808 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff fd8e 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40022000 	.word	0x40022000

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x54>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x58>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f95f 	bl	80018c2 <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00e      	b.n	800162c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d80a      	bhi.n	800162a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f000 f927 	bl	800186e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <HAL_InitTick+0x5c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000004 	.word	0x20000004
 8001638:	2000000c 	.word	0x2000000c
 800163c:	20000008 	.word	0x20000008

08001640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_IncTick+0x1c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_IncTick+0x20>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a03      	ldr	r2, [pc, #12]	; (8001660 <HAL_IncTick+0x20>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	2000000c 	.word	0x2000000c
 8001660:	200002cc 	.word	0x200002cc

08001664 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b02      	ldr	r3, [pc, #8]	; (8001674 <HAL_GetTick+0x10>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	200002cc 	.word	0x200002cc

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff fff0 	bl	8001664 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffe0 	bl	8001664 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000000c 	.word	0x2000000c

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db0b      	blt.n	800174e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	4906      	ldr	r1, [pc, #24]	; (8001758 <__NVIC_EnableIRQ+0x34>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	2001      	movs	r0, #1
 8001746:	fa00 f202 	lsl.w	r2, r0, r2
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100

0800175c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	2b00      	cmp	r3, #0
 800176e:	db0a      	blt.n	8001786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	490c      	ldr	r1, [pc, #48]	; (80017a8 <__NVIC_SetPriority+0x4c>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	0112      	lsls	r2, r2, #4
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	440b      	add	r3, r1
 8001780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001784:	e00a      	b.n	800179c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4908      	ldr	r1, [pc, #32]	; (80017ac <__NVIC_SetPriority+0x50>)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	3b04      	subs	r3, #4
 8001794:	0112      	lsls	r2, r2, #4
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	440b      	add	r3, r1
 800179a:	761a      	strb	r2, [r3, #24]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e100 	.word	0xe000e100
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f1c3 0307 	rsb	r3, r3, #7
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	bf28      	it	cs
 80017ce:	2304      	movcs	r3, #4
 80017d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3304      	adds	r3, #4
 80017d6:	2b06      	cmp	r3, #6
 80017d8:	d902      	bls.n	80017e0 <NVIC_EncodePriority+0x30>
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3b03      	subs	r3, #3
 80017de:	e000      	b.n	80017e2 <NVIC_EncodePriority+0x32>
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	f04f 32ff 	mov.w	r2, #4294967295
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	401a      	ands	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f8:	f04f 31ff 	mov.w	r1, #4294967295
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	43d9      	mvns	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	4313      	orrs	r3, r2
         );
}
 800180a:	4618      	mov	r0, r3
 800180c:	3724      	adds	r7, #36	; 0x24
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001824:	d301      	bcc.n	800182a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001826:	2301      	movs	r3, #1
 8001828:	e00f      	b.n	800184a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <SysTick_Config+0x40>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001832:	210f      	movs	r1, #15
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f7ff ff90 	bl	800175c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <SysTick_Config+0x40>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <SysTick_Config+0x40>)
 8001844:	2207      	movs	r2, #7
 8001846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	e000e010 	.word	0xe000e010

08001858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff2d 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001880:	f7ff ff42 	bl	8001708 <__NVIC_GetPriorityGrouping>
 8001884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	6978      	ldr	r0, [r7, #20]
 800188c:	f7ff ff90 	bl	80017b0 <NVIC_EncodePriority>
 8001890:	4602      	mov	r2, r0
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff5f 	bl	800175c <__NVIC_SetPriority>
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff35 	bl	8001724 <__NVIC_EnableIRQ>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffa2 	bl	8001814 <SysTick_Config>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d008      	beq.n	8001904 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2204      	movs	r2, #4
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e020      	b.n	8001946 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 020e 	bic.w	r2, r2, #14
 8001912:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d005      	beq.n	8001974 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2204      	movs	r2, #4
 800196c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	e051      	b.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 020e 	bic.w	r2, r2, #14
 8001982:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <HAL_DMA_Abort_IT+0xd4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d029      	beq.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a21      	ldr	r2, [pc, #132]	; (8001a28 <HAL_DMA_Abort_IT+0xd8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d022      	beq.n	80019ee <HAL_DMA_Abort_IT+0x9e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1f      	ldr	r2, [pc, #124]	; (8001a2c <HAL_DMA_Abort_IT+0xdc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01a      	beq.n	80019e8 <HAL_DMA_Abort_IT+0x98>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <HAL_DMA_Abort_IT+0xe0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d012      	beq.n	80019e2 <HAL_DMA_Abort_IT+0x92>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <HAL_DMA_Abort_IT+0xe4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00a      	beq.n	80019dc <HAL_DMA_Abort_IT+0x8c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_DMA_Abort_IT+0xe8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d102      	bne.n	80019d6 <HAL_DMA_Abort_IT+0x86>
 80019d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019d4:	e00e      	b.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
 80019d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019da:	e00b      	b.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
 80019dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e0:	e008      	b.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
 80019e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e6:	e005      	b.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
 80019e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ec:	e002      	b.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
 80019ee:	2310      	movs	r3, #16
 80019f0:	e000      	b.n	80019f4 <HAL_DMA_Abort_IT+0xa4>
 80019f2:	2301      	movs	r3, #1
 80019f4:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <HAL_DMA_Abort_IT+0xec>)
 80019f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
    } 
  }
  return status;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40020008 	.word	0x40020008
 8001a28:	4002001c 	.word	0x4002001c
 8001a2c:	40020030 	.word	0x40020030
 8001a30:	40020044 	.word	0x40020044
 8001a34:	40020058 	.word	0x40020058
 8001a38:	4002006c 	.word	0x4002006c
 8001a3c:	40020000 	.word	0x40020000

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b08b      	sub	sp, #44	; 0x2c
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	e169      	b.n	8001d28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a54:	2201      	movs	r2, #1
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 8158 	bne.w	8001d22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4a9a      	ldr	r2, [pc, #616]	; (8001ce0 <HAL_GPIO_Init+0x2a0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d05e      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a7c:	4a98      	ldr	r2, [pc, #608]	; (8001ce0 <HAL_GPIO_Init+0x2a0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d875      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a82:	4a98      	ldr	r2, [pc, #608]	; (8001ce4 <HAL_GPIO_Init+0x2a4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d058      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a88:	4a96      	ldr	r2, [pc, #600]	; (8001ce4 <HAL_GPIO_Init+0x2a4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d86f      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a8e:	4a96      	ldr	r2, [pc, #600]	; (8001ce8 <HAL_GPIO_Init+0x2a8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d052      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a94:	4a94      	ldr	r2, [pc, #592]	; (8001ce8 <HAL_GPIO_Init+0x2a8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d869      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a9a:	4a94      	ldr	r2, [pc, #592]	; (8001cec <HAL_GPIO_Init+0x2ac>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d04c      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001aa0:	4a92      	ldr	r2, [pc, #584]	; (8001cec <HAL_GPIO_Init+0x2ac>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d863      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001aa6:	4a92      	ldr	r2, [pc, #584]	; (8001cf0 <HAL_GPIO_Init+0x2b0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d046      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001aac:	4a90      	ldr	r2, [pc, #576]	; (8001cf0 <HAL_GPIO_Init+0x2b0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d85d      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d82a      	bhi.n	8001b0c <HAL_GPIO_Init+0xcc>
 8001ab6:	2b12      	cmp	r3, #18
 8001ab8:	d859      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001aba:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <HAL_GPIO_Init+0x80>)
 8001abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac0:	08001b3b 	.word	0x08001b3b
 8001ac4:	08001b15 	.word	0x08001b15
 8001ac8:	08001b27 	.word	0x08001b27
 8001acc:	08001b69 	.word	0x08001b69
 8001ad0:	08001b6f 	.word	0x08001b6f
 8001ad4:	08001b6f 	.word	0x08001b6f
 8001ad8:	08001b6f 	.word	0x08001b6f
 8001adc:	08001b6f 	.word	0x08001b6f
 8001ae0:	08001b6f 	.word	0x08001b6f
 8001ae4:	08001b6f 	.word	0x08001b6f
 8001ae8:	08001b6f 	.word	0x08001b6f
 8001aec:	08001b6f 	.word	0x08001b6f
 8001af0:	08001b6f 	.word	0x08001b6f
 8001af4:	08001b6f 	.word	0x08001b6f
 8001af8:	08001b6f 	.word	0x08001b6f
 8001afc:	08001b6f 	.word	0x08001b6f
 8001b00:	08001b6f 	.word	0x08001b6f
 8001b04:	08001b1d 	.word	0x08001b1d
 8001b08:	08001b31 	.word	0x08001b31
 8001b0c:	4a79      	ldr	r2, [pc, #484]	; (8001cf4 <HAL_GPIO_Init+0x2b4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b12:	e02c      	b.n	8001b6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	623b      	str	r3, [r7, #32]
          break;
 8001b1a:	e029      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	3304      	adds	r3, #4
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	e024      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	623b      	str	r3, [r7, #32]
          break;
 8001b2e:	e01f      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	330c      	adds	r3, #12
 8001b36:	623b      	str	r3, [r7, #32]
          break;
 8001b38:	e01a      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b42:	2304      	movs	r3, #4
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e013      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b50:	2308      	movs	r3, #8
 8001b52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	611a      	str	r2, [r3, #16]
          break;
 8001b5a:	e009      	b.n	8001b70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	615a      	str	r2, [r3, #20]
          break;
 8001b66:	e003      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          break;
 8001b6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2bff      	cmp	r3, #255	; 0xff
 8001b74:	d801      	bhi.n	8001b7a <HAL_GPIO_Init+0x13a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	e001      	b.n	8001b7e <HAL_GPIO_Init+0x13e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2bff      	cmp	r3, #255	; 0xff
 8001b84:	d802      	bhi.n	8001b8c <HAL_GPIO_Init+0x14c>
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	e002      	b.n	8001b92 <HAL_GPIO_Init+0x152>
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	3b08      	subs	r3, #8
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	210f      	movs	r1, #15
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	6a39      	ldr	r1, [r7, #32]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 80b1 	beq.w	8001d22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc0:	4b4d      	ldr	r3, [pc, #308]	; (8001cf8 <HAL_GPIO_Init+0x2b8>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a4c      	ldr	r2, [pc, #304]	; (8001cf8 <HAL_GPIO_Init+0x2b8>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <HAL_GPIO_Init+0x2b8>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bd8:	4a48      	ldr	r2, [pc, #288]	; (8001cfc <HAL_GPIO_Init+0x2bc>)
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a40      	ldr	r2, [pc, #256]	; (8001d00 <HAL_GPIO_Init+0x2c0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d013      	beq.n	8001c2c <HAL_GPIO_Init+0x1ec>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a3f      	ldr	r2, [pc, #252]	; (8001d04 <HAL_GPIO_Init+0x2c4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d00d      	beq.n	8001c28 <HAL_GPIO_Init+0x1e8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3e      	ldr	r2, [pc, #248]	; (8001d08 <HAL_GPIO_Init+0x2c8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d007      	beq.n	8001c24 <HAL_GPIO_Init+0x1e4>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3d      	ldr	r2, [pc, #244]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_GPIO_Init+0x1e0>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e006      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c20:	2304      	movs	r3, #4
 8001c22:	e004      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e002      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c30:	f002 0203 	and.w	r2, r2, #3
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	4093      	lsls	r3, r2
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c3e:	492f      	ldr	r1, [pc, #188]	; (8001cfc <HAL_GPIO_Init+0x2bc>)
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c58:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	492c      	ldr	r1, [pc, #176]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c66:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4928      	ldr	r1, [pc, #160]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c80:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	4922      	ldr	r1, [pc, #136]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60cb      	str	r3, [r1, #12]
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	491e      	ldr	r1, [pc, #120]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4918      	ldr	r1, [pc, #96]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	4914      	ldr	r1, [pc, #80]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d021      	beq.n	8001d14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	490e      	ldr	r1, [pc, #56]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
 8001cdc:	e021      	b.n	8001d22 <HAL_GPIO_Init+0x2e2>
 8001cde:	bf00      	nop
 8001ce0:	10320000 	.word	0x10320000
 8001ce4:	10310000 	.word	0x10310000
 8001ce8:	10220000 	.word	0x10220000
 8001cec:	10210000 	.word	0x10210000
 8001cf0:	10120000 	.word	0x10120000
 8001cf4:	10110000 	.word	0x10110000
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40010800 	.word	0x40010800
 8001d04:	40010c00 	.word	0x40010c00
 8001d08:	40011000 	.word	0x40011000
 8001d0c:	40011400 	.word	0x40011400
 8001d10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_GPIO_Init+0x304>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	4909      	ldr	r1, [pc, #36]	; (8001d44 <HAL_GPIO_Init+0x304>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	3301      	adds	r3, #1
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f47f ae8e 	bne.w	8001a54 <HAL_GPIO_Init+0x14>
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	372c      	adds	r7, #44	; 0x2c
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	40010400 	.word	0x40010400

08001d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e272      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8087 	beq.w	8001e76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d68:	4b92      	ldr	r3, [pc, #584]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d00c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d74:	4b8f      	ldr	r3, [pc, #572]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d112      	bne.n	8001da6 <HAL_RCC_OscConfig+0x5e>
 8001d80:	4b8c      	ldr	r3, [pc, #560]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8c:	d10b      	bne.n	8001da6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8e:	4b89      	ldr	r3, [pc, #548]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d06c      	beq.n	8001e74 <HAL_RCC_OscConfig+0x12c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d168      	bne.n	8001e74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e24c      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x76>
 8001db0:	4b80      	ldr	r3, [pc, #512]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a7f      	ldr	r2, [pc, #508]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e02e      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x98>
 8001dc6:	4b7b      	ldr	r3, [pc, #492]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a7a      	ldr	r2, [pc, #488]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b78      	ldr	r3, [pc, #480]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a77      	ldr	r2, [pc, #476]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e01d      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0xbc>
 8001dea:	4b72      	ldr	r3, [pc, #456]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a71      	ldr	r2, [pc, #452]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6e      	ldr	r2, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001e04:	4b6b      	ldr	r3, [pc, #428]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6a      	ldr	r2, [pc, #424]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b68      	ldr	r3, [pc, #416]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a67      	ldr	r2, [pc, #412]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fc1e 	bl	8001664 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff fc1a 	bl	8001664 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e200      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b5d      	ldr	r3, [pc, #372]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0xe4>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fc0a 	bl	8001664 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff fc06 	bl	8001664 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1ec      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x10c>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d063      	beq.n	8001f4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e82:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e8e:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d11c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x18c>
 8001e9a:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d116      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_RCC_OscConfig+0x176>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e1c0      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4939      	ldr	r1, [pc, #228]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed2:	e03a      	b.n	8001f4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_RCC_OscConfig+0x270>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fbbf 	bl	8001664 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eea:	f7ff fbbb 	bl	8001664 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1a1      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efc:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f08:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4927      	ldr	r1, [pc, #156]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1e:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <HAL_RCC_OscConfig+0x270>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fb9e 	bl	8001664 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2c:	f7ff fb9a 	bl	8001664 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e180      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d03a      	beq.n	8001fcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d019      	beq.n	8001f92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_RCC_OscConfig+0x274>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f64:	f7ff fb7e 	bl	8001664 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fb7a 	bl	8001664 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e160      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 face 	bl	800252c <RCC_Delay>
 8001f90:	e01c      	b.n	8001fcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCC_OscConfig+0x274>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7ff fb64 	bl	8001664 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9e:	e00f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff fb60 	bl	8001664 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d908      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e146      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	42420000 	.word	0x42420000
 8001fbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc0:	4b92      	ldr	r3, [pc, #584]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e9      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a6 	beq.w	8002126 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fde:	4b8b      	ldr	r3, [pc, #556]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b88      	ldr	r3, [pc, #544]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a87      	ldr	r2, [pc, #540]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]
 8001ff6:	4b85      	ldr	r3, [pc, #532]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002006:	4b82      	ldr	r3, [pc, #520]	; (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002012:	4b7f      	ldr	r3, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7e      	ldr	r2, [pc, #504]	; (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7ff fb21 	bl	8001664 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7ff fb1d 	bl	8001664 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b64      	cmp	r3, #100	; 0x64
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e103      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	4b75      	ldr	r3, [pc, #468]	; (8002210 <HAL_RCC_OscConfig+0x4c8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x312>
 800204c:	4b6f      	ldr	r3, [pc, #444]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a6e      	ldr	r2, [pc, #440]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	e02d      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x334>
 8002062:	4b6a      	ldr	r3, [pc, #424]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a69      	ldr	r2, [pc, #420]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	4b67      	ldr	r3, [pc, #412]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a66      	ldr	r2, [pc, #408]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	e01c      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x356>
 8002084:	4b61      	ldr	r3, [pc, #388]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a60      	ldr	r2, [pc, #384]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	4b5e      	ldr	r3, [pc, #376]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a5d      	ldr	r2, [pc, #372]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800209e:	4b5b      	ldr	r3, [pc, #364]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a5a      	ldr	r2, [pc, #360]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	4b58      	ldr	r3, [pc, #352]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a57      	ldr	r2, [pc, #348]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d015      	beq.n	80020ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7ff fad1 	bl	8001664 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7ff facd 	bl	8001664 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0b1      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020dc:	4b4b      	ldr	r3, [pc, #300]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ee      	beq.n	80020c6 <HAL_RCC_OscConfig+0x37e>
 80020e8:	e014      	b.n	8002114 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ea:	f7ff fabb 	bl	8001664 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7ff fab7 	bl	8001664 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e09b      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002108:	4b40      	ldr	r3, [pc, #256]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ee      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4b3c      	ldr	r3, [pc, #240]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a3b      	ldr	r2, [pc, #236]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8087 	beq.w	800223e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002130:	4b36      	ldr	r3, [pc, #216]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d061      	beq.n	8002200 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d146      	bne.n	80021d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <HAL_RCC_OscConfig+0x4cc>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7ff fa8b 	bl	8001664 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002152:	f7ff fa87 	bl	8001664 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e06d      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002178:	d108      	bne.n	800218c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800217a:	4b24      	ldr	r3, [pc, #144]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	4921      	ldr	r1, [pc, #132]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218c:	4b1f      	ldr	r3, [pc, #124]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a19      	ldr	r1, [r3, #32]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	430b      	orrs	r3, r1
 800219e:	491b      	ldr	r1, [pc, #108]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x4cc>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7ff fa5b 	bl	8001664 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7ff fa57 	bl	8001664 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e03d      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x46a>
 80021d0:	e035      	b.n	800223e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_RCC_OscConfig+0x4cc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fa44 	bl	8001664 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff fa40 	bl	8001664 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e026      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x498>
 80021fe:	e01e      	b.n	800223e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e019      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 800220c:	40021000 	.word	0x40021000
 8002210:	40007000 	.word	0x40007000
 8002214:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_OscConfig+0x500>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	429a      	cmp	r2, r3
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000

0800224c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0d0      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002260:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d910      	bls.n	8002290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b67      	ldr	r3, [pc, #412]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4965      	ldr	r1, [pc, #404]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b63      	ldr	r3, [pc, #396]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0b8      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a58      	ldr	r2, [pc, #352]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a52      	ldr	r2, [pc, #328]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b50      	ldr	r3, [pc, #320]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	494d      	ldr	r1, [pc, #308]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d040      	beq.n	800236c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d115      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e07f      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230a:	4b41      	ldr	r3, [pc, #260]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e073      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06b      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232a:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f023 0203 	bic.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4936      	ldr	r1, [pc, #216]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800233c:	f7ff f992 	bl	8001664 <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	e00a      	b.n	800235a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002344:	f7ff f98e 	bl	8001664 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e053      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 020c 	and.w	r2, r3, #12
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	429a      	cmp	r2, r3
 800236a:	d1eb      	bne.n	8002344 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d210      	bcs.n	800239c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0207 	bic.w	r2, r3, #7
 8002382:	4922      	ldr	r1, [pc, #136]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e032      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4916      	ldr	r1, [pc, #88]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	490e      	ldr	r1, [pc, #56]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023da:	f000 f821 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 80023de:	4602      	mov	r2, r0
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	490a      	ldr	r1, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	5ccb      	ldrb	r3, [r1, r3]
 80023ee:	fa22 f303 	lsr.w	r3, r2, r3
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x1cc>)
 80023f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1d0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f8f0 	bl	80015e0 <HAL_InitTick>

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40022000 	.word	0x40022000
 8002410:	40021000 	.word	0x40021000
 8002414:	0800b488 	.word	0x0800b488
 8002418:	20000004 	.word	0x20000004
 800241c:	20000008 	.word	0x20000008

08002420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b04      	cmp	r3, #4
 8002448:	d002      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x30>
 800244a:	2b08      	cmp	r3, #8
 800244c:	d003      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x36>
 800244e:	e027      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002452:	613b      	str	r3, [r7, #16]
      break;
 8002454:	e027      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	0c9b      	lsrs	r3, r3, #18
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002460:	5cd3      	ldrb	r3, [r2, r3]
 8002462:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d010      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	0c5b      	lsrs	r3, r3, #17
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002482:	fb03 f202 	mul.w	r2, r3, r2
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e004      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	613b      	str	r3, [r7, #16]
      break;
 800249e:	e002      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80024a2:	613b      	str	r3, [r7, #16]
      break;
 80024a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a6:	693b      	ldr	r3, [r7, #16]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	007a1200 	.word	0x007a1200
 80024bc:	0800b4a0 	.word	0x0800b4a0
 80024c0:	0800b4b0 	.word	0x0800b4b0
 80024c4:	003d0900 	.word	0x003d0900

080024c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024cc:	4b02      	ldr	r3, [pc, #8]	; (80024d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	20000004 	.word	0x20000004

080024dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024e0:	f7ff fff2 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	4903      	ldr	r1, [pc, #12]	; (8002500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	0800b498 	.word	0x0800b498

08002504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002508:	f7ff ffde 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	0adb      	lsrs	r3, r3, #11
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4903      	ldr	r1, [pc, #12]	; (8002528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	0800b498 	.word	0x0800b498

0800252c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <RCC_Delay+0x34>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <RCC_Delay+0x38>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0a5b      	lsrs	r3, r3, #9
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002548:	bf00      	nop
  }
  while (Delay --);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1e5a      	subs	r2, r3, #1
 800254e:	60fa      	str	r2, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f9      	bne.n	8002548 <RCC_Delay+0x1c>
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	20000004 	.word	0x20000004
 8002564:	10624dd3 	.word	0x10624dd3

08002568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e042      	b.n	8002600 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe ff56 	bl	8001440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2224      	movs	r2, #36	; 0x24
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fd71 	bl	8003094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695a      	ldr	r2, [r3, #20]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b20      	cmp	r3, #32
 8002626:	d16d      	bne.n	8002704 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_UART_Transmit+0x2c>
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e066      	b.n	8002706 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2221      	movs	r2, #33	; 0x21
 8002642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002646:	f7ff f80d 	bl	8001664 <HAL_GetTick>
 800264a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	88fa      	ldrh	r2, [r7, #6]
 8002650:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	88fa      	ldrh	r2, [r7, #6]
 8002656:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002660:	d108      	bne.n	8002674 <HAL_UART_Transmit+0x6c>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d104      	bne.n	8002674 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	e003      	b.n	800267c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800267c:	e02a      	b.n	80026d4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2200      	movs	r2, #0
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 faf9 	bl	8002c80 <UART_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e036      	b.n	8002706 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10b      	bne.n	80026b6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	3302      	adds	r3, #2
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	e007      	b.n	80026c6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3301      	adds	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1cf      	bne.n	800267e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2200      	movs	r2, #0
 80026e6:	2140      	movs	r1, #64	; 0x40
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fac9 	bl	8002c80 <UART_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e006      	b.n	8002706 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	e000      	b.n	8002706 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002704:	2302      	movs	r3, #2
  }
}
 8002706:	4618      	mov	r0, r3
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b0ba      	sub	sp, #232	; 0xe8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800274e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_UART_IRQHandler+0x66>
 8002762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fbd1 	bl	8002f16 <UART_Receive_IT>
      return;
 8002774:	e25b      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80de 	beq.w	800293c <HAL_UART_IRQHandler+0x22c>
 8002780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d106      	bne.n	800279a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800278c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002790:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80d1 	beq.w	800293c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800279a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_UART_IRQHandler+0xae>
 80027a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f043 0201 	orr.w	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_UART_IRQHandler+0xd2>
 80027ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f043 0202 	orr.w	r2, r3, #2
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_UART_IRQHandler+0xf6>
 80027ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f043 0204 	orr.w	r2, r3, #4
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d011      	beq.n	8002836 <HAL_UART_IRQHandler+0x126>
 8002812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800281e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f043 0208 	orr.w	r2, r3, #8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 81f2 	beq.w	8002c24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_UART_IRQHandler+0x14e>
 800284c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fb5c 	bl	8002f16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <HAL_UART_IRQHandler+0x17a>
 8002882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d04f      	beq.n	800292a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa66 	bl	8002d5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d041      	beq.n	8002922 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3314      	adds	r3, #20
 80028a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3314      	adds	r3, #20
 80028c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1d9      	bne.n	800289e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d013      	beq.n	800291a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	4a7e      	ldr	r2, [pc, #504]	; (8002af0 <HAL_UART_IRQHandler+0x3e0>)
 80028f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f826 	bl	8001950 <HAL_DMA_Abort_IT>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002914:	4610      	mov	r0, r2
 8002916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002918:	e00e      	b.n	8002938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f99c 	bl	8002c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002920:	e00a      	b.n	8002938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f998 	bl	8002c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002928:	e006      	b.n	8002938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f994 	bl	8002c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002936:	e175      	b.n	8002c24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002938:	bf00      	nop
    return;
 800293a:	e173      	b.n	8002c24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	2b01      	cmp	r3, #1
 8002942:	f040 814f 	bne.w	8002be4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8148 	beq.w	8002be4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8141 	beq.w	8002be4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80b6 	beq.w	8002af4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002994:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8145 	beq.w	8002c28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029a6:	429a      	cmp	r2, r3
 80029a8:	f080 813e 	bcs.w	8002c28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	f000 8088 	beq.w	8002ad0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	330c      	adds	r3, #12
 80029c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029ce:	e853 3f00 	ldrex	r3, [r3]
 80029d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	330c      	adds	r3, #12
 80029e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029fc:	e841 2300 	strex	r3, r2, [r1]
 8002a00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1d9      	bne.n	80029c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3314      	adds	r3, #20
 8002a12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3314      	adds	r3, #20
 8002a2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a3c:	e841 2300 	strex	r3, r2, [r1]
 8002a40:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1e1      	bne.n	8002a0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3314      	adds	r3, #20
 8002a4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a52:	e853 3f00 	ldrex	r3, [r3]
 8002a56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3314      	adds	r3, #20
 8002a68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a74:	e841 2300 	strex	r3, r2, [r1]
 8002a78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e3      	bne.n	8002a48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a98:	e853 3f00 	ldrex	r3, [r3]
 8002a9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa0:	f023 0310 	bic.w	r3, r3, #16
 8002aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ab2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ab4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ab8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002aba:	e841 2300 	strex	r3, r2, [r1]
 8002abe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e3      	bne.n	8002a8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe ff05 	bl	80018da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8bf 	bl	8002c6a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002aec:	e09c      	b.n	8002c28 <HAL_UART_IRQHandler+0x518>
 8002aee:	bf00      	nop
 8002af0:	08002e21 	.word	0x08002e21
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 808e 	beq.w	8002c2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 8089 	beq.w	8002c2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	330c      	adds	r3, #12
 8002b3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b3e:	647a      	str	r2, [r7, #68]	; 0x44
 8002b40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b46:	e841 2300 	strex	r3, r2, [r1]
 8002b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e3      	bne.n	8002b1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3314      	adds	r3, #20
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	623b      	str	r3, [r7, #32]
   return(result);
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3314      	adds	r3, #20
 8002b72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b76:	633a      	str	r2, [r7, #48]	; 0x30
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b7e:	e841 2300 	strex	r3, r2, [r1]
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e3      	bne.n	8002b52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	330c      	adds	r3, #12
 8002b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	e853 3f00 	ldrex	r3, [r3]
 8002ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0310 	bic.w	r3, r3, #16
 8002bae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002bbc:	61fa      	str	r2, [r7, #28]
 8002bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc0:	69b9      	ldr	r1, [r7, #24]
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	e841 2300 	strex	r3, r2, [r1]
 8002bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e3      	bne.n	8002b98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f844 	bl	8002c6a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002be2:	e023      	b.n	8002c2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d009      	beq.n	8002c04 <HAL_UART_IRQHandler+0x4f4>
 8002bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f923 	bl	8002e48 <UART_Transmit_IT>
    return;
 8002c02:	e014      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00e      	beq.n	8002c2e <HAL_UART_IRQHandler+0x51e>
 8002c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f962 	bl	8002ee6 <UART_EndTransmit_IT>
    return;
 8002c22:	e004      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
    return;
 8002c24:	bf00      	nop
 8002c26:	e002      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
      return;
 8002c28:	bf00      	nop
 8002c2a:	e000      	b.n	8002c2e <HAL_UART_IRQHandler+0x51e>
      return;
 8002c2c:	bf00      	nop
  }
}
 8002c2e:	37e8      	adds	r7, #232	; 0xe8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b090      	sub	sp, #64	; 0x40
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c90:	e050      	b.n	8002d34 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d04c      	beq.n	8002d34 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ca0:	f7fe fce0 	bl	8001664 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d241      	bcs.n	8002d34 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	e853 3f00 	ldrex	r3, [r3]
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cd0:	637a      	str	r2, [r7, #52]	; 0x34
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cd8:	e841 2300 	strex	r3, r2, [r1]
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e5      	bne.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3314      	adds	r3, #20
 8002cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3314      	adds	r3, #20
 8002d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d04:	623a      	str	r2, [r7, #32]
 8002d06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	69f9      	ldr	r1, [r7, #28]
 8002d0a:	6a3a      	ldr	r2, [r7, #32]
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e5      	bne.n	8002ce4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e00f      	b.n	8002d54 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d09f      	beq.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3740      	adds	r7, #64	; 0x40
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b095      	sub	sp, #84	; 0x54
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	330c      	adds	r3, #12
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6e:	e853 3f00 	ldrex	r3, [r3]
 8002d72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d84:	643a      	str	r2, [r7, #64]	; 0x40
 8002d86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d8c:	e841 2300 	strex	r3, r2, [r1]
 8002d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1e5      	bne.n	8002d64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3314      	adds	r3, #20
 8002d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	e853 3f00 	ldrex	r3, [r3]
 8002da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3314      	adds	r3, #20
 8002db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002db8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc0:	e841 2300 	strex	r3, r2, [r1]
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e5      	bne.n	8002d98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d119      	bne.n	8002e08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	e853 3f00 	ldrex	r3, [r3]
 8002de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f023 0310 	bic.w	r3, r3, #16
 8002dea:	647b      	str	r3, [r7, #68]	; 0x44
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002df4:	61ba      	str	r2, [r7, #24]
 8002df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df8:	6979      	ldr	r1, [r7, #20]
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	e841 2300 	strex	r3, r2, [r1]
 8002e00:	613b      	str	r3, [r7, #16]
   return(result);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e5      	bne.n	8002dd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e16:	bf00      	nop
 8002e18:	3754      	adds	r7, #84	; 0x54
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f7ff ff0c 	bl	8002c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b21      	cmp	r3, #33	; 0x21
 8002e5a:	d13e      	bne.n	8002eda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e64:	d114      	bne.n	8002e90 <UART_Transmit_IT+0x48>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d110      	bne.n	8002e90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	1c9a      	adds	r2, r3, #2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	621a      	str	r2, [r3, #32]
 8002e8e:	e008      	b.n	8002ea2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	1c59      	adds	r1, r3, #1
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6211      	str	r1, [r2, #32]
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10f      	bne.n	8002ed6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e000      	b.n	8002edc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
  }
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff fe94 	bl	8002c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b08c      	sub	sp, #48	; 0x30
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b22      	cmp	r3, #34	; 0x22
 8002f28:	f040 80ae 	bne.w	8003088 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f34:	d117      	bne.n	8002f66 <UART_Receive_IT+0x50>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d113      	bne.n	8002f66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	1c9a      	adds	r2, r3, #2
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28
 8002f64:	e026      	b.n	8002fb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f78:	d007      	beq.n	8002f8a <UART_Receive_IT+0x74>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <UART_Receive_IT+0x82>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e008      	b.n	8002faa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d15d      	bne.n	8003084 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0220 	bic.w	r2, r2, #32
 8002fd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	2b01      	cmp	r3, #1
 800300c:	d135      	bne.n	800307a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	330c      	adds	r3, #12
 800301a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	e853 3f00 	ldrex	r3, [r3]
 8003022:	613b      	str	r3, [r7, #16]
   return(result);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f023 0310 	bic.w	r3, r3, #16
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	330c      	adds	r3, #12
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	623a      	str	r2, [r7, #32]
 8003036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003038:	69f9      	ldr	r1, [r7, #28]
 800303a:	6a3a      	ldr	r2, [r7, #32]
 800303c:	e841 2300 	strex	r3, r2, [r1]
 8003040:	61bb      	str	r3, [r7, #24]
   return(result);
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e5      	bne.n	8003014 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b10      	cmp	r3, #16
 8003054:	d10a      	bne.n	800306c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fdf9 	bl	8002c6a <HAL_UARTEx_RxEventCallback>
 8003078:	e002      	b.n	8003080 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff fde3 	bl	8002c46 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e002      	b.n	800308a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e000      	b.n	800308a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003088:	2302      	movs	r3, #2
  }
}
 800308a:	4618      	mov	r0, r3
 800308c:	3730      	adds	r7, #48	; 0x30
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030ce:	f023 030c 	bic.w	r3, r3, #12
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	430b      	orrs	r3, r1
 80030da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2c      	ldr	r2, [pc, #176]	; (80031a8 <UART_SetConfig+0x114>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d103      	bne.n	8003104 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030fc:	f7ff fa02 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	e002      	b.n	800310a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003104:	f7ff f9ea 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8003108:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	009a      	lsls	r2, r3, #2
 8003114:	441a      	add	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	4a22      	ldr	r2, [pc, #136]	; (80031ac <UART_SetConfig+0x118>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	0119      	lsls	r1, r3, #4
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009a      	lsls	r2, r3, #2
 8003134:	441a      	add	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003140:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <UART_SetConfig+0x118>)
 8003142:	fba3 0302 	umull	r0, r3, r3, r2
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2064      	movs	r0, #100	; 0x64
 800314a:	fb00 f303 	mul.w	r3, r0, r3
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	3332      	adds	r3, #50	; 0x32
 8003154:	4a15      	ldr	r2, [pc, #84]	; (80031ac <UART_SetConfig+0x118>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003160:	4419      	add	r1, r3
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	009a      	lsls	r2, r3, #2
 800316c:	441a      	add	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	fbb2 f2f3 	udiv	r2, r2, r3
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <UART_SetConfig+0x118>)
 800317a:	fba3 0302 	umull	r0, r3, r3, r2
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2064      	movs	r0, #100	; 0x64
 8003182:	fb00 f303 	mul.w	r3, r0, r3
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	3332      	adds	r3, #50	; 0x32
 800318c:	4a07      	ldr	r2, [pc, #28]	; (80031ac <UART_SetConfig+0x118>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	f003 020f 	and.w	r2, r3, #15
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	440a      	add	r2, r1
 800319e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40013800 	.word	0x40013800
 80031ac:	51eb851f 	.word	0x51eb851f

080031b0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <Ringbuf_init+0x38>)
 80031b6:	4a0d      	ldr	r2, [pc, #52]	; (80031ec <Ringbuf_init+0x3c>)
 80031b8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <Ringbuf_init+0x40>)
 80031bc:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <Ringbuf_init+0x44>)
 80031be:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80031c0:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <Ringbuf_init+0x48>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <Ringbuf_init+0x48>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <Ringbuf_init+0x48>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <Ringbuf_init+0x48>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0220 	orr.w	r2, r2, #32
 80031de:	60da      	str	r2, [r3, #12]
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	200006e4 	.word	0x200006e4
 80031ec:	200002d4 	.word	0x200002d4
 80031f0:	200006e8 	.word	0x200006e8
 80031f4:	200004dc 	.word	0x200004dc
 80031f8:	2000023c 	.word	0x2000023c

080031fc <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	6039      	str	r1, [r7, #0]
 8003206:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800320e:	3301      	adds	r3, #1
 8003210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003214:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	429a      	cmp	r2, r3
 8003220:	d009      	beq.n	8003236 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	79f9      	ldrb	r1, [r7, #7]
 800322c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d013      	beq.n	800328a <Uart_isr+0x4a>
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00e      	beq.n	800328a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800327a:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <Uart_isr+0xb4>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ffba 	bl	80031fc <store_char>
        return;
 8003288:	e031      	b.n	80032ee <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003290:	2b00      	cmp	r3, #0
 8003292:	d02c      	beq.n	80032ee <Uart_isr+0xae>
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d027      	beq.n	80032ee <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <Uart_isr+0xb8>)
 80032a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80032a4:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <Uart_isr+0xb8>)
 80032a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d108      	bne.n	80032c0 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032bc:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80032be:	e015      	b.n	80032ec <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80032c0:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <Uart_isr+0xb8>)
 80032c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80032c6:	4a0c      	ldr	r2, [pc, #48]	; (80032f8 <Uart_isr+0xb8>)
 80032c8:	5cd3      	ldrb	r3, [r2, r3]
 80032ca:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80032cc:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <Uart_isr+0xb8>)
 80032ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80032d2:	3301      	adds	r3, #1
 80032d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d8:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <Uart_isr+0xb8>)
 80032da:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	7bba      	ldrb	r2, [r7, #14]
 80032ea:	605a      	str	r2, [r3, #4]
    	return;
 80032ec:	bf00      	nop
    }
}
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	200006e4 	.word	0x200006e4
 80032f8:	200004dc 	.word	0x200004dc

080032fc <transposeMatrix>:
 */
#include <stdint.h>
#include <string.h>
#include <math.h>
#include "LKF.h"
void transposeMatrix(float mat[SIZE][SIZE], float result[SIZE][SIZE]) {
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < SIZE; i++) {
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
 800330a:	e021      	b.n	8003350 <transposeMatrix+0x54>
        for (uint8_t j = 0; j < SIZE; j++) {
 800330c:	2300      	movs	r3, #0
 800330e:	73bb      	strb	r3, [r7, #14]
 8003310:	e018      	b.n	8003344 <transposeMatrix+0x48>
            result[j][i] = mat[i][j];
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	461a      	mov	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	1899      	adds	r1, r3, r2
 8003322:	7bb8      	ldrb	r0, [r7, #14]
 8003324:	7bba      	ldrb	r2, [r7, #14]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	461a      	mov	r2, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4413      	add	r3, r2
 8003334:	7bfa      	ldrb	r2, [r7, #15]
 8003336:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800333a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t j = 0; j < SIZE; j++) {
 800333e:	7bbb      	ldrb	r3, [r7, #14]
 8003340:	3301      	adds	r3, #1
 8003342:	73bb      	strb	r3, [r7, #14]
 8003344:	7bbb      	ldrb	r3, [r7, #14]
 8003346:	2b04      	cmp	r3, #4
 8003348:	d9e3      	bls.n	8003312 <transposeMatrix+0x16>
    for (uint8_t i = 0; i < SIZE; i++) {
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	3301      	adds	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b04      	cmp	r3, #4
 8003354:	d9da      	bls.n	800330c <transposeMatrix+0x10>
        }
    }
}
 8003356:	bf00      	nop
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <matrixMultiplication>:

void matrixMultiplication(float mat1[SIZE][SIZE], float mat2[SIZE][SIZE], float result[SIZE][SIZE]) {
 8003362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003364:	b087      	sub	sp, #28
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
    for (uint8_t i = 0; i < SIZE; i++) {
 800336e:	2300      	movs	r3, #0
 8003370:	75fb      	strb	r3, [r7, #23]
 8003372:	e056      	b.n	8003422 <matrixMultiplication+0xc0>
        for (uint8_t j = 0; j < SIZE; j++) {
 8003374:	2300      	movs	r3, #0
 8003376:	75bb      	strb	r3, [r7, #22]
 8003378:	e04d      	b.n	8003416 <matrixMultiplication+0xb4>
            result[i][j] = 0;
 800337a:	7dfa      	ldrb	r2, [r7, #23]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	461a      	mov	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	7dba      	ldrb	r2, [r7, #22]
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (uint8_t k = 0; k < SIZE; k++) {
 8003394:	2300      	movs	r3, #0
 8003396:	757b      	strb	r3, [r7, #21]
 8003398:	e037      	b.n	800340a <matrixMultiplication+0xa8>
                result[i][j] += mat1[i][k] * mat2[k][j];
 800339a:	7dfa      	ldrb	r2, [r7, #23]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	461a      	mov	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	7dba      	ldrb	r2, [r7, #22]
 80033ac:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80033b0:	7dfa      	ldrb	r2, [r7, #23]
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	461a      	mov	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	7d7a      	ldrb	r2, [r7, #21]
 80033c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80033c6:	7d7a      	ldrb	r2, [r7, #21]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	461a      	mov	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	4413      	add	r3, r2
 80033d6:	7dba      	ldrb	r2, [r7, #22]
 80033d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033dc:	4619      	mov	r1, r3
 80033de:	f7fc febf 	bl	8000160 <__aeabi_fmul>
 80033e2:	4603      	mov	r3, r0
 80033e4:	4619      	mov	r1, r3
 80033e6:	7dfa      	ldrb	r2, [r7, #23]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	461a      	mov	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	189c      	adds	r4, r3, r2
 80033f6:	7dbd      	ldrb	r5, [r7, #22]
 80033f8:	4630      	mov	r0, r6
 80033fa:	f7fd fc6f 	bl	8000cdc <__addsf3>
 80033fe:	4603      	mov	r3, r0
 8003400:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
            for (uint8_t k = 0; k < SIZE; k++) {
 8003404:	7d7b      	ldrb	r3, [r7, #21]
 8003406:	3301      	adds	r3, #1
 8003408:	757b      	strb	r3, [r7, #21]
 800340a:	7d7b      	ldrb	r3, [r7, #21]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d9c4      	bls.n	800339a <matrixMultiplication+0x38>
        for (uint8_t j = 0; j < SIZE; j++) {
 8003410:	7dbb      	ldrb	r3, [r7, #22]
 8003412:	3301      	adds	r3, #1
 8003414:	75bb      	strb	r3, [r7, #22]
 8003416:	7dbb      	ldrb	r3, [r7, #22]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d9ae      	bls.n	800337a <matrixMultiplication+0x18>
    for (uint8_t i = 0; i < SIZE; i++) {
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	3301      	adds	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	2b04      	cmp	r3, #4
 8003426:	d9a5      	bls.n	8003374 <matrixMultiplication+0x12>
            }
        }
    }
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003434 <EKF_Init>:

void EKF_Init(LKF *LKF,Input *Input)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
//First Step
	LKF->FriPx= 106.802343;  //input
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a33      	ldr	r2, [pc, #204]	; (8003510 <EKF_Init+0xdc>)
 8003442:	601a      	str	r2, [r3, #0]
	LKF->FriPy=10.869826; //input
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a33      	ldr	r2, [pc, #204]	; (8003514 <EKF_Init+0xe0>)
 8003448:	605a      	str	r2, [r3, #4]
	LKF->FriVel=5; //input
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a32      	ldr	r2, [pc, #200]	; (8003518 <EKF_Init+0xe4>)
 800344e:	609a      	str	r2, [r3, #8]
	LKF->FriHea=-PI/6; //input
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a32      	ldr	r2, [pc, #200]	; (800351c <EKF_Init+0xe8>)
 8003454:	60da      	str	r2, [r3, #12]
	LKF->FriStee=PI/6; //input
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a31      	ldr	r2, [pc, #196]	; (8003520 <EKF_Init+0xec>)
 800345a:	611a      	str	r2, [r3, #16]
//Next Step
	LKF->NexPx=0;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	615a      	str	r2, [r3, #20]
	LKF->NexPy=0;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	619a      	str	r2, [r3, #24]
	LKF->NexVel=0;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	61da      	str	r2, [r3, #28]
	LKF->NexHea=0;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	621a      	str	r2, [r3, #32]
	LKF->NexStee=0;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	625a      	str	r2, [r3, #36]	; 0x24
//Covariance
	LKF->CovPx=0; //input
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	629a      	str	r2, [r3, #40]	; 0x28
	LKF->CovPy=0; //input
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	62da      	str	r2, [r3, #44]	; 0x2c
	LKF->CovVel=0; //input
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
	LKF->CovHea=0; //input
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34
	LKF->CovStee=0; //input
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	639a      	str	r2, [r3, #56]	; 0x38
//FirstIput
	Input->Acceleration=0.2; //input
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <EKF_Init+0xf0>)
 80034b0:	611a      	str	r2, [r3, #16]
	Input->Time=0.1; //input
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	4a1c      	ldr	r2, [pc, #112]	; (8003528 <EKF_Init+0xf4>)
 80034b6:	60da      	str	r2, [r3, #12]
//Covariance
	memset(LKF->Prediction_CovarianceNex,0,sizeof(LKF->Prediction_CovarianceNex));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	333c      	adds	r3, #60	; 0x3c
 80034bc:	2264      	movs	r2, #100	; 0x64
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f002 f992 	bl	80057ea <memset>
	memset(LKF->Prediction_CovarianceFri,0,sizeof(LKF->Prediction_CovarianceFri));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	33a0      	adds	r3, #160	; 0xa0
 80034ca:	2264      	movs	r2, #100	; 0x64
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f002 f98b 	bl	80057ea <memset>

	LKF->Prediction_CovarianceFri[0][0]= LKF->CovPx;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LKF->Prediction_CovarianceFri[0][0]= LKF->CovPy;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LKF->Prediction_CovarianceFri[0][0]= LKF->CovVel;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LKF->Prediction_CovarianceFri[0][0]= LKF->CovHea;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LKF->Prediction_CovarianceFri[0][0]= LKF->CovStee;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	42d59acd 	.word	0x42d59acd
 8003514:	412deacf 	.word	0x412deacf
 8003518:	40a00000 	.word	0x40a00000
 800351c:	bf060a90 	.word	0xbf060a90
 8003520:	3f060a90 	.word	0x3f060a90
 8003524:	3e4ccccd 	.word	0x3e4ccccd
 8003528:	3dcccccd 	.word	0x3dcccccd

0800352c <GPS_Init>:

void GPS_Init(GPS *GPS){
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]

	memset(GPS->GPSCovariance,0,sizeof(GPS->GPSCovariance));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3310      	adds	r3, #16
 8003538:	2210      	movs	r2, #16
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f002 f954 	bl	80057ea <memset>
	memset(GPS->GPSGetPosition,0,sizeof(GPS->GPSGetPosition));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2210      	movs	r2, #16
 8003546:	2100      	movs	r1, #0
 8003548:	4618      	mov	r0, r3
 800354a:	f002 f94e 	bl	80057ea <memset>
	memset(GPS->GPS_Model,0,sizeof(GPS->GPS_Model));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3320      	adds	r3, #32
 8003552:	2219      	movs	r2, #25
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f002 f947 	bl	80057ea <memset>

	GPS->GPSCovariance[0][0]=0; //input fromsensor
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	611a      	str	r2, [r3, #16]
	GPS->GPSCovariance[1][1]=0; //input fromsensor
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	61da      	str	r2, [r3, #28]

	GPS->GPSGetPosition[0][0]=106.802343; //input fromsensor
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a08      	ldr	r2, [pc, #32]	; (8003590 <GPS_Init+0x64>)
 8003570:	601a      	str	r2, [r3, #0]

	GPS->GPSGetPosition[1][1]=10.869826;//input fromsensor
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a07      	ldr	r2, [pc, #28]	; (8003594 <GPS_Init+0x68>)
 8003576:	60da      	str	r2, [r3, #12]

	GPS->GPS_Model[0][0]=1;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2020 	strb.w	r2, [r3, #32]
	GPS->GPS_Model[1][1]=1;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	42d59acd 	.word	0x42d59acd
 8003594:	412deacf 	.word	0x412deacf

08003598 <EKF_PredictionStep>:
void EKF_PredictionStep(LKF *LKF, Angle *Angle, Input *Input){
 8003598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800359c:	b0d2      	sub	sp, #328	; 0x148
 800359e:	af00      	add	r7, sp, #0
 80035a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80035a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80035a8:	6018      	str	r0, [r3, #0]
 80035aa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80035ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80035b2:	6019      	str	r1, [r3, #0]
 80035b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80035b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80035bc:	601a      	str	r2, [r3, #0]
// Prediction State
	 Angle->AngleBeta= (atan(LENGTH_REAR*tan(LKF->FriStee))/LENGTH_CAR);
 80035be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80035c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fc ffe0 	bl	8000590 <__aeabi_f2d>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4610      	mov	r0, r2
 80035d6:	4619      	mov	r1, r3
 80035d8:	f005 ff50 	bl	800947c <tan>
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	4bd5      	ldr	r3, [pc, #852]	; (8003938 <EKF_PredictionStep+0x3a0>)
 80035e2:	f7fd f82d 	bl	8000640 <__aeabi_dmul>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f005 fd2b 	bl	8009048 <atan>
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	4bd1      	ldr	r3, [pc, #836]	; (800393c <EKF_PredictionStep+0x3a4>)
 80035f8:	f7fd f94c 	bl	8000894 <__aeabi_ddiv>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	f7fd fb14 	bl	8000c30 <__aeabi_d2f>
 8003608:	4602      	mov	r2, r0
 800360a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800360e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	601a      	str	r2, [r3, #0]
	 LKF->NexPx= LKF->FriPx + (LKF->FriVel*0.1 * cos(Angle->AngleBeta+LKF->FriHea))*Input->Time*0.0001;
 8003616:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800361a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc ffb4 	bl	8000590 <__aeabi_f2d>
 8003628:	4680      	mov	r8, r0
 800362a:	4689      	mov	r9, r1
 800362c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003630:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4618      	mov	r0, r3
 800363a:	f7fc ffa9 	bl	8000590 <__aeabi_f2d>
 800363e:	a3ba      	add	r3, pc, #744	; (adr r3, 8003928 <EKF_PredictionStep+0x390>)
 8003640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003644:	f7fc fffc 	bl	8000640 <__aeabi_dmul>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4692      	mov	sl, r2
 800364e:	469b      	mov	fp, r3
 8003650:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003654:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003660:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4619      	mov	r1, r3
 800366a:	4610      	mov	r0, r2
 800366c:	f7fd fb36 	bl	8000cdc <__addsf3>
 8003670:	4603      	mov	r3, r0
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc ff8c 	bl	8000590 <__aeabi_f2d>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	f005 fe6c 	bl	800935c <cos>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4650      	mov	r0, sl
 800368a:	4659      	mov	r1, fp
 800368c:	f7fc ffd8 	bl	8000640 <__aeabi_dmul>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4692      	mov	sl, r2
 8003696:	469b      	mov	fp, r3
 8003698:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800369c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc ff73 	bl	8000590 <__aeabi_f2d>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4650      	mov	r0, sl
 80036b0:	4659      	mov	r1, fp
 80036b2:	f7fc ffc5 	bl	8000640 <__aeabi_dmul>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	a39c      	add	r3, pc, #624	; (adr r3, 8003930 <EKF_PredictionStep+0x398>)
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	f7fc ffbc 	bl	8000640 <__aeabi_dmul>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4640      	mov	r0, r8
 80036ce:	4649      	mov	r1, r9
 80036d0:	f7fc fe00 	bl	80002d4 <__adddf3>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4610      	mov	r0, r2
 80036da:	4619      	mov	r1, r3
 80036dc:	f7fd faa8 	bl	8000c30 <__aeabi_d2f>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80036e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	615a      	str	r2, [r3, #20]
	 LKF->NexPy= LKF->FriPy + (LKF->FriVel*0.1 * sin(Angle->AngleBeta +LKF->FriHea))*Input->Time*0.0001;
 80036ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80036f2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc ff48 	bl	8000590 <__aeabi_f2d>
 8003700:	4680      	mov	r8, r0
 8003702:	4689      	mov	r9, r1
 8003704:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003708:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4618      	mov	r0, r3
 8003712:	f7fc ff3d 	bl	8000590 <__aeabi_f2d>
 8003716:	a384      	add	r3, pc, #528	; (adr r3, 8003928 <EKF_PredictionStep+0x390>)
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	f7fc ff90 	bl	8000640 <__aeabi_dmul>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4692      	mov	sl, r2
 8003726:	469b      	mov	fp, r3
 8003728:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800372c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003738:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4619      	mov	r1, r3
 8003742:	4610      	mov	r0, r2
 8003744:	f7fd faca 	bl	8000cdc <__addsf3>
 8003748:	4603      	mov	r3, r0
 800374a:	4618      	mov	r0, r3
 800374c:	f7fc ff20 	bl	8000590 <__aeabi_f2d>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4610      	mov	r0, r2
 8003756:	4619      	mov	r1, r3
 8003758:	f005 fe4a 	bl	80093f0 <sin>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4650      	mov	r0, sl
 8003762:	4659      	mov	r1, fp
 8003764:	f7fc ff6c 	bl	8000640 <__aeabi_dmul>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4692      	mov	sl, r2
 800376e:	469b      	mov	fp, r3
 8003770:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003774:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4618      	mov	r0, r3
 800377e:	f7fc ff07 	bl	8000590 <__aeabi_f2d>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4650      	mov	r0, sl
 8003788:	4659      	mov	r1, fp
 800378a:	f7fc ff59 	bl	8000640 <__aeabi_dmul>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	a366      	add	r3, pc, #408	; (adr r3, 8003930 <EKF_PredictionStep+0x398>)
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	f7fc ff50 	bl	8000640 <__aeabi_dmul>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4640      	mov	r0, r8
 80037a6:	4649      	mov	r1, r9
 80037a8:	f7fc fd94 	bl	80002d4 <__adddf3>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	f7fd fa3c 	bl	8000c30 <__aeabi_d2f>
 80037b8:	4602      	mov	r2, r0
 80037ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80037be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	619a      	str	r2, [r3, #24]
	 LKF->NexVel= LKF->FriVel + Input->Acceleration *Input->Time*0.1;
 80037c6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80037ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fc fedc 	bl	8000590 <__aeabi_f2d>
 80037d8:	4680      	mov	r8, r0
 80037da:	4689      	mov	r9, r1
 80037dc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80037e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80037ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4619      	mov	r1, r3
 80037f6:	4610      	mov	r0, r2
 80037f8:	f7fc fcb2 	bl	8000160 <__aeabi_fmul>
 80037fc:	4603      	mov	r3, r0
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fc fec6 	bl	8000590 <__aeabi_f2d>
 8003804:	a348      	add	r3, pc, #288	; (adr r3, 8003928 <EKF_PredictionStep+0x390>)
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	f7fc ff19 	bl	8000640 <__aeabi_dmul>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4640      	mov	r0, r8
 8003814:	4649      	mov	r1, r9
 8003816:	f7fc fd5d 	bl	80002d4 <__adddf3>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4610      	mov	r0, r2
 8003820:	4619      	mov	r1, r3
 8003822:	f7fd fa05 	bl	8000c30 <__aeabi_d2f>
 8003826:	4602      	mov	r2, r0
 8003828:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800382c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	61da      	str	r2, [r3, #28]
	 LKF->NexHea= LKF->FriHea + ((LKF->FriVel*tan(LKF->FriStee)*cos(Angle->AngleBeta))/LENGTH_CAR)*Input->Time*0.1;
 8003834:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003838:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4618      	mov	r0, r3
 8003842:	f7fc fea5 	bl	8000590 <__aeabi_f2d>
 8003846:	4680      	mov	r8, r0
 8003848:	4689      	mov	r9, r1
 800384a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800384e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fc fe9a 	bl	8000590 <__aeabi_f2d>
 800385c:	4682      	mov	sl, r0
 800385e:	468b      	mov	fp, r1
 8003860:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003864:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	4618      	mov	r0, r3
 800386e:	f7fc fe8f 	bl	8000590 <__aeabi_f2d>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	f005 fdff 	bl	800947c <tan>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4650      	mov	r0, sl
 8003884:	4659      	mov	r1, fp
 8003886:	f7fc fedb 	bl	8000640 <__aeabi_dmul>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4692      	mov	sl, r2
 8003890:	469b      	mov	fp, r3
 8003892:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003896:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fc fe76 	bl	8000590 <__aeabi_f2d>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4610      	mov	r0, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	f005 fd56 	bl	800935c <cos>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4650      	mov	r0, sl
 80038b6:	4659      	mov	r1, fp
 80038b8:	f7fc fec2 	bl	8000640 <__aeabi_dmul>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	4b1c      	ldr	r3, [pc, #112]	; (800393c <EKF_PredictionStep+0x3a4>)
 80038ca:	f7fc ffe3 	bl	8000894 <__aeabi_ddiv>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4692      	mov	sl, r2
 80038d4:	469b      	mov	fp, r3
 80038d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80038da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fe54 	bl	8000590 <__aeabi_f2d>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4650      	mov	r0, sl
 80038ee:	4659      	mov	r1, fp
 80038f0:	f7fc fea6 	bl	8000640 <__aeabi_dmul>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	a30a      	add	r3, pc, #40	; (adr r3, 8003928 <EKF_PredictionStep+0x390>)
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	f7fc fe9d 	bl	8000640 <__aeabi_dmul>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4640      	mov	r0, r8
 800390c:	4649      	mov	r1, r9
 800390e:	f7fc fce1 	bl	80002d4 <__adddf3>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	f7fd f989 	bl	8000c30 <__aeabi_d2f>
 800391e:	4602      	mov	r2, r0
 8003920:	e00e      	b.n	8003940 <EKF_PredictionStep+0x3a8>
 8003922:	bf00      	nop
 8003924:	f3af 8000 	nop.w
 8003928:	9999999a 	.word	0x9999999a
 800392c:	3fb99999 	.word	0x3fb99999
 8003930:	eb1c432d 	.word	0xeb1c432d
 8003934:	3f1a36e2 	.word	0x3f1a36e2
 8003938:	40240000 	.word	0x40240000
 800393c:	40340000 	.word	0x40340000
 8003940:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003944:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	621a      	str	r2, [r3, #32]
	 LKF->NexStee = LKF->FriStee + Input->Stee*Input->Time*0.1;
 800394c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003950:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fe19 	bl	8000590 <__aeabi_f2d>
 800395e:	4680      	mov	r8, r0
 8003960:	4689      	mov	r9, r1
 8003962:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003966:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003972:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4619      	mov	r1, r3
 800397c:	4610      	mov	r0, r2
 800397e:	f7fc fbef 	bl	8000160 <__aeabi_fmul>
 8003982:	4603      	mov	r3, r0
 8003984:	4618      	mov	r0, r3
 8003986:	f7fc fe03 	bl	8000590 <__aeabi_f2d>
 800398a:	a3db      	add	r3, pc, #876	; (adr r3, 8003cf8 <EKF_PredictionStep+0x760>)
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	f7fc fe56 	bl	8000640 <__aeabi_dmul>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4640      	mov	r0, r8
 800399a:	4649      	mov	r1, r9
 800399c:	f7fc fc9a 	bl	80002d4 <__adddf3>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	f7fd f942 	bl	8000c30 <__aeabi_d2f>
 80039ac:	4602      	mov	r2, r0
 80039ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80039b2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24
// Prediction Covariance
	 float Mul_Result[5][5];
	 float Trans_Result[5][5];
	 float Jacobian[5][5];

	 memset(Trans_Result,0,sizeof(Trans_Result));
 80039ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80039be:	2264      	movs	r2, #100	; 0x64
 80039c0:	2100      	movs	r1, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f001 ff11 	bl	80057ea <memset>
	 memset(Jacobian,0,sizeof(Jacobian));
 80039c8:	f107 031c 	add.w	r3, r7, #28
 80039cc:	2264      	movs	r2, #100	; 0x64
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 ff0a 	bl	80057ea <memset>

	 Jacobian[0][0]=1;
 80039d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80039da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80039e2:	601a      	str	r2, [r3, #0]
	 Jacobian[0][1]=0;
 80039e4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80039e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	605a      	str	r2, [r3, #4]
	 Jacobian[0][2]=Input->Time*cos(LKF->FriHea+atan((LENGTH_REAR*tan(LKF->FriStee))/LENGTH_CAR));
 80039f2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80039f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fc fdc6 	bl	8000590 <__aeabi_f2d>
 8003a04:	4680      	mov	r8, r0
 8003a06:	4689      	mov	r9, r1
 8003a08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003a0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fc fdbb 	bl	8000590 <__aeabi_f2d>
 8003a1a:	4682      	mov	sl, r0
 8003a1c:	468b      	mov	fp, r1
 8003a1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003a22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fc fdb0 	bl	8000590 <__aeabi_f2d>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	f005 fd20 	bl	800947c <tan>
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	4baf      	ldr	r3, [pc, #700]	; (8003d00 <EKF_PredictionStep+0x768>)
 8003a42:	f7fc fdfd 	bl	8000640 <__aeabi_dmul>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	4bac      	ldr	r3, [pc, #688]	; (8003d04 <EKF_PredictionStep+0x76c>)
 8003a54:	f7fc ff1e 	bl	8000894 <__aeabi_ddiv>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f005 faf2 	bl	8009048 <atan>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4650      	mov	r0, sl
 8003a6a:	4659      	mov	r1, fp
 8003a6c:	f7fc fc32 	bl	80002d4 <__adddf3>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	f005 fc70 	bl	800935c <cos>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4640      	mov	r0, r8
 8003a82:	4649      	mov	r1, r9
 8003a84:	f7fc fddc 	bl	8000640 <__aeabi_dmul>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f7fd f8ce 	bl	8000c30 <__aeabi_d2f>
 8003a94:	4602      	mov	r2, r0
 8003a96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003a9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a9e:	609a      	str	r2, [r3, #8]
	 Jacobian[0][3]=-(LKF->FriVel *LENGTH_CAR * Input->Time *sin(LKF->FriHea+atan(LENGTH_REAR*tan(LKF->FriStee)/LENGTH_CAR))*1/cos(LKF->FriStee)*cos(LKF->FriStee))/LENGTH_CAR*LENGTH_CAR+LENGTH_REAR*LENGTH_REAR*tan(LKF->FriStee)*tan(LKF->FriStee);
 8003aa0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003aa4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4996      	ldr	r1, [pc, #600]	; (8003d08 <EKF_PredictionStep+0x770>)
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fc fb56 	bl	8000160 <__aeabi_fmul>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003abc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7fc fb4a 	bl	8000160 <__aeabi_fmul>
 8003acc:	4603      	mov	r3, r0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fc fd5e 	bl	8000590 <__aeabi_f2d>
 8003ad4:	4680      	mov	r8, r0
 8003ad6:	4689      	mov	r9, r1
 8003ad8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003adc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fc fd53 	bl	8000590 <__aeabi_f2d>
 8003aea:	4682      	mov	sl, r0
 8003aec:	468b      	mov	fp, r1
 8003aee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003af2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fc fd48 	bl	8000590 <__aeabi_f2d>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	f005 fcb8 	bl	800947c <tan>
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	4b7b      	ldr	r3, [pc, #492]	; (8003d00 <EKF_PredictionStep+0x768>)
 8003b12:	f7fc fd95 	bl	8000640 <__aeabi_dmul>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	4b78      	ldr	r3, [pc, #480]	; (8003d04 <EKF_PredictionStep+0x76c>)
 8003b24:	f7fc feb6 	bl	8000894 <__aeabi_ddiv>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	f005 fa8a 	bl	8009048 <atan>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4650      	mov	r0, sl
 8003b3a:	4659      	mov	r1, fp
 8003b3c:	f7fc fbca 	bl	80002d4 <__adddf3>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	f005 fc52 	bl	80093f0 <sin>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4640      	mov	r0, r8
 8003b52:	4649      	mov	r1, r9
 8003b54:	f7fc fd74 	bl	8000640 <__aeabi_dmul>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4690      	mov	r8, r2
 8003b5e:	4699      	mov	r9, r3
 8003b60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003b64:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fc fd0f 	bl	8000590 <__aeabi_f2d>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4610      	mov	r0, r2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f005 fbef 	bl	800935c <cos>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4640      	mov	r0, r8
 8003b84:	4649      	mov	r1, r9
 8003b86:	f7fc fe85 	bl	8000894 <__aeabi_ddiv>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4690      	mov	r8, r2
 8003b90:	4699      	mov	r9, r3
 8003b92:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003b96:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fc fcf6 	bl	8000590 <__aeabi_f2d>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4619      	mov	r1, r3
 8003bac:	f005 fbd6 	bl	800935c <cos>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4640      	mov	r0, r8
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	f7fc fd42 	bl	8000640 <__aeabi_dmul>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	4b4e      	ldr	r3, [pc, #312]	; (8003d04 <EKF_PredictionStep+0x76c>)
 8003bcc:	4620      	mov	r0, r4
 8003bce:	4629      	mov	r1, r5
 8003bd0:	f7fc fe60 	bl	8000894 <__aeabi_ddiv>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	4b48      	ldr	r3, [pc, #288]	; (8003d04 <EKF_PredictionStep+0x76c>)
 8003be2:	f7fc fd2d 	bl	8000640 <__aeabi_dmul>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4614      	mov	r4, r2
 8003bec:	461d      	mov	r5, r3
 8003bee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003bf2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fc fcc8 	bl	8000590 <__aeabi_f2d>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	f005 fc38 	bl	800947c <tan>
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	4b3e      	ldr	r3, [pc, #248]	; (8003d0c <EKF_PredictionStep+0x774>)
 8003c12:	f7fc fd15 	bl	8000640 <__aeabi_dmul>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4690      	mov	r8, r2
 8003c1c:	4699      	mov	r9, r3
 8003c1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003c22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fc fcb0 	bl	8000590 <__aeabi_f2d>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	f005 fc20 	bl	800947c <tan>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4640      	mov	r0, r8
 8003c42:	4649      	mov	r1, r9
 8003c44:	f7fc fcfc 	bl	8000640 <__aeabi_dmul>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	4629      	mov	r1, r5
 8003c50:	f7fc fb40 	bl	80002d4 <__adddf3>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	f7fc ffe8 	bl	8000c30 <__aeabi_d2f>
 8003c60:	4602      	mov	r2, r0
 8003c62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003c66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c6a:	60da      	str	r2, [r3, #12]
	 Jacobian[0][4]=-LKF->FriVel*sin(LKF->FriHea+atan(LENGTH_REAR*tan(LKF->FriStee)/LENGTH_CAR));
 8003c6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003c70:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fc fc87 	bl	8000590 <__aeabi_f2d>
 8003c82:	4604      	mov	r4, r0
 8003c84:	460d      	mov	r5, r1
 8003c86:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003c8a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fc fc7c 	bl	8000590 <__aeabi_f2d>
 8003c98:	4680      	mov	r8, r0
 8003c9a:	4689      	mov	r9, r1
 8003c9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003ca0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fc71 	bl	8000590 <__aeabi_f2d>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f005 fbe1 	bl	800947c <tan>
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <EKF_PredictionStep+0x768>)
 8003cc0:	f7fc fcbe 	bl	8000640 <__aeabi_dmul>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <EKF_PredictionStep+0x76c>)
 8003cd2:	f7fc fddf 	bl	8000894 <__aeabi_ddiv>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f005 f9b3 	bl	8009048 <atan>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4640      	mov	r0, r8
 8003ce8:	4649      	mov	r1, r9
 8003cea:	f7fc faf3 	bl	80002d4 <__adddf3>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	e00b      	b.n	8003d10 <EKF_PredictionStep+0x778>
 8003cf8:	9999999a 	.word	0x9999999a
 8003cfc:	3fb99999 	.word	0x3fb99999
 8003d00:	40240000 	.word	0x40240000
 8003d04:	40340000 	.word	0x40340000
 8003d08:	41a00000 	.word	0x41a00000
 8003d0c:	40590000 	.word	0x40590000
 8003d10:	f005 fb6e 	bl	80093f0 <sin>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4620      	mov	r0, r4
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	f7fc fc90 	bl	8000640 <__aeabi_dmul>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	f7fc ff82 	bl	8000c30 <__aeabi_d2f>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003d32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d36:	611a      	str	r2, [r3, #16]

	 Jacobian[1][0]=0;
 8003d38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003d3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	615a      	str	r2, [r3, #20]
	 Jacobian[1][1]=1;
 8003d46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003d4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d52:	619a      	str	r2, [r3, #24]
	 Jacobian[1][2]=Input->Time*sin(LKF->FriHea+atan((LENGTH_REAR*tan(LKF->FriStee))/LENGTH_CAR));
 8003d54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003d58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fc fc15 	bl	8000590 <__aeabi_f2d>
 8003d66:	4604      	mov	r4, r0
 8003d68:	460d      	mov	r5, r1
 8003d6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003d6e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fc0a 	bl	8000590 <__aeabi_f2d>
 8003d7c:	4680      	mov	r8, r0
 8003d7e:	4689      	mov	r9, r1
 8003d80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003d84:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fc fbff 	bl	8000590 <__aeabi_f2d>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4610      	mov	r0, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f005 fb6f 	bl	800947c <tan>
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	4bdc      	ldr	r3, [pc, #880]	; (8004114 <EKF_PredictionStep+0xb7c>)
 8003da4:	f7fc fc4c 	bl	8000640 <__aeabi_dmul>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4610      	mov	r0, r2
 8003dae:	4619      	mov	r1, r3
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	4bd8      	ldr	r3, [pc, #864]	; (8004118 <EKF_PredictionStep+0xb80>)
 8003db6:	f7fc fd6d 	bl	8000894 <__aeabi_ddiv>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	f005 f941 	bl	8009048 <atan>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4640      	mov	r0, r8
 8003dcc:	4649      	mov	r1, r9
 8003dce:	f7fc fa81 	bl	80002d4 <__adddf3>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f005 fb09 	bl	80093f0 <sin>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4620      	mov	r0, r4
 8003de4:	4629      	mov	r1, r5
 8003de6:	f7fc fc2b 	bl	8000640 <__aeabi_dmul>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4610      	mov	r0, r2
 8003df0:	4619      	mov	r1, r3
 8003df2:	f7fc ff1d 	bl	8000c30 <__aeabi_d2f>
 8003df6:	4602      	mov	r2, r0
 8003df8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003dfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e00:	61da      	str	r2, [r3, #28]
	 Jacobian[1][3]=(LKF->FriVel *LENGTH_CAR * Input->Time *cos(LKF->FriHea+atan(LENGTH_REAR*tan(LKF->FriStee)/LENGTH_CAR))*1/cos(LKF->FriStee)*cos(LKF->FriStee))/LENGTH_CAR*LENGTH_CAR+LENGTH_REAR*LENGTH_REAR*tan(LKF->FriStee)*tan(LKF->FriStee);
 8003e02:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003e06:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	49c3      	ldr	r1, [pc, #780]	; (800411c <EKF_PredictionStep+0xb84>)
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc f9a5 	bl	8000160 <__aeabi_fmul>
 8003e16:	4603      	mov	r3, r0
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003e1e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	4619      	mov	r1, r3
 8003e28:	4610      	mov	r0, r2
 8003e2a:	f7fc f999 	bl	8000160 <__aeabi_fmul>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fc fbad 	bl	8000590 <__aeabi_f2d>
 8003e36:	4604      	mov	r4, r0
 8003e38:	460d      	mov	r5, r1
 8003e3a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003e3e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fc fba2 	bl	8000590 <__aeabi_f2d>
 8003e4c:	4680      	mov	r8, r0
 8003e4e:	4689      	mov	r9, r1
 8003e50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003e54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fc fb97 	bl	8000590 <__aeabi_f2d>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f005 fb07 	bl	800947c <tan>
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	4ba8      	ldr	r3, [pc, #672]	; (8004114 <EKF_PredictionStep+0xb7c>)
 8003e74:	f7fc fbe4 	bl	8000640 <__aeabi_dmul>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4619      	mov	r1, r3
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	4ba4      	ldr	r3, [pc, #656]	; (8004118 <EKF_PredictionStep+0xb80>)
 8003e86:	f7fc fd05 	bl	8000894 <__aeabi_ddiv>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4619      	mov	r1, r3
 8003e92:	f005 f8d9 	bl	8009048 <atan>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4640      	mov	r0, r8
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	f7fc fa19 	bl	80002d4 <__adddf3>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f005 fa57 	bl	800935c <cos>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	f7fc fbc3 	bl	8000640 <__aeabi_dmul>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4614      	mov	r4, r2
 8003ec0:	461d      	mov	r5, r3
 8003ec2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003ec6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fc fb5e 	bl	8000590 <__aeabi_f2d>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	f005 fa3e 	bl	800935c <cos>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	f7fc fcd4 	bl	8000894 <__aeabi_ddiv>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4614      	mov	r4, r2
 8003ef2:	461d      	mov	r5, r3
 8003ef4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003ef8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc fb45 	bl	8000590 <__aeabi_f2d>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f005 fa25 	bl	800935c <cos>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4620      	mov	r0, r4
 8003f18:	4629      	mov	r1, r5
 8003f1a:	f7fc fb91 	bl	8000640 <__aeabi_dmul>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	4b7b      	ldr	r3, [pc, #492]	; (8004118 <EKF_PredictionStep+0xb80>)
 8003f2c:	f7fc fcb2 	bl	8000894 <__aeabi_ddiv>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	4b76      	ldr	r3, [pc, #472]	; (8004118 <EKF_PredictionStep+0xb80>)
 8003f3e:	f7fc fb7f 	bl	8000640 <__aeabi_dmul>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4614      	mov	r4, r2
 8003f48:	461d      	mov	r5, r3
 8003f4a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003f4e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fc fb1a 	bl	8000590 <__aeabi_f2d>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4610      	mov	r0, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	f005 fa8a 	bl	800947c <tan>
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <EKF_PredictionStep+0xb88>)
 8003f6e:	f7fc fb67 	bl	8000640 <__aeabi_dmul>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4690      	mov	r8, r2
 8003f78:	4699      	mov	r9, r3
 8003f7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003f7e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fc fb02 	bl	8000590 <__aeabi_f2d>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4610      	mov	r0, r2
 8003f92:	4619      	mov	r1, r3
 8003f94:	f005 fa72 	bl	800947c <tan>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4640      	mov	r0, r8
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	f7fc fb4e 	bl	8000640 <__aeabi_dmul>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4620      	mov	r0, r4
 8003faa:	4629      	mov	r1, r5
 8003fac:	f7fc f992 	bl	80002d4 <__adddf3>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f7fc fe3a 	bl	8000c30 <__aeabi_d2f>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003fc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fc6:	621a      	str	r2, [r3, #32]
	 Jacobian[1][4]=LKF->FriVel*sin(LKF->FriHea+atan(LENGTH_REAR*tan(LKF->FriStee)/LENGTH_CAR));
 8003fc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003fcc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fc fadb 	bl	8000590 <__aeabi_f2d>
 8003fda:	4604      	mov	r4, r0
 8003fdc:	460d      	mov	r5, r1
 8003fde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003fe2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc fad0 	bl	8000590 <__aeabi_f2d>
 8003ff0:	4680      	mov	r8, r0
 8003ff2:	4689      	mov	r9, r1
 8003ff4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003ff8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc fac5 	bl	8000590 <__aeabi_f2d>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4610      	mov	r0, r2
 800400c:	4619      	mov	r1, r3
 800400e:	f005 fa35 	bl	800947c <tan>
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	4b3f      	ldr	r3, [pc, #252]	; (8004114 <EKF_PredictionStep+0xb7c>)
 8004018:	f7fc fb12 	bl	8000640 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	4b3b      	ldr	r3, [pc, #236]	; (8004118 <EKF_PredictionStep+0xb80>)
 800402a:	f7fc fc33 	bl	8000894 <__aeabi_ddiv>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4610      	mov	r0, r2
 8004034:	4619      	mov	r1, r3
 8004036:	f005 f807 	bl	8009048 <atan>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4640      	mov	r0, r8
 8004040:	4649      	mov	r1, r9
 8004042:	f7fc f947 	bl	80002d4 <__adddf3>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	f005 f9cf 	bl	80093f0 <sin>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4620      	mov	r0, r4
 8004058:	4629      	mov	r1, r5
 800405a:	f7fc faf1 	bl	8000640 <__aeabi_dmul>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4610      	mov	r0, r2
 8004064:	4619      	mov	r1, r3
 8004066:	f7fc fde3 	bl	8000c30 <__aeabi_d2f>
 800406a:	4602      	mov	r2, r0
 800406c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004070:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004074:	625a      	str	r2, [r3, #36]	; 0x24

	 Jacobian[2][0]=0;
 8004076:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800407a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	629a      	str	r2, [r3, #40]	; 0x28
	 Jacobian[2][1]=0;
 8004084:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	62da      	str	r2, [r3, #44]	; 0x2c
	 Jacobian[2][2]=1;
 8004092:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800409a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
	 Jacobian[2][3]=0;
 80040a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80040a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	635a      	str	r2, [r3, #52]	; 0x34
	 Jacobian[2][4]=0;
 80040ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80040b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	639a      	str	r2, [r3, #56]	; 0x38

	 Jacobian[3][0]=0;
 80040bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80040c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	63da      	str	r2, [r3, #60]	; 0x3c
	 Jacobian[3][1]=0;
 80040ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80040ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	641a      	str	r2, [r3, #64]	; 0x40
	 Jacobian[3][2]=(Input->Time*tan(LKF->FriStee)*abs(LKF->FriStee))/(LKF->FriStee*sqrt(LKF->FriStee*LKF->FriStee+LENGTH_REAR*LENGTH_REAR*tan(LKF->FriStee)*tan(LKF->FriStee)));
 80040d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80040dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fc fa53 	bl	8000590 <__aeabi_f2d>
 80040ea:	4604      	mov	r4, r0
 80040ec:	460d      	mov	r5, r1
 80040ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80040f2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fc fa48 	bl	8000590 <__aeabi_f2d>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4610      	mov	r0, r2
 8004106:	4619      	mov	r1, r3
 8004108:	f005 f9b8 	bl	800947c <tan>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	e008      	b.n	8004124 <EKF_PredictionStep+0xb8c>
 8004112:	bf00      	nop
 8004114:	40240000 	.word	0x40240000
 8004118:	40340000 	.word	0x40340000
 800411c:	41a00000 	.word	0x41a00000
 8004120:	40590000 	.word	0x40590000
 8004124:	4620      	mov	r0, r4
 8004126:	4629      	mov	r1, r5
 8004128:	f7fc fa8a 	bl	8000640 <__aeabi_dmul>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4614      	mov	r4, r2
 8004132:	461d      	mov	r5, r3
 8004134:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004138:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	4618      	mov	r0, r3
 8004142:	f7fc fa25 	bl	8000590 <__aeabi_f2d>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4610      	mov	r0, r2
 800414c:	4619      	mov	r1, r3
 800414e:	f000 fb48 	bl	80047e2 <abs>
 8004152:	4603      	mov	r3, r0
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc fa09 	bl	800056c <__aeabi_i2d>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4620      	mov	r0, r4
 8004160:	4629      	mov	r1, r5
 8004162:	f7fc fa6d 	bl	8000640 <__aeabi_dmul>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4692      	mov	sl, r2
 800416c:	469b      	mov	fp, r3
 800416e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004172:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc fa08 	bl	8000590 <__aeabi_f2d>
 8004180:	4604      	mov	r4, r0
 8004182:	460d      	mov	r5, r1
 8004184:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004188:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004194:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f7fb ffde 	bl	8000160 <__aeabi_fmul>
 80041a4:	4603      	mov	r3, r0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fc f9f2 	bl	8000590 <__aeabi_f2d>
 80041ac:	4680      	mov	r8, r0
 80041ae:	4689      	mov	r9, r1
 80041b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80041b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fc f9e7 	bl	8000590 <__aeabi_f2d>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	f005 f957 	bl	800947c <tan>
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	4baf      	ldr	r3, [pc, #700]	; (8004490 <EKF_PredictionStep+0xef8>)
 80041d4:	f7fc fa34 	bl	8000640 <__aeabi_dmul>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	e9c7 2300 	strd	r2, r3, [r7]
 80041e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80041e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fc f9cf 	bl	8000590 <__aeabi_f2d>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4610      	mov	r0, r2
 80041f8:	4619      	mov	r1, r3
 80041fa:	f005 f93f 	bl	800947c <tan>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004206:	f7fc fa1b 	bl	8000640 <__aeabi_dmul>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4640      	mov	r0, r8
 8004210:	4649      	mov	r1, r9
 8004212:	f7fc f85f 	bl	80002d4 <__adddf3>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	f004 feed 	bl	8008ffc <sqrt>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4620      	mov	r0, r4
 8004228:	4629      	mov	r1, r5
 800422a:	f7fc fa09 	bl	8000640 <__aeabi_dmul>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4650      	mov	r0, sl
 8004234:	4659      	mov	r1, fp
 8004236:	f7fc fb2d 	bl	8000894 <__aeabi_ddiv>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	f7fc fcf5 	bl	8000c30 <__aeabi_d2f>
 8004246:	4602      	mov	r2, r0
 8004248:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800424c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004250:	645a      	str	r2, [r3, #68]	; 0x44
	 Jacobian[3][3]=(LKF->FriVel*LENGTH_CAR*LENGTH_CAR*LENGTH_CAR*Input->Time*(1/cos(LKF->FriStee)*1/cos(LKF->FriStee)))/(pow(LENGTH_CAR*LENGTH_CAR+LENGTH_REAR*LENGTH_REAR*tan(LKF->FriStee)*tan(LKF->FriStee),1.5)*abs(LKF->FriStee));
 8004252:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004256:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	498d      	ldr	r1, [pc, #564]	; (8004494 <EKF_PredictionStep+0xefc>)
 8004260:	4618      	mov	r0, r3
 8004262:	f7fb ff7d 	bl	8000160 <__aeabi_fmul>
 8004266:	4603      	mov	r3, r0
 8004268:	498a      	ldr	r1, [pc, #552]	; (8004494 <EKF_PredictionStep+0xefc>)
 800426a:	4618      	mov	r0, r3
 800426c:	f7fb ff78 	bl	8000160 <__aeabi_fmul>
 8004270:	4603      	mov	r3, r0
 8004272:	4988      	ldr	r1, [pc, #544]	; (8004494 <EKF_PredictionStep+0xefc>)
 8004274:	4618      	mov	r0, r3
 8004276:	f7fb ff73 	bl	8000160 <__aeabi_fmul>
 800427a:	4603      	mov	r3, r0
 800427c:	461a      	mov	r2, r3
 800427e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004282:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f7fb ff67 	bl	8000160 <__aeabi_fmul>
 8004292:	4603      	mov	r3, r0
 8004294:	4618      	mov	r0, r3
 8004296:	f7fc f97b 	bl	8000590 <__aeabi_f2d>
 800429a:	4604      	mov	r4, r0
 800429c:	460d      	mov	r5, r1
 800429e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80042a2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fc f970 	bl	8000590 <__aeabi_f2d>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	f005 f850 	bl	800935c <cos>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	f04f 0000 	mov.w	r0, #0
 80042c4:	4974      	ldr	r1, [pc, #464]	; (8004498 <EKF_PredictionStep+0xf00>)
 80042c6:	f7fc fae5 	bl	8000894 <__aeabi_ddiv>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4690      	mov	r8, r2
 80042d0:	4699      	mov	r9, r3
 80042d2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80042d6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fc f956 	bl	8000590 <__aeabi_f2d>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4610      	mov	r0, r2
 80042ea:	4619      	mov	r1, r3
 80042ec:	f005 f836 	bl	800935c <cos>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4640      	mov	r0, r8
 80042f6:	4649      	mov	r1, r9
 80042f8:	f7fc facc 	bl	8000894 <__aeabi_ddiv>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4620      	mov	r0, r4
 8004302:	4629      	mov	r1, r5
 8004304:	f7fc f99c 	bl	8000640 <__aeabi_dmul>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4690      	mov	r8, r2
 800430e:	4699      	mov	r9, r3
 8004310:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004314:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	4618      	mov	r0, r3
 800431e:	f7fc f937 	bl	8000590 <__aeabi_f2d>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	f005 f8a7 	bl	800947c <tan>
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	4b57      	ldr	r3, [pc, #348]	; (8004490 <EKF_PredictionStep+0xef8>)
 8004334:	f7fc f984 	bl	8000640 <__aeabi_dmul>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4614      	mov	r4, r2
 800433e:	461d      	mov	r5, r3
 8004340:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004344:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	4618      	mov	r0, r3
 800434e:	f7fc f91f 	bl	8000590 <__aeabi_f2d>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4610      	mov	r0, r2
 8004358:	4619      	mov	r1, r3
 800435a:	f005 f88f 	bl	800947c <tan>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4620      	mov	r0, r4
 8004364:	4629      	mov	r1, r5
 8004366:	f7fc f96b 	bl	8000640 <__aeabi_dmul>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4610      	mov	r0, r2
 8004370:	4619      	mov	r1, r3
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	4b49      	ldr	r3, [pc, #292]	; (800449c <EKF_PredictionStep+0xf04>)
 8004378:	f7fb ffac 	bl	80002d4 <__adddf3>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	4b45      	ldr	r3, [pc, #276]	; (80044a0 <EKF_PredictionStep+0xf08>)
 800438a:	f004 fdcf 	bl	8008f2c <pow>
 800438e:	4604      	mov	r4, r0
 8004390:	460d      	mov	r5, r1
 8004392:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004396:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fc f8f6 	bl	8000590 <__aeabi_f2d>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	f000 fa19 	bl	80047e2 <abs>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fc f8da 	bl	800056c <__aeabi_i2d>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4620      	mov	r0, r4
 80043be:	4629      	mov	r1, r5
 80043c0:	f7fc f93e 	bl	8000640 <__aeabi_dmul>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4640      	mov	r0, r8
 80043ca:	4649      	mov	r1, r9
 80043cc:	f7fc fa62 	bl	8000894 <__aeabi_ddiv>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	f7fc fc2a 	bl	8000c30 <__aeabi_d2f>
 80043dc:	4602      	mov	r2, r0
 80043de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80043e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043e6:	649a      	str	r2, [r3, #72]	; 0x48
	 Jacobian[3][4]=1;
 80043e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80043ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80043f4:	64da      	str	r2, [r3, #76]	; 0x4c

	 Jacobian[4][0]=0;
 80043f6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80043fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	651a      	str	r2, [r3, #80]	; 0x50
	 Jacobian[4][1]=0;
 8004404:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	655a      	str	r2, [r3, #84]	; 0x54
	 Jacobian[4][2]=0;
 8004412:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	659a      	str	r2, [r3, #88]	; 0x58
	 Jacobian[4][3]=1;
 8004420:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004428:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800442c:	65da      	str	r2, [r3, #92]	; 0x5c
	 Jacobian[4][4]=0;
 800442e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004432:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	661a      	str	r2, [r3, #96]	; 0x60

	 matrixMultiplication(Jacobian,LKF->Prediction_CovarianceFri, Mul_Result);
 800443c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004440:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800444a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800444e:	f107 031c 	add.w	r3, r7, #28
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe ff85 	bl	8003362 <matrixMultiplication>
	 transposeMatrix(Jacobian, Trans_Result);
 8004458:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800445c:	f107 031c 	add.w	r3, r7, #28
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe ff4a 	bl	80032fc <transposeMatrix>
	 matrixMultiplication(Mul_Result,Trans_Result,LKF->Prediction_CovarianceNex); // Covaricaace result
 8004468:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800446c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004476:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800447a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800447e:	4618      	mov	r0, r3
 8004480:	f7fe ff6f 	bl	8003362 <matrixMultiplication>
}
 8004484:	bf00      	nop
 8004486:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800448a:	46bd      	mov	sp, r7
 800448c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004490:	40590000 	.word	0x40590000
 8004494:	41a00000 	.word	0x41a00000
 8004498:	3ff00000 	.word	0x3ff00000
 800449c:	40790000 	.word	0x40790000
 80044a0:	3ff80000 	.word	0x3ff80000

080044a4 <EFK_GPSHandleMeasurement>:
void EFK_GPSHandleMeasurement(GPS *GPS, LKF *LKF ){
 80044a4:	b590      	push	{r4, r7, lr}
 80044a6:	b0cd      	sub	sp, #308	; 0x134
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044b2:	6018      	str	r0, [r3, #0]
 80044b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044bc:	6019      	str	r1, [r3, #0]

	float PredictionNex[2][2];
	float KalmanGian[2][2];
	float Identity[2][2];
//identity
	 Identity[0][0]=1;
 80044be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80044c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80044ca:	601a      	str	r2, [r3, #0]
	 Identity[1][1]=1;
 80044cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80044d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80044d8:	60da      	str	r2, [r3, #12]
//GPS covariance
	GPSCov[0][0]=GPS->GPSCovariance[0][0];
 80044da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPSCov[1][1]=GPS->GPSCovariance[1][1];
 80044e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	64bb      	str	r3, [r7, #72]	; 0x48
//GPS measurement
	GPSMeasurement[0][0]=GPS->GPSGetPosition[0][0];
 80044f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	GPSMeasurement[1][1]=GPS->GPSGetPosition[1][1];
 8004506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800450a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
//GPS Modle

	memset(GPSModel,0,sizeof(GPSModel));
 8004516:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800451a:	2228      	movs	r2, #40	; 0x28
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f001 f963 	bl	80057ea <memset>
	GPSModel[0][0]=GPS->GPS_Model[0][0];
 8004524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc fc82 	bl	8000e3c <__aeabi_ui2f>
 8004538:	4603      	mov	r3, r0
 800453a:	677b      	str	r3, [r7, #116]	; 0x74
	GPSModel[1][1]=GPS->GPS_Model[1][1];
 800453c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800454a:	4618      	mov	r0, r3
 800454c:	f7fc fc76 	bl	8000e3c <__aeabi_ui2f>
 8004550:	4603      	mov	r3, r0
 8004552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	transposeMatrix(GPSModel,GPSModelT);
 8004556:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800455a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f7fe fecb 	bl	80032fc <transposeMatrix>

//First Measurement
	MeasurementFri[0][0]= LKF->FriPx;
 8004566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800456a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	MeasurementFri[1][1]= LKF->FriPy;
 8004576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800457a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
//prediction
	PredictionNex[0][0]=LKF->Prediction_CovarianceNex[0][0];
 8004586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800458a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800459a:	601a      	str	r2, [r3, #0]
	PredictionNex[1][1]=LKF->Prediction_CovarianceNex[1][1];
 800459c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045b0:	60da      	str	r2, [r3, #12]
	//inovation
	Inovation[0][0]= GPSMeasurement[0][0] - MeasurementFri[0][0];
 80045b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045b6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80045ba:	4611      	mov	r1, r2
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fc fb8b 	bl	8000cd8 <__aeabi_fsub>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	Inovation[1][1]= GPSMeasurement[1][1] - MeasurementFri[1][1];
 80045c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045cc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fc fb80 	bl	8000cd8 <__aeabi_fsub>
 80045d8:	4603      	mov	r3, r0
 80045da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	//inovation covariacne
	InovationCov[0][0]= GPSModel[0][0] * PredictionNex[0][0]*GPSModelT[0][0];
 80045de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f7fb fdb7 	bl	8000160 <__aeabi_fmul>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f8:	4619      	mov	r1, r3
 80045fa:	4610      	mov	r0, r2
 80045fc:	f7fb fdb0 	bl	8000160 <__aeabi_fmul>
 8004600:	4603      	mov	r3, r0
 8004602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	InovationCov[1][1]= GPSModel[1][1] * PredictionNex[1][1]*GPSModelT[1][1];
 8004606:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800460a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800460e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f7fb fda2 	bl	8000160 <__aeabi_fmul>
 800461c:	4603      	mov	r3, r0
 800461e:	461a      	mov	r2, r3
 8004620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f7fb fd9b 	bl	8000160 <__aeabi_fmul>
 800462a:	4603      	mov	r3, r0
 800462c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	InovationCov[0][0]=  InovationCov[0][0] +GPSCov[0][0];
 8004630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004634:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f7fc fb4f 	bl	8000cdc <__addsf3>
 800463e:	4603      	mov	r3, r0
 8004640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	InovationCov[1][1]=  InovationCov[1][1] + GPSCov[1][1];
 8004644:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800464a:	4611      	mov	r1, r2
 800464c:	4618      	mov	r0, r3
 800464e:	f7fc fb45 	bl	8000cdc <__addsf3>
 8004652:	4603      	mov	r3, r0
 8004654:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	//Kalman Gain
	KalmanGian[0][0]=  PredictionNex[0][0] *  GPSModel[0][0] * InovationCov[0][0];
 8004658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800465c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f7fb fd7a 	bl	8000160 <__aeabi_fmul>
 800466c:	4603      	mov	r3, r0
 800466e:	461a      	mov	r2, r3
 8004670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f7fb fd72 	bl	8000160 <__aeabi_fmul>
 800467c:	4603      	mov	r3, r0
 800467e:	461a      	mov	r2, r3
 8004680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004684:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004688:	601a      	str	r2, [r3, #0]
	KalmanGian[1][1]=  PredictionNex[1][1] *  GPSModel[1][1] * InovationCov[1][1];
 800468a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800468e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f7fb fd60 	bl	8000160 <__aeabi_fmul>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f7fb fd58 	bl	8000160 <__aeabi_fmul>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046bc:	60da      	str	r2, [r3, #12]
	//update
	LKF->FriPx = LKF->NexPx + (KalmanGian[0][0] * Inovation[0][0]);
 80046be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695c      	ldr	r4, [r3, #20]
 80046ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80046d8:	4611      	mov	r1, r2
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fb fd40 	bl	8000160 <__aeabi_fmul>
 80046e0:	4603      	mov	r3, r0
 80046e2:	4619      	mov	r1, r3
 80046e4:	4620      	mov	r0, r4
 80046e6:	f7fc faf9 	bl	8000cdc <__addsf3>
 80046ea:	4603      	mov	r3, r0
 80046ec:	461a      	mov	r2, r3
 80046ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	601a      	str	r2, [r3, #0]
	LKF->FriPy = LKF->NexPy + (KalmanGian[1][1] * Inovation[1][1]);
 80046fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699c      	ldr	r4, [r3, #24]
 8004706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800470a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004714:	4611      	mov	r1, r2
 8004716:	4618      	mov	r0, r3
 8004718:	f7fb fd22 	bl	8000160 <__aeabi_fmul>
 800471c:	4603      	mov	r3, r0
 800471e:	4619      	mov	r1, r3
 8004720:	4620      	mov	r0, r4
 8004722:	f7fc fadb 	bl	8000cdc <__addsf3>
 8004726:	4603      	mov	r3, r0
 8004728:	461a      	mov	r2, r3
 800472a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	605a      	str	r2, [r3, #4]
	//update covariance
	LKF->Prediction_CovarianceFri[0][0]=(Identity[0][0]-(KalmanGian[0][0] * GPSModel[0][0]))*PredictionNex[0][0];
 8004736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800473a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800473e:	681c      	ldr	r4, [r3, #0]
 8004740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004744:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800474c:	4611      	mov	r1, r2
 800474e:	4618      	mov	r0, r3
 8004750:	f7fb fd06 	bl	8000160 <__aeabi_fmul>
 8004754:	4603      	mov	r3, r0
 8004756:	4619      	mov	r1, r3
 8004758:	4620      	mov	r0, r4
 800475a:	f7fc fabd 	bl	8000cd8 <__aeabi_fsub>
 800475e:	4603      	mov	r3, r0
 8004760:	461a      	mov	r2, r3
 8004762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f7fb fcf6 	bl	8000160 <__aeabi_fmul>
 8004774:	4603      	mov	r3, r0
 8004776:	461a      	mov	r2, r3
 8004778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800477c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LKF->Prediction_CovarianceFri[1][1]=(Identity[1][1]-(KalmanGian[1][1] * GPSModel[1][1]))*PredictionNex[1][1];
 8004786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800478a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800478e:	68dc      	ldr	r4, [r3, #12]
 8004790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004794:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fb fcdd 	bl	8000160 <__aeabi_fmul>
 80047a6:	4603      	mov	r3, r0
 80047a8:	4619      	mov	r1, r3
 80047aa:	4620      	mov	r0, r4
 80047ac:	f7fc fa94 	bl	8000cd8 <__aeabi_fsub>
 80047b0:	4603      	mov	r3, r0
 80047b2:	461a      	mov	r2, r3
 80047b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	4619      	mov	r1, r3
 80047c0:	4610      	mov	r0, r2
 80047c2:	f7fb fccd 	bl	8000160 <__aeabi_fmul>
 80047c6:	4603      	mov	r3, r0
 80047c8:	461a      	mov	r2, r3
 80047ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80047d8:	bf00      	nop
 80047da:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd90      	pop	{r4, r7, pc}

080047e2 <abs>:
 80047e2:	2800      	cmp	r0, #0
 80047e4:	bfb8      	it	lt
 80047e6:	4240      	neglt	r0, r0
 80047e8:	4770      	bx	lr
	...

080047ec <_strtol_l.constprop.0>:
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f2:	4686      	mov	lr, r0
 80047f4:	4690      	mov	r8, r2
 80047f6:	d001      	beq.n	80047fc <_strtol_l.constprop.0+0x10>
 80047f8:	2b24      	cmp	r3, #36	; 0x24
 80047fa:	d906      	bls.n	800480a <_strtol_l.constprop.0+0x1e>
 80047fc:	f001 f848 	bl	8005890 <__errno>
 8004800:	2316      	movs	r3, #22
 8004802:	6003      	str	r3, [r0, #0]
 8004804:	2000      	movs	r0, #0
 8004806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480a:	460d      	mov	r5, r1
 800480c:	4835      	ldr	r0, [pc, #212]	; (80048e4 <_strtol_l.constprop.0+0xf8>)
 800480e:	462a      	mov	r2, r5
 8004810:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004814:	5d06      	ldrb	r6, [r0, r4]
 8004816:	f016 0608 	ands.w	r6, r6, #8
 800481a:	d1f8      	bne.n	800480e <_strtol_l.constprop.0+0x22>
 800481c:	2c2d      	cmp	r4, #45	; 0x2d
 800481e:	d12e      	bne.n	800487e <_strtol_l.constprop.0+0x92>
 8004820:	2601      	movs	r6, #1
 8004822:	782c      	ldrb	r4, [r5, #0]
 8004824:	1c95      	adds	r5, r2, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d057      	beq.n	80048da <_strtol_l.constprop.0+0xee>
 800482a:	2b10      	cmp	r3, #16
 800482c:	d109      	bne.n	8004842 <_strtol_l.constprop.0+0x56>
 800482e:	2c30      	cmp	r4, #48	; 0x30
 8004830:	d107      	bne.n	8004842 <_strtol_l.constprop.0+0x56>
 8004832:	782a      	ldrb	r2, [r5, #0]
 8004834:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004838:	2a58      	cmp	r2, #88	; 0x58
 800483a:	d149      	bne.n	80048d0 <_strtol_l.constprop.0+0xe4>
 800483c:	2310      	movs	r3, #16
 800483e:	786c      	ldrb	r4, [r5, #1]
 8004840:	3502      	adds	r5, #2
 8004842:	2200      	movs	r2, #0
 8004844:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8004848:	f10c 3cff 	add.w	ip, ip, #4294967295
 800484c:	fbbc f9f3 	udiv	r9, ip, r3
 8004850:	4610      	mov	r0, r2
 8004852:	fb03 ca19 	mls	sl, r3, r9, ip
 8004856:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800485a:	2f09      	cmp	r7, #9
 800485c:	d814      	bhi.n	8004888 <_strtol_l.constprop.0+0x9c>
 800485e:	463c      	mov	r4, r7
 8004860:	42a3      	cmp	r3, r4
 8004862:	dd20      	ble.n	80048a6 <_strtol_l.constprop.0+0xba>
 8004864:	1c57      	adds	r7, r2, #1
 8004866:	d007      	beq.n	8004878 <_strtol_l.constprop.0+0x8c>
 8004868:	4581      	cmp	r9, r0
 800486a:	d319      	bcc.n	80048a0 <_strtol_l.constprop.0+0xb4>
 800486c:	d101      	bne.n	8004872 <_strtol_l.constprop.0+0x86>
 800486e:	45a2      	cmp	sl, r4
 8004870:	db16      	blt.n	80048a0 <_strtol_l.constprop.0+0xb4>
 8004872:	2201      	movs	r2, #1
 8004874:	fb00 4003 	mla	r0, r0, r3, r4
 8004878:	f815 4b01 	ldrb.w	r4, [r5], #1
 800487c:	e7eb      	b.n	8004856 <_strtol_l.constprop.0+0x6a>
 800487e:	2c2b      	cmp	r4, #43	; 0x2b
 8004880:	bf04      	itt	eq
 8004882:	782c      	ldrbeq	r4, [r5, #0]
 8004884:	1c95      	addeq	r5, r2, #2
 8004886:	e7ce      	b.n	8004826 <_strtol_l.constprop.0+0x3a>
 8004888:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800488c:	2f19      	cmp	r7, #25
 800488e:	d801      	bhi.n	8004894 <_strtol_l.constprop.0+0xa8>
 8004890:	3c37      	subs	r4, #55	; 0x37
 8004892:	e7e5      	b.n	8004860 <_strtol_l.constprop.0+0x74>
 8004894:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004898:	2f19      	cmp	r7, #25
 800489a:	d804      	bhi.n	80048a6 <_strtol_l.constprop.0+0xba>
 800489c:	3c57      	subs	r4, #87	; 0x57
 800489e:	e7df      	b.n	8004860 <_strtol_l.constprop.0+0x74>
 80048a0:	f04f 32ff 	mov.w	r2, #4294967295
 80048a4:	e7e8      	b.n	8004878 <_strtol_l.constprop.0+0x8c>
 80048a6:	1c53      	adds	r3, r2, #1
 80048a8:	d108      	bne.n	80048bc <_strtol_l.constprop.0+0xd0>
 80048aa:	2322      	movs	r3, #34	; 0x22
 80048ac:	4660      	mov	r0, ip
 80048ae:	f8ce 3000 	str.w	r3, [lr]
 80048b2:	f1b8 0f00 	cmp.w	r8, #0
 80048b6:	d0a6      	beq.n	8004806 <_strtol_l.constprop.0+0x1a>
 80048b8:	1e69      	subs	r1, r5, #1
 80048ba:	e006      	b.n	80048ca <_strtol_l.constprop.0+0xde>
 80048bc:	b106      	cbz	r6, 80048c0 <_strtol_l.constprop.0+0xd4>
 80048be:	4240      	negs	r0, r0
 80048c0:	f1b8 0f00 	cmp.w	r8, #0
 80048c4:	d09f      	beq.n	8004806 <_strtol_l.constprop.0+0x1a>
 80048c6:	2a00      	cmp	r2, #0
 80048c8:	d1f6      	bne.n	80048b8 <_strtol_l.constprop.0+0xcc>
 80048ca:	f8c8 1000 	str.w	r1, [r8]
 80048ce:	e79a      	b.n	8004806 <_strtol_l.constprop.0+0x1a>
 80048d0:	2430      	movs	r4, #48	; 0x30
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1b5      	bne.n	8004842 <_strtol_l.constprop.0+0x56>
 80048d6:	2308      	movs	r3, #8
 80048d8:	e7b3      	b.n	8004842 <_strtol_l.constprop.0+0x56>
 80048da:	2c30      	cmp	r4, #48	; 0x30
 80048dc:	d0a9      	beq.n	8004832 <_strtol_l.constprop.0+0x46>
 80048de:	230a      	movs	r3, #10
 80048e0:	e7af      	b.n	8004842 <_strtol_l.constprop.0+0x56>
 80048e2:	bf00      	nop
 80048e4:	0800b4b3 	.word	0x0800b4b3

080048e8 <_strtol_r>:
 80048e8:	f7ff bf80 	b.w	80047ec <_strtol_l.constprop.0>

080048ec <__cvt>:
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f2:	461f      	mov	r7, r3
 80048f4:	bfbb      	ittet	lt
 80048f6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80048fa:	461f      	movlt	r7, r3
 80048fc:	2300      	movge	r3, #0
 80048fe:	232d      	movlt	r3, #45	; 0x2d
 8004900:	b088      	sub	sp, #32
 8004902:	4614      	mov	r4, r2
 8004904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004906:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004908:	7013      	strb	r3, [r2, #0]
 800490a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800490c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004910:	f023 0820 	bic.w	r8, r3, #32
 8004914:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004918:	d005      	beq.n	8004926 <__cvt+0x3a>
 800491a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800491e:	d100      	bne.n	8004922 <__cvt+0x36>
 8004920:	3501      	adds	r5, #1
 8004922:	2302      	movs	r3, #2
 8004924:	e000      	b.n	8004928 <__cvt+0x3c>
 8004926:	2303      	movs	r3, #3
 8004928:	aa07      	add	r2, sp, #28
 800492a:	9204      	str	r2, [sp, #16]
 800492c:	aa06      	add	r2, sp, #24
 800492e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004932:	e9cd 3500 	strd	r3, r5, [sp]
 8004936:	4622      	mov	r2, r4
 8004938:	463b      	mov	r3, r7
 800493a:	f001 f871 	bl	8005a20 <_dtoa_r>
 800493e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004942:	4606      	mov	r6, r0
 8004944:	d102      	bne.n	800494c <__cvt+0x60>
 8004946:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004948:	07db      	lsls	r3, r3, #31
 800494a:	d522      	bpl.n	8004992 <__cvt+0xa6>
 800494c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004950:	eb06 0905 	add.w	r9, r6, r5
 8004954:	d110      	bne.n	8004978 <__cvt+0x8c>
 8004956:	7833      	ldrb	r3, [r6, #0]
 8004958:	2b30      	cmp	r3, #48	; 0x30
 800495a:	d10a      	bne.n	8004972 <__cvt+0x86>
 800495c:	2200      	movs	r2, #0
 800495e:	2300      	movs	r3, #0
 8004960:	4620      	mov	r0, r4
 8004962:	4639      	mov	r1, r7
 8004964:	f7fc f8d4 	bl	8000b10 <__aeabi_dcmpeq>
 8004968:	b918      	cbnz	r0, 8004972 <__cvt+0x86>
 800496a:	f1c5 0501 	rsb	r5, r5, #1
 800496e:	f8ca 5000 	str.w	r5, [sl]
 8004972:	f8da 3000 	ldr.w	r3, [sl]
 8004976:	4499      	add	r9, r3
 8004978:	2200      	movs	r2, #0
 800497a:	2300      	movs	r3, #0
 800497c:	4620      	mov	r0, r4
 800497e:	4639      	mov	r1, r7
 8004980:	f7fc f8c6 	bl	8000b10 <__aeabi_dcmpeq>
 8004984:	b108      	cbz	r0, 800498a <__cvt+0x9e>
 8004986:	f8cd 901c 	str.w	r9, [sp, #28]
 800498a:	2230      	movs	r2, #48	; 0x30
 800498c:	9b07      	ldr	r3, [sp, #28]
 800498e:	454b      	cmp	r3, r9
 8004990:	d307      	bcc.n	80049a2 <__cvt+0xb6>
 8004992:	4630      	mov	r0, r6
 8004994:	9b07      	ldr	r3, [sp, #28]
 8004996:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004998:	1b9b      	subs	r3, r3, r6
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	b008      	add	sp, #32
 800499e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a2:	1c59      	adds	r1, r3, #1
 80049a4:	9107      	str	r1, [sp, #28]
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	e7f0      	b.n	800498c <__cvt+0xa0>

080049aa <__exponent>:
 80049aa:	4603      	mov	r3, r0
 80049ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ae:	2900      	cmp	r1, #0
 80049b0:	f803 2b02 	strb.w	r2, [r3], #2
 80049b4:	bfb6      	itet	lt
 80049b6:	222d      	movlt	r2, #45	; 0x2d
 80049b8:	222b      	movge	r2, #43	; 0x2b
 80049ba:	4249      	neglt	r1, r1
 80049bc:	2909      	cmp	r1, #9
 80049be:	7042      	strb	r2, [r0, #1]
 80049c0:	dd2a      	ble.n	8004a18 <__exponent+0x6e>
 80049c2:	f10d 0207 	add.w	r2, sp, #7
 80049c6:	4617      	mov	r7, r2
 80049c8:	260a      	movs	r6, #10
 80049ca:	fb91 f5f6 	sdiv	r5, r1, r6
 80049ce:	4694      	mov	ip, r2
 80049d0:	fb06 1415 	mls	r4, r6, r5, r1
 80049d4:	3430      	adds	r4, #48	; 0x30
 80049d6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80049da:	460c      	mov	r4, r1
 80049dc:	2c63      	cmp	r4, #99	; 0x63
 80049de:	4629      	mov	r1, r5
 80049e0:	f102 32ff 	add.w	r2, r2, #4294967295
 80049e4:	dcf1      	bgt.n	80049ca <__exponent+0x20>
 80049e6:	3130      	adds	r1, #48	; 0x30
 80049e8:	f1ac 0402 	sub.w	r4, ip, #2
 80049ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049f0:	4622      	mov	r2, r4
 80049f2:	1c41      	adds	r1, r0, #1
 80049f4:	42ba      	cmp	r2, r7
 80049f6:	d30a      	bcc.n	8004a0e <__exponent+0x64>
 80049f8:	f10d 0209 	add.w	r2, sp, #9
 80049fc:	eba2 020c 	sub.w	r2, r2, ip
 8004a00:	42bc      	cmp	r4, r7
 8004a02:	bf88      	it	hi
 8004a04:	2200      	movhi	r2, #0
 8004a06:	4413      	add	r3, r2
 8004a08:	1a18      	subs	r0, r3, r0
 8004a0a:	b003      	add	sp, #12
 8004a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a0e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a12:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a16:	e7ed      	b.n	80049f4 <__exponent+0x4a>
 8004a18:	2330      	movs	r3, #48	; 0x30
 8004a1a:	3130      	adds	r1, #48	; 0x30
 8004a1c:	7083      	strb	r3, [r0, #2]
 8004a1e:	70c1      	strb	r1, [r0, #3]
 8004a20:	1d03      	adds	r3, r0, #4
 8004a22:	e7f1      	b.n	8004a08 <__exponent+0x5e>

08004a24 <_printf_float>:
 8004a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a28:	b091      	sub	sp, #68	; 0x44
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004a30:	4616      	mov	r6, r2
 8004a32:	461f      	mov	r7, r3
 8004a34:	4605      	mov	r5, r0
 8004a36:	f000 fee1 	bl	80057fc <_localeconv_r>
 8004a3a:	6803      	ldr	r3, [r0, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a40:	f7fb fb86 	bl	8000150 <strlen>
 8004a44:	2300      	movs	r3, #0
 8004a46:	930e      	str	r3, [sp, #56]	; 0x38
 8004a48:	f8d8 3000 	ldr.w	r3, [r8]
 8004a4c:	900a      	str	r0, [sp, #40]	; 0x28
 8004a4e:	3307      	adds	r3, #7
 8004a50:	f023 0307 	bic.w	r3, r3, #7
 8004a54:	f103 0208 	add.w	r2, r3, #8
 8004a58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a5c:	f8d4 b000 	ldr.w	fp, [r4]
 8004a60:	f8c8 2000 	str.w	r2, [r8]
 8004a64:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004a68:	4652      	mov	r2, sl
 8004a6a:	4643      	mov	r3, r8
 8004a6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a70:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004a74:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a76:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7a:	4650      	mov	r0, sl
 8004a7c:	4b9c      	ldr	r3, [pc, #624]	; (8004cf0 <_printf_float+0x2cc>)
 8004a7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a80:	f7fc f878 	bl	8000b74 <__aeabi_dcmpun>
 8004a84:	bb70      	cbnz	r0, 8004ae4 <_printf_float+0xc0>
 8004a86:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8a:	4650      	mov	r0, sl
 8004a8c:	4b98      	ldr	r3, [pc, #608]	; (8004cf0 <_printf_float+0x2cc>)
 8004a8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a90:	f7fc f852 	bl	8000b38 <__aeabi_dcmple>
 8004a94:	bb30      	cbnz	r0, 8004ae4 <_printf_float+0xc0>
 8004a96:	2200      	movs	r2, #0
 8004a98:	2300      	movs	r3, #0
 8004a9a:	4650      	mov	r0, sl
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	f7fc f841 	bl	8000b24 <__aeabi_dcmplt>
 8004aa2:	b110      	cbz	r0, 8004aaa <_printf_float+0x86>
 8004aa4:	232d      	movs	r3, #45	; 0x2d
 8004aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aaa:	4a92      	ldr	r2, [pc, #584]	; (8004cf4 <_printf_float+0x2d0>)
 8004aac:	4b92      	ldr	r3, [pc, #584]	; (8004cf8 <_printf_float+0x2d4>)
 8004aae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004ab2:	bf94      	ite	ls
 8004ab4:	4690      	movls	r8, r2
 8004ab6:	4698      	movhi	r8, r3
 8004ab8:	2303      	movs	r3, #3
 8004aba:	f04f 0a00 	mov.w	sl, #0
 8004abe:	6123      	str	r3, [r4, #16]
 8004ac0:	f02b 0304 	bic.w	r3, fp, #4
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	4633      	mov	r3, r6
 8004ac8:	4621      	mov	r1, r4
 8004aca:	4628      	mov	r0, r5
 8004acc:	9700      	str	r7, [sp, #0]
 8004ace:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ad0:	f000 f9d6 	bl	8004e80 <_printf_common>
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	f040 8090 	bne.w	8004bfa <_printf_float+0x1d6>
 8004ada:	f04f 30ff 	mov.w	r0, #4294967295
 8004ade:	b011      	add	sp, #68	; 0x44
 8004ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae4:	4652      	mov	r2, sl
 8004ae6:	4643      	mov	r3, r8
 8004ae8:	4650      	mov	r0, sl
 8004aea:	4641      	mov	r1, r8
 8004aec:	f7fc f842 	bl	8000b74 <__aeabi_dcmpun>
 8004af0:	b148      	cbz	r0, 8004b06 <_printf_float+0xe2>
 8004af2:	f1b8 0f00 	cmp.w	r8, #0
 8004af6:	bfb8      	it	lt
 8004af8:	232d      	movlt	r3, #45	; 0x2d
 8004afa:	4a80      	ldr	r2, [pc, #512]	; (8004cfc <_printf_float+0x2d8>)
 8004afc:	bfb8      	it	lt
 8004afe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b02:	4b7f      	ldr	r3, [pc, #508]	; (8004d00 <_printf_float+0x2dc>)
 8004b04:	e7d3      	b.n	8004aae <_printf_float+0x8a>
 8004b06:	6863      	ldr	r3, [r4, #4]
 8004b08:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	d142      	bne.n	8004b96 <_printf_float+0x172>
 8004b10:	2306      	movs	r3, #6
 8004b12:	6063      	str	r3, [r4, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	9206      	str	r2, [sp, #24]
 8004b18:	aa0e      	add	r2, sp, #56	; 0x38
 8004b1a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004b1e:	aa0d      	add	r2, sp, #52	; 0x34
 8004b20:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004b24:	9203      	str	r2, [sp, #12]
 8004b26:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004b2a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	6863      	ldr	r3, [r4, #4]
 8004b32:	4652      	mov	r2, sl
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	4628      	mov	r0, r5
 8004b38:	4643      	mov	r3, r8
 8004b3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b3c:	f7ff fed6 	bl	80048ec <__cvt>
 8004b40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b42:	4680      	mov	r8, r0
 8004b44:	2947      	cmp	r1, #71	; 0x47
 8004b46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b48:	d108      	bne.n	8004b5c <_printf_float+0x138>
 8004b4a:	1cc8      	adds	r0, r1, #3
 8004b4c:	db02      	blt.n	8004b54 <_printf_float+0x130>
 8004b4e:	6863      	ldr	r3, [r4, #4]
 8004b50:	4299      	cmp	r1, r3
 8004b52:	dd40      	ble.n	8004bd6 <_printf_float+0x1b2>
 8004b54:	f1a9 0902 	sub.w	r9, r9, #2
 8004b58:	fa5f f989 	uxtb.w	r9, r9
 8004b5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b60:	d81f      	bhi.n	8004ba2 <_printf_float+0x17e>
 8004b62:	464a      	mov	r2, r9
 8004b64:	3901      	subs	r1, #1
 8004b66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b6a:	910d      	str	r1, [sp, #52]	; 0x34
 8004b6c:	f7ff ff1d 	bl	80049aa <__exponent>
 8004b70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b72:	4682      	mov	sl, r0
 8004b74:	1813      	adds	r3, r2, r0
 8004b76:	2a01      	cmp	r2, #1
 8004b78:	6123      	str	r3, [r4, #16]
 8004b7a:	dc02      	bgt.n	8004b82 <_printf_float+0x15e>
 8004b7c:	6822      	ldr	r2, [r4, #0]
 8004b7e:	07d2      	lsls	r2, r2, #31
 8004b80:	d501      	bpl.n	8004b86 <_printf_float+0x162>
 8004b82:	3301      	adds	r3, #1
 8004b84:	6123      	str	r3, [r4, #16]
 8004b86:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d09b      	beq.n	8004ac6 <_printf_float+0xa2>
 8004b8e:	232d      	movs	r3, #45	; 0x2d
 8004b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b94:	e797      	b.n	8004ac6 <_printf_float+0xa2>
 8004b96:	2947      	cmp	r1, #71	; 0x47
 8004b98:	d1bc      	bne.n	8004b14 <_printf_float+0xf0>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1ba      	bne.n	8004b14 <_printf_float+0xf0>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e7b7      	b.n	8004b12 <_printf_float+0xee>
 8004ba2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004ba6:	d118      	bne.n	8004bda <_printf_float+0x1b6>
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	6863      	ldr	r3, [r4, #4]
 8004bac:	dd0b      	ble.n	8004bc6 <_printf_float+0x1a2>
 8004bae:	6121      	str	r1, [r4, #16]
 8004bb0:	b913      	cbnz	r3, 8004bb8 <_printf_float+0x194>
 8004bb2:	6822      	ldr	r2, [r4, #0]
 8004bb4:	07d0      	lsls	r0, r2, #31
 8004bb6:	d502      	bpl.n	8004bbe <_printf_float+0x19a>
 8004bb8:	3301      	adds	r3, #1
 8004bba:	440b      	add	r3, r1
 8004bbc:	6123      	str	r3, [r4, #16]
 8004bbe:	f04f 0a00 	mov.w	sl, #0
 8004bc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bc4:	e7df      	b.n	8004b86 <_printf_float+0x162>
 8004bc6:	b913      	cbnz	r3, 8004bce <_printf_float+0x1aa>
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	07d2      	lsls	r2, r2, #31
 8004bcc:	d501      	bpl.n	8004bd2 <_printf_float+0x1ae>
 8004bce:	3302      	adds	r3, #2
 8004bd0:	e7f4      	b.n	8004bbc <_printf_float+0x198>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e7f2      	b.n	8004bbc <_printf_float+0x198>
 8004bd6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bdc:	4299      	cmp	r1, r3
 8004bde:	db05      	blt.n	8004bec <_printf_float+0x1c8>
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	6121      	str	r1, [r4, #16]
 8004be4:	07d8      	lsls	r0, r3, #31
 8004be6:	d5ea      	bpl.n	8004bbe <_printf_float+0x19a>
 8004be8:	1c4b      	adds	r3, r1, #1
 8004bea:	e7e7      	b.n	8004bbc <_printf_float+0x198>
 8004bec:	2900      	cmp	r1, #0
 8004bee:	bfcc      	ite	gt
 8004bf0:	2201      	movgt	r2, #1
 8004bf2:	f1c1 0202 	rsble	r2, r1, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	e7e0      	b.n	8004bbc <_printf_float+0x198>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	055a      	lsls	r2, r3, #21
 8004bfe:	d407      	bmi.n	8004c10 <_printf_float+0x1ec>
 8004c00:	6923      	ldr	r3, [r4, #16]
 8004c02:	4642      	mov	r2, r8
 8004c04:	4631      	mov	r1, r6
 8004c06:	4628      	mov	r0, r5
 8004c08:	47b8      	blx	r7
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	d12b      	bne.n	8004c66 <_printf_float+0x242>
 8004c0e:	e764      	b.n	8004ada <_printf_float+0xb6>
 8004c10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c14:	f240 80dd 	bls.w	8004dd2 <_printf_float+0x3ae>
 8004c18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f7fb ff76 	bl	8000b10 <__aeabi_dcmpeq>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d033      	beq.n	8004c90 <_printf_float+0x26c>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	4a35      	ldr	r2, [pc, #212]	; (8004d04 <_printf_float+0x2e0>)
 8004c30:	47b8      	blx	r7
 8004c32:	3001      	adds	r0, #1
 8004c34:	f43f af51 	beq.w	8004ada <_printf_float+0xb6>
 8004c38:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	db02      	blt.n	8004c46 <_printf_float+0x222>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	07d8      	lsls	r0, r3, #31
 8004c44:	d50f      	bpl.n	8004c66 <_printf_float+0x242>
 8004c46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	47b8      	blx	r7
 8004c50:	3001      	adds	r0, #1
 8004c52:	f43f af42 	beq.w	8004ada <_printf_float+0xb6>
 8004c56:	f04f 0800 	mov.w	r8, #0
 8004c5a:	f104 091a 	add.w	r9, r4, #26
 8004c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c60:	3b01      	subs	r3, #1
 8004c62:	4543      	cmp	r3, r8
 8004c64:	dc09      	bgt.n	8004c7a <_printf_float+0x256>
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	079b      	lsls	r3, r3, #30
 8004c6a:	f100 8104 	bmi.w	8004e76 <_printf_float+0x452>
 8004c6e:	68e0      	ldr	r0, [r4, #12]
 8004c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c72:	4298      	cmp	r0, r3
 8004c74:	bfb8      	it	lt
 8004c76:	4618      	movlt	r0, r3
 8004c78:	e731      	b.n	8004ade <_printf_float+0xba>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	464a      	mov	r2, r9
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4628      	mov	r0, r5
 8004c82:	47b8      	blx	r7
 8004c84:	3001      	adds	r0, #1
 8004c86:	f43f af28 	beq.w	8004ada <_printf_float+0xb6>
 8004c8a:	f108 0801 	add.w	r8, r8, #1
 8004c8e:	e7e6      	b.n	8004c5e <_printf_float+0x23a>
 8004c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	dc38      	bgt.n	8004d08 <_printf_float+0x2e4>
 8004c96:	2301      	movs	r3, #1
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	4a19      	ldr	r2, [pc, #100]	; (8004d04 <_printf_float+0x2e0>)
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	f43f af1a 	beq.w	8004ada <_printf_float+0xb6>
 8004ca6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004caa:	4313      	orrs	r3, r2
 8004cac:	d102      	bne.n	8004cb4 <_printf_float+0x290>
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	07d9      	lsls	r1, r3, #31
 8004cb2:	d5d8      	bpl.n	8004c66 <_printf_float+0x242>
 8004cb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cb8:	4631      	mov	r1, r6
 8004cba:	4628      	mov	r0, r5
 8004cbc:	47b8      	blx	r7
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	f43f af0b 	beq.w	8004ada <_printf_float+0xb6>
 8004cc4:	f04f 0900 	mov.w	r9, #0
 8004cc8:	f104 0a1a 	add.w	sl, r4, #26
 8004ccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cce:	425b      	negs	r3, r3
 8004cd0:	454b      	cmp	r3, r9
 8004cd2:	dc01      	bgt.n	8004cd8 <_printf_float+0x2b4>
 8004cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cd6:	e794      	b.n	8004c02 <_printf_float+0x1de>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	4652      	mov	r2, sl
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b8      	blx	r7
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	f43f aef9 	beq.w	8004ada <_printf_float+0xb6>
 8004ce8:	f109 0901 	add.w	r9, r9, #1
 8004cec:	e7ee      	b.n	8004ccc <_printf_float+0x2a8>
 8004cee:	bf00      	nop
 8004cf0:	7fefffff 	.word	0x7fefffff
 8004cf4:	0800b5b3 	.word	0x0800b5b3
 8004cf8:	0800b5b7 	.word	0x0800b5b7
 8004cfc:	0800b5bb 	.word	0x0800b5bb
 8004d00:	0800b5bf 	.word	0x0800b5bf
 8004d04:	0800b5c3 	.word	0x0800b5c3
 8004d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	bfa8      	it	ge
 8004d10:	461a      	movge	r2, r3
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	4691      	mov	r9, r2
 8004d16:	dc37      	bgt.n	8004d88 <_printf_float+0x364>
 8004d18:	f04f 0b00 	mov.w	fp, #0
 8004d1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d20:	f104 021a 	add.w	r2, r4, #26
 8004d24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d28:	ebaa 0309 	sub.w	r3, sl, r9
 8004d2c:	455b      	cmp	r3, fp
 8004d2e:	dc33      	bgt.n	8004d98 <_printf_float+0x374>
 8004d30:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d34:	429a      	cmp	r2, r3
 8004d36:	db3b      	blt.n	8004db0 <_printf_float+0x38c>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	07da      	lsls	r2, r3, #31
 8004d3c:	d438      	bmi.n	8004db0 <_printf_float+0x38c>
 8004d3e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d42:	eba2 0903 	sub.w	r9, r2, r3
 8004d46:	eba2 020a 	sub.w	r2, r2, sl
 8004d4a:	4591      	cmp	r9, r2
 8004d4c:	bfa8      	it	ge
 8004d4e:	4691      	movge	r9, r2
 8004d50:	f1b9 0f00 	cmp.w	r9, #0
 8004d54:	dc34      	bgt.n	8004dc0 <_printf_float+0x39c>
 8004d56:	f04f 0800 	mov.w	r8, #0
 8004d5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d5e:	f104 0a1a 	add.w	sl, r4, #26
 8004d62:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	eba3 0309 	sub.w	r3, r3, r9
 8004d6c:	4543      	cmp	r3, r8
 8004d6e:	f77f af7a 	ble.w	8004c66 <_printf_float+0x242>
 8004d72:	2301      	movs	r3, #1
 8004d74:	4652      	mov	r2, sl
 8004d76:	4631      	mov	r1, r6
 8004d78:	4628      	mov	r0, r5
 8004d7a:	47b8      	blx	r7
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	f43f aeac 	beq.w	8004ada <_printf_float+0xb6>
 8004d82:	f108 0801 	add.w	r8, r8, #1
 8004d86:	e7ec      	b.n	8004d62 <_printf_float+0x33e>
 8004d88:	4613      	mov	r3, r2
 8004d8a:	4631      	mov	r1, r6
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	4628      	mov	r0, r5
 8004d90:	47b8      	blx	r7
 8004d92:	3001      	adds	r0, #1
 8004d94:	d1c0      	bne.n	8004d18 <_printf_float+0x2f4>
 8004d96:	e6a0      	b.n	8004ada <_printf_float+0xb6>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004da0:	47b8      	blx	r7
 8004da2:	3001      	adds	r0, #1
 8004da4:	f43f ae99 	beq.w	8004ada <_printf_float+0xb6>
 8004da8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004daa:	f10b 0b01 	add.w	fp, fp, #1
 8004dae:	e7b9      	b.n	8004d24 <_printf_float+0x300>
 8004db0:	4631      	mov	r1, r6
 8004db2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004db6:	4628      	mov	r0, r5
 8004db8:	47b8      	blx	r7
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d1bf      	bne.n	8004d3e <_printf_float+0x31a>
 8004dbe:	e68c      	b.n	8004ada <_printf_float+0xb6>
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	eb08 020a 	add.w	r2, r8, sl
 8004dca:	47b8      	blx	r7
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d1c2      	bne.n	8004d56 <_printf_float+0x332>
 8004dd0:	e683      	b.n	8004ada <_printf_float+0xb6>
 8004dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dd4:	2a01      	cmp	r2, #1
 8004dd6:	dc01      	bgt.n	8004ddc <_printf_float+0x3b8>
 8004dd8:	07db      	lsls	r3, r3, #31
 8004dda:	d539      	bpl.n	8004e50 <_printf_float+0x42c>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	4642      	mov	r2, r8
 8004de0:	4631      	mov	r1, r6
 8004de2:	4628      	mov	r0, r5
 8004de4:	47b8      	blx	r7
 8004de6:	3001      	adds	r0, #1
 8004de8:	f43f ae77 	beq.w	8004ada <_printf_float+0xb6>
 8004dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004df0:	4631      	mov	r1, r6
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b8      	blx	r7
 8004df6:	3001      	adds	r0, #1
 8004df8:	f43f ae6f 	beq.w	8004ada <_printf_float+0xb6>
 8004dfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e00:	2200      	movs	r2, #0
 8004e02:	2300      	movs	r3, #0
 8004e04:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004e08:	f7fb fe82 	bl	8000b10 <__aeabi_dcmpeq>
 8004e0c:	b9d8      	cbnz	r0, 8004e46 <_printf_float+0x422>
 8004e0e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004e12:	f108 0201 	add.w	r2, r8, #1
 8004e16:	4631      	mov	r1, r6
 8004e18:	4628      	mov	r0, r5
 8004e1a:	47b8      	blx	r7
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d10e      	bne.n	8004e3e <_printf_float+0x41a>
 8004e20:	e65b      	b.n	8004ada <_printf_float+0xb6>
 8004e22:	2301      	movs	r3, #1
 8004e24:	464a      	mov	r2, r9
 8004e26:	4631      	mov	r1, r6
 8004e28:	4628      	mov	r0, r5
 8004e2a:	47b8      	blx	r7
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	f43f ae54 	beq.w	8004ada <_printf_float+0xb6>
 8004e32:	f108 0801 	add.w	r8, r8, #1
 8004e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	4543      	cmp	r3, r8
 8004e3c:	dcf1      	bgt.n	8004e22 <_printf_float+0x3fe>
 8004e3e:	4653      	mov	r3, sl
 8004e40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e44:	e6de      	b.n	8004c04 <_printf_float+0x1e0>
 8004e46:	f04f 0800 	mov.w	r8, #0
 8004e4a:	f104 091a 	add.w	r9, r4, #26
 8004e4e:	e7f2      	b.n	8004e36 <_printf_float+0x412>
 8004e50:	2301      	movs	r3, #1
 8004e52:	4642      	mov	r2, r8
 8004e54:	e7df      	b.n	8004e16 <_printf_float+0x3f2>
 8004e56:	2301      	movs	r3, #1
 8004e58:	464a      	mov	r2, r9
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f ae3a 	beq.w	8004ada <_printf_float+0xb6>
 8004e66:	f108 0801 	add.w	r8, r8, #1
 8004e6a:	68e3      	ldr	r3, [r4, #12]
 8004e6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e6e:	1a5b      	subs	r3, r3, r1
 8004e70:	4543      	cmp	r3, r8
 8004e72:	dcf0      	bgt.n	8004e56 <_printf_float+0x432>
 8004e74:	e6fb      	b.n	8004c6e <_printf_float+0x24a>
 8004e76:	f04f 0800 	mov.w	r8, #0
 8004e7a:	f104 0919 	add.w	r9, r4, #25
 8004e7e:	e7f4      	b.n	8004e6a <_printf_float+0x446>

08004e80 <_printf_common>:
 8004e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e84:	4616      	mov	r6, r2
 8004e86:	4699      	mov	r9, r3
 8004e88:	688a      	ldr	r2, [r1, #8]
 8004e8a:	690b      	ldr	r3, [r1, #16]
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bfb8      	it	lt
 8004e92:	4613      	movlt	r3, r2
 8004e94:	6033      	str	r3, [r6, #0]
 8004e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ea0:	b10a      	cbz	r2, 8004ea6 <_printf_common+0x26>
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	0699      	lsls	r1, r3, #26
 8004eaa:	bf42      	ittt	mi
 8004eac:	6833      	ldrmi	r3, [r6, #0]
 8004eae:	3302      	addmi	r3, #2
 8004eb0:	6033      	strmi	r3, [r6, #0]
 8004eb2:	6825      	ldr	r5, [r4, #0]
 8004eb4:	f015 0506 	ands.w	r5, r5, #6
 8004eb8:	d106      	bne.n	8004ec8 <_printf_common+0x48>
 8004eba:	f104 0a19 	add.w	sl, r4, #25
 8004ebe:	68e3      	ldr	r3, [r4, #12]
 8004ec0:	6832      	ldr	r2, [r6, #0]
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	42ab      	cmp	r3, r5
 8004ec6:	dc2b      	bgt.n	8004f20 <_printf_common+0xa0>
 8004ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ecc:	1e13      	subs	r3, r2, #0
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	bf18      	it	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	0692      	lsls	r2, r2, #26
 8004ed6:	d430      	bmi.n	8004f3a <_printf_common+0xba>
 8004ed8:	4649      	mov	r1, r9
 8004eda:	4638      	mov	r0, r7
 8004edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ee0:	47c0      	blx	r8
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d023      	beq.n	8004f2e <_printf_common+0xae>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	6922      	ldr	r2, [r4, #16]
 8004eea:	f003 0306 	and.w	r3, r3, #6
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	bf14      	ite	ne
 8004ef2:	2500      	movne	r5, #0
 8004ef4:	6833      	ldreq	r3, [r6, #0]
 8004ef6:	f04f 0600 	mov.w	r6, #0
 8004efa:	bf08      	it	eq
 8004efc:	68e5      	ldreq	r5, [r4, #12]
 8004efe:	f104 041a 	add.w	r4, r4, #26
 8004f02:	bf08      	it	eq
 8004f04:	1aed      	subeq	r5, r5, r3
 8004f06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f0a:	bf08      	it	eq
 8004f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f10:	4293      	cmp	r3, r2
 8004f12:	bfc4      	itt	gt
 8004f14:	1a9b      	subgt	r3, r3, r2
 8004f16:	18ed      	addgt	r5, r5, r3
 8004f18:	42b5      	cmp	r5, r6
 8004f1a:	d11a      	bne.n	8004f52 <_printf_common+0xd2>
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	e008      	b.n	8004f32 <_printf_common+0xb2>
 8004f20:	2301      	movs	r3, #1
 8004f22:	4652      	mov	r2, sl
 8004f24:	4649      	mov	r1, r9
 8004f26:	4638      	mov	r0, r7
 8004f28:	47c0      	blx	r8
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d103      	bne.n	8004f36 <_printf_common+0xb6>
 8004f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f36:	3501      	adds	r5, #1
 8004f38:	e7c1      	b.n	8004ebe <_printf_common+0x3e>
 8004f3a:	2030      	movs	r0, #48	; 0x30
 8004f3c:	18e1      	adds	r1, r4, r3
 8004f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f48:	4422      	add	r2, r4
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f50:	e7c2      	b.n	8004ed8 <_printf_common+0x58>
 8004f52:	2301      	movs	r3, #1
 8004f54:	4622      	mov	r2, r4
 8004f56:	4649      	mov	r1, r9
 8004f58:	4638      	mov	r0, r7
 8004f5a:	47c0      	blx	r8
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d0e6      	beq.n	8004f2e <_printf_common+0xae>
 8004f60:	3601      	adds	r6, #1
 8004f62:	e7d9      	b.n	8004f18 <_printf_common+0x98>

08004f64 <_printf_i>:
 8004f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	7e0f      	ldrb	r7, [r1, #24]
 8004f6a:	4691      	mov	r9, r2
 8004f6c:	2f78      	cmp	r7, #120	; 0x78
 8004f6e:	4680      	mov	r8, r0
 8004f70:	460c      	mov	r4, r1
 8004f72:	469a      	mov	sl, r3
 8004f74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f7a:	d807      	bhi.n	8004f8c <_printf_i+0x28>
 8004f7c:	2f62      	cmp	r7, #98	; 0x62
 8004f7e:	d80a      	bhi.n	8004f96 <_printf_i+0x32>
 8004f80:	2f00      	cmp	r7, #0
 8004f82:	f000 80d5 	beq.w	8005130 <_printf_i+0x1cc>
 8004f86:	2f58      	cmp	r7, #88	; 0x58
 8004f88:	f000 80c1 	beq.w	800510e <_printf_i+0x1aa>
 8004f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f94:	e03a      	b.n	800500c <_printf_i+0xa8>
 8004f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f9a:	2b15      	cmp	r3, #21
 8004f9c:	d8f6      	bhi.n	8004f8c <_printf_i+0x28>
 8004f9e:	a101      	add	r1, pc, #4	; (adr r1, 8004fa4 <_printf_i+0x40>)
 8004fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fa4:	08004ffd 	.word	0x08004ffd
 8004fa8:	08005011 	.word	0x08005011
 8004fac:	08004f8d 	.word	0x08004f8d
 8004fb0:	08004f8d 	.word	0x08004f8d
 8004fb4:	08004f8d 	.word	0x08004f8d
 8004fb8:	08004f8d 	.word	0x08004f8d
 8004fbc:	08005011 	.word	0x08005011
 8004fc0:	08004f8d 	.word	0x08004f8d
 8004fc4:	08004f8d 	.word	0x08004f8d
 8004fc8:	08004f8d 	.word	0x08004f8d
 8004fcc:	08004f8d 	.word	0x08004f8d
 8004fd0:	08005117 	.word	0x08005117
 8004fd4:	0800503d 	.word	0x0800503d
 8004fd8:	080050d1 	.word	0x080050d1
 8004fdc:	08004f8d 	.word	0x08004f8d
 8004fe0:	08004f8d 	.word	0x08004f8d
 8004fe4:	08005139 	.word	0x08005139
 8004fe8:	08004f8d 	.word	0x08004f8d
 8004fec:	0800503d 	.word	0x0800503d
 8004ff0:	08004f8d 	.word	0x08004f8d
 8004ff4:	08004f8d 	.word	0x08004f8d
 8004ff8:	080050d9 	.word	0x080050d9
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	1d1a      	adds	r2, r3, #4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	602a      	str	r2, [r5, #0]
 8005004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800500c:	2301      	movs	r3, #1
 800500e:	e0a0      	b.n	8005152 <_printf_i+0x1ee>
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	682b      	ldr	r3, [r5, #0]
 8005014:	0607      	lsls	r7, r0, #24
 8005016:	f103 0104 	add.w	r1, r3, #4
 800501a:	6029      	str	r1, [r5, #0]
 800501c:	d501      	bpl.n	8005022 <_printf_i+0xbe>
 800501e:	681e      	ldr	r6, [r3, #0]
 8005020:	e003      	b.n	800502a <_printf_i+0xc6>
 8005022:	0646      	lsls	r6, r0, #25
 8005024:	d5fb      	bpl.n	800501e <_printf_i+0xba>
 8005026:	f9b3 6000 	ldrsh.w	r6, [r3]
 800502a:	2e00      	cmp	r6, #0
 800502c:	da03      	bge.n	8005036 <_printf_i+0xd2>
 800502e:	232d      	movs	r3, #45	; 0x2d
 8005030:	4276      	negs	r6, r6
 8005032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005036:	230a      	movs	r3, #10
 8005038:	4859      	ldr	r0, [pc, #356]	; (80051a0 <_printf_i+0x23c>)
 800503a:	e012      	b.n	8005062 <_printf_i+0xfe>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	6820      	ldr	r0, [r4, #0]
 8005040:	1d19      	adds	r1, r3, #4
 8005042:	6029      	str	r1, [r5, #0]
 8005044:	0605      	lsls	r5, r0, #24
 8005046:	d501      	bpl.n	800504c <_printf_i+0xe8>
 8005048:	681e      	ldr	r6, [r3, #0]
 800504a:	e002      	b.n	8005052 <_printf_i+0xee>
 800504c:	0641      	lsls	r1, r0, #25
 800504e:	d5fb      	bpl.n	8005048 <_printf_i+0xe4>
 8005050:	881e      	ldrh	r6, [r3, #0]
 8005052:	2f6f      	cmp	r7, #111	; 0x6f
 8005054:	bf0c      	ite	eq
 8005056:	2308      	moveq	r3, #8
 8005058:	230a      	movne	r3, #10
 800505a:	4851      	ldr	r0, [pc, #324]	; (80051a0 <_printf_i+0x23c>)
 800505c:	2100      	movs	r1, #0
 800505e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005062:	6865      	ldr	r5, [r4, #4]
 8005064:	2d00      	cmp	r5, #0
 8005066:	bfa8      	it	ge
 8005068:	6821      	ldrge	r1, [r4, #0]
 800506a:	60a5      	str	r5, [r4, #8]
 800506c:	bfa4      	itt	ge
 800506e:	f021 0104 	bicge.w	r1, r1, #4
 8005072:	6021      	strge	r1, [r4, #0]
 8005074:	b90e      	cbnz	r6, 800507a <_printf_i+0x116>
 8005076:	2d00      	cmp	r5, #0
 8005078:	d04b      	beq.n	8005112 <_printf_i+0x1ae>
 800507a:	4615      	mov	r5, r2
 800507c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005080:	fb03 6711 	mls	r7, r3, r1, r6
 8005084:	5dc7      	ldrb	r7, [r0, r7]
 8005086:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800508a:	4637      	mov	r7, r6
 800508c:	42bb      	cmp	r3, r7
 800508e:	460e      	mov	r6, r1
 8005090:	d9f4      	bls.n	800507c <_printf_i+0x118>
 8005092:	2b08      	cmp	r3, #8
 8005094:	d10b      	bne.n	80050ae <_printf_i+0x14a>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	07de      	lsls	r6, r3, #31
 800509a:	d508      	bpl.n	80050ae <_printf_i+0x14a>
 800509c:	6923      	ldr	r3, [r4, #16]
 800509e:	6861      	ldr	r1, [r4, #4]
 80050a0:	4299      	cmp	r1, r3
 80050a2:	bfde      	ittt	le
 80050a4:	2330      	movle	r3, #48	; 0x30
 80050a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050ae:	1b52      	subs	r2, r2, r5
 80050b0:	6122      	str	r2, [r4, #16]
 80050b2:	464b      	mov	r3, r9
 80050b4:	4621      	mov	r1, r4
 80050b6:	4640      	mov	r0, r8
 80050b8:	f8cd a000 	str.w	sl, [sp]
 80050bc:	aa03      	add	r2, sp, #12
 80050be:	f7ff fedf 	bl	8004e80 <_printf_common>
 80050c2:	3001      	adds	r0, #1
 80050c4:	d14a      	bne.n	800515c <_printf_i+0x1f8>
 80050c6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ca:	b004      	add	sp, #16
 80050cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	f043 0320 	orr.w	r3, r3, #32
 80050d6:	6023      	str	r3, [r4, #0]
 80050d8:	2778      	movs	r7, #120	; 0x78
 80050da:	4832      	ldr	r0, [pc, #200]	; (80051a4 <_printf_i+0x240>)
 80050dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	6829      	ldr	r1, [r5, #0]
 80050e4:	061f      	lsls	r7, r3, #24
 80050e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80050ea:	d402      	bmi.n	80050f2 <_printf_i+0x18e>
 80050ec:	065f      	lsls	r7, r3, #25
 80050ee:	bf48      	it	mi
 80050f0:	b2b6      	uxthmi	r6, r6
 80050f2:	07df      	lsls	r7, r3, #31
 80050f4:	bf48      	it	mi
 80050f6:	f043 0320 	orrmi.w	r3, r3, #32
 80050fa:	6029      	str	r1, [r5, #0]
 80050fc:	bf48      	it	mi
 80050fe:	6023      	strmi	r3, [r4, #0]
 8005100:	b91e      	cbnz	r6, 800510a <_printf_i+0x1a6>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	f023 0320 	bic.w	r3, r3, #32
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	2310      	movs	r3, #16
 800510c:	e7a6      	b.n	800505c <_printf_i+0xf8>
 800510e:	4824      	ldr	r0, [pc, #144]	; (80051a0 <_printf_i+0x23c>)
 8005110:	e7e4      	b.n	80050dc <_printf_i+0x178>
 8005112:	4615      	mov	r5, r2
 8005114:	e7bd      	b.n	8005092 <_printf_i+0x12e>
 8005116:	682b      	ldr	r3, [r5, #0]
 8005118:	6826      	ldr	r6, [r4, #0]
 800511a:	1d18      	adds	r0, r3, #4
 800511c:	6961      	ldr	r1, [r4, #20]
 800511e:	6028      	str	r0, [r5, #0]
 8005120:	0635      	lsls	r5, r6, #24
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	d501      	bpl.n	800512a <_printf_i+0x1c6>
 8005126:	6019      	str	r1, [r3, #0]
 8005128:	e002      	b.n	8005130 <_printf_i+0x1cc>
 800512a:	0670      	lsls	r0, r6, #25
 800512c:	d5fb      	bpl.n	8005126 <_printf_i+0x1c2>
 800512e:	8019      	strh	r1, [r3, #0]
 8005130:	2300      	movs	r3, #0
 8005132:	4615      	mov	r5, r2
 8005134:	6123      	str	r3, [r4, #16]
 8005136:	e7bc      	b.n	80050b2 <_printf_i+0x14e>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	2100      	movs	r1, #0
 800513c:	1d1a      	adds	r2, r3, #4
 800513e:	602a      	str	r2, [r5, #0]
 8005140:	681d      	ldr	r5, [r3, #0]
 8005142:	6862      	ldr	r2, [r4, #4]
 8005144:	4628      	mov	r0, r5
 8005146:	f000 fbcf 	bl	80058e8 <memchr>
 800514a:	b108      	cbz	r0, 8005150 <_printf_i+0x1ec>
 800514c:	1b40      	subs	r0, r0, r5
 800514e:	6060      	str	r0, [r4, #4]
 8005150:	6863      	ldr	r3, [r4, #4]
 8005152:	6123      	str	r3, [r4, #16]
 8005154:	2300      	movs	r3, #0
 8005156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800515a:	e7aa      	b.n	80050b2 <_printf_i+0x14e>
 800515c:	462a      	mov	r2, r5
 800515e:	4649      	mov	r1, r9
 8005160:	4640      	mov	r0, r8
 8005162:	6923      	ldr	r3, [r4, #16]
 8005164:	47d0      	blx	sl
 8005166:	3001      	adds	r0, #1
 8005168:	d0ad      	beq.n	80050c6 <_printf_i+0x162>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	079b      	lsls	r3, r3, #30
 800516e:	d413      	bmi.n	8005198 <_printf_i+0x234>
 8005170:	68e0      	ldr	r0, [r4, #12]
 8005172:	9b03      	ldr	r3, [sp, #12]
 8005174:	4298      	cmp	r0, r3
 8005176:	bfb8      	it	lt
 8005178:	4618      	movlt	r0, r3
 800517a:	e7a6      	b.n	80050ca <_printf_i+0x166>
 800517c:	2301      	movs	r3, #1
 800517e:	4632      	mov	r2, r6
 8005180:	4649      	mov	r1, r9
 8005182:	4640      	mov	r0, r8
 8005184:	47d0      	blx	sl
 8005186:	3001      	adds	r0, #1
 8005188:	d09d      	beq.n	80050c6 <_printf_i+0x162>
 800518a:	3501      	adds	r5, #1
 800518c:	68e3      	ldr	r3, [r4, #12]
 800518e:	9903      	ldr	r1, [sp, #12]
 8005190:	1a5b      	subs	r3, r3, r1
 8005192:	42ab      	cmp	r3, r5
 8005194:	dcf2      	bgt.n	800517c <_printf_i+0x218>
 8005196:	e7eb      	b.n	8005170 <_printf_i+0x20c>
 8005198:	2500      	movs	r5, #0
 800519a:	f104 0619 	add.w	r6, r4, #25
 800519e:	e7f5      	b.n	800518c <_printf_i+0x228>
 80051a0:	0800b5c5 	.word	0x0800b5c5
 80051a4:	0800b5d6 	.word	0x0800b5d6

080051a8 <_scanf_float>:
 80051a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ac:	b087      	sub	sp, #28
 80051ae:	9303      	str	r3, [sp, #12]
 80051b0:	688b      	ldr	r3, [r1, #8]
 80051b2:	4617      	mov	r7, r2
 80051b4:	1e5a      	subs	r2, r3, #1
 80051b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80051ba:	bf85      	ittet	hi
 80051bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80051c0:	195b      	addhi	r3, r3, r5
 80051c2:	2300      	movls	r3, #0
 80051c4:	9302      	strhi	r3, [sp, #8]
 80051c6:	bf88      	it	hi
 80051c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80051cc:	468b      	mov	fp, r1
 80051ce:	f04f 0500 	mov.w	r5, #0
 80051d2:	bf8c      	ite	hi
 80051d4:	608b      	strhi	r3, [r1, #8]
 80051d6:	9302      	strls	r3, [sp, #8]
 80051d8:	680b      	ldr	r3, [r1, #0]
 80051da:	4680      	mov	r8, r0
 80051dc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80051e0:	f84b 3b1c 	str.w	r3, [fp], #28
 80051e4:	460c      	mov	r4, r1
 80051e6:	465e      	mov	r6, fp
 80051e8:	46aa      	mov	sl, r5
 80051ea:	46a9      	mov	r9, r5
 80051ec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80051f0:	9501      	str	r5, [sp, #4]
 80051f2:	68a2      	ldr	r2, [r4, #8]
 80051f4:	b152      	cbz	r2, 800520c <_scanf_float+0x64>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b4e      	cmp	r3, #78	; 0x4e
 80051fc:	d864      	bhi.n	80052c8 <_scanf_float+0x120>
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	d83c      	bhi.n	800527c <_scanf_float+0xd4>
 8005202:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005206:	b2c8      	uxtb	r0, r1
 8005208:	280e      	cmp	r0, #14
 800520a:	d93a      	bls.n	8005282 <_scanf_float+0xda>
 800520c:	f1b9 0f00 	cmp.w	r9, #0
 8005210:	d003      	beq.n	800521a <_scanf_float+0x72>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800521e:	f1ba 0f01 	cmp.w	sl, #1
 8005222:	f200 8113 	bhi.w	800544c <_scanf_float+0x2a4>
 8005226:	455e      	cmp	r6, fp
 8005228:	f200 8105 	bhi.w	8005436 <_scanf_float+0x28e>
 800522c:	2501      	movs	r5, #1
 800522e:	4628      	mov	r0, r5
 8005230:	b007      	add	sp, #28
 8005232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005236:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800523a:	2a0d      	cmp	r2, #13
 800523c:	d8e6      	bhi.n	800520c <_scanf_float+0x64>
 800523e:	a101      	add	r1, pc, #4	; (adr r1, 8005244 <_scanf_float+0x9c>)
 8005240:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005244:	08005383 	.word	0x08005383
 8005248:	0800520d 	.word	0x0800520d
 800524c:	0800520d 	.word	0x0800520d
 8005250:	0800520d 	.word	0x0800520d
 8005254:	080053e3 	.word	0x080053e3
 8005258:	080053bb 	.word	0x080053bb
 800525c:	0800520d 	.word	0x0800520d
 8005260:	0800520d 	.word	0x0800520d
 8005264:	08005391 	.word	0x08005391
 8005268:	0800520d 	.word	0x0800520d
 800526c:	0800520d 	.word	0x0800520d
 8005270:	0800520d 	.word	0x0800520d
 8005274:	0800520d 	.word	0x0800520d
 8005278:	08005349 	.word	0x08005349
 800527c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005280:	e7db      	b.n	800523a <_scanf_float+0x92>
 8005282:	290e      	cmp	r1, #14
 8005284:	d8c2      	bhi.n	800520c <_scanf_float+0x64>
 8005286:	a001      	add	r0, pc, #4	; (adr r0, 800528c <_scanf_float+0xe4>)
 8005288:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800528c:	0800533b 	.word	0x0800533b
 8005290:	0800520d 	.word	0x0800520d
 8005294:	0800533b 	.word	0x0800533b
 8005298:	080053cf 	.word	0x080053cf
 800529c:	0800520d 	.word	0x0800520d
 80052a0:	080052e9 	.word	0x080052e9
 80052a4:	08005325 	.word	0x08005325
 80052a8:	08005325 	.word	0x08005325
 80052ac:	08005325 	.word	0x08005325
 80052b0:	08005325 	.word	0x08005325
 80052b4:	08005325 	.word	0x08005325
 80052b8:	08005325 	.word	0x08005325
 80052bc:	08005325 	.word	0x08005325
 80052c0:	08005325 	.word	0x08005325
 80052c4:	08005325 	.word	0x08005325
 80052c8:	2b6e      	cmp	r3, #110	; 0x6e
 80052ca:	d809      	bhi.n	80052e0 <_scanf_float+0x138>
 80052cc:	2b60      	cmp	r3, #96	; 0x60
 80052ce:	d8b2      	bhi.n	8005236 <_scanf_float+0x8e>
 80052d0:	2b54      	cmp	r3, #84	; 0x54
 80052d2:	d077      	beq.n	80053c4 <_scanf_float+0x21c>
 80052d4:	2b59      	cmp	r3, #89	; 0x59
 80052d6:	d199      	bne.n	800520c <_scanf_float+0x64>
 80052d8:	2d07      	cmp	r5, #7
 80052da:	d197      	bne.n	800520c <_scanf_float+0x64>
 80052dc:	2508      	movs	r5, #8
 80052de:	e029      	b.n	8005334 <_scanf_float+0x18c>
 80052e0:	2b74      	cmp	r3, #116	; 0x74
 80052e2:	d06f      	beq.n	80053c4 <_scanf_float+0x21c>
 80052e4:	2b79      	cmp	r3, #121	; 0x79
 80052e6:	e7f6      	b.n	80052d6 <_scanf_float+0x12e>
 80052e8:	6821      	ldr	r1, [r4, #0]
 80052ea:	05c8      	lsls	r0, r1, #23
 80052ec:	d51a      	bpl.n	8005324 <_scanf_float+0x17c>
 80052ee:	9b02      	ldr	r3, [sp, #8]
 80052f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80052f4:	6021      	str	r1, [r4, #0]
 80052f6:	f109 0901 	add.w	r9, r9, #1
 80052fa:	b11b      	cbz	r3, 8005304 <_scanf_float+0x15c>
 80052fc:	3b01      	subs	r3, #1
 80052fe:	3201      	adds	r2, #1
 8005300:	9302      	str	r3, [sp, #8]
 8005302:	60a2      	str	r2, [r4, #8]
 8005304:	68a3      	ldr	r3, [r4, #8]
 8005306:	3b01      	subs	r3, #1
 8005308:	60a3      	str	r3, [r4, #8]
 800530a:	6923      	ldr	r3, [r4, #16]
 800530c:	3301      	adds	r3, #1
 800530e:	6123      	str	r3, [r4, #16]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3b01      	subs	r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	f340 8084 	ble.w	8005424 <_scanf_float+0x27c>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	e766      	b.n	80051f2 <_scanf_float+0x4a>
 8005324:	eb1a 0f05 	cmn.w	sl, r5
 8005328:	f47f af70 	bne.w	800520c <_scanf_float+0x64>
 800532c:	6822      	ldr	r2, [r4, #0]
 800532e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005332:	6022      	str	r2, [r4, #0]
 8005334:	f806 3b01 	strb.w	r3, [r6], #1
 8005338:	e7e4      	b.n	8005304 <_scanf_float+0x15c>
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	0610      	lsls	r0, r2, #24
 800533e:	f57f af65 	bpl.w	800520c <_scanf_float+0x64>
 8005342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005346:	e7f4      	b.n	8005332 <_scanf_float+0x18a>
 8005348:	f1ba 0f00 	cmp.w	sl, #0
 800534c:	d10e      	bne.n	800536c <_scanf_float+0x1c4>
 800534e:	f1b9 0f00 	cmp.w	r9, #0
 8005352:	d10e      	bne.n	8005372 <_scanf_float+0x1ca>
 8005354:	6822      	ldr	r2, [r4, #0]
 8005356:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800535a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800535e:	d108      	bne.n	8005372 <_scanf_float+0x1ca>
 8005360:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005364:	f04f 0a01 	mov.w	sl, #1
 8005368:	6022      	str	r2, [r4, #0]
 800536a:	e7e3      	b.n	8005334 <_scanf_float+0x18c>
 800536c:	f1ba 0f02 	cmp.w	sl, #2
 8005370:	d055      	beq.n	800541e <_scanf_float+0x276>
 8005372:	2d01      	cmp	r5, #1
 8005374:	d002      	beq.n	800537c <_scanf_float+0x1d4>
 8005376:	2d04      	cmp	r5, #4
 8005378:	f47f af48 	bne.w	800520c <_scanf_float+0x64>
 800537c:	3501      	adds	r5, #1
 800537e:	b2ed      	uxtb	r5, r5
 8005380:	e7d8      	b.n	8005334 <_scanf_float+0x18c>
 8005382:	f1ba 0f01 	cmp.w	sl, #1
 8005386:	f47f af41 	bne.w	800520c <_scanf_float+0x64>
 800538a:	f04f 0a02 	mov.w	sl, #2
 800538e:	e7d1      	b.n	8005334 <_scanf_float+0x18c>
 8005390:	b97d      	cbnz	r5, 80053b2 <_scanf_float+0x20a>
 8005392:	f1b9 0f00 	cmp.w	r9, #0
 8005396:	f47f af3c 	bne.w	8005212 <_scanf_float+0x6a>
 800539a:	6822      	ldr	r2, [r4, #0]
 800539c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80053a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80053a4:	f47f af39 	bne.w	800521a <_scanf_float+0x72>
 80053a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053ac:	2501      	movs	r5, #1
 80053ae:	6022      	str	r2, [r4, #0]
 80053b0:	e7c0      	b.n	8005334 <_scanf_float+0x18c>
 80053b2:	2d03      	cmp	r5, #3
 80053b4:	d0e2      	beq.n	800537c <_scanf_float+0x1d4>
 80053b6:	2d05      	cmp	r5, #5
 80053b8:	e7de      	b.n	8005378 <_scanf_float+0x1d0>
 80053ba:	2d02      	cmp	r5, #2
 80053bc:	f47f af26 	bne.w	800520c <_scanf_float+0x64>
 80053c0:	2503      	movs	r5, #3
 80053c2:	e7b7      	b.n	8005334 <_scanf_float+0x18c>
 80053c4:	2d06      	cmp	r5, #6
 80053c6:	f47f af21 	bne.w	800520c <_scanf_float+0x64>
 80053ca:	2507      	movs	r5, #7
 80053cc:	e7b2      	b.n	8005334 <_scanf_float+0x18c>
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	0591      	lsls	r1, r2, #22
 80053d2:	f57f af1b 	bpl.w	800520c <_scanf_float+0x64>
 80053d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80053da:	6022      	str	r2, [r4, #0]
 80053dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80053e0:	e7a8      	b.n	8005334 <_scanf_float+0x18c>
 80053e2:	6822      	ldr	r2, [r4, #0]
 80053e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80053e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80053ec:	d006      	beq.n	80053fc <_scanf_float+0x254>
 80053ee:	0550      	lsls	r0, r2, #21
 80053f0:	f57f af0c 	bpl.w	800520c <_scanf_float+0x64>
 80053f4:	f1b9 0f00 	cmp.w	r9, #0
 80053f8:	f43f af0f 	beq.w	800521a <_scanf_float+0x72>
 80053fc:	0591      	lsls	r1, r2, #22
 80053fe:	bf58      	it	pl
 8005400:	9901      	ldrpl	r1, [sp, #4]
 8005402:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005406:	bf58      	it	pl
 8005408:	eba9 0101 	subpl.w	r1, r9, r1
 800540c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005410:	f04f 0900 	mov.w	r9, #0
 8005414:	bf58      	it	pl
 8005416:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800541a:	6022      	str	r2, [r4, #0]
 800541c:	e78a      	b.n	8005334 <_scanf_float+0x18c>
 800541e:	f04f 0a03 	mov.w	sl, #3
 8005422:	e787      	b.n	8005334 <_scanf_float+0x18c>
 8005424:	4639      	mov	r1, r7
 8005426:	4640      	mov	r0, r8
 8005428:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800542c:	4798      	blx	r3
 800542e:	2800      	cmp	r0, #0
 8005430:	f43f aedf 	beq.w	80051f2 <_scanf_float+0x4a>
 8005434:	e6ea      	b.n	800520c <_scanf_float+0x64>
 8005436:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800543a:	463a      	mov	r2, r7
 800543c:	4640      	mov	r0, r8
 800543e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005442:	4798      	blx	r3
 8005444:	6923      	ldr	r3, [r4, #16]
 8005446:	3b01      	subs	r3, #1
 8005448:	6123      	str	r3, [r4, #16]
 800544a:	e6ec      	b.n	8005226 <_scanf_float+0x7e>
 800544c:	1e6b      	subs	r3, r5, #1
 800544e:	2b06      	cmp	r3, #6
 8005450:	d825      	bhi.n	800549e <_scanf_float+0x2f6>
 8005452:	2d02      	cmp	r5, #2
 8005454:	d836      	bhi.n	80054c4 <_scanf_float+0x31c>
 8005456:	455e      	cmp	r6, fp
 8005458:	f67f aee8 	bls.w	800522c <_scanf_float+0x84>
 800545c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005460:	463a      	mov	r2, r7
 8005462:	4640      	mov	r0, r8
 8005464:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005468:	4798      	blx	r3
 800546a:	6923      	ldr	r3, [r4, #16]
 800546c:	3b01      	subs	r3, #1
 800546e:	6123      	str	r3, [r4, #16]
 8005470:	e7f1      	b.n	8005456 <_scanf_float+0x2ae>
 8005472:	9802      	ldr	r0, [sp, #8]
 8005474:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005478:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800547c:	463a      	mov	r2, r7
 800547e:	9002      	str	r0, [sp, #8]
 8005480:	4640      	mov	r0, r8
 8005482:	4798      	blx	r3
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	3b01      	subs	r3, #1
 8005488:	6123      	str	r3, [r4, #16]
 800548a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800548e:	fa5f fa8a 	uxtb.w	sl, sl
 8005492:	f1ba 0f02 	cmp.w	sl, #2
 8005496:	d1ec      	bne.n	8005472 <_scanf_float+0x2ca>
 8005498:	3d03      	subs	r5, #3
 800549a:	b2ed      	uxtb	r5, r5
 800549c:	1b76      	subs	r6, r6, r5
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	05da      	lsls	r2, r3, #23
 80054a2:	d52f      	bpl.n	8005504 <_scanf_float+0x35c>
 80054a4:	055b      	lsls	r3, r3, #21
 80054a6:	d510      	bpl.n	80054ca <_scanf_float+0x322>
 80054a8:	455e      	cmp	r6, fp
 80054aa:	f67f aebf 	bls.w	800522c <_scanf_float+0x84>
 80054ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054b2:	463a      	mov	r2, r7
 80054b4:	4640      	mov	r0, r8
 80054b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054ba:	4798      	blx	r3
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	3b01      	subs	r3, #1
 80054c0:	6123      	str	r3, [r4, #16]
 80054c2:	e7f1      	b.n	80054a8 <_scanf_float+0x300>
 80054c4:	46aa      	mov	sl, r5
 80054c6:	9602      	str	r6, [sp, #8]
 80054c8:	e7df      	b.n	800548a <_scanf_float+0x2e2>
 80054ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	2965      	cmp	r1, #101	; 0x65
 80054d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80054d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80054da:	6123      	str	r3, [r4, #16]
 80054dc:	d00c      	beq.n	80054f8 <_scanf_float+0x350>
 80054de:	2945      	cmp	r1, #69	; 0x45
 80054e0:	d00a      	beq.n	80054f8 <_scanf_float+0x350>
 80054e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054e6:	463a      	mov	r2, r7
 80054e8:	4640      	mov	r0, r8
 80054ea:	4798      	blx	r3
 80054ec:	6923      	ldr	r3, [r4, #16]
 80054ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	1eb5      	subs	r5, r6, #2
 80054f6:	6123      	str	r3, [r4, #16]
 80054f8:	463a      	mov	r2, r7
 80054fa:	4640      	mov	r0, r8
 80054fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005500:	4798      	blx	r3
 8005502:	462e      	mov	r6, r5
 8005504:	6825      	ldr	r5, [r4, #0]
 8005506:	f015 0510 	ands.w	r5, r5, #16
 800550a:	d155      	bne.n	80055b8 <_scanf_float+0x410>
 800550c:	7035      	strb	r5, [r6, #0]
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005518:	d11d      	bne.n	8005556 <_scanf_float+0x3ae>
 800551a:	9b01      	ldr	r3, [sp, #4]
 800551c:	454b      	cmp	r3, r9
 800551e:	eba3 0209 	sub.w	r2, r3, r9
 8005522:	d125      	bne.n	8005570 <_scanf_float+0x3c8>
 8005524:	2200      	movs	r2, #0
 8005526:	4659      	mov	r1, fp
 8005528:	4640      	mov	r0, r8
 800552a:	f002 fc0d 	bl	8007d48 <_strtod_r>
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	f8d4 c000 	ldr.w	ip, [r4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f01c 0f02 	tst.w	ip, #2
 800553a:	4606      	mov	r6, r0
 800553c:	460f      	mov	r7, r1
 800553e:	f103 0204 	add.w	r2, r3, #4
 8005542:	d020      	beq.n	8005586 <_scanf_float+0x3de>
 8005544:	9903      	ldr	r1, [sp, #12]
 8005546:	600a      	str	r2, [r1, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	e9c3 6700 	strd	r6, r7, [r3]
 800554e:	68e3      	ldr	r3, [r4, #12]
 8005550:	3301      	adds	r3, #1
 8005552:	60e3      	str	r3, [r4, #12]
 8005554:	e66b      	b.n	800522e <_scanf_float+0x86>
 8005556:	9b04      	ldr	r3, [sp, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0e3      	beq.n	8005524 <_scanf_float+0x37c>
 800555c:	9905      	ldr	r1, [sp, #20]
 800555e:	230a      	movs	r3, #10
 8005560:	462a      	mov	r2, r5
 8005562:	4640      	mov	r0, r8
 8005564:	3101      	adds	r1, #1
 8005566:	f7ff f9bf 	bl	80048e8 <_strtol_r>
 800556a:	9b04      	ldr	r3, [sp, #16]
 800556c:	9e05      	ldr	r6, [sp, #20]
 800556e:	1ac2      	subs	r2, r0, r3
 8005570:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005574:	429e      	cmp	r6, r3
 8005576:	bf28      	it	cs
 8005578:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800557c:	4630      	mov	r0, r6
 800557e:	490f      	ldr	r1, [pc, #60]	; (80055bc <_scanf_float+0x414>)
 8005580:	f000 f8d0 	bl	8005724 <siprintf>
 8005584:	e7ce      	b.n	8005524 <_scanf_float+0x37c>
 8005586:	f01c 0f04 	tst.w	ip, #4
 800558a:	d1db      	bne.n	8005544 <_scanf_float+0x39c>
 800558c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005590:	f8cc 2000 	str.w	r2, [ip]
 8005594:	f8d3 8000 	ldr.w	r8, [r3]
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	f7fb faea 	bl	8000b74 <__aeabi_dcmpun>
 80055a0:	b128      	cbz	r0, 80055ae <_scanf_float+0x406>
 80055a2:	4807      	ldr	r0, [pc, #28]	; (80055c0 <_scanf_float+0x418>)
 80055a4:	f000 f9ae 	bl	8005904 <nanf>
 80055a8:	f8c8 0000 	str.w	r0, [r8]
 80055ac:	e7cf      	b.n	800554e <_scanf_float+0x3a6>
 80055ae:	4630      	mov	r0, r6
 80055b0:	4639      	mov	r1, r7
 80055b2:	f7fb fb3d 	bl	8000c30 <__aeabi_d2f>
 80055b6:	e7f7      	b.n	80055a8 <_scanf_float+0x400>
 80055b8:	2500      	movs	r5, #0
 80055ba:	e638      	b.n	800522e <_scanf_float+0x86>
 80055bc:	0800b5e7 	.word	0x0800b5e7
 80055c0:	0800b87c 	.word	0x0800b87c

080055c4 <std>:
 80055c4:	2300      	movs	r3, #0
 80055c6:	b510      	push	{r4, lr}
 80055c8:	4604      	mov	r4, r0
 80055ca:	e9c0 3300 	strd	r3, r3, [r0]
 80055ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055d2:	6083      	str	r3, [r0, #8]
 80055d4:	8181      	strh	r1, [r0, #12]
 80055d6:	6643      	str	r3, [r0, #100]	; 0x64
 80055d8:	81c2      	strh	r2, [r0, #14]
 80055da:	6183      	str	r3, [r0, #24]
 80055dc:	4619      	mov	r1, r3
 80055de:	2208      	movs	r2, #8
 80055e0:	305c      	adds	r0, #92	; 0x5c
 80055e2:	f000 f902 	bl	80057ea <memset>
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <std+0x38>)
 80055e8:	6224      	str	r4, [r4, #32]
 80055ea:	6263      	str	r3, [r4, #36]	; 0x24
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <std+0x3c>)
 80055ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80055f0:	4b04      	ldr	r3, [pc, #16]	; (8005604 <std+0x40>)
 80055f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055f4:	4b04      	ldr	r3, [pc, #16]	; (8005608 <std+0x44>)
 80055f6:	6323      	str	r3, [r4, #48]	; 0x30
 80055f8:	bd10      	pop	{r4, pc}
 80055fa:	bf00      	nop
 80055fc:	08005765 	.word	0x08005765
 8005600:	08005787 	.word	0x08005787
 8005604:	080057bf 	.word	0x080057bf
 8005608:	080057e3 	.word	0x080057e3

0800560c <stdio_exit_handler>:
 800560c:	4a02      	ldr	r2, [pc, #8]	; (8005618 <stdio_exit_handler+0xc>)
 800560e:	4903      	ldr	r1, [pc, #12]	; (800561c <stdio_exit_handler+0x10>)
 8005610:	4803      	ldr	r0, [pc, #12]	; (8005620 <stdio_exit_handler+0x14>)
 8005612:	f000 b869 	b.w	80056e8 <_fwalk_sglue>
 8005616:	bf00      	nop
 8005618:	20000010 	.word	0x20000010
 800561c:	08008109 	.word	0x08008109
 8005620:	2000001c 	.word	0x2000001c

08005624 <cleanup_stdio>:
 8005624:	6841      	ldr	r1, [r0, #4]
 8005626:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <cleanup_stdio+0x34>)
 8005628:	b510      	push	{r4, lr}
 800562a:	4299      	cmp	r1, r3
 800562c:	4604      	mov	r4, r0
 800562e:	d001      	beq.n	8005634 <cleanup_stdio+0x10>
 8005630:	f002 fd6a 	bl	8008108 <_fflush_r>
 8005634:	68a1      	ldr	r1, [r4, #8]
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <cleanup_stdio+0x38>)
 8005638:	4299      	cmp	r1, r3
 800563a:	d002      	beq.n	8005642 <cleanup_stdio+0x1e>
 800563c:	4620      	mov	r0, r4
 800563e:	f002 fd63 	bl	8008108 <_fflush_r>
 8005642:	68e1      	ldr	r1, [r4, #12]
 8005644:	4b06      	ldr	r3, [pc, #24]	; (8005660 <cleanup_stdio+0x3c>)
 8005646:	4299      	cmp	r1, r3
 8005648:	d004      	beq.n	8005654 <cleanup_stdio+0x30>
 800564a:	4620      	mov	r0, r4
 800564c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005650:	f002 bd5a 	b.w	8008108 <_fflush_r>
 8005654:	bd10      	pop	{r4, pc}
 8005656:	bf00      	nop
 8005658:	200006ec 	.word	0x200006ec
 800565c:	20000754 	.word	0x20000754
 8005660:	200007bc 	.word	0x200007bc

08005664 <global_stdio_init.part.0>:
 8005664:	b510      	push	{r4, lr}
 8005666:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <global_stdio_init.part.0+0x30>)
 8005668:	4c0b      	ldr	r4, [pc, #44]	; (8005698 <global_stdio_init.part.0+0x34>)
 800566a:	4a0c      	ldr	r2, [pc, #48]	; (800569c <global_stdio_init.part.0+0x38>)
 800566c:	4620      	mov	r0, r4
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	2104      	movs	r1, #4
 8005672:	2200      	movs	r2, #0
 8005674:	f7ff ffa6 	bl	80055c4 <std>
 8005678:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800567c:	2201      	movs	r2, #1
 800567e:	2109      	movs	r1, #9
 8005680:	f7ff ffa0 	bl	80055c4 <std>
 8005684:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005688:	2202      	movs	r2, #2
 800568a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800568e:	2112      	movs	r1, #18
 8005690:	f7ff bf98 	b.w	80055c4 <std>
 8005694:	20000824 	.word	0x20000824
 8005698:	200006ec 	.word	0x200006ec
 800569c:	0800560d 	.word	0x0800560d

080056a0 <__sfp_lock_acquire>:
 80056a0:	4801      	ldr	r0, [pc, #4]	; (80056a8 <__sfp_lock_acquire+0x8>)
 80056a2:	f000 b91f 	b.w	80058e4 <__retarget_lock_acquire_recursive>
 80056a6:	bf00      	nop
 80056a8:	2000082d 	.word	0x2000082d

080056ac <__sfp_lock_release>:
 80056ac:	4801      	ldr	r0, [pc, #4]	; (80056b4 <__sfp_lock_release+0x8>)
 80056ae:	f000 b91a 	b.w	80058e6 <__retarget_lock_release_recursive>
 80056b2:	bf00      	nop
 80056b4:	2000082d 	.word	0x2000082d

080056b8 <__sinit>:
 80056b8:	b510      	push	{r4, lr}
 80056ba:	4604      	mov	r4, r0
 80056bc:	f7ff fff0 	bl	80056a0 <__sfp_lock_acquire>
 80056c0:	6a23      	ldr	r3, [r4, #32]
 80056c2:	b11b      	cbz	r3, 80056cc <__sinit+0x14>
 80056c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056c8:	f7ff bff0 	b.w	80056ac <__sfp_lock_release>
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <__sinit+0x28>)
 80056ce:	6223      	str	r3, [r4, #32]
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <__sinit+0x2c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1f5      	bne.n	80056c4 <__sinit+0xc>
 80056d8:	f7ff ffc4 	bl	8005664 <global_stdio_init.part.0>
 80056dc:	e7f2      	b.n	80056c4 <__sinit+0xc>
 80056de:	bf00      	nop
 80056e0:	08005625 	.word	0x08005625
 80056e4:	20000824 	.word	0x20000824

080056e8 <_fwalk_sglue>:
 80056e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056ec:	4607      	mov	r7, r0
 80056ee:	4688      	mov	r8, r1
 80056f0:	4614      	mov	r4, r2
 80056f2:	2600      	movs	r6, #0
 80056f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056f8:	f1b9 0901 	subs.w	r9, r9, #1
 80056fc:	d505      	bpl.n	800570a <_fwalk_sglue+0x22>
 80056fe:	6824      	ldr	r4, [r4, #0]
 8005700:	2c00      	cmp	r4, #0
 8005702:	d1f7      	bne.n	80056f4 <_fwalk_sglue+0xc>
 8005704:	4630      	mov	r0, r6
 8005706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800570a:	89ab      	ldrh	r3, [r5, #12]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d907      	bls.n	8005720 <_fwalk_sglue+0x38>
 8005710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005714:	3301      	adds	r3, #1
 8005716:	d003      	beq.n	8005720 <_fwalk_sglue+0x38>
 8005718:	4629      	mov	r1, r5
 800571a:	4638      	mov	r0, r7
 800571c:	47c0      	blx	r8
 800571e:	4306      	orrs	r6, r0
 8005720:	3568      	adds	r5, #104	; 0x68
 8005722:	e7e9      	b.n	80056f8 <_fwalk_sglue+0x10>

08005724 <siprintf>:
 8005724:	b40e      	push	{r1, r2, r3}
 8005726:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800572a:	b500      	push	{lr}
 800572c:	b09c      	sub	sp, #112	; 0x70
 800572e:	ab1d      	add	r3, sp, #116	; 0x74
 8005730:	9002      	str	r0, [sp, #8]
 8005732:	9006      	str	r0, [sp, #24]
 8005734:	9107      	str	r1, [sp, #28]
 8005736:	9104      	str	r1, [sp, #16]
 8005738:	4808      	ldr	r0, [pc, #32]	; (800575c <siprintf+0x38>)
 800573a:	4909      	ldr	r1, [pc, #36]	; (8005760 <siprintf+0x3c>)
 800573c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005740:	9105      	str	r1, [sp, #20]
 8005742:	6800      	ldr	r0, [r0, #0]
 8005744:	a902      	add	r1, sp, #8
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	f002 fb5e 	bl	8007e08 <_svfiprintf_r>
 800574c:	2200      	movs	r2, #0
 800574e:	9b02      	ldr	r3, [sp, #8]
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	b01c      	add	sp, #112	; 0x70
 8005754:	f85d eb04 	ldr.w	lr, [sp], #4
 8005758:	b003      	add	sp, #12
 800575a:	4770      	bx	lr
 800575c:	20000068 	.word	0x20000068
 8005760:	ffff0208 	.word	0xffff0208

08005764 <__sread>:
 8005764:	b510      	push	{r4, lr}
 8005766:	460c      	mov	r4, r1
 8005768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576c:	f000 f86c 	bl	8005848 <_read_r>
 8005770:	2800      	cmp	r0, #0
 8005772:	bfab      	itete	ge
 8005774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005776:	89a3      	ldrhlt	r3, [r4, #12]
 8005778:	181b      	addge	r3, r3, r0
 800577a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800577e:	bfac      	ite	ge
 8005780:	6563      	strge	r3, [r4, #84]	; 0x54
 8005782:	81a3      	strhlt	r3, [r4, #12]
 8005784:	bd10      	pop	{r4, pc}

08005786 <__swrite>:
 8005786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800578a:	461f      	mov	r7, r3
 800578c:	898b      	ldrh	r3, [r1, #12]
 800578e:	4605      	mov	r5, r0
 8005790:	05db      	lsls	r3, r3, #23
 8005792:	460c      	mov	r4, r1
 8005794:	4616      	mov	r6, r2
 8005796:	d505      	bpl.n	80057a4 <__swrite+0x1e>
 8005798:	2302      	movs	r3, #2
 800579a:	2200      	movs	r2, #0
 800579c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a0:	f000 f840 	bl	8005824 <_lseek_r>
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	4632      	mov	r2, r6
 80057a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ac:	81a3      	strh	r3, [r4, #12]
 80057ae:	4628      	mov	r0, r5
 80057b0:	463b      	mov	r3, r7
 80057b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057ba:	f000 b857 	b.w	800586c <_write_r>

080057be <__sseek>:
 80057be:	b510      	push	{r4, lr}
 80057c0:	460c      	mov	r4, r1
 80057c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c6:	f000 f82d 	bl	8005824 <_lseek_r>
 80057ca:	1c43      	adds	r3, r0, #1
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	bf15      	itete	ne
 80057d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80057d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057da:	81a3      	strheq	r3, [r4, #12]
 80057dc:	bf18      	it	ne
 80057de:	81a3      	strhne	r3, [r4, #12]
 80057e0:	bd10      	pop	{r4, pc}

080057e2 <__sclose>:
 80057e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e6:	f000 b80d 	b.w	8005804 <_close_r>

080057ea <memset>:
 80057ea:	4603      	mov	r3, r0
 80057ec:	4402      	add	r2, r0
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d100      	bne.n	80057f4 <memset+0xa>
 80057f2:	4770      	bx	lr
 80057f4:	f803 1b01 	strb.w	r1, [r3], #1
 80057f8:	e7f9      	b.n	80057ee <memset+0x4>
	...

080057fc <_localeconv_r>:
 80057fc:	4800      	ldr	r0, [pc, #0]	; (8005800 <_localeconv_r+0x4>)
 80057fe:	4770      	bx	lr
 8005800:	2000015c 	.word	0x2000015c

08005804 <_close_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	2300      	movs	r3, #0
 8005808:	4d05      	ldr	r5, [pc, #20]	; (8005820 <_close_r+0x1c>)
 800580a:	4604      	mov	r4, r0
 800580c:	4608      	mov	r0, r1
 800580e:	602b      	str	r3, [r5, #0]
 8005810:	f7fb fd4e 	bl	80012b0 <_close>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d102      	bne.n	800581e <_close_r+0x1a>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	b103      	cbz	r3, 800581e <_close_r+0x1a>
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	20000828 	.word	0x20000828

08005824 <_lseek_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	4604      	mov	r4, r0
 8005828:	4608      	mov	r0, r1
 800582a:	4611      	mov	r1, r2
 800582c:	2200      	movs	r2, #0
 800582e:	4d05      	ldr	r5, [pc, #20]	; (8005844 <_lseek_r+0x20>)
 8005830:	602a      	str	r2, [r5, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	f7fb fd60 	bl	80012f8 <_lseek>
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d102      	bne.n	8005842 <_lseek_r+0x1e>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	b103      	cbz	r3, 8005842 <_lseek_r+0x1e>
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	bd38      	pop	{r3, r4, r5, pc}
 8005844:	20000828 	.word	0x20000828

08005848 <_read_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4604      	mov	r4, r0
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	2200      	movs	r2, #0
 8005852:	4d05      	ldr	r5, [pc, #20]	; (8005868 <_read_r+0x20>)
 8005854:	602a      	str	r2, [r5, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	f7fb fcf1 	bl	800123e <_read>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d102      	bne.n	8005866 <_read_r+0x1e>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	b103      	cbz	r3, 8005866 <_read_r+0x1e>
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	20000828 	.word	0x20000828

0800586c <_write_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4604      	mov	r4, r0
 8005870:	4608      	mov	r0, r1
 8005872:	4611      	mov	r1, r2
 8005874:	2200      	movs	r2, #0
 8005876:	4d05      	ldr	r5, [pc, #20]	; (800588c <_write_r+0x20>)
 8005878:	602a      	str	r2, [r5, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	f7fb fcfc 	bl	8001278 <_write>
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	d102      	bne.n	800588a <_write_r+0x1e>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	b103      	cbz	r3, 800588a <_write_r+0x1e>
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	bd38      	pop	{r3, r4, r5, pc}
 800588c:	20000828 	.word	0x20000828

08005890 <__errno>:
 8005890:	4b01      	ldr	r3, [pc, #4]	; (8005898 <__errno+0x8>)
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	20000068 	.word	0x20000068

0800589c <__libc_init_array>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	2600      	movs	r6, #0
 80058a0:	4d0c      	ldr	r5, [pc, #48]	; (80058d4 <__libc_init_array+0x38>)
 80058a2:	4c0d      	ldr	r4, [pc, #52]	; (80058d8 <__libc_init_array+0x3c>)
 80058a4:	1b64      	subs	r4, r4, r5
 80058a6:	10a4      	asrs	r4, r4, #2
 80058a8:	42a6      	cmp	r6, r4
 80058aa:	d109      	bne.n	80058c0 <__libc_init_array+0x24>
 80058ac:	f005 fdd8 	bl	800b460 <_init>
 80058b0:	2600      	movs	r6, #0
 80058b2:	4d0a      	ldr	r5, [pc, #40]	; (80058dc <__libc_init_array+0x40>)
 80058b4:	4c0a      	ldr	r4, [pc, #40]	; (80058e0 <__libc_init_array+0x44>)
 80058b6:	1b64      	subs	r4, r4, r5
 80058b8:	10a4      	asrs	r4, r4, #2
 80058ba:	42a6      	cmp	r6, r4
 80058bc:	d105      	bne.n	80058ca <__libc_init_array+0x2e>
 80058be:	bd70      	pop	{r4, r5, r6, pc}
 80058c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c4:	4798      	blx	r3
 80058c6:	3601      	adds	r6, #1
 80058c8:	e7ee      	b.n	80058a8 <__libc_init_array+0xc>
 80058ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ce:	4798      	blx	r3
 80058d0:	3601      	adds	r6, #1
 80058d2:	e7f2      	b.n	80058ba <__libc_init_array+0x1e>
 80058d4:	0800bb28 	.word	0x0800bb28
 80058d8:	0800bb28 	.word	0x0800bb28
 80058dc:	0800bb28 	.word	0x0800bb28
 80058e0:	0800bb2c 	.word	0x0800bb2c

080058e4 <__retarget_lock_acquire_recursive>:
 80058e4:	4770      	bx	lr

080058e6 <__retarget_lock_release_recursive>:
 80058e6:	4770      	bx	lr

080058e8 <memchr>:
 80058e8:	4603      	mov	r3, r0
 80058ea:	b510      	push	{r4, lr}
 80058ec:	b2c9      	uxtb	r1, r1
 80058ee:	4402      	add	r2, r0
 80058f0:	4293      	cmp	r3, r2
 80058f2:	4618      	mov	r0, r3
 80058f4:	d101      	bne.n	80058fa <memchr+0x12>
 80058f6:	2000      	movs	r0, #0
 80058f8:	e003      	b.n	8005902 <memchr+0x1a>
 80058fa:	7804      	ldrb	r4, [r0, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	428c      	cmp	r4, r1
 8005900:	d1f6      	bne.n	80058f0 <memchr+0x8>
 8005902:	bd10      	pop	{r4, pc}

08005904 <nanf>:
 8005904:	4800      	ldr	r0, [pc, #0]	; (8005908 <nanf+0x4>)
 8005906:	4770      	bx	lr
 8005908:	7fc00000 	.word	0x7fc00000

0800590c <quorem>:
 800590c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005910:	6903      	ldr	r3, [r0, #16]
 8005912:	690c      	ldr	r4, [r1, #16]
 8005914:	4607      	mov	r7, r0
 8005916:	42a3      	cmp	r3, r4
 8005918:	db7f      	blt.n	8005a1a <quorem+0x10e>
 800591a:	3c01      	subs	r4, #1
 800591c:	f100 0514 	add.w	r5, r0, #20
 8005920:	f101 0814 	add.w	r8, r1, #20
 8005924:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800592e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005932:	3301      	adds	r3, #1
 8005934:	429a      	cmp	r2, r3
 8005936:	fbb2 f6f3 	udiv	r6, r2, r3
 800593a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800593e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005942:	d331      	bcc.n	80059a8 <quorem+0x9c>
 8005944:	f04f 0e00 	mov.w	lr, #0
 8005948:	4640      	mov	r0, r8
 800594a:	46ac      	mov	ip, r5
 800594c:	46f2      	mov	sl, lr
 800594e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005952:	b293      	uxth	r3, r2
 8005954:	fb06 e303 	mla	r3, r6, r3, lr
 8005958:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800595c:	0c1a      	lsrs	r2, r3, #16
 800595e:	b29b      	uxth	r3, r3
 8005960:	fb06 220e 	mla	r2, r6, lr, r2
 8005964:	ebaa 0303 	sub.w	r3, sl, r3
 8005968:	f8dc a000 	ldr.w	sl, [ip]
 800596c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005970:	fa1f fa8a 	uxth.w	sl, sl
 8005974:	4453      	add	r3, sl
 8005976:	f8dc a000 	ldr.w	sl, [ip]
 800597a:	b292      	uxth	r2, r2
 800597c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005984:	b29b      	uxth	r3, r3
 8005986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800598a:	4581      	cmp	r9, r0
 800598c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005990:	f84c 3b04 	str.w	r3, [ip], #4
 8005994:	d2db      	bcs.n	800594e <quorem+0x42>
 8005996:	f855 300b 	ldr.w	r3, [r5, fp]
 800599a:	b92b      	cbnz	r3, 80059a8 <quorem+0x9c>
 800599c:	9b01      	ldr	r3, [sp, #4]
 800599e:	3b04      	subs	r3, #4
 80059a0:	429d      	cmp	r5, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	d32d      	bcc.n	8005a02 <quorem+0xf6>
 80059a6:	613c      	str	r4, [r7, #16]
 80059a8:	4638      	mov	r0, r7
 80059aa:	f001 f9dd 	bl	8006d68 <__mcmp>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	db23      	blt.n	80059fa <quorem+0xee>
 80059b2:	4629      	mov	r1, r5
 80059b4:	2000      	movs	r0, #0
 80059b6:	3601      	adds	r6, #1
 80059b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80059bc:	f8d1 c000 	ldr.w	ip, [r1]
 80059c0:	b293      	uxth	r3, r2
 80059c2:	1ac3      	subs	r3, r0, r3
 80059c4:	0c12      	lsrs	r2, r2, #16
 80059c6:	fa1f f08c 	uxth.w	r0, ip
 80059ca:	4403      	add	r3, r0
 80059cc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80059d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059da:	45c1      	cmp	r9, r8
 80059dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80059e0:	f841 3b04 	str.w	r3, [r1], #4
 80059e4:	d2e8      	bcs.n	80059b8 <quorem+0xac>
 80059e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059ee:	b922      	cbnz	r2, 80059fa <quorem+0xee>
 80059f0:	3b04      	subs	r3, #4
 80059f2:	429d      	cmp	r5, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	d30a      	bcc.n	8005a0e <quorem+0x102>
 80059f8:	613c      	str	r4, [r7, #16]
 80059fa:	4630      	mov	r0, r6
 80059fc:	b003      	add	sp, #12
 80059fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	3b04      	subs	r3, #4
 8005a06:	2a00      	cmp	r2, #0
 8005a08:	d1cd      	bne.n	80059a6 <quorem+0x9a>
 8005a0a:	3c01      	subs	r4, #1
 8005a0c:	e7c8      	b.n	80059a0 <quorem+0x94>
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	3b04      	subs	r3, #4
 8005a12:	2a00      	cmp	r2, #0
 8005a14:	d1f0      	bne.n	80059f8 <quorem+0xec>
 8005a16:	3c01      	subs	r4, #1
 8005a18:	e7eb      	b.n	80059f2 <quorem+0xe6>
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	e7ee      	b.n	80059fc <quorem+0xf0>
	...

08005a20 <_dtoa_r>:
 8005a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a24:	4616      	mov	r6, r2
 8005a26:	461f      	mov	r7, r3
 8005a28:	69c4      	ldr	r4, [r0, #28]
 8005a2a:	b099      	sub	sp, #100	; 0x64
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005a32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005a36:	b974      	cbnz	r4, 8005a56 <_dtoa_r+0x36>
 8005a38:	2010      	movs	r0, #16
 8005a3a:	f000 fe1d 	bl	8006678 <malloc>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	61e8      	str	r0, [r5, #28]
 8005a42:	b920      	cbnz	r0, 8005a4e <_dtoa_r+0x2e>
 8005a44:	21ef      	movs	r1, #239	; 0xef
 8005a46:	4bac      	ldr	r3, [pc, #688]	; (8005cf8 <_dtoa_r+0x2d8>)
 8005a48:	48ac      	ldr	r0, [pc, #688]	; (8005cfc <_dtoa_r+0x2dc>)
 8005a4a:	f002 fbd5 	bl	80081f8 <__assert_func>
 8005a4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a52:	6004      	str	r4, [r0, #0]
 8005a54:	60c4      	str	r4, [r0, #12]
 8005a56:	69eb      	ldr	r3, [r5, #28]
 8005a58:	6819      	ldr	r1, [r3, #0]
 8005a5a:	b151      	cbz	r1, 8005a72 <_dtoa_r+0x52>
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4093      	lsls	r3, r2
 8005a62:	604a      	str	r2, [r1, #4]
 8005a64:	608b      	str	r3, [r1, #8]
 8005a66:	4628      	mov	r0, r5
 8005a68:	f000 fefa 	bl	8006860 <_Bfree>
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	69eb      	ldr	r3, [r5, #28]
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	1e3b      	subs	r3, r7, #0
 8005a74:	bfaf      	iteee	ge
 8005a76:	2300      	movge	r3, #0
 8005a78:	2201      	movlt	r2, #1
 8005a7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a7e:	9305      	strlt	r3, [sp, #20]
 8005a80:	bfa8      	it	ge
 8005a82:	f8c8 3000 	strge.w	r3, [r8]
 8005a86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005a8a:	4b9d      	ldr	r3, [pc, #628]	; (8005d00 <_dtoa_r+0x2e0>)
 8005a8c:	bfb8      	it	lt
 8005a8e:	f8c8 2000 	strlt.w	r2, [r8]
 8005a92:	ea33 0309 	bics.w	r3, r3, r9
 8005a96:	d119      	bne.n	8005acc <_dtoa_r+0xac>
 8005a98:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005aa4:	4333      	orrs	r3, r6
 8005aa6:	f000 8589 	beq.w	80065bc <_dtoa_r+0xb9c>
 8005aaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005aac:	b953      	cbnz	r3, 8005ac4 <_dtoa_r+0xa4>
 8005aae:	4b95      	ldr	r3, [pc, #596]	; (8005d04 <_dtoa_r+0x2e4>)
 8005ab0:	e023      	b.n	8005afa <_dtoa_r+0xda>
 8005ab2:	4b95      	ldr	r3, [pc, #596]	; (8005d08 <_dtoa_r+0x2e8>)
 8005ab4:	9303      	str	r3, [sp, #12]
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	9803      	ldr	r0, [sp, #12]
 8005abe:	b019      	add	sp, #100	; 0x64
 8005ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac4:	4b8f      	ldr	r3, [pc, #572]	; (8005d04 <_dtoa_r+0x2e4>)
 8005ac6:	9303      	str	r3, [sp, #12]
 8005ac8:	3303      	adds	r3, #3
 8005aca:	e7f5      	b.n	8005ab8 <_dtoa_r+0x98>
 8005acc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005ad0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005ad4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2300      	movs	r3, #0
 8005adc:	f7fb f818 	bl	8000b10 <__aeabi_dcmpeq>
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	b160      	cbz	r0, 8005afe <_dtoa_r+0xde>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8562 	beq.w	80065b6 <_dtoa_r+0xb96>
 8005af2:	4b86      	ldr	r3, [pc, #536]	; (8005d0c <_dtoa_r+0x2ec>)
 8005af4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	9303      	str	r3, [sp, #12]
 8005afc:	e7de      	b.n	8005abc <_dtoa_r+0x9c>
 8005afe:	ab16      	add	r3, sp, #88	; 0x58
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	ab17      	add	r3, sp, #92	; 0x5c
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	4628      	mov	r0, r5
 8005b08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b0c:	f001 fa3c 	bl	8006f88 <__d2b>
 8005b10:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b14:	4682      	mov	sl, r0
 8005b16:	2c00      	cmp	r4, #0
 8005b18:	d07e      	beq.n	8005c18 <_dtoa_r+0x1f8>
 8005b1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b20:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b28:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005b2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005b30:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005b34:	4619      	mov	r1, r3
 8005b36:	2200      	movs	r2, #0
 8005b38:	4b75      	ldr	r3, [pc, #468]	; (8005d10 <_dtoa_r+0x2f0>)
 8005b3a:	f7fa fbc9 	bl	80002d0 <__aeabi_dsub>
 8005b3e:	a368      	add	r3, pc, #416	; (adr r3, 8005ce0 <_dtoa_r+0x2c0>)
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	f7fa fd7c 	bl	8000640 <__aeabi_dmul>
 8005b48:	a367      	add	r3, pc, #412	; (adr r3, 8005ce8 <_dtoa_r+0x2c8>)
 8005b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4e:	f7fa fbc1 	bl	80002d4 <__adddf3>
 8005b52:	4606      	mov	r6, r0
 8005b54:	4620      	mov	r0, r4
 8005b56:	460f      	mov	r7, r1
 8005b58:	f7fa fd08 	bl	800056c <__aeabi_i2d>
 8005b5c:	a364      	add	r3, pc, #400	; (adr r3, 8005cf0 <_dtoa_r+0x2d0>)
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f7fa fd6d 	bl	8000640 <__aeabi_dmul>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	4639      	mov	r1, r7
 8005b6e:	f7fa fbb1 	bl	80002d4 <__adddf3>
 8005b72:	4606      	mov	r6, r0
 8005b74:	460f      	mov	r7, r1
 8005b76:	f7fb f813 	bl	8000ba0 <__aeabi_d2iz>
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	4683      	mov	fp, r0
 8005b7e:	2300      	movs	r3, #0
 8005b80:	4630      	mov	r0, r6
 8005b82:	4639      	mov	r1, r7
 8005b84:	f7fa ffce 	bl	8000b24 <__aeabi_dcmplt>
 8005b88:	b148      	cbz	r0, 8005b9e <_dtoa_r+0x17e>
 8005b8a:	4658      	mov	r0, fp
 8005b8c:	f7fa fcee 	bl	800056c <__aeabi_i2d>
 8005b90:	4632      	mov	r2, r6
 8005b92:	463b      	mov	r3, r7
 8005b94:	f7fa ffbc 	bl	8000b10 <__aeabi_dcmpeq>
 8005b98:	b908      	cbnz	r0, 8005b9e <_dtoa_r+0x17e>
 8005b9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b9e:	f1bb 0f16 	cmp.w	fp, #22
 8005ba2:	d857      	bhi.n	8005c54 <_dtoa_r+0x234>
 8005ba4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ba8:	4b5a      	ldr	r3, [pc, #360]	; (8005d14 <_dtoa_r+0x2f4>)
 8005baa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	f7fa ffb7 	bl	8000b24 <__aeabi_dcmplt>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d04e      	beq.n	8005c58 <_dtoa_r+0x238>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005bc4:	1b1b      	subs	r3, r3, r4
 8005bc6:	1e5a      	subs	r2, r3, #1
 8005bc8:	bf46      	itte	mi
 8005bca:	f1c3 0901 	rsbmi	r9, r3, #1
 8005bce:	2300      	movmi	r3, #0
 8005bd0:	f04f 0900 	movpl.w	r9, #0
 8005bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8005bd6:	bf48      	it	mi
 8005bd8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005bda:	f1bb 0f00 	cmp.w	fp, #0
 8005bde:	db3d      	blt.n	8005c5c <_dtoa_r+0x23c>
 8005be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005be6:	445b      	add	r3, fp
 8005be8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bea:	2300      	movs	r3, #0
 8005bec:	930a      	str	r3, [sp, #40]	; 0x28
 8005bee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bf0:	2b09      	cmp	r3, #9
 8005bf2:	d867      	bhi.n	8005cc4 <_dtoa_r+0x2a4>
 8005bf4:	2b05      	cmp	r3, #5
 8005bf6:	bfc4      	itt	gt
 8005bf8:	3b04      	subgt	r3, #4
 8005bfa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bfe:	bfc8      	it	gt
 8005c00:	2400      	movgt	r4, #0
 8005c02:	f1a3 0302 	sub.w	r3, r3, #2
 8005c06:	bfd8      	it	le
 8005c08:	2401      	movle	r4, #1
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	f200 8086 	bhi.w	8005d1c <_dtoa_r+0x2fc>
 8005c10:	e8df f003 	tbb	[pc, r3]
 8005c14:	5637392c 	.word	0x5637392c
 8005c18:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005c1c:	441c      	add	r4, r3
 8005c1e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	bfc1      	itttt	gt
 8005c26:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c2a:	fa09 f903 	lslgt.w	r9, r9, r3
 8005c2e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005c32:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005c36:	bfd6      	itet	le
 8005c38:	f1c3 0320 	rsble	r3, r3, #32
 8005c3c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005c40:	fa06 f003 	lslle.w	r0, r6, r3
 8005c44:	f7fa fc82 	bl	800054c <__aeabi_ui2d>
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005c4e:	3c01      	subs	r4, #1
 8005c50:	9213      	str	r2, [sp, #76]	; 0x4c
 8005c52:	e76f      	b.n	8005b34 <_dtoa_r+0x114>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e7b3      	b.n	8005bc0 <_dtoa_r+0x1a0>
 8005c58:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c5a:	e7b2      	b.n	8005bc2 <_dtoa_r+0x1a2>
 8005c5c:	f1cb 0300 	rsb	r3, fp, #0
 8005c60:	930a      	str	r3, [sp, #40]	; 0x28
 8005c62:	2300      	movs	r3, #0
 8005c64:	eba9 090b 	sub.w	r9, r9, fp
 8005c68:	930e      	str	r3, [sp, #56]	; 0x38
 8005c6a:	e7c0      	b.n	8005bee <_dtoa_r+0x1ce>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	dc55      	bgt.n	8005d22 <_dtoa_r+0x302>
 8005c76:	2301      	movs	r3, #1
 8005c78:	461a      	mov	r2, r3
 8005c7a:	9306      	str	r3, [sp, #24]
 8005c7c:	9308      	str	r3, [sp, #32]
 8005c7e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005c80:	e00b      	b.n	8005c9a <_dtoa_r+0x27a>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e7f3      	b.n	8005c6e <_dtoa_r+0x24e>
 8005c86:	2300      	movs	r3, #0
 8005c88:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c8c:	445b      	add	r3, fp
 8005c8e:	9306      	str	r3, [sp, #24]
 8005c90:	3301      	adds	r3, #1
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	9308      	str	r3, [sp, #32]
 8005c96:	bfb8      	it	lt
 8005c98:	2301      	movlt	r3, #1
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	2204      	movs	r2, #4
 8005c9e:	69e8      	ldr	r0, [r5, #28]
 8005ca0:	f102 0614 	add.w	r6, r2, #20
 8005ca4:	429e      	cmp	r6, r3
 8005ca6:	d940      	bls.n	8005d2a <_dtoa_r+0x30a>
 8005ca8:	6041      	str	r1, [r0, #4]
 8005caa:	4628      	mov	r0, r5
 8005cac:	f000 fd98 	bl	80067e0 <_Balloc>
 8005cb0:	9003      	str	r0, [sp, #12]
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d13c      	bne.n	8005d30 <_dtoa_r+0x310>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	f240 11af 	movw	r1, #431	; 0x1af
 8005cbc:	4b16      	ldr	r3, [pc, #88]	; (8005d18 <_dtoa_r+0x2f8>)
 8005cbe:	e6c3      	b.n	8005a48 <_dtoa_r+0x28>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e7e1      	b.n	8005c88 <_dtoa_r+0x268>
 8005cc4:	2401      	movs	r4, #1
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005cca:	9322      	str	r3, [sp, #136]	; 0x88
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	9306      	str	r3, [sp, #24]
 8005cd4:	9308      	str	r3, [sp, #32]
 8005cd6:	2312      	movs	r3, #18
 8005cd8:	e7d1      	b.n	8005c7e <_dtoa_r+0x25e>
 8005cda:	bf00      	nop
 8005cdc:	f3af 8000 	nop.w
 8005ce0:	636f4361 	.word	0x636f4361
 8005ce4:	3fd287a7 	.word	0x3fd287a7
 8005ce8:	8b60c8b3 	.word	0x8b60c8b3
 8005cec:	3fc68a28 	.word	0x3fc68a28
 8005cf0:	509f79fb 	.word	0x509f79fb
 8005cf4:	3fd34413 	.word	0x3fd34413
 8005cf8:	0800b5f9 	.word	0x0800b5f9
 8005cfc:	0800b610 	.word	0x0800b610
 8005d00:	7ff00000 	.word	0x7ff00000
 8005d04:	0800b5f5 	.word	0x0800b5f5
 8005d08:	0800b5ec 	.word	0x0800b5ec
 8005d0c:	0800b5c4 	.word	0x0800b5c4
 8005d10:	3ff80000 	.word	0x3ff80000
 8005d14:	0800b700 	.word	0x0800b700
 8005d18:	0800b668 	.word	0x0800b668
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d20:	e7d4      	b.n	8005ccc <_dtoa_r+0x2ac>
 8005d22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d24:	9306      	str	r3, [sp, #24]
 8005d26:	9308      	str	r3, [sp, #32]
 8005d28:	e7b7      	b.n	8005c9a <_dtoa_r+0x27a>
 8005d2a:	3101      	adds	r1, #1
 8005d2c:	0052      	lsls	r2, r2, #1
 8005d2e:	e7b7      	b.n	8005ca0 <_dtoa_r+0x280>
 8005d30:	69eb      	ldr	r3, [r5, #28]
 8005d32:	9a03      	ldr	r2, [sp, #12]
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	9b08      	ldr	r3, [sp, #32]
 8005d38:	2b0e      	cmp	r3, #14
 8005d3a:	f200 80a8 	bhi.w	8005e8e <_dtoa_r+0x46e>
 8005d3e:	2c00      	cmp	r4, #0
 8005d40:	f000 80a5 	beq.w	8005e8e <_dtoa_r+0x46e>
 8005d44:	f1bb 0f00 	cmp.w	fp, #0
 8005d48:	dd34      	ble.n	8005db4 <_dtoa_r+0x394>
 8005d4a:	4b9a      	ldr	r3, [pc, #616]	; (8005fb4 <_dtoa_r+0x594>)
 8005d4c:	f00b 020f 	and.w	r2, fp, #15
 8005d50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005d58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d60:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005d64:	d016      	beq.n	8005d94 <_dtoa_r+0x374>
 8005d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d6a:	4b93      	ldr	r3, [pc, #588]	; (8005fb8 <_dtoa_r+0x598>)
 8005d6c:	2703      	movs	r7, #3
 8005d6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d72:	f7fa fd8f 	bl	8000894 <__aeabi_ddiv>
 8005d76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d7a:	f004 040f 	and.w	r4, r4, #15
 8005d7e:	4e8e      	ldr	r6, [pc, #568]	; (8005fb8 <_dtoa_r+0x598>)
 8005d80:	b954      	cbnz	r4, 8005d98 <_dtoa_r+0x378>
 8005d82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d8a:	f7fa fd83 	bl	8000894 <__aeabi_ddiv>
 8005d8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d92:	e029      	b.n	8005de8 <_dtoa_r+0x3c8>
 8005d94:	2702      	movs	r7, #2
 8005d96:	e7f2      	b.n	8005d7e <_dtoa_r+0x35e>
 8005d98:	07e1      	lsls	r1, r4, #31
 8005d9a:	d508      	bpl.n	8005dae <_dtoa_r+0x38e>
 8005d9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005da0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005da4:	f7fa fc4c 	bl	8000640 <__aeabi_dmul>
 8005da8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dac:	3701      	adds	r7, #1
 8005dae:	1064      	asrs	r4, r4, #1
 8005db0:	3608      	adds	r6, #8
 8005db2:	e7e5      	b.n	8005d80 <_dtoa_r+0x360>
 8005db4:	f000 80a5 	beq.w	8005f02 <_dtoa_r+0x4e2>
 8005db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dbc:	f1cb 0400 	rsb	r4, fp, #0
 8005dc0:	4b7c      	ldr	r3, [pc, #496]	; (8005fb4 <_dtoa_r+0x594>)
 8005dc2:	f004 020f 	and.w	r2, r4, #15
 8005dc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f7fa fc37 	bl	8000640 <__aeabi_dmul>
 8005dd2:	2702      	movs	r7, #2
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dda:	4e77      	ldr	r6, [pc, #476]	; (8005fb8 <_dtoa_r+0x598>)
 8005ddc:	1124      	asrs	r4, r4, #4
 8005dde:	2c00      	cmp	r4, #0
 8005de0:	f040 8084 	bne.w	8005eec <_dtoa_r+0x4cc>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1d2      	bne.n	8005d8e <_dtoa_r+0x36e>
 8005de8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005dec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005df0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 8087 	beq.w	8005f06 <_dtoa_r+0x4e6>
 8005df8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	4b6f      	ldr	r3, [pc, #444]	; (8005fbc <_dtoa_r+0x59c>)
 8005e00:	f7fa fe90 	bl	8000b24 <__aeabi_dcmplt>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d07e      	beq.n	8005f06 <_dtoa_r+0x4e6>
 8005e08:	9b08      	ldr	r3, [sp, #32]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d07b      	beq.n	8005f06 <_dtoa_r+0x4e6>
 8005e0e:	9b06      	ldr	r3, [sp, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	dd38      	ble.n	8005e86 <_dtoa_r+0x466>
 8005e14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e18:	2200      	movs	r2, #0
 8005e1a:	4b69      	ldr	r3, [pc, #420]	; (8005fc0 <_dtoa_r+0x5a0>)
 8005e1c:	f7fa fc10 	bl	8000640 <__aeabi_dmul>
 8005e20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e24:	9c06      	ldr	r4, [sp, #24]
 8005e26:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005e2a:	3701      	adds	r7, #1
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f7fa fb9d 	bl	800056c <__aeabi_i2d>
 8005e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e36:	f7fa fc03 	bl	8000640 <__aeabi_dmul>
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	4b61      	ldr	r3, [pc, #388]	; (8005fc4 <_dtoa_r+0x5a4>)
 8005e3e:	f7fa fa49 	bl	80002d4 <__adddf3>
 8005e42:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005e46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e4a:	9611      	str	r6, [sp, #68]	; 0x44
 8005e4c:	2c00      	cmp	r4, #0
 8005e4e:	d15d      	bne.n	8005f0c <_dtoa_r+0x4ec>
 8005e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e54:	2200      	movs	r2, #0
 8005e56:	4b5c      	ldr	r3, [pc, #368]	; (8005fc8 <_dtoa_r+0x5a8>)
 8005e58:	f7fa fa3a 	bl	80002d0 <__aeabi_dsub>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e64:	4633      	mov	r3, r6
 8005e66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e68:	f7fa fe7a 	bl	8000b60 <__aeabi_dcmpgt>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	f040 8295 	bne.w	800639c <_dtoa_r+0x97c>
 8005e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e78:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005e7c:	f7fa fe52 	bl	8000b24 <__aeabi_dcmplt>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	f040 8289 	bne.w	8006398 <_dtoa_r+0x978>
 8005e86:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005e8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f2c0 8151 	blt.w	8006138 <_dtoa_r+0x718>
 8005e96:	f1bb 0f0e 	cmp.w	fp, #14
 8005e9a:	f300 814d 	bgt.w	8006138 <_dtoa_r+0x718>
 8005e9e:	4b45      	ldr	r3, [pc, #276]	; (8005fb4 <_dtoa_r+0x594>)
 8005ea0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ea4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ea8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005eac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f280 80da 	bge.w	8006068 <_dtoa_r+0x648>
 8005eb4:	9b08      	ldr	r3, [sp, #32]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f300 80d6 	bgt.w	8006068 <_dtoa_r+0x648>
 8005ebc:	f040 826b 	bne.w	8006396 <_dtoa_r+0x976>
 8005ec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	4b40      	ldr	r3, [pc, #256]	; (8005fc8 <_dtoa_r+0x5a8>)
 8005ec8:	f7fa fbba 	bl	8000640 <__aeabi_dmul>
 8005ecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ed0:	f7fa fe3c 	bl	8000b4c <__aeabi_dcmpge>
 8005ed4:	9c08      	ldr	r4, [sp, #32]
 8005ed6:	4626      	mov	r6, r4
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	f040 8241 	bne.w	8006360 <_dtoa_r+0x940>
 8005ede:	2331      	movs	r3, #49	; 0x31
 8005ee0:	9f03      	ldr	r7, [sp, #12]
 8005ee2:	f10b 0b01 	add.w	fp, fp, #1
 8005ee6:	f807 3b01 	strb.w	r3, [r7], #1
 8005eea:	e23d      	b.n	8006368 <_dtoa_r+0x948>
 8005eec:	07e2      	lsls	r2, r4, #31
 8005eee:	d505      	bpl.n	8005efc <_dtoa_r+0x4dc>
 8005ef0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ef4:	f7fa fba4 	bl	8000640 <__aeabi_dmul>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	3701      	adds	r7, #1
 8005efc:	1064      	asrs	r4, r4, #1
 8005efe:	3608      	adds	r6, #8
 8005f00:	e76d      	b.n	8005dde <_dtoa_r+0x3be>
 8005f02:	2702      	movs	r7, #2
 8005f04:	e770      	b.n	8005de8 <_dtoa_r+0x3c8>
 8005f06:	46d8      	mov	r8, fp
 8005f08:	9c08      	ldr	r4, [sp, #32]
 8005f0a:	e78f      	b.n	8005e2c <_dtoa_r+0x40c>
 8005f0c:	9903      	ldr	r1, [sp, #12]
 8005f0e:	4b29      	ldr	r3, [pc, #164]	; (8005fb4 <_dtoa_r+0x594>)
 8005f10:	4421      	add	r1, r4
 8005f12:	9112      	str	r1, [sp, #72]	; 0x48
 8005f14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f1a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005f1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f22:	2900      	cmp	r1, #0
 8005f24:	d054      	beq.n	8005fd0 <_dtoa_r+0x5b0>
 8005f26:	2000      	movs	r0, #0
 8005f28:	4928      	ldr	r1, [pc, #160]	; (8005fcc <_dtoa_r+0x5ac>)
 8005f2a:	f7fa fcb3 	bl	8000894 <__aeabi_ddiv>
 8005f2e:	463b      	mov	r3, r7
 8005f30:	4632      	mov	r2, r6
 8005f32:	f7fa f9cd 	bl	80002d0 <__aeabi_dsub>
 8005f36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f3a:	9f03      	ldr	r7, [sp, #12]
 8005f3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f40:	f7fa fe2e 	bl	8000ba0 <__aeabi_d2iz>
 8005f44:	4604      	mov	r4, r0
 8005f46:	f7fa fb11 	bl	800056c <__aeabi_i2d>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f52:	f7fa f9bd 	bl	80002d0 <__aeabi_dsub>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	3430      	adds	r4, #48	; 0x30
 8005f5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f64:	f807 4b01 	strb.w	r4, [r7], #1
 8005f68:	f7fa fddc 	bl	8000b24 <__aeabi_dcmplt>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d173      	bne.n	8006058 <_dtoa_r+0x638>
 8005f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f74:	2000      	movs	r0, #0
 8005f76:	4911      	ldr	r1, [pc, #68]	; (8005fbc <_dtoa_r+0x59c>)
 8005f78:	f7fa f9aa 	bl	80002d0 <__aeabi_dsub>
 8005f7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f80:	f7fa fdd0 	bl	8000b24 <__aeabi_dcmplt>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	f040 80b6 	bne.w	80060f6 <_dtoa_r+0x6d6>
 8005f8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f8c:	429f      	cmp	r7, r3
 8005f8e:	f43f af7a 	beq.w	8005e86 <_dtoa_r+0x466>
 8005f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f96:	2200      	movs	r2, #0
 8005f98:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <_dtoa_r+0x5a0>)
 8005f9a:	f7fa fb51 	bl	8000640 <__aeabi_dmul>
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fa8:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <_dtoa_r+0x5a0>)
 8005faa:	f7fa fb49 	bl	8000640 <__aeabi_dmul>
 8005fae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fb2:	e7c3      	b.n	8005f3c <_dtoa_r+0x51c>
 8005fb4:	0800b700 	.word	0x0800b700
 8005fb8:	0800b6d8 	.word	0x0800b6d8
 8005fbc:	3ff00000 	.word	0x3ff00000
 8005fc0:	40240000 	.word	0x40240000
 8005fc4:	401c0000 	.word	0x401c0000
 8005fc8:	40140000 	.word	0x40140000
 8005fcc:	3fe00000 	.word	0x3fe00000
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	f7fa fb34 	bl	8000640 <__aeabi_dmul>
 8005fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fda:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fde:	9c03      	ldr	r4, [sp, #12]
 8005fe0:	9314      	str	r3, [sp, #80]	; 0x50
 8005fe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fe6:	f7fa fddb 	bl	8000ba0 <__aeabi_d2iz>
 8005fea:	9015      	str	r0, [sp, #84]	; 0x54
 8005fec:	f7fa fabe 	bl	800056c <__aeabi_i2d>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ff8:	f7fa f96a 	bl	80002d0 <__aeabi_dsub>
 8005ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ffe:	4606      	mov	r6, r0
 8006000:	3330      	adds	r3, #48	; 0x30
 8006002:	f804 3b01 	strb.w	r3, [r4], #1
 8006006:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006008:	460f      	mov	r7, r1
 800600a:	429c      	cmp	r4, r3
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	d124      	bne.n	800605c <_dtoa_r+0x63c>
 8006012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006016:	4baf      	ldr	r3, [pc, #700]	; (80062d4 <_dtoa_r+0x8b4>)
 8006018:	f7fa f95c 	bl	80002d4 <__adddf3>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4630      	mov	r0, r6
 8006022:	4639      	mov	r1, r7
 8006024:	f7fa fd9c 	bl	8000b60 <__aeabi_dcmpgt>
 8006028:	2800      	cmp	r0, #0
 800602a:	d163      	bne.n	80060f4 <_dtoa_r+0x6d4>
 800602c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006030:	2000      	movs	r0, #0
 8006032:	49a8      	ldr	r1, [pc, #672]	; (80062d4 <_dtoa_r+0x8b4>)
 8006034:	f7fa f94c 	bl	80002d0 <__aeabi_dsub>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4630      	mov	r0, r6
 800603e:	4639      	mov	r1, r7
 8006040:	f7fa fd70 	bl	8000b24 <__aeabi_dcmplt>
 8006044:	2800      	cmp	r0, #0
 8006046:	f43f af1e 	beq.w	8005e86 <_dtoa_r+0x466>
 800604a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800604c:	1e7b      	subs	r3, r7, #1
 800604e:	9314      	str	r3, [sp, #80]	; 0x50
 8006050:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006054:	2b30      	cmp	r3, #48	; 0x30
 8006056:	d0f8      	beq.n	800604a <_dtoa_r+0x62a>
 8006058:	46c3      	mov	fp, r8
 800605a:	e03b      	b.n	80060d4 <_dtoa_r+0x6b4>
 800605c:	4b9e      	ldr	r3, [pc, #632]	; (80062d8 <_dtoa_r+0x8b8>)
 800605e:	f7fa faef 	bl	8000640 <__aeabi_dmul>
 8006062:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006066:	e7bc      	b.n	8005fe2 <_dtoa_r+0x5c2>
 8006068:	9f03      	ldr	r7, [sp, #12]
 800606a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800606e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006072:	4640      	mov	r0, r8
 8006074:	4649      	mov	r1, r9
 8006076:	f7fa fc0d 	bl	8000894 <__aeabi_ddiv>
 800607a:	f7fa fd91 	bl	8000ba0 <__aeabi_d2iz>
 800607e:	4604      	mov	r4, r0
 8006080:	f7fa fa74 	bl	800056c <__aeabi_i2d>
 8006084:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006088:	f7fa fada 	bl	8000640 <__aeabi_dmul>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4640      	mov	r0, r8
 8006092:	4649      	mov	r1, r9
 8006094:	f7fa f91c 	bl	80002d0 <__aeabi_dsub>
 8006098:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800609c:	f807 6b01 	strb.w	r6, [r7], #1
 80060a0:	9e03      	ldr	r6, [sp, #12]
 80060a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80060a6:	1bbe      	subs	r6, r7, r6
 80060a8:	45b4      	cmp	ip, r6
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	d136      	bne.n	800611e <_dtoa_r+0x6fe>
 80060b0:	f7fa f910 	bl	80002d4 <__adddf3>
 80060b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060b8:	4680      	mov	r8, r0
 80060ba:	4689      	mov	r9, r1
 80060bc:	f7fa fd50 	bl	8000b60 <__aeabi_dcmpgt>
 80060c0:	bb58      	cbnz	r0, 800611a <_dtoa_r+0x6fa>
 80060c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060c6:	4640      	mov	r0, r8
 80060c8:	4649      	mov	r1, r9
 80060ca:	f7fa fd21 	bl	8000b10 <__aeabi_dcmpeq>
 80060ce:	b108      	cbz	r0, 80060d4 <_dtoa_r+0x6b4>
 80060d0:	07e3      	lsls	r3, r4, #31
 80060d2:	d422      	bmi.n	800611a <_dtoa_r+0x6fa>
 80060d4:	4651      	mov	r1, sl
 80060d6:	4628      	mov	r0, r5
 80060d8:	f000 fbc2 	bl	8006860 <_Bfree>
 80060dc:	2300      	movs	r3, #0
 80060de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060e0:	703b      	strb	r3, [r7, #0]
 80060e2:	f10b 0301 	add.w	r3, fp, #1
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f43f ace6 	beq.w	8005abc <_dtoa_r+0x9c>
 80060f0:	601f      	str	r7, [r3, #0]
 80060f2:	e4e3      	b.n	8005abc <_dtoa_r+0x9c>
 80060f4:	4627      	mov	r7, r4
 80060f6:	463b      	mov	r3, r7
 80060f8:	461f      	mov	r7, r3
 80060fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060fe:	2a39      	cmp	r2, #57	; 0x39
 8006100:	d107      	bne.n	8006112 <_dtoa_r+0x6f2>
 8006102:	9a03      	ldr	r2, [sp, #12]
 8006104:	429a      	cmp	r2, r3
 8006106:	d1f7      	bne.n	80060f8 <_dtoa_r+0x6d8>
 8006108:	2230      	movs	r2, #48	; 0x30
 800610a:	9903      	ldr	r1, [sp, #12]
 800610c:	f108 0801 	add.w	r8, r8, #1
 8006110:	700a      	strb	r2, [r1, #0]
 8006112:	781a      	ldrb	r2, [r3, #0]
 8006114:	3201      	adds	r2, #1
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	e79e      	b.n	8006058 <_dtoa_r+0x638>
 800611a:	46d8      	mov	r8, fp
 800611c:	e7eb      	b.n	80060f6 <_dtoa_r+0x6d6>
 800611e:	2200      	movs	r2, #0
 8006120:	4b6d      	ldr	r3, [pc, #436]	; (80062d8 <_dtoa_r+0x8b8>)
 8006122:	f7fa fa8d 	bl	8000640 <__aeabi_dmul>
 8006126:	2200      	movs	r2, #0
 8006128:	2300      	movs	r3, #0
 800612a:	4680      	mov	r8, r0
 800612c:	4689      	mov	r9, r1
 800612e:	f7fa fcef 	bl	8000b10 <__aeabi_dcmpeq>
 8006132:	2800      	cmp	r0, #0
 8006134:	d09b      	beq.n	800606e <_dtoa_r+0x64e>
 8006136:	e7cd      	b.n	80060d4 <_dtoa_r+0x6b4>
 8006138:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800613a:	2a00      	cmp	r2, #0
 800613c:	f000 80c4 	beq.w	80062c8 <_dtoa_r+0x8a8>
 8006140:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006142:	2a01      	cmp	r2, #1
 8006144:	f300 80a8 	bgt.w	8006298 <_dtoa_r+0x878>
 8006148:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800614a:	2a00      	cmp	r2, #0
 800614c:	f000 80a0 	beq.w	8006290 <_dtoa_r+0x870>
 8006150:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006154:	464f      	mov	r7, r9
 8006156:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800615a:	2101      	movs	r1, #1
 800615c:	441a      	add	r2, r3
 800615e:	4628      	mov	r0, r5
 8006160:	4499      	add	r9, r3
 8006162:	9209      	str	r2, [sp, #36]	; 0x24
 8006164:	f000 fc7c 	bl	8006a60 <__i2b>
 8006168:	4606      	mov	r6, r0
 800616a:	b15f      	cbz	r7, 8006184 <_dtoa_r+0x764>
 800616c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616e:	2b00      	cmp	r3, #0
 8006170:	dd08      	ble.n	8006184 <_dtoa_r+0x764>
 8006172:	42bb      	cmp	r3, r7
 8006174:	bfa8      	it	ge
 8006176:	463b      	movge	r3, r7
 8006178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800617a:	eba9 0903 	sub.w	r9, r9, r3
 800617e:	1aff      	subs	r7, r7, r3
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	9309      	str	r3, [sp, #36]	; 0x24
 8006184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006186:	b1f3      	cbz	r3, 80061c6 <_dtoa_r+0x7a6>
 8006188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 80a0 	beq.w	80062d0 <_dtoa_r+0x8b0>
 8006190:	2c00      	cmp	r4, #0
 8006192:	dd10      	ble.n	80061b6 <_dtoa_r+0x796>
 8006194:	4631      	mov	r1, r6
 8006196:	4622      	mov	r2, r4
 8006198:	4628      	mov	r0, r5
 800619a:	f000 fd1f 	bl	8006bdc <__pow5mult>
 800619e:	4652      	mov	r2, sl
 80061a0:	4601      	mov	r1, r0
 80061a2:	4606      	mov	r6, r0
 80061a4:	4628      	mov	r0, r5
 80061a6:	f000 fc71 	bl	8006a8c <__multiply>
 80061aa:	4680      	mov	r8, r0
 80061ac:	4651      	mov	r1, sl
 80061ae:	4628      	mov	r0, r5
 80061b0:	f000 fb56 	bl	8006860 <_Bfree>
 80061b4:	46c2      	mov	sl, r8
 80061b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b8:	1b1a      	subs	r2, r3, r4
 80061ba:	d004      	beq.n	80061c6 <_dtoa_r+0x7a6>
 80061bc:	4651      	mov	r1, sl
 80061be:	4628      	mov	r0, r5
 80061c0:	f000 fd0c 	bl	8006bdc <__pow5mult>
 80061c4:	4682      	mov	sl, r0
 80061c6:	2101      	movs	r1, #1
 80061c8:	4628      	mov	r0, r5
 80061ca:	f000 fc49 	bl	8006a60 <__i2b>
 80061ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061d0:	4604      	mov	r4, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f340 8082 	ble.w	80062dc <_dtoa_r+0x8bc>
 80061d8:	461a      	mov	r2, r3
 80061da:	4601      	mov	r1, r0
 80061dc:	4628      	mov	r0, r5
 80061de:	f000 fcfd 	bl	8006bdc <__pow5mult>
 80061e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061e4:	4604      	mov	r4, r0
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	dd7b      	ble.n	80062e2 <_dtoa_r+0x8c2>
 80061ea:	f04f 0800 	mov.w	r8, #0
 80061ee:	6923      	ldr	r3, [r4, #16]
 80061f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061f4:	6918      	ldr	r0, [r3, #16]
 80061f6:	f000 fbe5 	bl	80069c4 <__hi0bits>
 80061fa:	f1c0 0020 	rsb	r0, r0, #32
 80061fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006200:	4418      	add	r0, r3
 8006202:	f010 001f 	ands.w	r0, r0, #31
 8006206:	f000 8092 	beq.w	800632e <_dtoa_r+0x90e>
 800620a:	f1c0 0320 	rsb	r3, r0, #32
 800620e:	2b04      	cmp	r3, #4
 8006210:	f340 8085 	ble.w	800631e <_dtoa_r+0x8fe>
 8006214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006216:	f1c0 001c 	rsb	r0, r0, #28
 800621a:	4403      	add	r3, r0
 800621c:	4481      	add	r9, r0
 800621e:	4407      	add	r7, r0
 8006220:	9309      	str	r3, [sp, #36]	; 0x24
 8006222:	f1b9 0f00 	cmp.w	r9, #0
 8006226:	dd05      	ble.n	8006234 <_dtoa_r+0x814>
 8006228:	4651      	mov	r1, sl
 800622a:	464a      	mov	r2, r9
 800622c:	4628      	mov	r0, r5
 800622e:	f000 fd2f 	bl	8006c90 <__lshift>
 8006232:	4682      	mov	sl, r0
 8006234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006236:	2b00      	cmp	r3, #0
 8006238:	dd05      	ble.n	8006246 <_dtoa_r+0x826>
 800623a:	4621      	mov	r1, r4
 800623c:	461a      	mov	r2, r3
 800623e:	4628      	mov	r0, r5
 8006240:	f000 fd26 	bl	8006c90 <__lshift>
 8006244:	4604      	mov	r4, r0
 8006246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d072      	beq.n	8006332 <_dtoa_r+0x912>
 800624c:	4621      	mov	r1, r4
 800624e:	4650      	mov	r0, sl
 8006250:	f000 fd8a 	bl	8006d68 <__mcmp>
 8006254:	2800      	cmp	r0, #0
 8006256:	da6c      	bge.n	8006332 <_dtoa_r+0x912>
 8006258:	2300      	movs	r3, #0
 800625a:	4651      	mov	r1, sl
 800625c:	220a      	movs	r2, #10
 800625e:	4628      	mov	r0, r5
 8006260:	f000 fb20 	bl	80068a4 <__multadd>
 8006264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006266:	4682      	mov	sl, r0
 8006268:	f10b 3bff 	add.w	fp, fp, #4294967295
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 81ac 	beq.w	80065ca <_dtoa_r+0xbaa>
 8006272:	2300      	movs	r3, #0
 8006274:	4631      	mov	r1, r6
 8006276:	220a      	movs	r2, #10
 8006278:	4628      	mov	r0, r5
 800627a:	f000 fb13 	bl	80068a4 <__multadd>
 800627e:	9b06      	ldr	r3, [sp, #24]
 8006280:	4606      	mov	r6, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	f300 8093 	bgt.w	80063ae <_dtoa_r+0x98e>
 8006288:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800628a:	2b02      	cmp	r3, #2
 800628c:	dc59      	bgt.n	8006342 <_dtoa_r+0x922>
 800628e:	e08e      	b.n	80063ae <_dtoa_r+0x98e>
 8006290:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006292:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006296:	e75d      	b.n	8006154 <_dtoa_r+0x734>
 8006298:	9b08      	ldr	r3, [sp, #32]
 800629a:	1e5c      	subs	r4, r3, #1
 800629c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800629e:	42a3      	cmp	r3, r4
 80062a0:	bfbf      	itttt	lt
 80062a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80062a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80062a6:	1ae3      	sublt	r3, r4, r3
 80062a8:	18d2      	addlt	r2, r2, r3
 80062aa:	bfa8      	it	ge
 80062ac:	1b1c      	subge	r4, r3, r4
 80062ae:	9b08      	ldr	r3, [sp, #32]
 80062b0:	bfbe      	ittt	lt
 80062b2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80062b4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80062b6:	2400      	movlt	r4, #0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bfb5      	itete	lt
 80062bc:	eba9 0703 	sublt.w	r7, r9, r3
 80062c0:	464f      	movge	r7, r9
 80062c2:	2300      	movlt	r3, #0
 80062c4:	9b08      	ldrge	r3, [sp, #32]
 80062c6:	e747      	b.n	8006158 <_dtoa_r+0x738>
 80062c8:	464f      	mov	r7, r9
 80062ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80062ce:	e74c      	b.n	800616a <_dtoa_r+0x74a>
 80062d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062d2:	e773      	b.n	80061bc <_dtoa_r+0x79c>
 80062d4:	3fe00000 	.word	0x3fe00000
 80062d8:	40240000 	.word	0x40240000
 80062dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062de:	2b01      	cmp	r3, #1
 80062e0:	dc18      	bgt.n	8006314 <_dtoa_r+0x8f4>
 80062e2:	9b04      	ldr	r3, [sp, #16]
 80062e4:	b9b3      	cbnz	r3, 8006314 <_dtoa_r+0x8f4>
 80062e6:	9b05      	ldr	r3, [sp, #20]
 80062e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062ec:	b993      	cbnz	r3, 8006314 <_dtoa_r+0x8f4>
 80062ee:	9b05      	ldr	r3, [sp, #20]
 80062f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062f4:	0d1b      	lsrs	r3, r3, #20
 80062f6:	051b      	lsls	r3, r3, #20
 80062f8:	b17b      	cbz	r3, 800631a <_dtoa_r+0x8fa>
 80062fa:	f04f 0801 	mov.w	r8, #1
 80062fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006300:	f109 0901 	add.w	r9, r9, #1
 8006304:	3301      	adds	r3, #1
 8006306:	9309      	str	r3, [sp, #36]	; 0x24
 8006308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800630a:	2b00      	cmp	r3, #0
 800630c:	f47f af6f 	bne.w	80061ee <_dtoa_r+0x7ce>
 8006310:	2001      	movs	r0, #1
 8006312:	e774      	b.n	80061fe <_dtoa_r+0x7de>
 8006314:	f04f 0800 	mov.w	r8, #0
 8006318:	e7f6      	b.n	8006308 <_dtoa_r+0x8e8>
 800631a:	4698      	mov	r8, r3
 800631c:	e7f4      	b.n	8006308 <_dtoa_r+0x8e8>
 800631e:	d080      	beq.n	8006222 <_dtoa_r+0x802>
 8006320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006322:	331c      	adds	r3, #28
 8006324:	441a      	add	r2, r3
 8006326:	4499      	add	r9, r3
 8006328:	441f      	add	r7, r3
 800632a:	9209      	str	r2, [sp, #36]	; 0x24
 800632c:	e779      	b.n	8006222 <_dtoa_r+0x802>
 800632e:	4603      	mov	r3, r0
 8006330:	e7f6      	b.n	8006320 <_dtoa_r+0x900>
 8006332:	9b08      	ldr	r3, [sp, #32]
 8006334:	2b00      	cmp	r3, #0
 8006336:	dc34      	bgt.n	80063a2 <_dtoa_r+0x982>
 8006338:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800633a:	2b02      	cmp	r3, #2
 800633c:	dd31      	ble.n	80063a2 <_dtoa_r+0x982>
 800633e:	9b08      	ldr	r3, [sp, #32]
 8006340:	9306      	str	r3, [sp, #24]
 8006342:	9b06      	ldr	r3, [sp, #24]
 8006344:	b963      	cbnz	r3, 8006360 <_dtoa_r+0x940>
 8006346:	4621      	mov	r1, r4
 8006348:	2205      	movs	r2, #5
 800634a:	4628      	mov	r0, r5
 800634c:	f000 faaa 	bl	80068a4 <__multadd>
 8006350:	4601      	mov	r1, r0
 8006352:	4604      	mov	r4, r0
 8006354:	4650      	mov	r0, sl
 8006356:	f000 fd07 	bl	8006d68 <__mcmp>
 800635a:	2800      	cmp	r0, #0
 800635c:	f73f adbf 	bgt.w	8005ede <_dtoa_r+0x4be>
 8006360:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006362:	9f03      	ldr	r7, [sp, #12]
 8006364:	ea6f 0b03 	mvn.w	fp, r3
 8006368:	f04f 0800 	mov.w	r8, #0
 800636c:	4621      	mov	r1, r4
 800636e:	4628      	mov	r0, r5
 8006370:	f000 fa76 	bl	8006860 <_Bfree>
 8006374:	2e00      	cmp	r6, #0
 8006376:	f43f aead 	beq.w	80060d4 <_dtoa_r+0x6b4>
 800637a:	f1b8 0f00 	cmp.w	r8, #0
 800637e:	d005      	beq.n	800638c <_dtoa_r+0x96c>
 8006380:	45b0      	cmp	r8, r6
 8006382:	d003      	beq.n	800638c <_dtoa_r+0x96c>
 8006384:	4641      	mov	r1, r8
 8006386:	4628      	mov	r0, r5
 8006388:	f000 fa6a 	bl	8006860 <_Bfree>
 800638c:	4631      	mov	r1, r6
 800638e:	4628      	mov	r0, r5
 8006390:	f000 fa66 	bl	8006860 <_Bfree>
 8006394:	e69e      	b.n	80060d4 <_dtoa_r+0x6b4>
 8006396:	2400      	movs	r4, #0
 8006398:	4626      	mov	r6, r4
 800639a:	e7e1      	b.n	8006360 <_dtoa_r+0x940>
 800639c:	46c3      	mov	fp, r8
 800639e:	4626      	mov	r6, r4
 80063a0:	e59d      	b.n	8005ede <_dtoa_r+0x4be>
 80063a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80c8 	beq.w	800653a <_dtoa_r+0xb1a>
 80063aa:	9b08      	ldr	r3, [sp, #32]
 80063ac:	9306      	str	r3, [sp, #24]
 80063ae:	2f00      	cmp	r7, #0
 80063b0:	dd05      	ble.n	80063be <_dtoa_r+0x99e>
 80063b2:	4631      	mov	r1, r6
 80063b4:	463a      	mov	r2, r7
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 fc6a 	bl	8006c90 <__lshift>
 80063bc:	4606      	mov	r6, r0
 80063be:	f1b8 0f00 	cmp.w	r8, #0
 80063c2:	d05b      	beq.n	800647c <_dtoa_r+0xa5c>
 80063c4:	4628      	mov	r0, r5
 80063c6:	6871      	ldr	r1, [r6, #4]
 80063c8:	f000 fa0a 	bl	80067e0 <_Balloc>
 80063cc:	4607      	mov	r7, r0
 80063ce:	b928      	cbnz	r0, 80063dc <_dtoa_r+0x9bc>
 80063d0:	4602      	mov	r2, r0
 80063d2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80063d6:	4b81      	ldr	r3, [pc, #516]	; (80065dc <_dtoa_r+0xbbc>)
 80063d8:	f7ff bb36 	b.w	8005a48 <_dtoa_r+0x28>
 80063dc:	6932      	ldr	r2, [r6, #16]
 80063de:	f106 010c 	add.w	r1, r6, #12
 80063e2:	3202      	adds	r2, #2
 80063e4:	0092      	lsls	r2, r2, #2
 80063e6:	300c      	adds	r0, #12
 80063e8:	f001 fef2 	bl	80081d0 <memcpy>
 80063ec:	2201      	movs	r2, #1
 80063ee:	4639      	mov	r1, r7
 80063f0:	4628      	mov	r0, r5
 80063f2:	f000 fc4d 	bl	8006c90 <__lshift>
 80063f6:	46b0      	mov	r8, r6
 80063f8:	4606      	mov	r6, r0
 80063fa:	9b03      	ldr	r3, [sp, #12]
 80063fc:	9a03      	ldr	r2, [sp, #12]
 80063fe:	3301      	adds	r3, #1
 8006400:	9308      	str	r3, [sp, #32]
 8006402:	9b06      	ldr	r3, [sp, #24]
 8006404:	4413      	add	r3, r2
 8006406:	930b      	str	r3, [sp, #44]	; 0x2c
 8006408:	9b04      	ldr	r3, [sp, #16]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	930a      	str	r3, [sp, #40]	; 0x28
 8006410:	9b08      	ldr	r3, [sp, #32]
 8006412:	4621      	mov	r1, r4
 8006414:	3b01      	subs	r3, #1
 8006416:	4650      	mov	r0, sl
 8006418:	9304      	str	r3, [sp, #16]
 800641a:	f7ff fa77 	bl	800590c <quorem>
 800641e:	4641      	mov	r1, r8
 8006420:	9006      	str	r0, [sp, #24]
 8006422:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006426:	4650      	mov	r0, sl
 8006428:	f000 fc9e 	bl	8006d68 <__mcmp>
 800642c:	4632      	mov	r2, r6
 800642e:	9009      	str	r0, [sp, #36]	; 0x24
 8006430:	4621      	mov	r1, r4
 8006432:	4628      	mov	r0, r5
 8006434:	f000 fcb4 	bl	8006da0 <__mdiff>
 8006438:	68c2      	ldr	r2, [r0, #12]
 800643a:	4607      	mov	r7, r0
 800643c:	bb02      	cbnz	r2, 8006480 <_dtoa_r+0xa60>
 800643e:	4601      	mov	r1, r0
 8006440:	4650      	mov	r0, sl
 8006442:	f000 fc91 	bl	8006d68 <__mcmp>
 8006446:	4602      	mov	r2, r0
 8006448:	4639      	mov	r1, r7
 800644a:	4628      	mov	r0, r5
 800644c:	920c      	str	r2, [sp, #48]	; 0x30
 800644e:	f000 fa07 	bl	8006860 <_Bfree>
 8006452:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006456:	9f08      	ldr	r7, [sp, #32]
 8006458:	ea43 0102 	orr.w	r1, r3, r2
 800645c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800645e:	4319      	orrs	r1, r3
 8006460:	d110      	bne.n	8006484 <_dtoa_r+0xa64>
 8006462:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006466:	d029      	beq.n	80064bc <_dtoa_r+0xa9c>
 8006468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646a:	2b00      	cmp	r3, #0
 800646c:	dd02      	ble.n	8006474 <_dtoa_r+0xa54>
 800646e:	9b06      	ldr	r3, [sp, #24]
 8006470:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006474:	9b04      	ldr	r3, [sp, #16]
 8006476:	f883 9000 	strb.w	r9, [r3]
 800647a:	e777      	b.n	800636c <_dtoa_r+0x94c>
 800647c:	4630      	mov	r0, r6
 800647e:	e7ba      	b.n	80063f6 <_dtoa_r+0x9d6>
 8006480:	2201      	movs	r2, #1
 8006482:	e7e1      	b.n	8006448 <_dtoa_r+0xa28>
 8006484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	db04      	blt.n	8006494 <_dtoa_r+0xa74>
 800648a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800648c:	430b      	orrs	r3, r1
 800648e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006490:	430b      	orrs	r3, r1
 8006492:	d120      	bne.n	80064d6 <_dtoa_r+0xab6>
 8006494:	2a00      	cmp	r2, #0
 8006496:	dded      	ble.n	8006474 <_dtoa_r+0xa54>
 8006498:	4651      	mov	r1, sl
 800649a:	2201      	movs	r2, #1
 800649c:	4628      	mov	r0, r5
 800649e:	f000 fbf7 	bl	8006c90 <__lshift>
 80064a2:	4621      	mov	r1, r4
 80064a4:	4682      	mov	sl, r0
 80064a6:	f000 fc5f 	bl	8006d68 <__mcmp>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	dc03      	bgt.n	80064b6 <_dtoa_r+0xa96>
 80064ae:	d1e1      	bne.n	8006474 <_dtoa_r+0xa54>
 80064b0:	f019 0f01 	tst.w	r9, #1
 80064b4:	d0de      	beq.n	8006474 <_dtoa_r+0xa54>
 80064b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064ba:	d1d8      	bne.n	800646e <_dtoa_r+0xa4e>
 80064bc:	2339      	movs	r3, #57	; 0x39
 80064be:	9a04      	ldr	r2, [sp, #16]
 80064c0:	7013      	strb	r3, [r2, #0]
 80064c2:	463b      	mov	r3, r7
 80064c4:	461f      	mov	r7, r3
 80064c6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	2a39      	cmp	r2, #57	; 0x39
 80064ce:	d06b      	beq.n	80065a8 <_dtoa_r+0xb88>
 80064d0:	3201      	adds	r2, #1
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	e74a      	b.n	800636c <_dtoa_r+0x94c>
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	dd07      	ble.n	80064ea <_dtoa_r+0xaca>
 80064da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064de:	d0ed      	beq.n	80064bc <_dtoa_r+0xa9c>
 80064e0:	9a04      	ldr	r2, [sp, #16]
 80064e2:	f109 0301 	add.w	r3, r9, #1
 80064e6:	7013      	strb	r3, [r2, #0]
 80064e8:	e740      	b.n	800636c <_dtoa_r+0x94c>
 80064ea:	9b08      	ldr	r3, [sp, #32]
 80064ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064ee:	f803 9c01 	strb.w	r9, [r3, #-1]
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d042      	beq.n	800657c <_dtoa_r+0xb5c>
 80064f6:	4651      	mov	r1, sl
 80064f8:	2300      	movs	r3, #0
 80064fa:	220a      	movs	r2, #10
 80064fc:	4628      	mov	r0, r5
 80064fe:	f000 f9d1 	bl	80068a4 <__multadd>
 8006502:	45b0      	cmp	r8, r6
 8006504:	4682      	mov	sl, r0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	f04f 020a 	mov.w	r2, #10
 800650e:	4641      	mov	r1, r8
 8006510:	4628      	mov	r0, r5
 8006512:	d107      	bne.n	8006524 <_dtoa_r+0xb04>
 8006514:	f000 f9c6 	bl	80068a4 <__multadd>
 8006518:	4680      	mov	r8, r0
 800651a:	4606      	mov	r6, r0
 800651c:	9b08      	ldr	r3, [sp, #32]
 800651e:	3301      	adds	r3, #1
 8006520:	9308      	str	r3, [sp, #32]
 8006522:	e775      	b.n	8006410 <_dtoa_r+0x9f0>
 8006524:	f000 f9be 	bl	80068a4 <__multadd>
 8006528:	4631      	mov	r1, r6
 800652a:	4680      	mov	r8, r0
 800652c:	2300      	movs	r3, #0
 800652e:	220a      	movs	r2, #10
 8006530:	4628      	mov	r0, r5
 8006532:	f000 f9b7 	bl	80068a4 <__multadd>
 8006536:	4606      	mov	r6, r0
 8006538:	e7f0      	b.n	800651c <_dtoa_r+0xafc>
 800653a:	9b08      	ldr	r3, [sp, #32]
 800653c:	9306      	str	r3, [sp, #24]
 800653e:	9f03      	ldr	r7, [sp, #12]
 8006540:	4621      	mov	r1, r4
 8006542:	4650      	mov	r0, sl
 8006544:	f7ff f9e2 	bl	800590c <quorem>
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800654e:	f807 9b01 	strb.w	r9, [r7], #1
 8006552:	1afa      	subs	r2, r7, r3
 8006554:	9b06      	ldr	r3, [sp, #24]
 8006556:	4293      	cmp	r3, r2
 8006558:	dd07      	ble.n	800656a <_dtoa_r+0xb4a>
 800655a:	4651      	mov	r1, sl
 800655c:	2300      	movs	r3, #0
 800655e:	220a      	movs	r2, #10
 8006560:	4628      	mov	r0, r5
 8006562:	f000 f99f 	bl	80068a4 <__multadd>
 8006566:	4682      	mov	sl, r0
 8006568:	e7ea      	b.n	8006540 <_dtoa_r+0xb20>
 800656a:	9b06      	ldr	r3, [sp, #24]
 800656c:	f04f 0800 	mov.w	r8, #0
 8006570:	2b00      	cmp	r3, #0
 8006572:	bfcc      	ite	gt
 8006574:	461f      	movgt	r7, r3
 8006576:	2701      	movle	r7, #1
 8006578:	9b03      	ldr	r3, [sp, #12]
 800657a:	441f      	add	r7, r3
 800657c:	4651      	mov	r1, sl
 800657e:	2201      	movs	r2, #1
 8006580:	4628      	mov	r0, r5
 8006582:	f000 fb85 	bl	8006c90 <__lshift>
 8006586:	4621      	mov	r1, r4
 8006588:	4682      	mov	sl, r0
 800658a:	f000 fbed 	bl	8006d68 <__mcmp>
 800658e:	2800      	cmp	r0, #0
 8006590:	dc97      	bgt.n	80064c2 <_dtoa_r+0xaa2>
 8006592:	d102      	bne.n	800659a <_dtoa_r+0xb7a>
 8006594:	f019 0f01 	tst.w	r9, #1
 8006598:	d193      	bne.n	80064c2 <_dtoa_r+0xaa2>
 800659a:	463b      	mov	r3, r7
 800659c:	461f      	mov	r7, r3
 800659e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065a2:	2a30      	cmp	r2, #48	; 0x30
 80065a4:	d0fa      	beq.n	800659c <_dtoa_r+0xb7c>
 80065a6:	e6e1      	b.n	800636c <_dtoa_r+0x94c>
 80065a8:	9a03      	ldr	r2, [sp, #12]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d18a      	bne.n	80064c4 <_dtoa_r+0xaa4>
 80065ae:	2331      	movs	r3, #49	; 0x31
 80065b0:	f10b 0b01 	add.w	fp, fp, #1
 80065b4:	e797      	b.n	80064e6 <_dtoa_r+0xac6>
 80065b6:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <_dtoa_r+0xbc0>)
 80065b8:	f7ff ba9f 	b.w	8005afa <_dtoa_r+0xda>
 80065bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f47f aa77 	bne.w	8005ab2 <_dtoa_r+0x92>
 80065c4:	4b07      	ldr	r3, [pc, #28]	; (80065e4 <_dtoa_r+0xbc4>)
 80065c6:	f7ff ba98 	b.w	8005afa <_dtoa_r+0xda>
 80065ca:	9b06      	ldr	r3, [sp, #24]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dcb6      	bgt.n	800653e <_dtoa_r+0xb1e>
 80065d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	f73f aeb5 	bgt.w	8006342 <_dtoa_r+0x922>
 80065d8:	e7b1      	b.n	800653e <_dtoa_r+0xb1e>
 80065da:	bf00      	nop
 80065dc:	0800b668 	.word	0x0800b668
 80065e0:	0800b5c3 	.word	0x0800b5c3
 80065e4:	0800b5ec 	.word	0x0800b5ec

080065e8 <_free_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4605      	mov	r5, r0
 80065ec:	2900      	cmp	r1, #0
 80065ee:	d040      	beq.n	8006672 <_free_r+0x8a>
 80065f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065f4:	1f0c      	subs	r4, r1, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bfb8      	it	lt
 80065fa:	18e4      	addlt	r4, r4, r3
 80065fc:	f000 f8e4 	bl	80067c8 <__malloc_lock>
 8006600:	4a1c      	ldr	r2, [pc, #112]	; (8006674 <_free_r+0x8c>)
 8006602:	6813      	ldr	r3, [r2, #0]
 8006604:	b933      	cbnz	r3, 8006614 <_free_r+0x2c>
 8006606:	6063      	str	r3, [r4, #4]
 8006608:	6014      	str	r4, [r2, #0]
 800660a:	4628      	mov	r0, r5
 800660c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006610:	f000 b8e0 	b.w	80067d4 <__malloc_unlock>
 8006614:	42a3      	cmp	r3, r4
 8006616:	d908      	bls.n	800662a <_free_r+0x42>
 8006618:	6820      	ldr	r0, [r4, #0]
 800661a:	1821      	adds	r1, r4, r0
 800661c:	428b      	cmp	r3, r1
 800661e:	bf01      	itttt	eq
 8006620:	6819      	ldreq	r1, [r3, #0]
 8006622:	685b      	ldreq	r3, [r3, #4]
 8006624:	1809      	addeq	r1, r1, r0
 8006626:	6021      	streq	r1, [r4, #0]
 8006628:	e7ed      	b.n	8006606 <_free_r+0x1e>
 800662a:	461a      	mov	r2, r3
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	b10b      	cbz	r3, 8006634 <_free_r+0x4c>
 8006630:	42a3      	cmp	r3, r4
 8006632:	d9fa      	bls.n	800662a <_free_r+0x42>
 8006634:	6811      	ldr	r1, [r2, #0]
 8006636:	1850      	adds	r0, r2, r1
 8006638:	42a0      	cmp	r0, r4
 800663a:	d10b      	bne.n	8006654 <_free_r+0x6c>
 800663c:	6820      	ldr	r0, [r4, #0]
 800663e:	4401      	add	r1, r0
 8006640:	1850      	adds	r0, r2, r1
 8006642:	4283      	cmp	r3, r0
 8006644:	6011      	str	r1, [r2, #0]
 8006646:	d1e0      	bne.n	800660a <_free_r+0x22>
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	4408      	add	r0, r1
 800664e:	6010      	str	r0, [r2, #0]
 8006650:	6053      	str	r3, [r2, #4]
 8006652:	e7da      	b.n	800660a <_free_r+0x22>
 8006654:	d902      	bls.n	800665c <_free_r+0x74>
 8006656:	230c      	movs	r3, #12
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	e7d6      	b.n	800660a <_free_r+0x22>
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	1821      	adds	r1, r4, r0
 8006660:	428b      	cmp	r3, r1
 8006662:	bf01      	itttt	eq
 8006664:	6819      	ldreq	r1, [r3, #0]
 8006666:	685b      	ldreq	r3, [r3, #4]
 8006668:	1809      	addeq	r1, r1, r0
 800666a:	6021      	streq	r1, [r4, #0]
 800666c:	6063      	str	r3, [r4, #4]
 800666e:	6054      	str	r4, [r2, #4]
 8006670:	e7cb      	b.n	800660a <_free_r+0x22>
 8006672:	bd38      	pop	{r3, r4, r5, pc}
 8006674:	20000830 	.word	0x20000830

08006678 <malloc>:
 8006678:	4b02      	ldr	r3, [pc, #8]	; (8006684 <malloc+0xc>)
 800667a:	4601      	mov	r1, r0
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	f000 b823 	b.w	80066c8 <_malloc_r>
 8006682:	bf00      	nop
 8006684:	20000068 	.word	0x20000068

08006688 <sbrk_aligned>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	4e0e      	ldr	r6, [pc, #56]	; (80066c4 <sbrk_aligned+0x3c>)
 800668c:	460c      	mov	r4, r1
 800668e:	6831      	ldr	r1, [r6, #0]
 8006690:	4605      	mov	r5, r0
 8006692:	b911      	cbnz	r1, 800669a <sbrk_aligned+0x12>
 8006694:	f001 fd8c 	bl	80081b0 <_sbrk_r>
 8006698:	6030      	str	r0, [r6, #0]
 800669a:	4621      	mov	r1, r4
 800669c:	4628      	mov	r0, r5
 800669e:	f001 fd87 	bl	80081b0 <_sbrk_r>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	d00a      	beq.n	80066bc <sbrk_aligned+0x34>
 80066a6:	1cc4      	adds	r4, r0, #3
 80066a8:	f024 0403 	bic.w	r4, r4, #3
 80066ac:	42a0      	cmp	r0, r4
 80066ae:	d007      	beq.n	80066c0 <sbrk_aligned+0x38>
 80066b0:	1a21      	subs	r1, r4, r0
 80066b2:	4628      	mov	r0, r5
 80066b4:	f001 fd7c 	bl	80081b0 <_sbrk_r>
 80066b8:	3001      	adds	r0, #1
 80066ba:	d101      	bne.n	80066c0 <sbrk_aligned+0x38>
 80066bc:	f04f 34ff 	mov.w	r4, #4294967295
 80066c0:	4620      	mov	r0, r4
 80066c2:	bd70      	pop	{r4, r5, r6, pc}
 80066c4:	20000834 	.word	0x20000834

080066c8 <_malloc_r>:
 80066c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066cc:	1ccd      	adds	r5, r1, #3
 80066ce:	f025 0503 	bic.w	r5, r5, #3
 80066d2:	3508      	adds	r5, #8
 80066d4:	2d0c      	cmp	r5, #12
 80066d6:	bf38      	it	cc
 80066d8:	250c      	movcc	r5, #12
 80066da:	2d00      	cmp	r5, #0
 80066dc:	4607      	mov	r7, r0
 80066de:	db01      	blt.n	80066e4 <_malloc_r+0x1c>
 80066e0:	42a9      	cmp	r1, r5
 80066e2:	d905      	bls.n	80066f0 <_malloc_r+0x28>
 80066e4:	230c      	movs	r3, #12
 80066e6:	2600      	movs	r6, #0
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	4630      	mov	r0, r6
 80066ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067c4 <_malloc_r+0xfc>
 80066f4:	f000 f868 	bl	80067c8 <__malloc_lock>
 80066f8:	f8d8 3000 	ldr.w	r3, [r8]
 80066fc:	461c      	mov	r4, r3
 80066fe:	bb5c      	cbnz	r4, 8006758 <_malloc_r+0x90>
 8006700:	4629      	mov	r1, r5
 8006702:	4638      	mov	r0, r7
 8006704:	f7ff ffc0 	bl	8006688 <sbrk_aligned>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	4604      	mov	r4, r0
 800670c:	d155      	bne.n	80067ba <_malloc_r+0xf2>
 800670e:	f8d8 4000 	ldr.w	r4, [r8]
 8006712:	4626      	mov	r6, r4
 8006714:	2e00      	cmp	r6, #0
 8006716:	d145      	bne.n	80067a4 <_malloc_r+0xdc>
 8006718:	2c00      	cmp	r4, #0
 800671a:	d048      	beq.n	80067ae <_malloc_r+0xe6>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	4631      	mov	r1, r6
 8006720:	4638      	mov	r0, r7
 8006722:	eb04 0903 	add.w	r9, r4, r3
 8006726:	f001 fd43 	bl	80081b0 <_sbrk_r>
 800672a:	4581      	cmp	r9, r0
 800672c:	d13f      	bne.n	80067ae <_malloc_r+0xe6>
 800672e:	6821      	ldr	r1, [r4, #0]
 8006730:	4638      	mov	r0, r7
 8006732:	1a6d      	subs	r5, r5, r1
 8006734:	4629      	mov	r1, r5
 8006736:	f7ff ffa7 	bl	8006688 <sbrk_aligned>
 800673a:	3001      	adds	r0, #1
 800673c:	d037      	beq.n	80067ae <_malloc_r+0xe6>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	442b      	add	r3, r5
 8006742:	6023      	str	r3, [r4, #0]
 8006744:	f8d8 3000 	ldr.w	r3, [r8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d038      	beq.n	80067be <_malloc_r+0xf6>
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	42a2      	cmp	r2, r4
 8006750:	d12b      	bne.n	80067aa <_malloc_r+0xe2>
 8006752:	2200      	movs	r2, #0
 8006754:	605a      	str	r2, [r3, #4]
 8006756:	e00f      	b.n	8006778 <_malloc_r+0xb0>
 8006758:	6822      	ldr	r2, [r4, #0]
 800675a:	1b52      	subs	r2, r2, r5
 800675c:	d41f      	bmi.n	800679e <_malloc_r+0xd6>
 800675e:	2a0b      	cmp	r2, #11
 8006760:	d917      	bls.n	8006792 <_malloc_r+0xca>
 8006762:	1961      	adds	r1, r4, r5
 8006764:	42a3      	cmp	r3, r4
 8006766:	6025      	str	r5, [r4, #0]
 8006768:	bf18      	it	ne
 800676a:	6059      	strne	r1, [r3, #4]
 800676c:	6863      	ldr	r3, [r4, #4]
 800676e:	bf08      	it	eq
 8006770:	f8c8 1000 	streq.w	r1, [r8]
 8006774:	5162      	str	r2, [r4, r5]
 8006776:	604b      	str	r3, [r1, #4]
 8006778:	4638      	mov	r0, r7
 800677a:	f104 060b 	add.w	r6, r4, #11
 800677e:	f000 f829 	bl	80067d4 <__malloc_unlock>
 8006782:	f026 0607 	bic.w	r6, r6, #7
 8006786:	1d23      	adds	r3, r4, #4
 8006788:	1af2      	subs	r2, r6, r3
 800678a:	d0ae      	beq.n	80066ea <_malloc_r+0x22>
 800678c:	1b9b      	subs	r3, r3, r6
 800678e:	50a3      	str	r3, [r4, r2]
 8006790:	e7ab      	b.n	80066ea <_malloc_r+0x22>
 8006792:	42a3      	cmp	r3, r4
 8006794:	6862      	ldr	r2, [r4, #4]
 8006796:	d1dd      	bne.n	8006754 <_malloc_r+0x8c>
 8006798:	f8c8 2000 	str.w	r2, [r8]
 800679c:	e7ec      	b.n	8006778 <_malloc_r+0xb0>
 800679e:	4623      	mov	r3, r4
 80067a0:	6864      	ldr	r4, [r4, #4]
 80067a2:	e7ac      	b.n	80066fe <_malloc_r+0x36>
 80067a4:	4634      	mov	r4, r6
 80067a6:	6876      	ldr	r6, [r6, #4]
 80067a8:	e7b4      	b.n	8006714 <_malloc_r+0x4c>
 80067aa:	4613      	mov	r3, r2
 80067ac:	e7cc      	b.n	8006748 <_malloc_r+0x80>
 80067ae:	230c      	movs	r3, #12
 80067b0:	4638      	mov	r0, r7
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	f000 f80e 	bl	80067d4 <__malloc_unlock>
 80067b8:	e797      	b.n	80066ea <_malloc_r+0x22>
 80067ba:	6025      	str	r5, [r4, #0]
 80067bc:	e7dc      	b.n	8006778 <_malloc_r+0xb0>
 80067be:	605b      	str	r3, [r3, #4]
 80067c0:	deff      	udf	#255	; 0xff
 80067c2:	bf00      	nop
 80067c4:	20000830 	.word	0x20000830

080067c8 <__malloc_lock>:
 80067c8:	4801      	ldr	r0, [pc, #4]	; (80067d0 <__malloc_lock+0x8>)
 80067ca:	f7ff b88b 	b.w	80058e4 <__retarget_lock_acquire_recursive>
 80067ce:	bf00      	nop
 80067d0:	2000082c 	.word	0x2000082c

080067d4 <__malloc_unlock>:
 80067d4:	4801      	ldr	r0, [pc, #4]	; (80067dc <__malloc_unlock+0x8>)
 80067d6:	f7ff b886 	b.w	80058e6 <__retarget_lock_release_recursive>
 80067da:	bf00      	nop
 80067dc:	2000082c 	.word	0x2000082c

080067e0 <_Balloc>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	69c6      	ldr	r6, [r0, #28]
 80067e4:	4604      	mov	r4, r0
 80067e6:	460d      	mov	r5, r1
 80067e8:	b976      	cbnz	r6, 8006808 <_Balloc+0x28>
 80067ea:	2010      	movs	r0, #16
 80067ec:	f7ff ff44 	bl	8006678 <malloc>
 80067f0:	4602      	mov	r2, r0
 80067f2:	61e0      	str	r0, [r4, #28]
 80067f4:	b920      	cbnz	r0, 8006800 <_Balloc+0x20>
 80067f6:	216b      	movs	r1, #107	; 0x6b
 80067f8:	4b17      	ldr	r3, [pc, #92]	; (8006858 <_Balloc+0x78>)
 80067fa:	4818      	ldr	r0, [pc, #96]	; (800685c <_Balloc+0x7c>)
 80067fc:	f001 fcfc 	bl	80081f8 <__assert_func>
 8006800:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006804:	6006      	str	r6, [r0, #0]
 8006806:	60c6      	str	r6, [r0, #12]
 8006808:	69e6      	ldr	r6, [r4, #28]
 800680a:	68f3      	ldr	r3, [r6, #12]
 800680c:	b183      	cbz	r3, 8006830 <_Balloc+0x50>
 800680e:	69e3      	ldr	r3, [r4, #28]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006816:	b9b8      	cbnz	r0, 8006848 <_Balloc+0x68>
 8006818:	2101      	movs	r1, #1
 800681a:	fa01 f605 	lsl.w	r6, r1, r5
 800681e:	1d72      	adds	r2, r6, #5
 8006820:	4620      	mov	r0, r4
 8006822:	0092      	lsls	r2, r2, #2
 8006824:	f001 fd06 	bl	8008234 <_calloc_r>
 8006828:	b160      	cbz	r0, 8006844 <_Balloc+0x64>
 800682a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800682e:	e00e      	b.n	800684e <_Balloc+0x6e>
 8006830:	2221      	movs	r2, #33	; 0x21
 8006832:	2104      	movs	r1, #4
 8006834:	4620      	mov	r0, r4
 8006836:	f001 fcfd 	bl	8008234 <_calloc_r>
 800683a:	69e3      	ldr	r3, [r4, #28]
 800683c:	60f0      	str	r0, [r6, #12]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e4      	bne.n	800680e <_Balloc+0x2e>
 8006844:	2000      	movs	r0, #0
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	6802      	ldr	r2, [r0, #0]
 800684a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800684e:	2300      	movs	r3, #0
 8006850:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006854:	e7f7      	b.n	8006846 <_Balloc+0x66>
 8006856:	bf00      	nop
 8006858:	0800b5f9 	.word	0x0800b5f9
 800685c:	0800b679 	.word	0x0800b679

08006860 <_Bfree>:
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	69c6      	ldr	r6, [r0, #28]
 8006864:	4605      	mov	r5, r0
 8006866:	460c      	mov	r4, r1
 8006868:	b976      	cbnz	r6, 8006888 <_Bfree+0x28>
 800686a:	2010      	movs	r0, #16
 800686c:	f7ff ff04 	bl	8006678 <malloc>
 8006870:	4602      	mov	r2, r0
 8006872:	61e8      	str	r0, [r5, #28]
 8006874:	b920      	cbnz	r0, 8006880 <_Bfree+0x20>
 8006876:	218f      	movs	r1, #143	; 0x8f
 8006878:	4b08      	ldr	r3, [pc, #32]	; (800689c <_Bfree+0x3c>)
 800687a:	4809      	ldr	r0, [pc, #36]	; (80068a0 <_Bfree+0x40>)
 800687c:	f001 fcbc 	bl	80081f8 <__assert_func>
 8006880:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006884:	6006      	str	r6, [r0, #0]
 8006886:	60c6      	str	r6, [r0, #12]
 8006888:	b13c      	cbz	r4, 800689a <_Bfree+0x3a>
 800688a:	69eb      	ldr	r3, [r5, #28]
 800688c:	6862      	ldr	r2, [r4, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006894:	6021      	str	r1, [r4, #0]
 8006896:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800689a:	bd70      	pop	{r4, r5, r6, pc}
 800689c:	0800b5f9 	.word	0x0800b5f9
 80068a0:	0800b679 	.word	0x0800b679

080068a4 <__multadd>:
 80068a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a8:	4607      	mov	r7, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	461e      	mov	r6, r3
 80068ae:	2000      	movs	r0, #0
 80068b0:	690d      	ldr	r5, [r1, #16]
 80068b2:	f101 0c14 	add.w	ip, r1, #20
 80068b6:	f8dc 3000 	ldr.w	r3, [ip]
 80068ba:	3001      	adds	r0, #1
 80068bc:	b299      	uxth	r1, r3
 80068be:	fb02 6101 	mla	r1, r2, r1, r6
 80068c2:	0c1e      	lsrs	r6, r3, #16
 80068c4:	0c0b      	lsrs	r3, r1, #16
 80068c6:	fb02 3306 	mla	r3, r2, r6, r3
 80068ca:	b289      	uxth	r1, r1
 80068cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068d0:	4285      	cmp	r5, r0
 80068d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068d6:	f84c 1b04 	str.w	r1, [ip], #4
 80068da:	dcec      	bgt.n	80068b6 <__multadd+0x12>
 80068dc:	b30e      	cbz	r6, 8006922 <__multadd+0x7e>
 80068de:	68a3      	ldr	r3, [r4, #8]
 80068e0:	42ab      	cmp	r3, r5
 80068e2:	dc19      	bgt.n	8006918 <__multadd+0x74>
 80068e4:	6861      	ldr	r1, [r4, #4]
 80068e6:	4638      	mov	r0, r7
 80068e8:	3101      	adds	r1, #1
 80068ea:	f7ff ff79 	bl	80067e0 <_Balloc>
 80068ee:	4680      	mov	r8, r0
 80068f0:	b928      	cbnz	r0, 80068fe <__multadd+0x5a>
 80068f2:	4602      	mov	r2, r0
 80068f4:	21ba      	movs	r1, #186	; 0xba
 80068f6:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <__multadd+0x84>)
 80068f8:	480c      	ldr	r0, [pc, #48]	; (800692c <__multadd+0x88>)
 80068fa:	f001 fc7d 	bl	80081f8 <__assert_func>
 80068fe:	6922      	ldr	r2, [r4, #16]
 8006900:	f104 010c 	add.w	r1, r4, #12
 8006904:	3202      	adds	r2, #2
 8006906:	0092      	lsls	r2, r2, #2
 8006908:	300c      	adds	r0, #12
 800690a:	f001 fc61 	bl	80081d0 <memcpy>
 800690e:	4621      	mov	r1, r4
 8006910:	4638      	mov	r0, r7
 8006912:	f7ff ffa5 	bl	8006860 <_Bfree>
 8006916:	4644      	mov	r4, r8
 8006918:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800691c:	3501      	adds	r5, #1
 800691e:	615e      	str	r6, [r3, #20]
 8006920:	6125      	str	r5, [r4, #16]
 8006922:	4620      	mov	r0, r4
 8006924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006928:	0800b668 	.word	0x0800b668
 800692c:	0800b679 	.word	0x0800b679

08006930 <__s2b>:
 8006930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006934:	4615      	mov	r5, r2
 8006936:	2209      	movs	r2, #9
 8006938:	461f      	mov	r7, r3
 800693a:	3308      	adds	r3, #8
 800693c:	460c      	mov	r4, r1
 800693e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006942:	4606      	mov	r6, r0
 8006944:	2201      	movs	r2, #1
 8006946:	2100      	movs	r1, #0
 8006948:	429a      	cmp	r2, r3
 800694a:	db09      	blt.n	8006960 <__s2b+0x30>
 800694c:	4630      	mov	r0, r6
 800694e:	f7ff ff47 	bl	80067e0 <_Balloc>
 8006952:	b940      	cbnz	r0, 8006966 <__s2b+0x36>
 8006954:	4602      	mov	r2, r0
 8006956:	21d3      	movs	r1, #211	; 0xd3
 8006958:	4b18      	ldr	r3, [pc, #96]	; (80069bc <__s2b+0x8c>)
 800695a:	4819      	ldr	r0, [pc, #100]	; (80069c0 <__s2b+0x90>)
 800695c:	f001 fc4c 	bl	80081f8 <__assert_func>
 8006960:	0052      	lsls	r2, r2, #1
 8006962:	3101      	adds	r1, #1
 8006964:	e7f0      	b.n	8006948 <__s2b+0x18>
 8006966:	9b08      	ldr	r3, [sp, #32]
 8006968:	2d09      	cmp	r5, #9
 800696a:	6143      	str	r3, [r0, #20]
 800696c:	f04f 0301 	mov.w	r3, #1
 8006970:	6103      	str	r3, [r0, #16]
 8006972:	dd16      	ble.n	80069a2 <__s2b+0x72>
 8006974:	f104 0909 	add.w	r9, r4, #9
 8006978:	46c8      	mov	r8, r9
 800697a:	442c      	add	r4, r5
 800697c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006980:	4601      	mov	r1, r0
 8006982:	220a      	movs	r2, #10
 8006984:	4630      	mov	r0, r6
 8006986:	3b30      	subs	r3, #48	; 0x30
 8006988:	f7ff ff8c 	bl	80068a4 <__multadd>
 800698c:	45a0      	cmp	r8, r4
 800698e:	d1f5      	bne.n	800697c <__s2b+0x4c>
 8006990:	f1a5 0408 	sub.w	r4, r5, #8
 8006994:	444c      	add	r4, r9
 8006996:	1b2d      	subs	r5, r5, r4
 8006998:	1963      	adds	r3, r4, r5
 800699a:	42bb      	cmp	r3, r7
 800699c:	db04      	blt.n	80069a8 <__s2b+0x78>
 800699e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069a2:	2509      	movs	r5, #9
 80069a4:	340a      	adds	r4, #10
 80069a6:	e7f6      	b.n	8006996 <__s2b+0x66>
 80069a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069ac:	4601      	mov	r1, r0
 80069ae:	220a      	movs	r2, #10
 80069b0:	4630      	mov	r0, r6
 80069b2:	3b30      	subs	r3, #48	; 0x30
 80069b4:	f7ff ff76 	bl	80068a4 <__multadd>
 80069b8:	e7ee      	b.n	8006998 <__s2b+0x68>
 80069ba:	bf00      	nop
 80069bc:	0800b668 	.word	0x0800b668
 80069c0:	0800b679 	.word	0x0800b679

080069c4 <__hi0bits>:
 80069c4:	0c02      	lsrs	r2, r0, #16
 80069c6:	0412      	lsls	r2, r2, #16
 80069c8:	4603      	mov	r3, r0
 80069ca:	b9ca      	cbnz	r2, 8006a00 <__hi0bits+0x3c>
 80069cc:	0403      	lsls	r3, r0, #16
 80069ce:	2010      	movs	r0, #16
 80069d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80069d4:	bf04      	itt	eq
 80069d6:	021b      	lsleq	r3, r3, #8
 80069d8:	3008      	addeq	r0, #8
 80069da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80069de:	bf04      	itt	eq
 80069e0:	011b      	lsleq	r3, r3, #4
 80069e2:	3004      	addeq	r0, #4
 80069e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80069e8:	bf04      	itt	eq
 80069ea:	009b      	lsleq	r3, r3, #2
 80069ec:	3002      	addeq	r0, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	db05      	blt.n	80069fe <__hi0bits+0x3a>
 80069f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80069f6:	f100 0001 	add.w	r0, r0, #1
 80069fa:	bf08      	it	eq
 80069fc:	2020      	moveq	r0, #32
 80069fe:	4770      	bx	lr
 8006a00:	2000      	movs	r0, #0
 8006a02:	e7e5      	b.n	80069d0 <__hi0bits+0xc>

08006a04 <__lo0bits>:
 8006a04:	6803      	ldr	r3, [r0, #0]
 8006a06:	4602      	mov	r2, r0
 8006a08:	f013 0007 	ands.w	r0, r3, #7
 8006a0c:	d00b      	beq.n	8006a26 <__lo0bits+0x22>
 8006a0e:	07d9      	lsls	r1, r3, #31
 8006a10:	d421      	bmi.n	8006a56 <__lo0bits+0x52>
 8006a12:	0798      	lsls	r0, r3, #30
 8006a14:	bf49      	itett	mi
 8006a16:	085b      	lsrmi	r3, r3, #1
 8006a18:	089b      	lsrpl	r3, r3, #2
 8006a1a:	2001      	movmi	r0, #1
 8006a1c:	6013      	strmi	r3, [r2, #0]
 8006a1e:	bf5c      	itt	pl
 8006a20:	2002      	movpl	r0, #2
 8006a22:	6013      	strpl	r3, [r2, #0]
 8006a24:	4770      	bx	lr
 8006a26:	b299      	uxth	r1, r3
 8006a28:	b909      	cbnz	r1, 8006a2e <__lo0bits+0x2a>
 8006a2a:	2010      	movs	r0, #16
 8006a2c:	0c1b      	lsrs	r3, r3, #16
 8006a2e:	b2d9      	uxtb	r1, r3
 8006a30:	b909      	cbnz	r1, 8006a36 <__lo0bits+0x32>
 8006a32:	3008      	adds	r0, #8
 8006a34:	0a1b      	lsrs	r3, r3, #8
 8006a36:	0719      	lsls	r1, r3, #28
 8006a38:	bf04      	itt	eq
 8006a3a:	091b      	lsreq	r3, r3, #4
 8006a3c:	3004      	addeq	r0, #4
 8006a3e:	0799      	lsls	r1, r3, #30
 8006a40:	bf04      	itt	eq
 8006a42:	089b      	lsreq	r3, r3, #2
 8006a44:	3002      	addeq	r0, #2
 8006a46:	07d9      	lsls	r1, r3, #31
 8006a48:	d403      	bmi.n	8006a52 <__lo0bits+0x4e>
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	f100 0001 	add.w	r0, r0, #1
 8006a50:	d003      	beq.n	8006a5a <__lo0bits+0x56>
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	4770      	bx	lr
 8006a56:	2000      	movs	r0, #0
 8006a58:	4770      	bx	lr
 8006a5a:	2020      	movs	r0, #32
 8006a5c:	4770      	bx	lr
	...

08006a60 <__i2b>:
 8006a60:	b510      	push	{r4, lr}
 8006a62:	460c      	mov	r4, r1
 8006a64:	2101      	movs	r1, #1
 8006a66:	f7ff febb 	bl	80067e0 <_Balloc>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	b928      	cbnz	r0, 8006a7a <__i2b+0x1a>
 8006a6e:	f240 1145 	movw	r1, #325	; 0x145
 8006a72:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <__i2b+0x24>)
 8006a74:	4804      	ldr	r0, [pc, #16]	; (8006a88 <__i2b+0x28>)
 8006a76:	f001 fbbf 	bl	80081f8 <__assert_func>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	6144      	str	r4, [r0, #20]
 8006a7e:	6103      	str	r3, [r0, #16]
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	bf00      	nop
 8006a84:	0800b668 	.word	0x0800b668
 8006a88:	0800b679 	.word	0x0800b679

08006a8c <__multiply>:
 8006a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a90:	4691      	mov	r9, r2
 8006a92:	690a      	ldr	r2, [r1, #16]
 8006a94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a98:	460c      	mov	r4, r1
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	bfbe      	ittt	lt
 8006a9e:	460b      	movlt	r3, r1
 8006aa0:	464c      	movlt	r4, r9
 8006aa2:	4699      	movlt	r9, r3
 8006aa4:	6927      	ldr	r7, [r4, #16]
 8006aa6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006aaa:	68a3      	ldr	r3, [r4, #8]
 8006aac:	6861      	ldr	r1, [r4, #4]
 8006aae:	eb07 060a 	add.w	r6, r7, sl
 8006ab2:	42b3      	cmp	r3, r6
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	bfb8      	it	lt
 8006ab8:	3101      	addlt	r1, #1
 8006aba:	f7ff fe91 	bl	80067e0 <_Balloc>
 8006abe:	b930      	cbnz	r0, 8006ace <__multiply+0x42>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ac6:	4b43      	ldr	r3, [pc, #268]	; (8006bd4 <__multiply+0x148>)
 8006ac8:	4843      	ldr	r0, [pc, #268]	; (8006bd8 <__multiply+0x14c>)
 8006aca:	f001 fb95 	bl	80081f8 <__assert_func>
 8006ace:	f100 0514 	add.w	r5, r0, #20
 8006ad2:	462b      	mov	r3, r5
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ada:	4543      	cmp	r3, r8
 8006adc:	d321      	bcc.n	8006b22 <__multiply+0x96>
 8006ade:	f104 0314 	add.w	r3, r4, #20
 8006ae2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ae6:	f109 0314 	add.w	r3, r9, #20
 8006aea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006aee:	9202      	str	r2, [sp, #8]
 8006af0:	1b3a      	subs	r2, r7, r4
 8006af2:	3a15      	subs	r2, #21
 8006af4:	f022 0203 	bic.w	r2, r2, #3
 8006af8:	3204      	adds	r2, #4
 8006afa:	f104 0115 	add.w	r1, r4, #21
 8006afe:	428f      	cmp	r7, r1
 8006b00:	bf38      	it	cc
 8006b02:	2204      	movcc	r2, #4
 8006b04:	9201      	str	r2, [sp, #4]
 8006b06:	9a02      	ldr	r2, [sp, #8]
 8006b08:	9303      	str	r3, [sp, #12]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d80c      	bhi.n	8006b28 <__multiply+0x9c>
 8006b0e:	2e00      	cmp	r6, #0
 8006b10:	dd03      	ble.n	8006b1a <__multiply+0x8e>
 8006b12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d05a      	beq.n	8006bd0 <__multiply+0x144>
 8006b1a:	6106      	str	r6, [r0, #16]
 8006b1c:	b005      	add	sp, #20
 8006b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b22:	f843 2b04 	str.w	r2, [r3], #4
 8006b26:	e7d8      	b.n	8006ada <__multiply+0x4e>
 8006b28:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b2c:	f1ba 0f00 	cmp.w	sl, #0
 8006b30:	d023      	beq.n	8006b7a <__multiply+0xee>
 8006b32:	46a9      	mov	r9, r5
 8006b34:	f04f 0c00 	mov.w	ip, #0
 8006b38:	f104 0e14 	add.w	lr, r4, #20
 8006b3c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b40:	f8d9 1000 	ldr.w	r1, [r9]
 8006b44:	fa1f fb82 	uxth.w	fp, r2
 8006b48:	b289      	uxth	r1, r1
 8006b4a:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b4e:	4461      	add	r1, ip
 8006b50:	f8d9 c000 	ldr.w	ip, [r9]
 8006b54:	0c12      	lsrs	r2, r2, #16
 8006b56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006b5a:	fb0a c202 	mla	r2, sl, r2, ip
 8006b5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b62:	b289      	uxth	r1, r1
 8006b64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b68:	4577      	cmp	r7, lr
 8006b6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b6e:	f849 1b04 	str.w	r1, [r9], #4
 8006b72:	d8e3      	bhi.n	8006b3c <__multiply+0xb0>
 8006b74:	9a01      	ldr	r2, [sp, #4]
 8006b76:	f845 c002 	str.w	ip, [r5, r2]
 8006b7a:	9a03      	ldr	r2, [sp, #12]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b82:	f1b9 0f00 	cmp.w	r9, #0
 8006b86:	d021      	beq.n	8006bcc <__multiply+0x140>
 8006b88:	46ae      	mov	lr, r5
 8006b8a:	f04f 0a00 	mov.w	sl, #0
 8006b8e:	6829      	ldr	r1, [r5, #0]
 8006b90:	f104 0c14 	add.w	ip, r4, #20
 8006b94:	f8bc b000 	ldrh.w	fp, [ip]
 8006b98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b9c:	b289      	uxth	r1, r1
 8006b9e:	fb09 220b 	mla	r2, r9, fp, r2
 8006ba2:	4452      	add	r2, sl
 8006ba4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ba8:	f84e 1b04 	str.w	r1, [lr], #4
 8006bac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006bb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bb4:	f8be 1000 	ldrh.w	r1, [lr]
 8006bb8:	4567      	cmp	r7, ip
 8006bba:	fb09 110a 	mla	r1, r9, sl, r1
 8006bbe:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006bc2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bc6:	d8e5      	bhi.n	8006b94 <__multiply+0x108>
 8006bc8:	9a01      	ldr	r2, [sp, #4]
 8006bca:	50a9      	str	r1, [r5, r2]
 8006bcc:	3504      	adds	r5, #4
 8006bce:	e79a      	b.n	8006b06 <__multiply+0x7a>
 8006bd0:	3e01      	subs	r6, #1
 8006bd2:	e79c      	b.n	8006b0e <__multiply+0x82>
 8006bd4:	0800b668 	.word	0x0800b668
 8006bd8:	0800b679 	.word	0x0800b679

08006bdc <__pow5mult>:
 8006bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be0:	4615      	mov	r5, r2
 8006be2:	f012 0203 	ands.w	r2, r2, #3
 8006be6:	4606      	mov	r6, r0
 8006be8:	460f      	mov	r7, r1
 8006bea:	d007      	beq.n	8006bfc <__pow5mult+0x20>
 8006bec:	4c25      	ldr	r4, [pc, #148]	; (8006c84 <__pow5mult+0xa8>)
 8006bee:	3a01      	subs	r2, #1
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bf6:	f7ff fe55 	bl	80068a4 <__multadd>
 8006bfa:	4607      	mov	r7, r0
 8006bfc:	10ad      	asrs	r5, r5, #2
 8006bfe:	d03d      	beq.n	8006c7c <__pow5mult+0xa0>
 8006c00:	69f4      	ldr	r4, [r6, #28]
 8006c02:	b97c      	cbnz	r4, 8006c24 <__pow5mult+0x48>
 8006c04:	2010      	movs	r0, #16
 8006c06:	f7ff fd37 	bl	8006678 <malloc>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	61f0      	str	r0, [r6, #28]
 8006c0e:	b928      	cbnz	r0, 8006c1c <__pow5mult+0x40>
 8006c10:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006c14:	4b1c      	ldr	r3, [pc, #112]	; (8006c88 <__pow5mult+0xac>)
 8006c16:	481d      	ldr	r0, [pc, #116]	; (8006c8c <__pow5mult+0xb0>)
 8006c18:	f001 faee 	bl	80081f8 <__assert_func>
 8006c1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c20:	6004      	str	r4, [r0, #0]
 8006c22:	60c4      	str	r4, [r0, #12]
 8006c24:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006c28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c2c:	b94c      	cbnz	r4, 8006c42 <__pow5mult+0x66>
 8006c2e:	f240 2171 	movw	r1, #625	; 0x271
 8006c32:	4630      	mov	r0, r6
 8006c34:	f7ff ff14 	bl	8006a60 <__i2b>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c40:	6003      	str	r3, [r0, #0]
 8006c42:	f04f 0900 	mov.w	r9, #0
 8006c46:	07eb      	lsls	r3, r5, #31
 8006c48:	d50a      	bpl.n	8006c60 <__pow5mult+0x84>
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	4622      	mov	r2, r4
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f7ff ff1c 	bl	8006a8c <__multiply>
 8006c54:	4680      	mov	r8, r0
 8006c56:	4639      	mov	r1, r7
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f7ff fe01 	bl	8006860 <_Bfree>
 8006c5e:	4647      	mov	r7, r8
 8006c60:	106d      	asrs	r5, r5, #1
 8006c62:	d00b      	beq.n	8006c7c <__pow5mult+0xa0>
 8006c64:	6820      	ldr	r0, [r4, #0]
 8006c66:	b938      	cbnz	r0, 8006c78 <__pow5mult+0x9c>
 8006c68:	4622      	mov	r2, r4
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f7ff ff0d 	bl	8006a8c <__multiply>
 8006c72:	6020      	str	r0, [r4, #0]
 8006c74:	f8c0 9000 	str.w	r9, [r0]
 8006c78:	4604      	mov	r4, r0
 8006c7a:	e7e4      	b.n	8006c46 <__pow5mult+0x6a>
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c82:	bf00      	nop
 8006c84:	0800b7c8 	.word	0x0800b7c8
 8006c88:	0800b5f9 	.word	0x0800b5f9
 8006c8c:	0800b679 	.word	0x0800b679

08006c90 <__lshift>:
 8006c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c94:	460c      	mov	r4, r1
 8006c96:	4607      	mov	r7, r0
 8006c98:	4691      	mov	r9, r2
 8006c9a:	6923      	ldr	r3, [r4, #16]
 8006c9c:	6849      	ldr	r1, [r1, #4]
 8006c9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ca2:	68a3      	ldr	r3, [r4, #8]
 8006ca4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ca8:	f108 0601 	add.w	r6, r8, #1
 8006cac:	42b3      	cmp	r3, r6
 8006cae:	db0b      	blt.n	8006cc8 <__lshift+0x38>
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f7ff fd95 	bl	80067e0 <_Balloc>
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	b948      	cbnz	r0, 8006cce <__lshift+0x3e>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006cc0:	4b27      	ldr	r3, [pc, #156]	; (8006d60 <__lshift+0xd0>)
 8006cc2:	4828      	ldr	r0, [pc, #160]	; (8006d64 <__lshift+0xd4>)
 8006cc4:	f001 fa98 	bl	80081f8 <__assert_func>
 8006cc8:	3101      	adds	r1, #1
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	e7ee      	b.n	8006cac <__lshift+0x1c>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f100 0114 	add.w	r1, r0, #20
 8006cd4:	f100 0210 	add.w	r2, r0, #16
 8006cd8:	4618      	mov	r0, r3
 8006cda:	4553      	cmp	r3, sl
 8006cdc:	db33      	blt.n	8006d46 <__lshift+0xb6>
 8006cde:	6920      	ldr	r0, [r4, #16]
 8006ce0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ce4:	f104 0314 	add.w	r3, r4, #20
 8006ce8:	f019 091f 	ands.w	r9, r9, #31
 8006cec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cf4:	d02b      	beq.n	8006d4e <__lshift+0xbe>
 8006cf6:	468a      	mov	sl, r1
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f1c9 0e20 	rsb	lr, r9, #32
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	fa00 f009 	lsl.w	r0, r0, r9
 8006d04:	4310      	orrs	r0, r2
 8006d06:	f84a 0b04 	str.w	r0, [sl], #4
 8006d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d0e:	459c      	cmp	ip, r3
 8006d10:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d14:	d8f3      	bhi.n	8006cfe <__lshift+0x6e>
 8006d16:	ebac 0304 	sub.w	r3, ip, r4
 8006d1a:	3b15      	subs	r3, #21
 8006d1c:	f023 0303 	bic.w	r3, r3, #3
 8006d20:	3304      	adds	r3, #4
 8006d22:	f104 0015 	add.w	r0, r4, #21
 8006d26:	4584      	cmp	ip, r0
 8006d28:	bf38      	it	cc
 8006d2a:	2304      	movcc	r3, #4
 8006d2c:	50ca      	str	r2, [r1, r3]
 8006d2e:	b10a      	cbz	r2, 8006d34 <__lshift+0xa4>
 8006d30:	f108 0602 	add.w	r6, r8, #2
 8006d34:	3e01      	subs	r6, #1
 8006d36:	4638      	mov	r0, r7
 8006d38:	4621      	mov	r1, r4
 8006d3a:	612e      	str	r6, [r5, #16]
 8006d3c:	f7ff fd90 	bl	8006860 <_Bfree>
 8006d40:	4628      	mov	r0, r5
 8006d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d46:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	e7c5      	b.n	8006cda <__lshift+0x4a>
 8006d4e:	3904      	subs	r1, #4
 8006d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d54:	459c      	cmp	ip, r3
 8006d56:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d5a:	d8f9      	bhi.n	8006d50 <__lshift+0xc0>
 8006d5c:	e7ea      	b.n	8006d34 <__lshift+0xa4>
 8006d5e:	bf00      	nop
 8006d60:	0800b668 	.word	0x0800b668
 8006d64:	0800b679 	.word	0x0800b679

08006d68 <__mcmp>:
 8006d68:	4603      	mov	r3, r0
 8006d6a:	690a      	ldr	r2, [r1, #16]
 8006d6c:	6900      	ldr	r0, [r0, #16]
 8006d6e:	b530      	push	{r4, r5, lr}
 8006d70:	1a80      	subs	r0, r0, r2
 8006d72:	d10d      	bne.n	8006d90 <__mcmp+0x28>
 8006d74:	3314      	adds	r3, #20
 8006d76:	3114      	adds	r1, #20
 8006d78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d88:	4295      	cmp	r5, r2
 8006d8a:	d002      	beq.n	8006d92 <__mcmp+0x2a>
 8006d8c:	d304      	bcc.n	8006d98 <__mcmp+0x30>
 8006d8e:	2001      	movs	r0, #1
 8006d90:	bd30      	pop	{r4, r5, pc}
 8006d92:	42a3      	cmp	r3, r4
 8006d94:	d3f4      	bcc.n	8006d80 <__mcmp+0x18>
 8006d96:	e7fb      	b.n	8006d90 <__mcmp+0x28>
 8006d98:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9c:	e7f8      	b.n	8006d90 <__mcmp+0x28>
	...

08006da0 <__mdiff>:
 8006da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	460d      	mov	r5, r1
 8006da6:	4607      	mov	r7, r0
 8006da8:	4611      	mov	r1, r2
 8006daa:	4628      	mov	r0, r5
 8006dac:	4614      	mov	r4, r2
 8006dae:	f7ff ffdb 	bl	8006d68 <__mcmp>
 8006db2:	1e06      	subs	r6, r0, #0
 8006db4:	d111      	bne.n	8006dda <__mdiff+0x3a>
 8006db6:	4631      	mov	r1, r6
 8006db8:	4638      	mov	r0, r7
 8006dba:	f7ff fd11 	bl	80067e0 <_Balloc>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	b928      	cbnz	r0, 8006dce <__mdiff+0x2e>
 8006dc2:	f240 2137 	movw	r1, #567	; 0x237
 8006dc6:	4b3a      	ldr	r3, [pc, #232]	; (8006eb0 <__mdiff+0x110>)
 8006dc8:	483a      	ldr	r0, [pc, #232]	; (8006eb4 <__mdiff+0x114>)
 8006dca:	f001 fa15 	bl	80081f8 <__assert_func>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dda:	bfa4      	itt	ge
 8006ddc:	4623      	movge	r3, r4
 8006dde:	462c      	movge	r4, r5
 8006de0:	4638      	mov	r0, r7
 8006de2:	6861      	ldr	r1, [r4, #4]
 8006de4:	bfa6      	itte	ge
 8006de6:	461d      	movge	r5, r3
 8006de8:	2600      	movge	r6, #0
 8006dea:	2601      	movlt	r6, #1
 8006dec:	f7ff fcf8 	bl	80067e0 <_Balloc>
 8006df0:	4602      	mov	r2, r0
 8006df2:	b918      	cbnz	r0, 8006dfc <__mdiff+0x5c>
 8006df4:	f240 2145 	movw	r1, #581	; 0x245
 8006df8:	4b2d      	ldr	r3, [pc, #180]	; (8006eb0 <__mdiff+0x110>)
 8006dfa:	e7e5      	b.n	8006dc8 <__mdiff+0x28>
 8006dfc:	f102 0814 	add.w	r8, r2, #20
 8006e00:	46c2      	mov	sl, r8
 8006e02:	f04f 0c00 	mov.w	ip, #0
 8006e06:	6927      	ldr	r7, [r4, #16]
 8006e08:	60c6      	str	r6, [r0, #12]
 8006e0a:	692e      	ldr	r6, [r5, #16]
 8006e0c:	f104 0014 	add.w	r0, r4, #20
 8006e10:	f105 0914 	add.w	r9, r5, #20
 8006e14:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006e18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e1c:	3410      	adds	r4, #16
 8006e1e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006e22:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e26:	fa1f f18b 	uxth.w	r1, fp
 8006e2a:	4461      	add	r1, ip
 8006e2c:	fa1f fc83 	uxth.w	ip, r3
 8006e30:	0c1b      	lsrs	r3, r3, #16
 8006e32:	eba1 010c 	sub.w	r1, r1, ip
 8006e36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e3a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006e3e:	b289      	uxth	r1, r1
 8006e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006e44:	454e      	cmp	r6, r9
 8006e46:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006e4a:	f84a 1b04 	str.w	r1, [sl], #4
 8006e4e:	d8e6      	bhi.n	8006e1e <__mdiff+0x7e>
 8006e50:	1b73      	subs	r3, r6, r5
 8006e52:	3b15      	subs	r3, #21
 8006e54:	f023 0303 	bic.w	r3, r3, #3
 8006e58:	3515      	adds	r5, #21
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	42ae      	cmp	r6, r5
 8006e5e:	bf38      	it	cc
 8006e60:	2304      	movcc	r3, #4
 8006e62:	4418      	add	r0, r3
 8006e64:	4443      	add	r3, r8
 8006e66:	461e      	mov	r6, r3
 8006e68:	4605      	mov	r5, r0
 8006e6a:	4575      	cmp	r5, lr
 8006e6c:	d30e      	bcc.n	8006e8c <__mdiff+0xec>
 8006e6e:	f10e 0103 	add.w	r1, lr, #3
 8006e72:	1a09      	subs	r1, r1, r0
 8006e74:	f021 0103 	bic.w	r1, r1, #3
 8006e78:	3803      	subs	r0, #3
 8006e7a:	4586      	cmp	lr, r0
 8006e7c:	bf38      	it	cc
 8006e7e:	2100      	movcc	r1, #0
 8006e80:	440b      	add	r3, r1
 8006e82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e86:	b189      	cbz	r1, 8006eac <__mdiff+0x10c>
 8006e88:	6117      	str	r7, [r2, #16]
 8006e8a:	e7a3      	b.n	8006dd4 <__mdiff+0x34>
 8006e8c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006e90:	fa1f f188 	uxth.w	r1, r8
 8006e94:	4461      	add	r1, ip
 8006e96:	140c      	asrs	r4, r1, #16
 8006e98:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e9c:	b289      	uxth	r1, r1
 8006e9e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ea2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006ea6:	f846 1b04 	str.w	r1, [r6], #4
 8006eaa:	e7de      	b.n	8006e6a <__mdiff+0xca>
 8006eac:	3f01      	subs	r7, #1
 8006eae:	e7e8      	b.n	8006e82 <__mdiff+0xe2>
 8006eb0:	0800b668 	.word	0x0800b668
 8006eb4:	0800b679 	.word	0x0800b679

08006eb8 <__ulp>:
 8006eb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <__ulp+0x3c>)
 8006eba:	400b      	ands	r3, r1
 8006ebc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	dc08      	bgt.n	8006ed6 <__ulp+0x1e>
 8006ec4:	425b      	negs	r3, r3
 8006ec6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006eca:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006ece:	da04      	bge.n	8006eda <__ulp+0x22>
 8006ed0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ed4:	4113      	asrs	r3, r2
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	e008      	b.n	8006eec <__ulp+0x34>
 8006eda:	f1a2 0314 	sub.w	r3, r2, #20
 8006ede:	2b1e      	cmp	r3, #30
 8006ee0:	bfd6      	itet	le
 8006ee2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006ee6:	2201      	movgt	r2, #1
 8006ee8:	40da      	lsrle	r2, r3
 8006eea:	2300      	movs	r3, #0
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	7ff00000 	.word	0x7ff00000

08006ef8 <__b2d>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	6905      	ldr	r5, [r0, #16]
 8006efc:	f100 0714 	add.w	r7, r0, #20
 8006f00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006f04:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006f08:	1f2e      	subs	r6, r5, #4
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f7ff fd5a 	bl	80069c4 <__hi0bits>
 8006f10:	f1c0 0220 	rsb	r2, r0, #32
 8006f14:	280a      	cmp	r0, #10
 8006f16:	4603      	mov	r3, r0
 8006f18:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006f84 <__b2d+0x8c>
 8006f1c:	600a      	str	r2, [r1, #0]
 8006f1e:	dc12      	bgt.n	8006f46 <__b2d+0x4e>
 8006f20:	f1c0 0e0b 	rsb	lr, r0, #11
 8006f24:	fa24 f20e 	lsr.w	r2, r4, lr
 8006f28:	42b7      	cmp	r7, r6
 8006f2a:	ea42 010c 	orr.w	r1, r2, ip
 8006f2e:	bf2c      	ite	cs
 8006f30:	2200      	movcs	r2, #0
 8006f32:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006f36:	3315      	adds	r3, #21
 8006f38:	fa04 f303 	lsl.w	r3, r4, r3
 8006f3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f40:	431a      	orrs	r2, r3
 8006f42:	4610      	mov	r0, r2
 8006f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f46:	42b7      	cmp	r7, r6
 8006f48:	bf2e      	itee	cs
 8006f4a:	2200      	movcs	r2, #0
 8006f4c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006f50:	f1a5 0608 	subcc.w	r6, r5, #8
 8006f54:	3b0b      	subs	r3, #11
 8006f56:	d012      	beq.n	8006f7e <__b2d+0x86>
 8006f58:	f1c3 0520 	rsb	r5, r3, #32
 8006f5c:	fa22 f105 	lsr.w	r1, r2, r5
 8006f60:	409c      	lsls	r4, r3
 8006f62:	430c      	orrs	r4, r1
 8006f64:	42be      	cmp	r6, r7
 8006f66:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006f6a:	bf94      	ite	ls
 8006f6c:	2400      	movls	r4, #0
 8006f6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006f72:	409a      	lsls	r2, r3
 8006f74:	40ec      	lsrs	r4, r5
 8006f76:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006f7a:	4322      	orrs	r2, r4
 8006f7c:	e7e1      	b.n	8006f42 <__b2d+0x4a>
 8006f7e:	ea44 010c 	orr.w	r1, r4, ip
 8006f82:	e7de      	b.n	8006f42 <__b2d+0x4a>
 8006f84:	3ff00000 	.word	0x3ff00000

08006f88 <__d2b>:
 8006f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	4617      	mov	r7, r2
 8006f8e:	461c      	mov	r4, r3
 8006f90:	9e08      	ldr	r6, [sp, #32]
 8006f92:	f7ff fc25 	bl	80067e0 <_Balloc>
 8006f96:	4605      	mov	r5, r0
 8006f98:	b930      	cbnz	r0, 8006fa8 <__d2b+0x20>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	f240 310f 	movw	r1, #783	; 0x30f
 8006fa0:	4b22      	ldr	r3, [pc, #136]	; (800702c <__d2b+0xa4>)
 8006fa2:	4823      	ldr	r0, [pc, #140]	; (8007030 <__d2b+0xa8>)
 8006fa4:	f001 f928 	bl	80081f8 <__assert_func>
 8006fa8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006fac:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006fb0:	bb24      	cbnz	r4, 8006ffc <__d2b+0x74>
 8006fb2:	2f00      	cmp	r7, #0
 8006fb4:	9301      	str	r3, [sp, #4]
 8006fb6:	d026      	beq.n	8007006 <__d2b+0x7e>
 8006fb8:	4668      	mov	r0, sp
 8006fba:	9700      	str	r7, [sp, #0]
 8006fbc:	f7ff fd22 	bl	8006a04 <__lo0bits>
 8006fc0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fc4:	b1e8      	cbz	r0, 8007002 <__d2b+0x7a>
 8006fc6:	f1c0 0320 	rsb	r3, r0, #32
 8006fca:	fa02 f303 	lsl.w	r3, r2, r3
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	40c2      	lsrs	r2, r0
 8006fd2:	616b      	str	r3, [r5, #20]
 8006fd4:	9201      	str	r2, [sp, #4]
 8006fd6:	9b01      	ldr	r3, [sp, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bf14      	ite	ne
 8006fdc:	2102      	movne	r1, #2
 8006fde:	2101      	moveq	r1, #1
 8006fe0:	61ab      	str	r3, [r5, #24]
 8006fe2:	6129      	str	r1, [r5, #16]
 8006fe4:	b1bc      	cbz	r4, 8007016 <__d2b+0x8e>
 8006fe6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006fea:	4404      	add	r4, r0
 8006fec:	6034      	str	r4, [r6, #0]
 8006fee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff4:	6018      	str	r0, [r3, #0]
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	b003      	add	sp, #12
 8006ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007000:	e7d7      	b.n	8006fb2 <__d2b+0x2a>
 8007002:	6169      	str	r1, [r5, #20]
 8007004:	e7e7      	b.n	8006fd6 <__d2b+0x4e>
 8007006:	a801      	add	r0, sp, #4
 8007008:	f7ff fcfc 	bl	8006a04 <__lo0bits>
 800700c:	9b01      	ldr	r3, [sp, #4]
 800700e:	2101      	movs	r1, #1
 8007010:	616b      	str	r3, [r5, #20]
 8007012:	3020      	adds	r0, #32
 8007014:	e7e5      	b.n	8006fe2 <__d2b+0x5a>
 8007016:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800701a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800701e:	6030      	str	r0, [r6, #0]
 8007020:	6918      	ldr	r0, [r3, #16]
 8007022:	f7ff fccf 	bl	80069c4 <__hi0bits>
 8007026:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800702a:	e7e2      	b.n	8006ff2 <__d2b+0x6a>
 800702c:	0800b668 	.word	0x0800b668
 8007030:	0800b679 	.word	0x0800b679

08007034 <__ratio>:
 8007034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007038:	4688      	mov	r8, r1
 800703a:	4669      	mov	r1, sp
 800703c:	4681      	mov	r9, r0
 800703e:	f7ff ff5b 	bl	8006ef8 <__b2d>
 8007042:	460f      	mov	r7, r1
 8007044:	4604      	mov	r4, r0
 8007046:	460d      	mov	r5, r1
 8007048:	4640      	mov	r0, r8
 800704a:	a901      	add	r1, sp, #4
 800704c:	f7ff ff54 	bl	8006ef8 <__b2d>
 8007050:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007054:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007058:	468b      	mov	fp, r1
 800705a:	eba3 0c02 	sub.w	ip, r3, r2
 800705e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007062:	1a9b      	subs	r3, r3, r2
 8007064:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007068:	2b00      	cmp	r3, #0
 800706a:	bfd5      	itete	le
 800706c:	460a      	movle	r2, r1
 800706e:	462a      	movgt	r2, r5
 8007070:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007074:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007078:	bfd8      	it	le
 800707a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800707e:	465b      	mov	r3, fp
 8007080:	4602      	mov	r2, r0
 8007082:	4639      	mov	r1, r7
 8007084:	4620      	mov	r0, r4
 8007086:	f7f9 fc05 	bl	8000894 <__aeabi_ddiv>
 800708a:	b003      	add	sp, #12
 800708c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007090 <__copybits>:
 8007090:	3901      	subs	r1, #1
 8007092:	b570      	push	{r4, r5, r6, lr}
 8007094:	1149      	asrs	r1, r1, #5
 8007096:	6914      	ldr	r4, [r2, #16]
 8007098:	3101      	adds	r1, #1
 800709a:	f102 0314 	add.w	r3, r2, #20
 800709e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80070a6:	1f05      	subs	r5, r0, #4
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	d30c      	bcc.n	80070c6 <__copybits+0x36>
 80070ac:	1aa3      	subs	r3, r4, r2
 80070ae:	3b11      	subs	r3, #17
 80070b0:	f023 0303 	bic.w	r3, r3, #3
 80070b4:	3211      	adds	r2, #17
 80070b6:	42a2      	cmp	r2, r4
 80070b8:	bf88      	it	hi
 80070ba:	2300      	movhi	r3, #0
 80070bc:	4418      	add	r0, r3
 80070be:	2300      	movs	r3, #0
 80070c0:	4288      	cmp	r0, r1
 80070c2:	d305      	bcc.n	80070d0 <__copybits+0x40>
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
 80070c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80070ca:	f845 6f04 	str.w	r6, [r5, #4]!
 80070ce:	e7eb      	b.n	80070a8 <__copybits+0x18>
 80070d0:	f840 3b04 	str.w	r3, [r0], #4
 80070d4:	e7f4      	b.n	80070c0 <__copybits+0x30>

080070d6 <__any_on>:
 80070d6:	f100 0214 	add.w	r2, r0, #20
 80070da:	6900      	ldr	r0, [r0, #16]
 80070dc:	114b      	asrs	r3, r1, #5
 80070de:	4298      	cmp	r0, r3
 80070e0:	b510      	push	{r4, lr}
 80070e2:	db11      	blt.n	8007108 <__any_on+0x32>
 80070e4:	dd0a      	ble.n	80070fc <__any_on+0x26>
 80070e6:	f011 011f 	ands.w	r1, r1, #31
 80070ea:	d007      	beq.n	80070fc <__any_on+0x26>
 80070ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80070f0:	fa24 f001 	lsr.w	r0, r4, r1
 80070f4:	fa00 f101 	lsl.w	r1, r0, r1
 80070f8:	428c      	cmp	r4, r1
 80070fa:	d10b      	bne.n	8007114 <__any_on+0x3e>
 80070fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007100:	4293      	cmp	r3, r2
 8007102:	d803      	bhi.n	800710c <__any_on+0x36>
 8007104:	2000      	movs	r0, #0
 8007106:	bd10      	pop	{r4, pc}
 8007108:	4603      	mov	r3, r0
 800710a:	e7f7      	b.n	80070fc <__any_on+0x26>
 800710c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007110:	2900      	cmp	r1, #0
 8007112:	d0f5      	beq.n	8007100 <__any_on+0x2a>
 8007114:	2001      	movs	r0, #1
 8007116:	e7f6      	b.n	8007106 <__any_on+0x30>

08007118 <sulp>:
 8007118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800711c:	460f      	mov	r7, r1
 800711e:	4690      	mov	r8, r2
 8007120:	f7ff feca 	bl	8006eb8 <__ulp>
 8007124:	4604      	mov	r4, r0
 8007126:	460d      	mov	r5, r1
 8007128:	f1b8 0f00 	cmp.w	r8, #0
 800712c:	d011      	beq.n	8007152 <sulp+0x3a>
 800712e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007132:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007136:	2b00      	cmp	r3, #0
 8007138:	dd0b      	ble.n	8007152 <sulp+0x3a>
 800713a:	2400      	movs	r4, #0
 800713c:	051b      	lsls	r3, r3, #20
 800713e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007142:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007146:	4622      	mov	r2, r4
 8007148:	462b      	mov	r3, r5
 800714a:	f7f9 fa79 	bl	8000640 <__aeabi_dmul>
 800714e:	4604      	mov	r4, r0
 8007150:	460d      	mov	r5, r1
 8007152:	4620      	mov	r0, r4
 8007154:	4629      	mov	r1, r5
 8007156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800715a:	0000      	movs	r0, r0
 800715c:	0000      	movs	r0, r0
	...

08007160 <_strtod_l>:
 8007160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007164:	b09f      	sub	sp, #124	; 0x7c
 8007166:	9217      	str	r2, [sp, #92]	; 0x5c
 8007168:	2200      	movs	r2, #0
 800716a:	4604      	mov	r4, r0
 800716c:	921a      	str	r2, [sp, #104]	; 0x68
 800716e:	460d      	mov	r5, r1
 8007170:	f04f 0800 	mov.w	r8, #0
 8007174:	f04f 0900 	mov.w	r9, #0
 8007178:	460a      	mov	r2, r1
 800717a:	9219      	str	r2, [sp, #100]	; 0x64
 800717c:	7811      	ldrb	r1, [r2, #0]
 800717e:	292b      	cmp	r1, #43	; 0x2b
 8007180:	d04a      	beq.n	8007218 <_strtod_l+0xb8>
 8007182:	d838      	bhi.n	80071f6 <_strtod_l+0x96>
 8007184:	290d      	cmp	r1, #13
 8007186:	d832      	bhi.n	80071ee <_strtod_l+0x8e>
 8007188:	2908      	cmp	r1, #8
 800718a:	d832      	bhi.n	80071f2 <_strtod_l+0x92>
 800718c:	2900      	cmp	r1, #0
 800718e:	d03b      	beq.n	8007208 <_strtod_l+0xa8>
 8007190:	2200      	movs	r2, #0
 8007192:	920e      	str	r2, [sp, #56]	; 0x38
 8007194:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007196:	7832      	ldrb	r2, [r6, #0]
 8007198:	2a30      	cmp	r2, #48	; 0x30
 800719a:	f040 80b2 	bne.w	8007302 <_strtod_l+0x1a2>
 800719e:	7872      	ldrb	r2, [r6, #1]
 80071a0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80071a4:	2a58      	cmp	r2, #88	; 0x58
 80071a6:	d16e      	bne.n	8007286 <_strtod_l+0x126>
 80071a8:	9302      	str	r3, [sp, #8]
 80071aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071ac:	4620      	mov	r0, r4
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	ab1a      	add	r3, sp, #104	; 0x68
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	4a8c      	ldr	r2, [pc, #560]	; (80073e8 <_strtod_l+0x288>)
 80071b6:	ab1b      	add	r3, sp, #108	; 0x6c
 80071b8:	a919      	add	r1, sp, #100	; 0x64
 80071ba:	f001 f8b7 	bl	800832c <__gethex>
 80071be:	f010 070f 	ands.w	r7, r0, #15
 80071c2:	4605      	mov	r5, r0
 80071c4:	d005      	beq.n	80071d2 <_strtod_l+0x72>
 80071c6:	2f06      	cmp	r7, #6
 80071c8:	d128      	bne.n	800721c <_strtod_l+0xbc>
 80071ca:	2300      	movs	r3, #0
 80071cc:	3601      	adds	r6, #1
 80071ce:	9619      	str	r6, [sp, #100]	; 0x64
 80071d0:	930e      	str	r3, [sp, #56]	; 0x38
 80071d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f040 85a0 	bne.w	8007d1a <_strtod_l+0xbba>
 80071da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071dc:	b1cb      	cbz	r3, 8007212 <_strtod_l+0xb2>
 80071de:	4642      	mov	r2, r8
 80071e0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071e4:	4610      	mov	r0, r2
 80071e6:	4619      	mov	r1, r3
 80071e8:	b01f      	add	sp, #124	; 0x7c
 80071ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ee:	2920      	cmp	r1, #32
 80071f0:	d1ce      	bne.n	8007190 <_strtod_l+0x30>
 80071f2:	3201      	adds	r2, #1
 80071f4:	e7c1      	b.n	800717a <_strtod_l+0x1a>
 80071f6:	292d      	cmp	r1, #45	; 0x2d
 80071f8:	d1ca      	bne.n	8007190 <_strtod_l+0x30>
 80071fa:	2101      	movs	r1, #1
 80071fc:	910e      	str	r1, [sp, #56]	; 0x38
 80071fe:	1c51      	adds	r1, r2, #1
 8007200:	9119      	str	r1, [sp, #100]	; 0x64
 8007202:	7852      	ldrb	r2, [r2, #1]
 8007204:	2a00      	cmp	r2, #0
 8007206:	d1c5      	bne.n	8007194 <_strtod_l+0x34>
 8007208:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800720a:	9519      	str	r5, [sp, #100]	; 0x64
 800720c:	2b00      	cmp	r3, #0
 800720e:	f040 8582 	bne.w	8007d16 <_strtod_l+0xbb6>
 8007212:	4642      	mov	r2, r8
 8007214:	464b      	mov	r3, r9
 8007216:	e7e5      	b.n	80071e4 <_strtod_l+0x84>
 8007218:	2100      	movs	r1, #0
 800721a:	e7ef      	b.n	80071fc <_strtod_l+0x9c>
 800721c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800721e:	b13a      	cbz	r2, 8007230 <_strtod_l+0xd0>
 8007220:	2135      	movs	r1, #53	; 0x35
 8007222:	a81c      	add	r0, sp, #112	; 0x70
 8007224:	f7ff ff34 	bl	8007090 <__copybits>
 8007228:	4620      	mov	r0, r4
 800722a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800722c:	f7ff fb18 	bl	8006860 <_Bfree>
 8007230:	3f01      	subs	r7, #1
 8007232:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007234:	2f04      	cmp	r7, #4
 8007236:	d806      	bhi.n	8007246 <_strtod_l+0xe6>
 8007238:	e8df f007 	tbb	[pc, r7]
 800723c:	201d0314 	.word	0x201d0314
 8007240:	14          	.byte	0x14
 8007241:	00          	.byte	0x00
 8007242:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007246:	05e9      	lsls	r1, r5, #23
 8007248:	bf48      	it	mi
 800724a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800724e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007252:	0d1b      	lsrs	r3, r3, #20
 8007254:	051b      	lsls	r3, r3, #20
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1bb      	bne.n	80071d2 <_strtod_l+0x72>
 800725a:	f7fe fb19 	bl	8005890 <__errno>
 800725e:	2322      	movs	r3, #34	; 0x22
 8007260:	6003      	str	r3, [r0, #0]
 8007262:	e7b6      	b.n	80071d2 <_strtod_l+0x72>
 8007264:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007268:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800726c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007270:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007274:	e7e7      	b.n	8007246 <_strtod_l+0xe6>
 8007276:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80073ec <_strtod_l+0x28c>
 800727a:	e7e4      	b.n	8007246 <_strtod_l+0xe6>
 800727c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007280:	f04f 38ff 	mov.w	r8, #4294967295
 8007284:	e7df      	b.n	8007246 <_strtod_l+0xe6>
 8007286:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	9219      	str	r2, [sp, #100]	; 0x64
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	2b30      	cmp	r3, #48	; 0x30
 8007290:	d0f9      	beq.n	8007286 <_strtod_l+0x126>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d09d      	beq.n	80071d2 <_strtod_l+0x72>
 8007296:	2301      	movs	r3, #1
 8007298:	f04f 0a00 	mov.w	sl, #0
 800729c:	220a      	movs	r2, #10
 800729e:	46d3      	mov	fp, sl
 80072a0:	9305      	str	r3, [sp, #20]
 80072a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072a4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80072a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80072aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80072ac:	7806      	ldrb	r6, [r0, #0]
 80072ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80072b2:	b2d9      	uxtb	r1, r3
 80072b4:	2909      	cmp	r1, #9
 80072b6:	d926      	bls.n	8007306 <_strtod_l+0x1a6>
 80072b8:	2201      	movs	r2, #1
 80072ba:	494d      	ldr	r1, [pc, #308]	; (80073f0 <_strtod_l+0x290>)
 80072bc:	f000 ff66 	bl	800818c <strncmp>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d030      	beq.n	8007326 <_strtod_l+0x1c6>
 80072c4:	2000      	movs	r0, #0
 80072c6:	4632      	mov	r2, r6
 80072c8:	4603      	mov	r3, r0
 80072ca:	465e      	mov	r6, fp
 80072cc:	9008      	str	r0, [sp, #32]
 80072ce:	2a65      	cmp	r2, #101	; 0x65
 80072d0:	d001      	beq.n	80072d6 <_strtod_l+0x176>
 80072d2:	2a45      	cmp	r2, #69	; 0x45
 80072d4:	d113      	bne.n	80072fe <_strtod_l+0x19e>
 80072d6:	b91e      	cbnz	r6, 80072e0 <_strtod_l+0x180>
 80072d8:	9a05      	ldr	r2, [sp, #20]
 80072da:	4302      	orrs	r2, r0
 80072dc:	d094      	beq.n	8007208 <_strtod_l+0xa8>
 80072de:	2600      	movs	r6, #0
 80072e0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80072e2:	1c6a      	adds	r2, r5, #1
 80072e4:	9219      	str	r2, [sp, #100]	; 0x64
 80072e6:	786a      	ldrb	r2, [r5, #1]
 80072e8:	2a2b      	cmp	r2, #43	; 0x2b
 80072ea:	d074      	beq.n	80073d6 <_strtod_l+0x276>
 80072ec:	2a2d      	cmp	r2, #45	; 0x2d
 80072ee:	d078      	beq.n	80073e2 <_strtod_l+0x282>
 80072f0:	f04f 0c00 	mov.w	ip, #0
 80072f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072f8:	2909      	cmp	r1, #9
 80072fa:	d97f      	bls.n	80073fc <_strtod_l+0x29c>
 80072fc:	9519      	str	r5, [sp, #100]	; 0x64
 80072fe:	2700      	movs	r7, #0
 8007300:	e09e      	b.n	8007440 <_strtod_l+0x2e0>
 8007302:	2300      	movs	r3, #0
 8007304:	e7c8      	b.n	8007298 <_strtod_l+0x138>
 8007306:	f1bb 0f08 	cmp.w	fp, #8
 800730a:	bfd8      	it	le
 800730c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800730e:	f100 0001 	add.w	r0, r0, #1
 8007312:	bfd6      	itet	le
 8007314:	fb02 3301 	mlale	r3, r2, r1, r3
 8007318:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800731c:	930a      	strle	r3, [sp, #40]	; 0x28
 800731e:	f10b 0b01 	add.w	fp, fp, #1
 8007322:	9019      	str	r0, [sp, #100]	; 0x64
 8007324:	e7c1      	b.n	80072aa <_strtod_l+0x14a>
 8007326:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	9219      	str	r2, [sp, #100]	; 0x64
 800732c:	785a      	ldrb	r2, [r3, #1]
 800732e:	f1bb 0f00 	cmp.w	fp, #0
 8007332:	d037      	beq.n	80073a4 <_strtod_l+0x244>
 8007334:	465e      	mov	r6, fp
 8007336:	9008      	str	r0, [sp, #32]
 8007338:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800733c:	2b09      	cmp	r3, #9
 800733e:	d912      	bls.n	8007366 <_strtod_l+0x206>
 8007340:	2301      	movs	r3, #1
 8007342:	e7c4      	b.n	80072ce <_strtod_l+0x16e>
 8007344:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007346:	3001      	adds	r0, #1
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	9219      	str	r2, [sp, #100]	; 0x64
 800734c:	785a      	ldrb	r2, [r3, #1]
 800734e:	2a30      	cmp	r2, #48	; 0x30
 8007350:	d0f8      	beq.n	8007344 <_strtod_l+0x1e4>
 8007352:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007356:	2b08      	cmp	r3, #8
 8007358:	f200 84e4 	bhi.w	8007d24 <_strtod_l+0xbc4>
 800735c:	9008      	str	r0, [sp, #32]
 800735e:	2000      	movs	r0, #0
 8007360:	4606      	mov	r6, r0
 8007362:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007364:	930b      	str	r3, [sp, #44]	; 0x2c
 8007366:	3a30      	subs	r2, #48	; 0x30
 8007368:	f100 0301 	add.w	r3, r0, #1
 800736c:	d014      	beq.n	8007398 <_strtod_l+0x238>
 800736e:	9908      	ldr	r1, [sp, #32]
 8007370:	eb00 0c06 	add.w	ip, r0, r6
 8007374:	4419      	add	r1, r3
 8007376:	9108      	str	r1, [sp, #32]
 8007378:	4633      	mov	r3, r6
 800737a:	210a      	movs	r1, #10
 800737c:	4563      	cmp	r3, ip
 800737e:	d113      	bne.n	80073a8 <_strtod_l+0x248>
 8007380:	1833      	adds	r3, r6, r0
 8007382:	2b08      	cmp	r3, #8
 8007384:	f106 0601 	add.w	r6, r6, #1
 8007388:	4406      	add	r6, r0
 800738a:	dc1a      	bgt.n	80073c2 <_strtod_l+0x262>
 800738c:	230a      	movs	r3, #10
 800738e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007390:	fb03 2301 	mla	r3, r3, r1, r2
 8007394:	930a      	str	r3, [sp, #40]	; 0x28
 8007396:	2300      	movs	r3, #0
 8007398:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800739a:	4618      	mov	r0, r3
 800739c:	1c51      	adds	r1, r2, #1
 800739e:	9119      	str	r1, [sp, #100]	; 0x64
 80073a0:	7852      	ldrb	r2, [r2, #1]
 80073a2:	e7c9      	b.n	8007338 <_strtod_l+0x1d8>
 80073a4:	4658      	mov	r0, fp
 80073a6:	e7d2      	b.n	800734e <_strtod_l+0x1ee>
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	f103 0301 	add.w	r3, r3, #1
 80073ae:	dc03      	bgt.n	80073b8 <_strtod_l+0x258>
 80073b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80073b2:	434f      	muls	r7, r1
 80073b4:	970a      	str	r7, [sp, #40]	; 0x28
 80073b6:	e7e1      	b.n	800737c <_strtod_l+0x21c>
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	bfd8      	it	le
 80073bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80073c0:	e7dc      	b.n	800737c <_strtod_l+0x21c>
 80073c2:	2e10      	cmp	r6, #16
 80073c4:	bfdc      	itt	le
 80073c6:	230a      	movle	r3, #10
 80073c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80073cc:	e7e3      	b.n	8007396 <_strtod_l+0x236>
 80073ce:	2300      	movs	r3, #0
 80073d0:	9308      	str	r3, [sp, #32]
 80073d2:	2301      	movs	r3, #1
 80073d4:	e780      	b.n	80072d8 <_strtod_l+0x178>
 80073d6:	f04f 0c00 	mov.w	ip, #0
 80073da:	1caa      	adds	r2, r5, #2
 80073dc:	9219      	str	r2, [sp, #100]	; 0x64
 80073de:	78aa      	ldrb	r2, [r5, #2]
 80073e0:	e788      	b.n	80072f4 <_strtod_l+0x194>
 80073e2:	f04f 0c01 	mov.w	ip, #1
 80073e6:	e7f8      	b.n	80073da <_strtod_l+0x27a>
 80073e8:	0800b7d8 	.word	0x0800b7d8
 80073ec:	7ff00000 	.word	0x7ff00000
 80073f0:	0800b7d4 	.word	0x0800b7d4
 80073f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073f6:	1c51      	adds	r1, r2, #1
 80073f8:	9119      	str	r1, [sp, #100]	; 0x64
 80073fa:	7852      	ldrb	r2, [r2, #1]
 80073fc:	2a30      	cmp	r2, #48	; 0x30
 80073fe:	d0f9      	beq.n	80073f4 <_strtod_l+0x294>
 8007400:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007404:	2908      	cmp	r1, #8
 8007406:	f63f af7a 	bhi.w	80072fe <_strtod_l+0x19e>
 800740a:	3a30      	subs	r2, #48	; 0x30
 800740c:	9209      	str	r2, [sp, #36]	; 0x24
 800740e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007410:	920c      	str	r2, [sp, #48]	; 0x30
 8007412:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007414:	1c57      	adds	r7, r2, #1
 8007416:	9719      	str	r7, [sp, #100]	; 0x64
 8007418:	7852      	ldrb	r2, [r2, #1]
 800741a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800741e:	f1be 0f09 	cmp.w	lr, #9
 8007422:	d938      	bls.n	8007496 <_strtod_l+0x336>
 8007424:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007426:	1a7f      	subs	r7, r7, r1
 8007428:	2f08      	cmp	r7, #8
 800742a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800742e:	dc03      	bgt.n	8007438 <_strtod_l+0x2d8>
 8007430:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007432:	428f      	cmp	r7, r1
 8007434:	bfa8      	it	ge
 8007436:	460f      	movge	r7, r1
 8007438:	f1bc 0f00 	cmp.w	ip, #0
 800743c:	d000      	beq.n	8007440 <_strtod_l+0x2e0>
 800743e:	427f      	negs	r7, r7
 8007440:	2e00      	cmp	r6, #0
 8007442:	d14f      	bne.n	80074e4 <_strtod_l+0x384>
 8007444:	9905      	ldr	r1, [sp, #20]
 8007446:	4301      	orrs	r1, r0
 8007448:	f47f aec3 	bne.w	80071d2 <_strtod_l+0x72>
 800744c:	2b00      	cmp	r3, #0
 800744e:	f47f aedb 	bne.w	8007208 <_strtod_l+0xa8>
 8007452:	2a69      	cmp	r2, #105	; 0x69
 8007454:	d029      	beq.n	80074aa <_strtod_l+0x34a>
 8007456:	dc26      	bgt.n	80074a6 <_strtod_l+0x346>
 8007458:	2a49      	cmp	r2, #73	; 0x49
 800745a:	d026      	beq.n	80074aa <_strtod_l+0x34a>
 800745c:	2a4e      	cmp	r2, #78	; 0x4e
 800745e:	f47f aed3 	bne.w	8007208 <_strtod_l+0xa8>
 8007462:	499a      	ldr	r1, [pc, #616]	; (80076cc <_strtod_l+0x56c>)
 8007464:	a819      	add	r0, sp, #100	; 0x64
 8007466:	f001 f9a3 	bl	80087b0 <__match>
 800746a:	2800      	cmp	r0, #0
 800746c:	f43f aecc 	beq.w	8007208 <_strtod_l+0xa8>
 8007470:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b28      	cmp	r3, #40	; 0x28
 8007476:	d12f      	bne.n	80074d8 <_strtod_l+0x378>
 8007478:	4995      	ldr	r1, [pc, #596]	; (80076d0 <_strtod_l+0x570>)
 800747a:	aa1c      	add	r2, sp, #112	; 0x70
 800747c:	a819      	add	r0, sp, #100	; 0x64
 800747e:	f001 f9ab 	bl	80087d8 <__hexnan>
 8007482:	2805      	cmp	r0, #5
 8007484:	d128      	bne.n	80074d8 <_strtod_l+0x378>
 8007486:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007488:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800748c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007490:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007494:	e69d      	b.n	80071d2 <_strtod_l+0x72>
 8007496:	210a      	movs	r1, #10
 8007498:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800749a:	fb01 2107 	mla	r1, r1, r7, r2
 800749e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80074a2:	9209      	str	r2, [sp, #36]	; 0x24
 80074a4:	e7b5      	b.n	8007412 <_strtod_l+0x2b2>
 80074a6:	2a6e      	cmp	r2, #110	; 0x6e
 80074a8:	e7d9      	b.n	800745e <_strtod_l+0x2fe>
 80074aa:	498a      	ldr	r1, [pc, #552]	; (80076d4 <_strtod_l+0x574>)
 80074ac:	a819      	add	r0, sp, #100	; 0x64
 80074ae:	f001 f97f 	bl	80087b0 <__match>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	f43f aea8 	beq.w	8007208 <_strtod_l+0xa8>
 80074b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074ba:	4987      	ldr	r1, [pc, #540]	; (80076d8 <_strtod_l+0x578>)
 80074bc:	3b01      	subs	r3, #1
 80074be:	a819      	add	r0, sp, #100	; 0x64
 80074c0:	9319      	str	r3, [sp, #100]	; 0x64
 80074c2:	f001 f975 	bl	80087b0 <__match>
 80074c6:	b910      	cbnz	r0, 80074ce <_strtod_l+0x36e>
 80074c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074ca:	3301      	adds	r3, #1
 80074cc:	9319      	str	r3, [sp, #100]	; 0x64
 80074ce:	f04f 0800 	mov.w	r8, #0
 80074d2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80076dc <_strtod_l+0x57c>
 80074d6:	e67c      	b.n	80071d2 <_strtod_l+0x72>
 80074d8:	4881      	ldr	r0, [pc, #516]	; (80076e0 <_strtod_l+0x580>)
 80074da:	f000 fe87 	bl	80081ec <nan>
 80074de:	4680      	mov	r8, r0
 80074e0:	4689      	mov	r9, r1
 80074e2:	e676      	b.n	80071d2 <_strtod_l+0x72>
 80074e4:	9b08      	ldr	r3, [sp, #32]
 80074e6:	f1bb 0f00 	cmp.w	fp, #0
 80074ea:	bf08      	it	eq
 80074ec:	46b3      	moveq	fp, r6
 80074ee:	1afb      	subs	r3, r7, r3
 80074f0:	2e10      	cmp	r6, #16
 80074f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074f4:	4635      	mov	r5, r6
 80074f6:	9309      	str	r3, [sp, #36]	; 0x24
 80074f8:	bfa8      	it	ge
 80074fa:	2510      	movge	r5, #16
 80074fc:	f7f9 f826 	bl	800054c <__aeabi_ui2d>
 8007500:	2e09      	cmp	r6, #9
 8007502:	4680      	mov	r8, r0
 8007504:	4689      	mov	r9, r1
 8007506:	dd13      	ble.n	8007530 <_strtod_l+0x3d0>
 8007508:	4b76      	ldr	r3, [pc, #472]	; (80076e4 <_strtod_l+0x584>)
 800750a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800750e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007512:	f7f9 f895 	bl	8000640 <__aeabi_dmul>
 8007516:	4680      	mov	r8, r0
 8007518:	4650      	mov	r0, sl
 800751a:	4689      	mov	r9, r1
 800751c:	f7f9 f816 	bl	800054c <__aeabi_ui2d>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4640      	mov	r0, r8
 8007526:	4649      	mov	r1, r9
 8007528:	f7f8 fed4 	bl	80002d4 <__adddf3>
 800752c:	4680      	mov	r8, r0
 800752e:	4689      	mov	r9, r1
 8007530:	2e0f      	cmp	r6, #15
 8007532:	dc36      	bgt.n	80075a2 <_strtod_l+0x442>
 8007534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007536:	2b00      	cmp	r3, #0
 8007538:	f43f ae4b 	beq.w	80071d2 <_strtod_l+0x72>
 800753c:	dd22      	ble.n	8007584 <_strtod_l+0x424>
 800753e:	2b16      	cmp	r3, #22
 8007540:	dc09      	bgt.n	8007556 <_strtod_l+0x3f6>
 8007542:	4968      	ldr	r1, [pc, #416]	; (80076e4 <_strtod_l+0x584>)
 8007544:	4642      	mov	r2, r8
 8007546:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800754a:	464b      	mov	r3, r9
 800754c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007550:	f7f9 f876 	bl	8000640 <__aeabi_dmul>
 8007554:	e7c3      	b.n	80074de <_strtod_l+0x37e>
 8007556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007558:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800755c:	4293      	cmp	r3, r2
 800755e:	db20      	blt.n	80075a2 <_strtod_l+0x442>
 8007560:	4c60      	ldr	r4, [pc, #384]	; (80076e4 <_strtod_l+0x584>)
 8007562:	f1c6 060f 	rsb	r6, r6, #15
 8007566:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800756a:	4642      	mov	r2, r8
 800756c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007570:	464b      	mov	r3, r9
 8007572:	f7f9 f865 	bl	8000640 <__aeabi_dmul>
 8007576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007578:	1b9e      	subs	r6, r3, r6
 800757a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800757e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007582:	e7e5      	b.n	8007550 <_strtod_l+0x3f0>
 8007584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007586:	3316      	adds	r3, #22
 8007588:	db0b      	blt.n	80075a2 <_strtod_l+0x442>
 800758a:	9b08      	ldr	r3, [sp, #32]
 800758c:	4640      	mov	r0, r8
 800758e:	1bdf      	subs	r7, r3, r7
 8007590:	4b54      	ldr	r3, [pc, #336]	; (80076e4 <_strtod_l+0x584>)
 8007592:	4649      	mov	r1, r9
 8007594:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800759c:	f7f9 f97a 	bl	8000894 <__aeabi_ddiv>
 80075a0:	e79d      	b.n	80074de <_strtod_l+0x37e>
 80075a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a4:	1b75      	subs	r5, r6, r5
 80075a6:	441d      	add	r5, r3
 80075a8:	2d00      	cmp	r5, #0
 80075aa:	dd70      	ble.n	800768e <_strtod_l+0x52e>
 80075ac:	f015 030f 	ands.w	r3, r5, #15
 80075b0:	d00a      	beq.n	80075c8 <_strtod_l+0x468>
 80075b2:	494c      	ldr	r1, [pc, #304]	; (80076e4 <_strtod_l+0x584>)
 80075b4:	4642      	mov	r2, r8
 80075b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075be:	464b      	mov	r3, r9
 80075c0:	f7f9 f83e 	bl	8000640 <__aeabi_dmul>
 80075c4:	4680      	mov	r8, r0
 80075c6:	4689      	mov	r9, r1
 80075c8:	f035 050f 	bics.w	r5, r5, #15
 80075cc:	d04d      	beq.n	800766a <_strtod_l+0x50a>
 80075ce:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80075d2:	dd22      	ble.n	800761a <_strtod_l+0x4ba>
 80075d4:	2600      	movs	r6, #0
 80075d6:	46b3      	mov	fp, r6
 80075d8:	960b      	str	r6, [sp, #44]	; 0x2c
 80075da:	9608      	str	r6, [sp, #32]
 80075dc:	2322      	movs	r3, #34	; 0x22
 80075de:	f04f 0800 	mov.w	r8, #0
 80075e2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80076dc <_strtod_l+0x57c>
 80075e6:	6023      	str	r3, [r4, #0]
 80075e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f43f adf1 	beq.w	80071d2 <_strtod_l+0x72>
 80075f0:	4620      	mov	r0, r4
 80075f2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80075f4:	f7ff f934 	bl	8006860 <_Bfree>
 80075f8:	4620      	mov	r0, r4
 80075fa:	9908      	ldr	r1, [sp, #32]
 80075fc:	f7ff f930 	bl	8006860 <_Bfree>
 8007600:	4659      	mov	r1, fp
 8007602:	4620      	mov	r0, r4
 8007604:	f7ff f92c 	bl	8006860 <_Bfree>
 8007608:	4620      	mov	r0, r4
 800760a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800760c:	f7ff f928 	bl	8006860 <_Bfree>
 8007610:	4631      	mov	r1, r6
 8007612:	4620      	mov	r0, r4
 8007614:	f7ff f924 	bl	8006860 <_Bfree>
 8007618:	e5db      	b.n	80071d2 <_strtod_l+0x72>
 800761a:	4b33      	ldr	r3, [pc, #204]	; (80076e8 <_strtod_l+0x588>)
 800761c:	4640      	mov	r0, r8
 800761e:	9305      	str	r3, [sp, #20]
 8007620:	2300      	movs	r3, #0
 8007622:	4649      	mov	r1, r9
 8007624:	469a      	mov	sl, r3
 8007626:	112d      	asrs	r5, r5, #4
 8007628:	2d01      	cmp	r5, #1
 800762a:	dc21      	bgt.n	8007670 <_strtod_l+0x510>
 800762c:	b10b      	cbz	r3, 8007632 <_strtod_l+0x4d2>
 800762e:	4680      	mov	r8, r0
 8007630:	4689      	mov	r9, r1
 8007632:	492d      	ldr	r1, [pc, #180]	; (80076e8 <_strtod_l+0x588>)
 8007634:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007638:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800763c:	4642      	mov	r2, r8
 800763e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007642:	464b      	mov	r3, r9
 8007644:	f7f8 fffc 	bl	8000640 <__aeabi_dmul>
 8007648:	4b24      	ldr	r3, [pc, #144]	; (80076dc <_strtod_l+0x57c>)
 800764a:	460a      	mov	r2, r1
 800764c:	400b      	ands	r3, r1
 800764e:	4927      	ldr	r1, [pc, #156]	; (80076ec <_strtod_l+0x58c>)
 8007650:	4680      	mov	r8, r0
 8007652:	428b      	cmp	r3, r1
 8007654:	d8be      	bhi.n	80075d4 <_strtod_l+0x474>
 8007656:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800765a:	428b      	cmp	r3, r1
 800765c:	bf86      	itte	hi
 800765e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007662:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80076f0 <_strtod_l+0x590>
 8007666:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800766a:	2300      	movs	r3, #0
 800766c:	9305      	str	r3, [sp, #20]
 800766e:	e07b      	b.n	8007768 <_strtod_l+0x608>
 8007670:	07ea      	lsls	r2, r5, #31
 8007672:	d505      	bpl.n	8007680 <_strtod_l+0x520>
 8007674:	9b05      	ldr	r3, [sp, #20]
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f8 ffe1 	bl	8000640 <__aeabi_dmul>
 800767e:	2301      	movs	r3, #1
 8007680:	9a05      	ldr	r2, [sp, #20]
 8007682:	f10a 0a01 	add.w	sl, sl, #1
 8007686:	3208      	adds	r2, #8
 8007688:	106d      	asrs	r5, r5, #1
 800768a:	9205      	str	r2, [sp, #20]
 800768c:	e7cc      	b.n	8007628 <_strtod_l+0x4c8>
 800768e:	d0ec      	beq.n	800766a <_strtod_l+0x50a>
 8007690:	426d      	negs	r5, r5
 8007692:	f015 020f 	ands.w	r2, r5, #15
 8007696:	d00a      	beq.n	80076ae <_strtod_l+0x54e>
 8007698:	4b12      	ldr	r3, [pc, #72]	; (80076e4 <_strtod_l+0x584>)
 800769a:	4640      	mov	r0, r8
 800769c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076a0:	4649      	mov	r1, r9
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	f7f9 f8f5 	bl	8000894 <__aeabi_ddiv>
 80076aa:	4680      	mov	r8, r0
 80076ac:	4689      	mov	r9, r1
 80076ae:	112d      	asrs	r5, r5, #4
 80076b0:	d0db      	beq.n	800766a <_strtod_l+0x50a>
 80076b2:	2d1f      	cmp	r5, #31
 80076b4:	dd1e      	ble.n	80076f4 <_strtod_l+0x594>
 80076b6:	2600      	movs	r6, #0
 80076b8:	46b3      	mov	fp, r6
 80076ba:	960b      	str	r6, [sp, #44]	; 0x2c
 80076bc:	9608      	str	r6, [sp, #32]
 80076be:	2322      	movs	r3, #34	; 0x22
 80076c0:	f04f 0800 	mov.w	r8, #0
 80076c4:	f04f 0900 	mov.w	r9, #0
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	e78d      	b.n	80075e8 <_strtod_l+0x488>
 80076cc:	0800b5c0 	.word	0x0800b5c0
 80076d0:	0800b7ec 	.word	0x0800b7ec
 80076d4:	0800b5b8 	.word	0x0800b5b8
 80076d8:	0800b5ef 	.word	0x0800b5ef
 80076dc:	7ff00000 	.word	0x7ff00000
 80076e0:	0800b87c 	.word	0x0800b87c
 80076e4:	0800b700 	.word	0x0800b700
 80076e8:	0800b6d8 	.word	0x0800b6d8
 80076ec:	7ca00000 	.word	0x7ca00000
 80076f0:	7fefffff 	.word	0x7fefffff
 80076f4:	f015 0310 	ands.w	r3, r5, #16
 80076f8:	bf18      	it	ne
 80076fa:	236a      	movne	r3, #106	; 0x6a
 80076fc:	4640      	mov	r0, r8
 80076fe:	9305      	str	r3, [sp, #20]
 8007700:	4649      	mov	r1, r9
 8007702:	2300      	movs	r3, #0
 8007704:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80079d0 <_strtod_l+0x870>
 8007708:	07ea      	lsls	r2, r5, #31
 800770a:	d504      	bpl.n	8007716 <_strtod_l+0x5b6>
 800770c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007710:	f7f8 ff96 	bl	8000640 <__aeabi_dmul>
 8007714:	2301      	movs	r3, #1
 8007716:	106d      	asrs	r5, r5, #1
 8007718:	f10a 0a08 	add.w	sl, sl, #8
 800771c:	d1f4      	bne.n	8007708 <_strtod_l+0x5a8>
 800771e:	b10b      	cbz	r3, 8007724 <_strtod_l+0x5c4>
 8007720:	4680      	mov	r8, r0
 8007722:	4689      	mov	r9, r1
 8007724:	9b05      	ldr	r3, [sp, #20]
 8007726:	b1bb      	cbz	r3, 8007758 <_strtod_l+0x5f8>
 8007728:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800772c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007730:	2b00      	cmp	r3, #0
 8007732:	4649      	mov	r1, r9
 8007734:	dd10      	ble.n	8007758 <_strtod_l+0x5f8>
 8007736:	2b1f      	cmp	r3, #31
 8007738:	f340 8128 	ble.w	800798c <_strtod_l+0x82c>
 800773c:	2b34      	cmp	r3, #52	; 0x34
 800773e:	bfd8      	it	le
 8007740:	f04f 33ff 	movle.w	r3, #4294967295
 8007744:	f04f 0800 	mov.w	r8, #0
 8007748:	bfcf      	iteee	gt
 800774a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800774e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007752:	4093      	lslle	r3, r2
 8007754:	ea03 0901 	andle.w	r9, r3, r1
 8007758:	2200      	movs	r2, #0
 800775a:	2300      	movs	r3, #0
 800775c:	4640      	mov	r0, r8
 800775e:	4649      	mov	r1, r9
 8007760:	f7f9 f9d6 	bl	8000b10 <__aeabi_dcmpeq>
 8007764:	2800      	cmp	r0, #0
 8007766:	d1a6      	bne.n	80076b6 <_strtod_l+0x556>
 8007768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800776a:	465a      	mov	r2, fp
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	4620      	mov	r0, r4
 8007770:	4633      	mov	r3, r6
 8007772:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007774:	f7ff f8dc 	bl	8006930 <__s2b>
 8007778:	900b      	str	r0, [sp, #44]	; 0x2c
 800777a:	2800      	cmp	r0, #0
 800777c:	f43f af2a 	beq.w	80075d4 <_strtod_l+0x474>
 8007780:	2600      	movs	r6, #0
 8007782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007784:	9b08      	ldr	r3, [sp, #32]
 8007786:	2a00      	cmp	r2, #0
 8007788:	eba3 0307 	sub.w	r3, r3, r7
 800778c:	bfa8      	it	ge
 800778e:	2300      	movge	r3, #0
 8007790:	46b3      	mov	fp, r6
 8007792:	9312      	str	r3, [sp, #72]	; 0x48
 8007794:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007798:	9316      	str	r3, [sp, #88]	; 0x58
 800779a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800779c:	4620      	mov	r0, r4
 800779e:	6859      	ldr	r1, [r3, #4]
 80077a0:	f7ff f81e 	bl	80067e0 <_Balloc>
 80077a4:	9008      	str	r0, [sp, #32]
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f43f af18 	beq.w	80075dc <_strtod_l+0x47c>
 80077ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ae:	300c      	adds	r0, #12
 80077b0:	691a      	ldr	r2, [r3, #16]
 80077b2:	f103 010c 	add.w	r1, r3, #12
 80077b6:	3202      	adds	r2, #2
 80077b8:	0092      	lsls	r2, r2, #2
 80077ba:	f000 fd09 	bl	80081d0 <memcpy>
 80077be:	ab1c      	add	r3, sp, #112	; 0x70
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	ab1b      	add	r3, sp, #108	; 0x6c
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	4642      	mov	r2, r8
 80077c8:	464b      	mov	r3, r9
 80077ca:	4620      	mov	r0, r4
 80077cc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80077d0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80077d4:	f7ff fbd8 	bl	8006f88 <__d2b>
 80077d8:	901a      	str	r0, [sp, #104]	; 0x68
 80077da:	2800      	cmp	r0, #0
 80077dc:	f43f aefe 	beq.w	80075dc <_strtod_l+0x47c>
 80077e0:	2101      	movs	r1, #1
 80077e2:	4620      	mov	r0, r4
 80077e4:	f7ff f93c 	bl	8006a60 <__i2b>
 80077e8:	4683      	mov	fp, r0
 80077ea:	2800      	cmp	r0, #0
 80077ec:	f43f aef6 	beq.w	80075dc <_strtod_l+0x47c>
 80077f0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80077f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80077f4:	2f00      	cmp	r7, #0
 80077f6:	bfab      	itete	ge
 80077f8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80077fa:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80077fc:	eb07 0a03 	addge.w	sl, r7, r3
 8007800:	1bdd      	sublt	r5, r3, r7
 8007802:	9b05      	ldr	r3, [sp, #20]
 8007804:	bfa8      	it	ge
 8007806:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007808:	eba7 0703 	sub.w	r7, r7, r3
 800780c:	4417      	add	r7, r2
 800780e:	4b71      	ldr	r3, [pc, #452]	; (80079d4 <_strtod_l+0x874>)
 8007810:	f107 37ff 	add.w	r7, r7, #4294967295
 8007814:	bfb8      	it	lt
 8007816:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800781a:	429f      	cmp	r7, r3
 800781c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007820:	f280 80c7 	bge.w	80079b2 <_strtod_l+0x852>
 8007824:	1bdb      	subs	r3, r3, r7
 8007826:	2b1f      	cmp	r3, #31
 8007828:	f04f 0101 	mov.w	r1, #1
 800782c:	eba2 0203 	sub.w	r2, r2, r3
 8007830:	f300 80b3 	bgt.w	800799a <_strtod_l+0x83a>
 8007834:	fa01 f303 	lsl.w	r3, r1, r3
 8007838:	9313      	str	r3, [sp, #76]	; 0x4c
 800783a:	2300      	movs	r3, #0
 800783c:	9310      	str	r3, [sp, #64]	; 0x40
 800783e:	eb0a 0702 	add.w	r7, sl, r2
 8007842:	9b05      	ldr	r3, [sp, #20]
 8007844:	45ba      	cmp	sl, r7
 8007846:	4415      	add	r5, r2
 8007848:	441d      	add	r5, r3
 800784a:	4653      	mov	r3, sl
 800784c:	bfa8      	it	ge
 800784e:	463b      	movge	r3, r7
 8007850:	42ab      	cmp	r3, r5
 8007852:	bfa8      	it	ge
 8007854:	462b      	movge	r3, r5
 8007856:	2b00      	cmp	r3, #0
 8007858:	bfc2      	ittt	gt
 800785a:	1aff      	subgt	r7, r7, r3
 800785c:	1aed      	subgt	r5, r5, r3
 800785e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007862:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007864:	2b00      	cmp	r3, #0
 8007866:	dd17      	ble.n	8007898 <_strtod_l+0x738>
 8007868:	4659      	mov	r1, fp
 800786a:	461a      	mov	r2, r3
 800786c:	4620      	mov	r0, r4
 800786e:	f7ff f9b5 	bl	8006bdc <__pow5mult>
 8007872:	4683      	mov	fp, r0
 8007874:	2800      	cmp	r0, #0
 8007876:	f43f aeb1 	beq.w	80075dc <_strtod_l+0x47c>
 800787a:	4601      	mov	r1, r0
 800787c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800787e:	4620      	mov	r0, r4
 8007880:	f7ff f904 	bl	8006a8c <__multiply>
 8007884:	900a      	str	r0, [sp, #40]	; 0x28
 8007886:	2800      	cmp	r0, #0
 8007888:	f43f aea8 	beq.w	80075dc <_strtod_l+0x47c>
 800788c:	4620      	mov	r0, r4
 800788e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007890:	f7fe ffe6 	bl	8006860 <_Bfree>
 8007894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007896:	931a      	str	r3, [sp, #104]	; 0x68
 8007898:	2f00      	cmp	r7, #0
 800789a:	f300 808f 	bgt.w	80079bc <_strtod_l+0x85c>
 800789e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	dd08      	ble.n	80078b6 <_strtod_l+0x756>
 80078a4:	4620      	mov	r0, r4
 80078a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078a8:	9908      	ldr	r1, [sp, #32]
 80078aa:	f7ff f997 	bl	8006bdc <__pow5mult>
 80078ae:	9008      	str	r0, [sp, #32]
 80078b0:	2800      	cmp	r0, #0
 80078b2:	f43f ae93 	beq.w	80075dc <_strtod_l+0x47c>
 80078b6:	2d00      	cmp	r5, #0
 80078b8:	dd08      	ble.n	80078cc <_strtod_l+0x76c>
 80078ba:	462a      	mov	r2, r5
 80078bc:	4620      	mov	r0, r4
 80078be:	9908      	ldr	r1, [sp, #32]
 80078c0:	f7ff f9e6 	bl	8006c90 <__lshift>
 80078c4:	9008      	str	r0, [sp, #32]
 80078c6:	2800      	cmp	r0, #0
 80078c8:	f43f ae88 	beq.w	80075dc <_strtod_l+0x47c>
 80078cc:	f1ba 0f00 	cmp.w	sl, #0
 80078d0:	dd08      	ble.n	80078e4 <_strtod_l+0x784>
 80078d2:	4659      	mov	r1, fp
 80078d4:	4652      	mov	r2, sl
 80078d6:	4620      	mov	r0, r4
 80078d8:	f7ff f9da 	bl	8006c90 <__lshift>
 80078dc:	4683      	mov	fp, r0
 80078de:	2800      	cmp	r0, #0
 80078e0:	f43f ae7c 	beq.w	80075dc <_strtod_l+0x47c>
 80078e4:	4620      	mov	r0, r4
 80078e6:	9a08      	ldr	r2, [sp, #32]
 80078e8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80078ea:	f7ff fa59 	bl	8006da0 <__mdiff>
 80078ee:	4606      	mov	r6, r0
 80078f0:	2800      	cmp	r0, #0
 80078f2:	f43f ae73 	beq.w	80075dc <_strtod_l+0x47c>
 80078f6:	2500      	movs	r5, #0
 80078f8:	68c3      	ldr	r3, [r0, #12]
 80078fa:	4659      	mov	r1, fp
 80078fc:	60c5      	str	r5, [r0, #12]
 80078fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007900:	f7ff fa32 	bl	8006d68 <__mcmp>
 8007904:	42a8      	cmp	r0, r5
 8007906:	da6b      	bge.n	80079e0 <_strtod_l+0x880>
 8007908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800790a:	ea53 0308 	orrs.w	r3, r3, r8
 800790e:	f040 808f 	bne.w	8007a30 <_strtod_l+0x8d0>
 8007912:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007916:	2b00      	cmp	r3, #0
 8007918:	f040 808a 	bne.w	8007a30 <_strtod_l+0x8d0>
 800791c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007920:	0d1b      	lsrs	r3, r3, #20
 8007922:	051b      	lsls	r3, r3, #20
 8007924:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007928:	f240 8082 	bls.w	8007a30 <_strtod_l+0x8d0>
 800792c:	6973      	ldr	r3, [r6, #20]
 800792e:	b913      	cbnz	r3, 8007936 <_strtod_l+0x7d6>
 8007930:	6933      	ldr	r3, [r6, #16]
 8007932:	2b01      	cmp	r3, #1
 8007934:	dd7c      	ble.n	8007a30 <_strtod_l+0x8d0>
 8007936:	4631      	mov	r1, r6
 8007938:	2201      	movs	r2, #1
 800793a:	4620      	mov	r0, r4
 800793c:	f7ff f9a8 	bl	8006c90 <__lshift>
 8007940:	4659      	mov	r1, fp
 8007942:	4606      	mov	r6, r0
 8007944:	f7ff fa10 	bl	8006d68 <__mcmp>
 8007948:	2800      	cmp	r0, #0
 800794a:	dd71      	ble.n	8007a30 <_strtod_l+0x8d0>
 800794c:	9905      	ldr	r1, [sp, #20]
 800794e:	464b      	mov	r3, r9
 8007950:	4a21      	ldr	r2, [pc, #132]	; (80079d8 <_strtod_l+0x878>)
 8007952:	2900      	cmp	r1, #0
 8007954:	f000 808d 	beq.w	8007a72 <_strtod_l+0x912>
 8007958:	ea02 0109 	and.w	r1, r2, r9
 800795c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007960:	f300 8087 	bgt.w	8007a72 <_strtod_l+0x912>
 8007964:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007968:	f77f aea9 	ble.w	80076be <_strtod_l+0x55e>
 800796c:	4640      	mov	r0, r8
 800796e:	4649      	mov	r1, r9
 8007970:	4b1a      	ldr	r3, [pc, #104]	; (80079dc <_strtod_l+0x87c>)
 8007972:	2200      	movs	r2, #0
 8007974:	f7f8 fe64 	bl	8000640 <__aeabi_dmul>
 8007978:	4b17      	ldr	r3, [pc, #92]	; (80079d8 <_strtod_l+0x878>)
 800797a:	4680      	mov	r8, r0
 800797c:	400b      	ands	r3, r1
 800797e:	4689      	mov	r9, r1
 8007980:	2b00      	cmp	r3, #0
 8007982:	f47f ae35 	bne.w	80075f0 <_strtod_l+0x490>
 8007986:	2322      	movs	r3, #34	; 0x22
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	e631      	b.n	80075f0 <_strtod_l+0x490>
 800798c:	f04f 32ff 	mov.w	r2, #4294967295
 8007990:	fa02 f303 	lsl.w	r3, r2, r3
 8007994:	ea03 0808 	and.w	r8, r3, r8
 8007998:	e6de      	b.n	8007758 <_strtod_l+0x5f8>
 800799a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800799e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80079a2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80079a6:	37e2      	adds	r7, #226	; 0xe2
 80079a8:	fa01 f307 	lsl.w	r3, r1, r7
 80079ac:	9310      	str	r3, [sp, #64]	; 0x40
 80079ae:	9113      	str	r1, [sp, #76]	; 0x4c
 80079b0:	e745      	b.n	800783e <_strtod_l+0x6de>
 80079b2:	2300      	movs	r3, #0
 80079b4:	9310      	str	r3, [sp, #64]	; 0x40
 80079b6:	2301      	movs	r3, #1
 80079b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80079ba:	e740      	b.n	800783e <_strtod_l+0x6de>
 80079bc:	463a      	mov	r2, r7
 80079be:	4620      	mov	r0, r4
 80079c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079c2:	f7ff f965 	bl	8006c90 <__lshift>
 80079c6:	901a      	str	r0, [sp, #104]	; 0x68
 80079c8:	2800      	cmp	r0, #0
 80079ca:	f47f af68 	bne.w	800789e <_strtod_l+0x73e>
 80079ce:	e605      	b.n	80075dc <_strtod_l+0x47c>
 80079d0:	0800b800 	.word	0x0800b800
 80079d4:	fffffc02 	.word	0xfffffc02
 80079d8:	7ff00000 	.word	0x7ff00000
 80079dc:	39500000 	.word	0x39500000
 80079e0:	46ca      	mov	sl, r9
 80079e2:	d165      	bne.n	8007ab0 <_strtod_l+0x950>
 80079e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079ea:	b352      	cbz	r2, 8007a42 <_strtod_l+0x8e2>
 80079ec:	4a9e      	ldr	r2, [pc, #632]	; (8007c68 <_strtod_l+0xb08>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d12a      	bne.n	8007a48 <_strtod_l+0x8e8>
 80079f2:	9b05      	ldr	r3, [sp, #20]
 80079f4:	4641      	mov	r1, r8
 80079f6:	b1fb      	cbz	r3, 8007a38 <_strtod_l+0x8d8>
 80079f8:	4b9c      	ldr	r3, [pc, #624]	; (8007c6c <_strtod_l+0xb0c>)
 80079fa:	f04f 32ff 	mov.w	r2, #4294967295
 80079fe:	ea09 0303 	and.w	r3, r9, r3
 8007a02:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a06:	d81a      	bhi.n	8007a3e <_strtod_l+0x8de>
 8007a08:	0d1b      	lsrs	r3, r3, #20
 8007a0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a12:	4299      	cmp	r1, r3
 8007a14:	d118      	bne.n	8007a48 <_strtod_l+0x8e8>
 8007a16:	4b96      	ldr	r3, [pc, #600]	; (8007c70 <_strtod_l+0xb10>)
 8007a18:	459a      	cmp	sl, r3
 8007a1a:	d102      	bne.n	8007a22 <_strtod_l+0x8c2>
 8007a1c:	3101      	adds	r1, #1
 8007a1e:	f43f addd 	beq.w	80075dc <_strtod_l+0x47c>
 8007a22:	f04f 0800 	mov.w	r8, #0
 8007a26:	4b91      	ldr	r3, [pc, #580]	; (8007c6c <_strtod_l+0xb0c>)
 8007a28:	ea0a 0303 	and.w	r3, sl, r3
 8007a2c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007a30:	9b05      	ldr	r3, [sp, #20]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d19a      	bne.n	800796c <_strtod_l+0x80c>
 8007a36:	e5db      	b.n	80075f0 <_strtod_l+0x490>
 8007a38:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3c:	e7e9      	b.n	8007a12 <_strtod_l+0x8b2>
 8007a3e:	4613      	mov	r3, r2
 8007a40:	e7e7      	b.n	8007a12 <_strtod_l+0x8b2>
 8007a42:	ea53 0308 	orrs.w	r3, r3, r8
 8007a46:	d081      	beq.n	800794c <_strtod_l+0x7ec>
 8007a48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a4a:	b1e3      	cbz	r3, 8007a86 <_strtod_l+0x926>
 8007a4c:	ea13 0f0a 	tst.w	r3, sl
 8007a50:	d0ee      	beq.n	8007a30 <_strtod_l+0x8d0>
 8007a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a54:	4640      	mov	r0, r8
 8007a56:	4649      	mov	r1, r9
 8007a58:	9a05      	ldr	r2, [sp, #20]
 8007a5a:	b1c3      	cbz	r3, 8007a8e <_strtod_l+0x92e>
 8007a5c:	f7ff fb5c 	bl	8007118 <sulp>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a68:	f7f8 fc34 	bl	80002d4 <__adddf3>
 8007a6c:	4680      	mov	r8, r0
 8007a6e:	4689      	mov	r9, r1
 8007a70:	e7de      	b.n	8007a30 <_strtod_l+0x8d0>
 8007a72:	4013      	ands	r3, r2
 8007a74:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a78:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007a7c:	f04f 38ff 	mov.w	r8, #4294967295
 8007a80:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007a84:	e7d4      	b.n	8007a30 <_strtod_l+0x8d0>
 8007a86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a88:	ea13 0f08 	tst.w	r3, r8
 8007a8c:	e7e0      	b.n	8007a50 <_strtod_l+0x8f0>
 8007a8e:	f7ff fb43 	bl	8007118 <sulp>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a9a:	f7f8 fc19 	bl	80002d0 <__aeabi_dsub>
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4680      	mov	r8, r0
 8007aa4:	4689      	mov	r9, r1
 8007aa6:	f7f9 f833 	bl	8000b10 <__aeabi_dcmpeq>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d0c0      	beq.n	8007a30 <_strtod_l+0x8d0>
 8007aae:	e606      	b.n	80076be <_strtod_l+0x55e>
 8007ab0:	4659      	mov	r1, fp
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f7ff fabe 	bl	8007034 <__ratio>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ac6:	f7f9 f837 	bl	8000b38 <__aeabi_dcmple>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d06f      	beq.n	8007bae <_strtod_l+0xa4e>
 8007ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d17c      	bne.n	8007bce <_strtod_l+0xa6e>
 8007ad4:	f1b8 0f00 	cmp.w	r8, #0
 8007ad8:	d159      	bne.n	8007b8e <_strtod_l+0xa2e>
 8007ada:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d17b      	bne.n	8007bda <_strtod_l+0xa7a>
 8007ae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	4b62      	ldr	r3, [pc, #392]	; (8007c74 <_strtod_l+0xb14>)
 8007aea:	f7f9 f81b 	bl	8000b24 <__aeabi_dcmplt>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d15a      	bne.n	8007ba8 <_strtod_l+0xa48>
 8007af2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007af6:	2200      	movs	r2, #0
 8007af8:	4b5f      	ldr	r3, [pc, #380]	; (8007c78 <_strtod_l+0xb18>)
 8007afa:	f7f8 fda1 	bl	8000640 <__aeabi_dmul>
 8007afe:	4605      	mov	r5, r0
 8007b00:	460f      	mov	r7, r1
 8007b02:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007b06:	9506      	str	r5, [sp, #24]
 8007b08:	9307      	str	r3, [sp, #28]
 8007b0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b0e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007b12:	4b56      	ldr	r3, [pc, #344]	; (8007c6c <_strtod_l+0xb0c>)
 8007b14:	4a55      	ldr	r2, [pc, #340]	; (8007c6c <_strtod_l+0xb0c>)
 8007b16:	ea0a 0303 	and.w	r3, sl, r3
 8007b1a:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b1c:	4b57      	ldr	r3, [pc, #348]	; (8007c7c <_strtod_l+0xb1c>)
 8007b1e:	ea0a 0202 	and.w	r2, sl, r2
 8007b22:	429a      	cmp	r2, r3
 8007b24:	f040 80b0 	bne.w	8007c88 <_strtod_l+0xb28>
 8007b28:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	4649      	mov	r1, r9
 8007b30:	f7ff f9c2 	bl	8006eb8 <__ulp>
 8007b34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b38:	f7f8 fd82 	bl	8000640 <__aeabi_dmul>
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	464b      	mov	r3, r9
 8007b40:	f7f8 fbc8 	bl	80002d4 <__adddf3>
 8007b44:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007c6c <_strtod_l+0xb0c>
 8007b48:	4a4d      	ldr	r2, [pc, #308]	; (8007c80 <_strtod_l+0xb20>)
 8007b4a:	ea01 0a0a 	and.w	sl, r1, sl
 8007b4e:	4592      	cmp	sl, r2
 8007b50:	4680      	mov	r8, r0
 8007b52:	d948      	bls.n	8007be6 <_strtod_l+0xa86>
 8007b54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b56:	4b46      	ldr	r3, [pc, #280]	; (8007c70 <_strtod_l+0xb10>)
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d103      	bne.n	8007b64 <_strtod_l+0xa04>
 8007b5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b5e:	3301      	adds	r3, #1
 8007b60:	f43f ad3c 	beq.w	80075dc <_strtod_l+0x47c>
 8007b64:	f04f 38ff 	mov.w	r8, #4294967295
 8007b68:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007c70 <_strtod_l+0xb10>
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b70:	f7fe fe76 	bl	8006860 <_Bfree>
 8007b74:	4620      	mov	r0, r4
 8007b76:	9908      	ldr	r1, [sp, #32]
 8007b78:	f7fe fe72 	bl	8006860 <_Bfree>
 8007b7c:	4659      	mov	r1, fp
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f7fe fe6e 	bl	8006860 <_Bfree>
 8007b84:	4631      	mov	r1, r6
 8007b86:	4620      	mov	r0, r4
 8007b88:	f7fe fe6a 	bl	8006860 <_Bfree>
 8007b8c:	e605      	b.n	800779a <_strtod_l+0x63a>
 8007b8e:	f1b8 0f01 	cmp.w	r8, #1
 8007b92:	d103      	bne.n	8007b9c <_strtod_l+0xa3c>
 8007b94:	f1b9 0f00 	cmp.w	r9, #0
 8007b98:	f43f ad91 	beq.w	80076be <_strtod_l+0x55e>
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	4b39      	ldr	r3, [pc, #228]	; (8007c84 <_strtod_l+0xb24>)
 8007ba0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007ba2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ba6:	e016      	b.n	8007bd6 <_strtod_l+0xa76>
 8007ba8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007baa:	4f33      	ldr	r7, [pc, #204]	; (8007c78 <_strtod_l+0xb18>)
 8007bac:	e7a9      	b.n	8007b02 <_strtod_l+0x9a2>
 8007bae:	4b32      	ldr	r3, [pc, #200]	; (8007c78 <_strtod_l+0xb18>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bb6:	f7f8 fd43 	bl	8000640 <__aeabi_dmul>
 8007bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	460f      	mov	r7, r1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d09e      	beq.n	8007b02 <_strtod_l+0x9a2>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bcc:	e79d      	b.n	8007b0a <_strtod_l+0x9aa>
 8007bce:	2200      	movs	r2, #0
 8007bd0:	4b28      	ldr	r3, [pc, #160]	; (8007c74 <_strtod_l+0xb14>)
 8007bd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bd6:	4f27      	ldr	r7, [pc, #156]	; (8007c74 <_strtod_l+0xb14>)
 8007bd8:	e797      	b.n	8007b0a <_strtod_l+0x9aa>
 8007bda:	2200      	movs	r2, #0
 8007bdc:	4b29      	ldr	r3, [pc, #164]	; (8007c84 <_strtod_l+0xb24>)
 8007bde:	4645      	mov	r5, r8
 8007be0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007be4:	e7f7      	b.n	8007bd6 <_strtod_l+0xa76>
 8007be6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007bea:	9b05      	ldr	r3, [sp, #20]
 8007bec:	46ca      	mov	sl, r9
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1bc      	bne.n	8007b6c <_strtod_l+0xa0c>
 8007bf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bf6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bf8:	0d1b      	lsrs	r3, r3, #20
 8007bfa:	051b      	lsls	r3, r3, #20
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d1b5      	bne.n	8007b6c <_strtod_l+0xa0c>
 8007c00:	4628      	mov	r0, r5
 8007c02:	4639      	mov	r1, r7
 8007c04:	f7f9 f972 	bl	8000eec <__aeabi_d2lz>
 8007c08:	f7f8 fcec 	bl	80005e4 <__aeabi_l2d>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4628      	mov	r0, r5
 8007c12:	4639      	mov	r1, r7
 8007c14:	f7f8 fb5c 	bl	80002d0 <__aeabi_dsub>
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007c20:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c26:	ea4a 0a08 	orr.w	sl, sl, r8
 8007c2a:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007c2e:	d06c      	beq.n	8007d0a <_strtod_l+0xbaa>
 8007c30:	a309      	add	r3, pc, #36	; (adr r3, 8007c58 <_strtod_l+0xaf8>)
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f7f8 ff75 	bl	8000b24 <__aeabi_dcmplt>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	f47f acd8 	bne.w	80075f0 <_strtod_l+0x490>
 8007c40:	a307      	add	r3, pc, #28	; (adr r3, 8007c60 <_strtod_l+0xb00>)
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c4a:	f7f8 ff89 	bl	8000b60 <__aeabi_dcmpgt>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d08c      	beq.n	8007b6c <_strtod_l+0xa0c>
 8007c52:	e4cd      	b.n	80075f0 <_strtod_l+0x490>
 8007c54:	f3af 8000 	nop.w
 8007c58:	94a03595 	.word	0x94a03595
 8007c5c:	3fdfffff 	.word	0x3fdfffff
 8007c60:	35afe535 	.word	0x35afe535
 8007c64:	3fe00000 	.word	0x3fe00000
 8007c68:	000fffff 	.word	0x000fffff
 8007c6c:	7ff00000 	.word	0x7ff00000
 8007c70:	7fefffff 	.word	0x7fefffff
 8007c74:	3ff00000 	.word	0x3ff00000
 8007c78:	3fe00000 	.word	0x3fe00000
 8007c7c:	7fe00000 	.word	0x7fe00000
 8007c80:	7c9fffff 	.word	0x7c9fffff
 8007c84:	bff00000 	.word	0xbff00000
 8007c88:	9b05      	ldr	r3, [sp, #20]
 8007c8a:	b333      	cbz	r3, 8007cda <_strtod_l+0xb7a>
 8007c8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c92:	d822      	bhi.n	8007cda <_strtod_l+0xb7a>
 8007c94:	a328      	add	r3, pc, #160	; (adr r3, 8007d38 <_strtod_l+0xbd8>)
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	f7f8 ff4b 	bl	8000b38 <__aeabi_dcmple>
 8007ca2:	b1a0      	cbz	r0, 8007cce <_strtod_l+0xb6e>
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f7f8 ffa2 	bl	8000bf0 <__aeabi_d2uiz>
 8007cac:	2801      	cmp	r0, #1
 8007cae:	bf38      	it	cc
 8007cb0:	2001      	movcc	r0, #1
 8007cb2:	f7f8 fc4b 	bl	800054c <__aeabi_ui2d>
 8007cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb8:	4605      	mov	r5, r0
 8007cba:	460f      	mov	r7, r1
 8007cbc:	bb03      	cbnz	r3, 8007d00 <_strtod_l+0xba0>
 8007cbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cc2:	9014      	str	r0, [sp, #80]	; 0x50
 8007cc4:	9315      	str	r3, [sp, #84]	; 0x54
 8007cc6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007cca:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007cce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cd2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007cd6:	1a9b      	subs	r3, r3, r2
 8007cd8:	9311      	str	r3, [sp, #68]	; 0x44
 8007cda:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007cdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007cde:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007ce2:	f7ff f8e9 	bl	8006eb8 <__ulp>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4640      	mov	r0, r8
 8007cec:	4649      	mov	r1, r9
 8007cee:	f7f8 fca7 	bl	8000640 <__aeabi_dmul>
 8007cf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cf6:	f7f8 faed 	bl	80002d4 <__adddf3>
 8007cfa:	4680      	mov	r8, r0
 8007cfc:	4689      	mov	r9, r1
 8007cfe:	e774      	b.n	8007bea <_strtod_l+0xa8a>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007d08:	e7dd      	b.n	8007cc6 <_strtod_l+0xb66>
 8007d0a:	a30d      	add	r3, pc, #52	; (adr r3, 8007d40 <_strtod_l+0xbe0>)
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	f7f8 ff08 	bl	8000b24 <__aeabi_dcmplt>
 8007d14:	e79b      	b.n	8007c4e <_strtod_l+0xaee>
 8007d16:	2300      	movs	r3, #0
 8007d18:	930e      	str	r3, [sp, #56]	; 0x38
 8007d1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	f7ff ba5b 	b.w	80071da <_strtod_l+0x7a>
 8007d24:	2a65      	cmp	r2, #101	; 0x65
 8007d26:	f43f ab52 	beq.w	80073ce <_strtod_l+0x26e>
 8007d2a:	2a45      	cmp	r2, #69	; 0x45
 8007d2c:	f43f ab4f 	beq.w	80073ce <_strtod_l+0x26e>
 8007d30:	2301      	movs	r3, #1
 8007d32:	f7ff bb87 	b.w	8007444 <_strtod_l+0x2e4>
 8007d36:	bf00      	nop
 8007d38:	ffc00000 	.word	0xffc00000
 8007d3c:	41dfffff 	.word	0x41dfffff
 8007d40:	94a03595 	.word	0x94a03595
 8007d44:	3fcfffff 	.word	0x3fcfffff

08007d48 <_strtod_r>:
 8007d48:	4b01      	ldr	r3, [pc, #4]	; (8007d50 <_strtod_r+0x8>)
 8007d4a:	f7ff ba09 	b.w	8007160 <_strtod_l>
 8007d4e:	bf00      	nop
 8007d50:	2000006c 	.word	0x2000006c

08007d54 <__ssputs_r>:
 8007d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d58:	461f      	mov	r7, r3
 8007d5a:	688e      	ldr	r6, [r1, #8]
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	42be      	cmp	r6, r7
 8007d60:	460c      	mov	r4, r1
 8007d62:	4690      	mov	r8, r2
 8007d64:	680b      	ldr	r3, [r1, #0]
 8007d66:	d82c      	bhi.n	8007dc2 <__ssputs_r+0x6e>
 8007d68:	898a      	ldrh	r2, [r1, #12]
 8007d6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d6e:	d026      	beq.n	8007dbe <__ssputs_r+0x6a>
 8007d70:	6965      	ldr	r5, [r4, #20]
 8007d72:	6909      	ldr	r1, [r1, #16]
 8007d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d78:	eba3 0901 	sub.w	r9, r3, r1
 8007d7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d80:	1c7b      	adds	r3, r7, #1
 8007d82:	444b      	add	r3, r9
 8007d84:	106d      	asrs	r5, r5, #1
 8007d86:	429d      	cmp	r5, r3
 8007d88:	bf38      	it	cc
 8007d8a:	461d      	movcc	r5, r3
 8007d8c:	0553      	lsls	r3, r2, #21
 8007d8e:	d527      	bpl.n	8007de0 <__ssputs_r+0x8c>
 8007d90:	4629      	mov	r1, r5
 8007d92:	f7fe fc99 	bl	80066c8 <_malloc_r>
 8007d96:	4606      	mov	r6, r0
 8007d98:	b360      	cbz	r0, 8007df4 <__ssputs_r+0xa0>
 8007d9a:	464a      	mov	r2, r9
 8007d9c:	6921      	ldr	r1, [r4, #16]
 8007d9e:	f000 fa17 	bl	80081d0 <memcpy>
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	6126      	str	r6, [r4, #16]
 8007db0:	444e      	add	r6, r9
 8007db2:	6026      	str	r6, [r4, #0]
 8007db4:	463e      	mov	r6, r7
 8007db6:	6165      	str	r5, [r4, #20]
 8007db8:	eba5 0509 	sub.w	r5, r5, r9
 8007dbc:	60a5      	str	r5, [r4, #8]
 8007dbe:	42be      	cmp	r6, r7
 8007dc0:	d900      	bls.n	8007dc4 <__ssputs_r+0x70>
 8007dc2:	463e      	mov	r6, r7
 8007dc4:	4632      	mov	r2, r6
 8007dc6:	4641      	mov	r1, r8
 8007dc8:	6820      	ldr	r0, [r4, #0]
 8007dca:	f000 f9c5 	bl	8008158 <memmove>
 8007dce:	2000      	movs	r0, #0
 8007dd0:	68a3      	ldr	r3, [r4, #8]
 8007dd2:	1b9b      	subs	r3, r3, r6
 8007dd4:	60a3      	str	r3, [r4, #8]
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	4433      	add	r3, r6
 8007dda:	6023      	str	r3, [r4, #0]
 8007ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de0:	462a      	mov	r2, r5
 8007de2:	f000 fda6 	bl	8008932 <_realloc_r>
 8007de6:	4606      	mov	r6, r0
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d1e0      	bne.n	8007dae <__ssputs_r+0x5a>
 8007dec:	4650      	mov	r0, sl
 8007dee:	6921      	ldr	r1, [r4, #16]
 8007df0:	f7fe fbfa 	bl	80065e8 <_free_r>
 8007df4:	230c      	movs	r3, #12
 8007df6:	f8ca 3000 	str.w	r3, [sl]
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	e7e9      	b.n	8007ddc <__ssputs_r+0x88>

08007e08 <_svfiprintf_r>:
 8007e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0c:	4698      	mov	r8, r3
 8007e0e:	898b      	ldrh	r3, [r1, #12]
 8007e10:	4607      	mov	r7, r0
 8007e12:	061b      	lsls	r3, r3, #24
 8007e14:	460d      	mov	r5, r1
 8007e16:	4614      	mov	r4, r2
 8007e18:	b09d      	sub	sp, #116	; 0x74
 8007e1a:	d50e      	bpl.n	8007e3a <_svfiprintf_r+0x32>
 8007e1c:	690b      	ldr	r3, [r1, #16]
 8007e1e:	b963      	cbnz	r3, 8007e3a <_svfiprintf_r+0x32>
 8007e20:	2140      	movs	r1, #64	; 0x40
 8007e22:	f7fe fc51 	bl	80066c8 <_malloc_r>
 8007e26:	6028      	str	r0, [r5, #0]
 8007e28:	6128      	str	r0, [r5, #16]
 8007e2a:	b920      	cbnz	r0, 8007e36 <_svfiprintf_r+0x2e>
 8007e2c:	230c      	movs	r3, #12
 8007e2e:	603b      	str	r3, [r7, #0]
 8007e30:	f04f 30ff 	mov.w	r0, #4294967295
 8007e34:	e0d0      	b.n	8007fd8 <_svfiprintf_r+0x1d0>
 8007e36:	2340      	movs	r3, #64	; 0x40
 8007e38:	616b      	str	r3, [r5, #20]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e3e:	2320      	movs	r3, #32
 8007e40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e44:	2330      	movs	r3, #48	; 0x30
 8007e46:	f04f 0901 	mov.w	r9, #1
 8007e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e4e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007ff0 <_svfiprintf_r+0x1e8>
 8007e52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e56:	4623      	mov	r3, r4
 8007e58:	469a      	mov	sl, r3
 8007e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e5e:	b10a      	cbz	r2, 8007e64 <_svfiprintf_r+0x5c>
 8007e60:	2a25      	cmp	r2, #37	; 0x25
 8007e62:	d1f9      	bne.n	8007e58 <_svfiprintf_r+0x50>
 8007e64:	ebba 0b04 	subs.w	fp, sl, r4
 8007e68:	d00b      	beq.n	8007e82 <_svfiprintf_r+0x7a>
 8007e6a:	465b      	mov	r3, fp
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4638      	mov	r0, r7
 8007e72:	f7ff ff6f 	bl	8007d54 <__ssputs_r>
 8007e76:	3001      	adds	r0, #1
 8007e78:	f000 80a9 	beq.w	8007fce <_svfiprintf_r+0x1c6>
 8007e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e7e:	445a      	add	r2, fp
 8007e80:	9209      	str	r2, [sp, #36]	; 0x24
 8007e82:	f89a 3000 	ldrb.w	r3, [sl]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 80a1 	beq.w	8007fce <_svfiprintf_r+0x1c6>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e96:	f10a 0a01 	add.w	sl, sl, #1
 8007e9a:	9304      	str	r3, [sp, #16]
 8007e9c:	9307      	str	r3, [sp, #28]
 8007e9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ea2:	931a      	str	r3, [sp, #104]	; 0x68
 8007ea4:	4654      	mov	r4, sl
 8007ea6:	2205      	movs	r2, #5
 8007ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eac:	4850      	ldr	r0, [pc, #320]	; (8007ff0 <_svfiprintf_r+0x1e8>)
 8007eae:	f7fd fd1b 	bl	80058e8 <memchr>
 8007eb2:	9a04      	ldr	r2, [sp, #16]
 8007eb4:	b9d8      	cbnz	r0, 8007eee <_svfiprintf_r+0xe6>
 8007eb6:	06d0      	lsls	r0, r2, #27
 8007eb8:	bf44      	itt	mi
 8007eba:	2320      	movmi	r3, #32
 8007ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ec0:	0711      	lsls	r1, r2, #28
 8007ec2:	bf44      	itt	mi
 8007ec4:	232b      	movmi	r3, #43	; 0x2b
 8007ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eca:	f89a 3000 	ldrb.w	r3, [sl]
 8007ece:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed0:	d015      	beq.n	8007efe <_svfiprintf_r+0xf6>
 8007ed2:	4654      	mov	r4, sl
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	f04f 0c0a 	mov.w	ip, #10
 8007eda:	9a07      	ldr	r2, [sp, #28]
 8007edc:	4621      	mov	r1, r4
 8007ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ee2:	3b30      	subs	r3, #48	; 0x30
 8007ee4:	2b09      	cmp	r3, #9
 8007ee6:	d94d      	bls.n	8007f84 <_svfiprintf_r+0x17c>
 8007ee8:	b1b0      	cbz	r0, 8007f18 <_svfiprintf_r+0x110>
 8007eea:	9207      	str	r2, [sp, #28]
 8007eec:	e014      	b.n	8007f18 <_svfiprintf_r+0x110>
 8007eee:	eba0 0308 	sub.w	r3, r0, r8
 8007ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	46a2      	mov	sl, r4
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	e7d2      	b.n	8007ea4 <_svfiprintf_r+0x9c>
 8007efe:	9b03      	ldr	r3, [sp, #12]
 8007f00:	1d19      	adds	r1, r3, #4
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	9103      	str	r1, [sp, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	bfbb      	ittet	lt
 8007f0a:	425b      	neglt	r3, r3
 8007f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f10:	9307      	strge	r3, [sp, #28]
 8007f12:	9307      	strlt	r3, [sp, #28]
 8007f14:	bfb8      	it	lt
 8007f16:	9204      	strlt	r2, [sp, #16]
 8007f18:	7823      	ldrb	r3, [r4, #0]
 8007f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007f1c:	d10c      	bne.n	8007f38 <_svfiprintf_r+0x130>
 8007f1e:	7863      	ldrb	r3, [r4, #1]
 8007f20:	2b2a      	cmp	r3, #42	; 0x2a
 8007f22:	d134      	bne.n	8007f8e <_svfiprintf_r+0x186>
 8007f24:	9b03      	ldr	r3, [sp, #12]
 8007f26:	3402      	adds	r4, #2
 8007f28:	1d1a      	adds	r2, r3, #4
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	9203      	str	r2, [sp, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	bfb8      	it	lt
 8007f32:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f36:	9305      	str	r3, [sp, #20]
 8007f38:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007ff4 <_svfiprintf_r+0x1ec>
 8007f3c:	2203      	movs	r2, #3
 8007f3e:	4650      	mov	r0, sl
 8007f40:	7821      	ldrb	r1, [r4, #0]
 8007f42:	f7fd fcd1 	bl	80058e8 <memchr>
 8007f46:	b138      	cbz	r0, 8007f58 <_svfiprintf_r+0x150>
 8007f48:	2240      	movs	r2, #64	; 0x40
 8007f4a:	9b04      	ldr	r3, [sp, #16]
 8007f4c:	eba0 000a 	sub.w	r0, r0, sl
 8007f50:	4082      	lsls	r2, r0
 8007f52:	4313      	orrs	r3, r2
 8007f54:	3401      	adds	r4, #1
 8007f56:	9304      	str	r3, [sp, #16]
 8007f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5c:	2206      	movs	r2, #6
 8007f5e:	4826      	ldr	r0, [pc, #152]	; (8007ff8 <_svfiprintf_r+0x1f0>)
 8007f60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f64:	f7fd fcc0 	bl	80058e8 <memchr>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d038      	beq.n	8007fde <_svfiprintf_r+0x1d6>
 8007f6c:	4b23      	ldr	r3, [pc, #140]	; (8007ffc <_svfiprintf_r+0x1f4>)
 8007f6e:	bb1b      	cbnz	r3, 8007fb8 <_svfiprintf_r+0x1b0>
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	3307      	adds	r3, #7
 8007f74:	f023 0307 	bic.w	r3, r3, #7
 8007f78:	3308      	adds	r3, #8
 8007f7a:	9303      	str	r3, [sp, #12]
 8007f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7e:	4433      	add	r3, r6
 8007f80:	9309      	str	r3, [sp, #36]	; 0x24
 8007f82:	e768      	b.n	8007e56 <_svfiprintf_r+0x4e>
 8007f84:	460c      	mov	r4, r1
 8007f86:	2001      	movs	r0, #1
 8007f88:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f8c:	e7a6      	b.n	8007edc <_svfiprintf_r+0xd4>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f04f 0c0a 	mov.w	ip, #10
 8007f94:	4619      	mov	r1, r3
 8007f96:	3401      	adds	r4, #1
 8007f98:	9305      	str	r3, [sp, #20]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fa0:	3a30      	subs	r2, #48	; 0x30
 8007fa2:	2a09      	cmp	r2, #9
 8007fa4:	d903      	bls.n	8007fae <_svfiprintf_r+0x1a6>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0c6      	beq.n	8007f38 <_svfiprintf_r+0x130>
 8007faa:	9105      	str	r1, [sp, #20]
 8007fac:	e7c4      	b.n	8007f38 <_svfiprintf_r+0x130>
 8007fae:	4604      	mov	r4, r0
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fb6:	e7f0      	b.n	8007f9a <_svfiprintf_r+0x192>
 8007fb8:	ab03      	add	r3, sp, #12
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	462a      	mov	r2, r5
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	4b0f      	ldr	r3, [pc, #60]	; (8008000 <_svfiprintf_r+0x1f8>)
 8007fc2:	a904      	add	r1, sp, #16
 8007fc4:	f7fc fd2e 	bl	8004a24 <_printf_float>
 8007fc8:	1c42      	adds	r2, r0, #1
 8007fca:	4606      	mov	r6, r0
 8007fcc:	d1d6      	bne.n	8007f7c <_svfiprintf_r+0x174>
 8007fce:	89ab      	ldrh	r3, [r5, #12]
 8007fd0:	065b      	lsls	r3, r3, #25
 8007fd2:	f53f af2d 	bmi.w	8007e30 <_svfiprintf_r+0x28>
 8007fd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fd8:	b01d      	add	sp, #116	; 0x74
 8007fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fde:	ab03      	add	r3, sp, #12
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <_svfiprintf_r+0x1f8>)
 8007fe8:	a904      	add	r1, sp, #16
 8007fea:	f7fc ffbb 	bl	8004f64 <_printf_i>
 8007fee:	e7eb      	b.n	8007fc8 <_svfiprintf_r+0x1c0>
 8007ff0:	0800b828 	.word	0x0800b828
 8007ff4:	0800b82e 	.word	0x0800b82e
 8007ff8:	0800b832 	.word	0x0800b832
 8007ffc:	08004a25 	.word	0x08004a25
 8008000:	08007d55 	.word	0x08007d55

08008004 <__sflush_r>:
 8008004:	898a      	ldrh	r2, [r1, #12]
 8008006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008008:	4605      	mov	r5, r0
 800800a:	0710      	lsls	r0, r2, #28
 800800c:	460c      	mov	r4, r1
 800800e:	d457      	bmi.n	80080c0 <__sflush_r+0xbc>
 8008010:	684b      	ldr	r3, [r1, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	dc04      	bgt.n	8008020 <__sflush_r+0x1c>
 8008016:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	dc01      	bgt.n	8008020 <__sflush_r+0x1c>
 800801c:	2000      	movs	r0, #0
 800801e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008022:	2e00      	cmp	r6, #0
 8008024:	d0fa      	beq.n	800801c <__sflush_r+0x18>
 8008026:	2300      	movs	r3, #0
 8008028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800802c:	682f      	ldr	r7, [r5, #0]
 800802e:	6a21      	ldr	r1, [r4, #32]
 8008030:	602b      	str	r3, [r5, #0]
 8008032:	d032      	beq.n	800809a <__sflush_r+0x96>
 8008034:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	075a      	lsls	r2, r3, #29
 800803a:	d505      	bpl.n	8008048 <__sflush_r+0x44>
 800803c:	6863      	ldr	r3, [r4, #4]
 800803e:	1ac0      	subs	r0, r0, r3
 8008040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008042:	b10b      	cbz	r3, 8008048 <__sflush_r+0x44>
 8008044:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008046:	1ac0      	subs	r0, r0, r3
 8008048:	2300      	movs	r3, #0
 800804a:	4602      	mov	r2, r0
 800804c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800804e:	4628      	mov	r0, r5
 8008050:	6a21      	ldr	r1, [r4, #32]
 8008052:	47b0      	blx	r6
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	d106      	bne.n	8008068 <__sflush_r+0x64>
 800805a:	6829      	ldr	r1, [r5, #0]
 800805c:	291d      	cmp	r1, #29
 800805e:	d82b      	bhi.n	80080b8 <__sflush_r+0xb4>
 8008060:	4a28      	ldr	r2, [pc, #160]	; (8008104 <__sflush_r+0x100>)
 8008062:	410a      	asrs	r2, r1
 8008064:	07d6      	lsls	r6, r2, #31
 8008066:	d427      	bmi.n	80080b8 <__sflush_r+0xb4>
 8008068:	2200      	movs	r2, #0
 800806a:	6062      	str	r2, [r4, #4]
 800806c:	6922      	ldr	r2, [r4, #16]
 800806e:	04d9      	lsls	r1, r3, #19
 8008070:	6022      	str	r2, [r4, #0]
 8008072:	d504      	bpl.n	800807e <__sflush_r+0x7a>
 8008074:	1c42      	adds	r2, r0, #1
 8008076:	d101      	bne.n	800807c <__sflush_r+0x78>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	b903      	cbnz	r3, 800807e <__sflush_r+0x7a>
 800807c:	6560      	str	r0, [r4, #84]	; 0x54
 800807e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008080:	602f      	str	r7, [r5, #0]
 8008082:	2900      	cmp	r1, #0
 8008084:	d0ca      	beq.n	800801c <__sflush_r+0x18>
 8008086:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800808a:	4299      	cmp	r1, r3
 800808c:	d002      	beq.n	8008094 <__sflush_r+0x90>
 800808e:	4628      	mov	r0, r5
 8008090:	f7fe faaa 	bl	80065e8 <_free_r>
 8008094:	2000      	movs	r0, #0
 8008096:	6360      	str	r0, [r4, #52]	; 0x34
 8008098:	e7c1      	b.n	800801e <__sflush_r+0x1a>
 800809a:	2301      	movs	r3, #1
 800809c:	4628      	mov	r0, r5
 800809e:	47b0      	blx	r6
 80080a0:	1c41      	adds	r1, r0, #1
 80080a2:	d1c8      	bne.n	8008036 <__sflush_r+0x32>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0c5      	beq.n	8008036 <__sflush_r+0x32>
 80080aa:	2b1d      	cmp	r3, #29
 80080ac:	d001      	beq.n	80080b2 <__sflush_r+0xae>
 80080ae:	2b16      	cmp	r3, #22
 80080b0:	d101      	bne.n	80080b6 <__sflush_r+0xb2>
 80080b2:	602f      	str	r7, [r5, #0]
 80080b4:	e7b2      	b.n	800801c <__sflush_r+0x18>
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080bc:	81a3      	strh	r3, [r4, #12]
 80080be:	e7ae      	b.n	800801e <__sflush_r+0x1a>
 80080c0:	690f      	ldr	r7, [r1, #16]
 80080c2:	2f00      	cmp	r7, #0
 80080c4:	d0aa      	beq.n	800801c <__sflush_r+0x18>
 80080c6:	0793      	lsls	r3, r2, #30
 80080c8:	bf18      	it	ne
 80080ca:	2300      	movne	r3, #0
 80080cc:	680e      	ldr	r6, [r1, #0]
 80080ce:	bf08      	it	eq
 80080d0:	694b      	ldreq	r3, [r1, #20]
 80080d2:	1bf6      	subs	r6, r6, r7
 80080d4:	600f      	str	r7, [r1, #0]
 80080d6:	608b      	str	r3, [r1, #8]
 80080d8:	2e00      	cmp	r6, #0
 80080da:	dd9f      	ble.n	800801c <__sflush_r+0x18>
 80080dc:	4633      	mov	r3, r6
 80080de:	463a      	mov	r2, r7
 80080e0:	4628      	mov	r0, r5
 80080e2:	6a21      	ldr	r1, [r4, #32]
 80080e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80080e8:	47e0      	blx	ip
 80080ea:	2800      	cmp	r0, #0
 80080ec:	dc06      	bgt.n	80080fc <__sflush_r+0xf8>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f04f 30ff 	mov.w	r0, #4294967295
 80080f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	e790      	b.n	800801e <__sflush_r+0x1a>
 80080fc:	4407      	add	r7, r0
 80080fe:	1a36      	subs	r6, r6, r0
 8008100:	e7ea      	b.n	80080d8 <__sflush_r+0xd4>
 8008102:	bf00      	nop
 8008104:	dfbffffe 	.word	0xdfbffffe

08008108 <_fflush_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	690b      	ldr	r3, [r1, #16]
 800810c:	4605      	mov	r5, r0
 800810e:	460c      	mov	r4, r1
 8008110:	b913      	cbnz	r3, 8008118 <_fflush_r+0x10>
 8008112:	2500      	movs	r5, #0
 8008114:	4628      	mov	r0, r5
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	b118      	cbz	r0, 8008122 <_fflush_r+0x1a>
 800811a:	6a03      	ldr	r3, [r0, #32]
 800811c:	b90b      	cbnz	r3, 8008122 <_fflush_r+0x1a>
 800811e:	f7fd facb 	bl	80056b8 <__sinit>
 8008122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0f3      	beq.n	8008112 <_fflush_r+0xa>
 800812a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800812c:	07d0      	lsls	r0, r2, #31
 800812e:	d404      	bmi.n	800813a <_fflush_r+0x32>
 8008130:	0599      	lsls	r1, r3, #22
 8008132:	d402      	bmi.n	800813a <_fflush_r+0x32>
 8008134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008136:	f7fd fbd5 	bl	80058e4 <__retarget_lock_acquire_recursive>
 800813a:	4628      	mov	r0, r5
 800813c:	4621      	mov	r1, r4
 800813e:	f7ff ff61 	bl	8008004 <__sflush_r>
 8008142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008144:	4605      	mov	r5, r0
 8008146:	07da      	lsls	r2, r3, #31
 8008148:	d4e4      	bmi.n	8008114 <_fflush_r+0xc>
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	059b      	lsls	r3, r3, #22
 800814e:	d4e1      	bmi.n	8008114 <_fflush_r+0xc>
 8008150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008152:	f7fd fbc8 	bl	80058e6 <__retarget_lock_release_recursive>
 8008156:	e7dd      	b.n	8008114 <_fflush_r+0xc>

08008158 <memmove>:
 8008158:	4288      	cmp	r0, r1
 800815a:	b510      	push	{r4, lr}
 800815c:	eb01 0402 	add.w	r4, r1, r2
 8008160:	d902      	bls.n	8008168 <memmove+0x10>
 8008162:	4284      	cmp	r4, r0
 8008164:	4623      	mov	r3, r4
 8008166:	d807      	bhi.n	8008178 <memmove+0x20>
 8008168:	1e43      	subs	r3, r0, #1
 800816a:	42a1      	cmp	r1, r4
 800816c:	d008      	beq.n	8008180 <memmove+0x28>
 800816e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008176:	e7f8      	b.n	800816a <memmove+0x12>
 8008178:	4601      	mov	r1, r0
 800817a:	4402      	add	r2, r0
 800817c:	428a      	cmp	r2, r1
 800817e:	d100      	bne.n	8008182 <memmove+0x2a>
 8008180:	bd10      	pop	{r4, pc}
 8008182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800818a:	e7f7      	b.n	800817c <memmove+0x24>

0800818c <strncmp>:
 800818c:	b510      	push	{r4, lr}
 800818e:	b16a      	cbz	r2, 80081ac <strncmp+0x20>
 8008190:	3901      	subs	r1, #1
 8008192:	1884      	adds	r4, r0, r2
 8008194:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008198:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800819c:	429a      	cmp	r2, r3
 800819e:	d103      	bne.n	80081a8 <strncmp+0x1c>
 80081a0:	42a0      	cmp	r0, r4
 80081a2:	d001      	beq.n	80081a8 <strncmp+0x1c>
 80081a4:	2a00      	cmp	r2, #0
 80081a6:	d1f5      	bne.n	8008194 <strncmp+0x8>
 80081a8:	1ad0      	subs	r0, r2, r3
 80081aa:	bd10      	pop	{r4, pc}
 80081ac:	4610      	mov	r0, r2
 80081ae:	e7fc      	b.n	80081aa <strncmp+0x1e>

080081b0 <_sbrk_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	2300      	movs	r3, #0
 80081b4:	4d05      	ldr	r5, [pc, #20]	; (80081cc <_sbrk_r+0x1c>)
 80081b6:	4604      	mov	r4, r0
 80081b8:	4608      	mov	r0, r1
 80081ba:	602b      	str	r3, [r5, #0]
 80081bc:	f7f9 f8a8 	bl	8001310 <_sbrk>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	d102      	bne.n	80081ca <_sbrk_r+0x1a>
 80081c4:	682b      	ldr	r3, [r5, #0]
 80081c6:	b103      	cbz	r3, 80081ca <_sbrk_r+0x1a>
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
 80081cc:	20000828 	.word	0x20000828

080081d0 <memcpy>:
 80081d0:	440a      	add	r2, r1
 80081d2:	4291      	cmp	r1, r2
 80081d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80081d8:	d100      	bne.n	80081dc <memcpy+0xc>
 80081da:	4770      	bx	lr
 80081dc:	b510      	push	{r4, lr}
 80081de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081e2:	4291      	cmp	r1, r2
 80081e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081e8:	d1f9      	bne.n	80081de <memcpy+0xe>
 80081ea:	bd10      	pop	{r4, pc}

080081ec <nan>:
 80081ec:	2000      	movs	r0, #0
 80081ee:	4901      	ldr	r1, [pc, #4]	; (80081f4 <nan+0x8>)
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	7ff80000 	.word	0x7ff80000

080081f8 <__assert_func>:
 80081f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081fa:	4614      	mov	r4, r2
 80081fc:	461a      	mov	r2, r3
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <__assert_func+0x2c>)
 8008200:	4605      	mov	r5, r0
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68d8      	ldr	r0, [r3, #12]
 8008206:	b14c      	cbz	r4, 800821c <__assert_func+0x24>
 8008208:	4b07      	ldr	r3, [pc, #28]	; (8008228 <__assert_func+0x30>)
 800820a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800820e:	9100      	str	r1, [sp, #0]
 8008210:	462b      	mov	r3, r5
 8008212:	4906      	ldr	r1, [pc, #24]	; (800822c <__assert_func+0x34>)
 8008214:	f000 fbca 	bl	80089ac <fiprintf>
 8008218:	f000 fbda 	bl	80089d0 <abort>
 800821c:	4b04      	ldr	r3, [pc, #16]	; (8008230 <__assert_func+0x38>)
 800821e:	461c      	mov	r4, r3
 8008220:	e7f3      	b.n	800820a <__assert_func+0x12>
 8008222:	bf00      	nop
 8008224:	20000068 	.word	0x20000068
 8008228:	0800b841 	.word	0x0800b841
 800822c:	0800b84e 	.word	0x0800b84e
 8008230:	0800b87c 	.word	0x0800b87c

08008234 <_calloc_r>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	fba1 5402 	umull	r5, r4, r1, r2
 800823a:	b934      	cbnz	r4, 800824a <_calloc_r+0x16>
 800823c:	4629      	mov	r1, r5
 800823e:	f7fe fa43 	bl	80066c8 <_malloc_r>
 8008242:	4606      	mov	r6, r0
 8008244:	b928      	cbnz	r0, 8008252 <_calloc_r+0x1e>
 8008246:	4630      	mov	r0, r6
 8008248:	bd70      	pop	{r4, r5, r6, pc}
 800824a:	220c      	movs	r2, #12
 800824c:	2600      	movs	r6, #0
 800824e:	6002      	str	r2, [r0, #0]
 8008250:	e7f9      	b.n	8008246 <_calloc_r+0x12>
 8008252:	462a      	mov	r2, r5
 8008254:	4621      	mov	r1, r4
 8008256:	f7fd fac8 	bl	80057ea <memset>
 800825a:	e7f4      	b.n	8008246 <_calloc_r+0x12>

0800825c <rshift>:
 800825c:	6903      	ldr	r3, [r0, #16]
 800825e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008262:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008266:	f100 0414 	add.w	r4, r0, #20
 800826a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800826e:	dd46      	ble.n	80082fe <rshift+0xa2>
 8008270:	f011 011f 	ands.w	r1, r1, #31
 8008274:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008278:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800827c:	d10c      	bne.n	8008298 <rshift+0x3c>
 800827e:	4629      	mov	r1, r5
 8008280:	f100 0710 	add.w	r7, r0, #16
 8008284:	42b1      	cmp	r1, r6
 8008286:	d335      	bcc.n	80082f4 <rshift+0x98>
 8008288:	1a9b      	subs	r3, r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	1eea      	subs	r2, r5, #3
 800828e:	4296      	cmp	r6, r2
 8008290:	bf38      	it	cc
 8008292:	2300      	movcc	r3, #0
 8008294:	4423      	add	r3, r4
 8008296:	e015      	b.n	80082c4 <rshift+0x68>
 8008298:	46a1      	mov	r9, r4
 800829a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800829e:	f1c1 0820 	rsb	r8, r1, #32
 80082a2:	40cf      	lsrs	r7, r1
 80082a4:	f105 0e04 	add.w	lr, r5, #4
 80082a8:	4576      	cmp	r6, lr
 80082aa:	46f4      	mov	ip, lr
 80082ac:	d816      	bhi.n	80082dc <rshift+0x80>
 80082ae:	1a9a      	subs	r2, r3, r2
 80082b0:	0092      	lsls	r2, r2, #2
 80082b2:	3a04      	subs	r2, #4
 80082b4:	3501      	adds	r5, #1
 80082b6:	42ae      	cmp	r6, r5
 80082b8:	bf38      	it	cc
 80082ba:	2200      	movcc	r2, #0
 80082bc:	18a3      	adds	r3, r4, r2
 80082be:	50a7      	str	r7, [r4, r2]
 80082c0:	b107      	cbz	r7, 80082c4 <rshift+0x68>
 80082c2:	3304      	adds	r3, #4
 80082c4:	42a3      	cmp	r3, r4
 80082c6:	eba3 0204 	sub.w	r2, r3, r4
 80082ca:	bf08      	it	eq
 80082cc:	2300      	moveq	r3, #0
 80082ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082d2:	6102      	str	r2, [r0, #16]
 80082d4:	bf08      	it	eq
 80082d6:	6143      	streq	r3, [r0, #20]
 80082d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082dc:	f8dc c000 	ldr.w	ip, [ip]
 80082e0:	fa0c fc08 	lsl.w	ip, ip, r8
 80082e4:	ea4c 0707 	orr.w	r7, ip, r7
 80082e8:	f849 7b04 	str.w	r7, [r9], #4
 80082ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082f0:	40cf      	lsrs	r7, r1
 80082f2:	e7d9      	b.n	80082a8 <rshift+0x4c>
 80082f4:	f851 cb04 	ldr.w	ip, [r1], #4
 80082f8:	f847 cf04 	str.w	ip, [r7, #4]!
 80082fc:	e7c2      	b.n	8008284 <rshift+0x28>
 80082fe:	4623      	mov	r3, r4
 8008300:	e7e0      	b.n	80082c4 <rshift+0x68>

08008302 <__hexdig_fun>:
 8008302:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008306:	2b09      	cmp	r3, #9
 8008308:	d802      	bhi.n	8008310 <__hexdig_fun+0xe>
 800830a:	3820      	subs	r0, #32
 800830c:	b2c0      	uxtb	r0, r0
 800830e:	4770      	bx	lr
 8008310:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008314:	2b05      	cmp	r3, #5
 8008316:	d801      	bhi.n	800831c <__hexdig_fun+0x1a>
 8008318:	3847      	subs	r0, #71	; 0x47
 800831a:	e7f7      	b.n	800830c <__hexdig_fun+0xa>
 800831c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008320:	2b05      	cmp	r3, #5
 8008322:	d801      	bhi.n	8008328 <__hexdig_fun+0x26>
 8008324:	3827      	subs	r0, #39	; 0x27
 8008326:	e7f1      	b.n	800830c <__hexdig_fun+0xa>
 8008328:	2000      	movs	r0, #0
 800832a:	4770      	bx	lr

0800832c <__gethex>:
 800832c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	4681      	mov	r9, r0
 8008332:	468a      	mov	sl, r1
 8008334:	4617      	mov	r7, r2
 8008336:	680a      	ldr	r2, [r1, #0]
 8008338:	b085      	sub	sp, #20
 800833a:	f102 0b02 	add.w	fp, r2, #2
 800833e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008342:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008346:	9302      	str	r3, [sp, #8]
 8008348:	32fe      	adds	r2, #254	; 0xfe
 800834a:	eb02 030b 	add.w	r3, r2, fp
 800834e:	46d8      	mov	r8, fp
 8008350:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	2830      	cmp	r0, #48	; 0x30
 8008358:	d0f7      	beq.n	800834a <__gethex+0x1e>
 800835a:	f7ff ffd2 	bl	8008302 <__hexdig_fun>
 800835e:	4604      	mov	r4, r0
 8008360:	2800      	cmp	r0, #0
 8008362:	d138      	bne.n	80083d6 <__gethex+0xaa>
 8008364:	2201      	movs	r2, #1
 8008366:	4640      	mov	r0, r8
 8008368:	49a7      	ldr	r1, [pc, #668]	; (8008608 <__gethex+0x2dc>)
 800836a:	f7ff ff0f 	bl	800818c <strncmp>
 800836e:	4606      	mov	r6, r0
 8008370:	2800      	cmp	r0, #0
 8008372:	d169      	bne.n	8008448 <__gethex+0x11c>
 8008374:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008378:	465d      	mov	r5, fp
 800837a:	f7ff ffc2 	bl	8008302 <__hexdig_fun>
 800837e:	2800      	cmp	r0, #0
 8008380:	d064      	beq.n	800844c <__gethex+0x120>
 8008382:	465a      	mov	r2, fp
 8008384:	7810      	ldrb	r0, [r2, #0]
 8008386:	4690      	mov	r8, r2
 8008388:	2830      	cmp	r0, #48	; 0x30
 800838a:	f102 0201 	add.w	r2, r2, #1
 800838e:	d0f9      	beq.n	8008384 <__gethex+0x58>
 8008390:	f7ff ffb7 	bl	8008302 <__hexdig_fun>
 8008394:	2301      	movs	r3, #1
 8008396:	fab0 f480 	clz	r4, r0
 800839a:	465e      	mov	r6, fp
 800839c:	0964      	lsrs	r4, r4, #5
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	4642      	mov	r2, r8
 80083a2:	4615      	mov	r5, r2
 80083a4:	7828      	ldrb	r0, [r5, #0]
 80083a6:	3201      	adds	r2, #1
 80083a8:	f7ff ffab 	bl	8008302 <__hexdig_fun>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d1f8      	bne.n	80083a2 <__gethex+0x76>
 80083b0:	2201      	movs	r2, #1
 80083b2:	4628      	mov	r0, r5
 80083b4:	4994      	ldr	r1, [pc, #592]	; (8008608 <__gethex+0x2dc>)
 80083b6:	f7ff fee9 	bl	800818c <strncmp>
 80083ba:	b978      	cbnz	r0, 80083dc <__gethex+0xb0>
 80083bc:	b946      	cbnz	r6, 80083d0 <__gethex+0xa4>
 80083be:	1c6e      	adds	r6, r5, #1
 80083c0:	4632      	mov	r2, r6
 80083c2:	4615      	mov	r5, r2
 80083c4:	7828      	ldrb	r0, [r5, #0]
 80083c6:	3201      	adds	r2, #1
 80083c8:	f7ff ff9b 	bl	8008302 <__hexdig_fun>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d1f8      	bne.n	80083c2 <__gethex+0x96>
 80083d0:	1b73      	subs	r3, r6, r5
 80083d2:	009e      	lsls	r6, r3, #2
 80083d4:	e004      	b.n	80083e0 <__gethex+0xb4>
 80083d6:	2400      	movs	r4, #0
 80083d8:	4626      	mov	r6, r4
 80083da:	e7e1      	b.n	80083a0 <__gethex+0x74>
 80083dc:	2e00      	cmp	r6, #0
 80083de:	d1f7      	bne.n	80083d0 <__gethex+0xa4>
 80083e0:	782b      	ldrb	r3, [r5, #0]
 80083e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80083e6:	2b50      	cmp	r3, #80	; 0x50
 80083e8:	d13d      	bne.n	8008466 <__gethex+0x13a>
 80083ea:	786b      	ldrb	r3, [r5, #1]
 80083ec:	2b2b      	cmp	r3, #43	; 0x2b
 80083ee:	d02f      	beq.n	8008450 <__gethex+0x124>
 80083f0:	2b2d      	cmp	r3, #45	; 0x2d
 80083f2:	d031      	beq.n	8008458 <__gethex+0x12c>
 80083f4:	f04f 0b00 	mov.w	fp, #0
 80083f8:	1c69      	adds	r1, r5, #1
 80083fa:	7808      	ldrb	r0, [r1, #0]
 80083fc:	f7ff ff81 	bl	8008302 <__hexdig_fun>
 8008400:	1e42      	subs	r2, r0, #1
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	2a18      	cmp	r2, #24
 8008406:	d82e      	bhi.n	8008466 <__gethex+0x13a>
 8008408:	f1a0 0210 	sub.w	r2, r0, #16
 800840c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008410:	f7ff ff77 	bl	8008302 <__hexdig_fun>
 8008414:	f100 3cff 	add.w	ip, r0, #4294967295
 8008418:	fa5f fc8c 	uxtb.w	ip, ip
 800841c:	f1bc 0f18 	cmp.w	ip, #24
 8008420:	d91d      	bls.n	800845e <__gethex+0x132>
 8008422:	f1bb 0f00 	cmp.w	fp, #0
 8008426:	d000      	beq.n	800842a <__gethex+0xfe>
 8008428:	4252      	negs	r2, r2
 800842a:	4416      	add	r6, r2
 800842c:	f8ca 1000 	str.w	r1, [sl]
 8008430:	b1dc      	cbz	r4, 800846a <__gethex+0x13e>
 8008432:	9b01      	ldr	r3, [sp, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	bf14      	ite	ne
 8008438:	f04f 0800 	movne.w	r8, #0
 800843c:	f04f 0806 	moveq.w	r8, #6
 8008440:	4640      	mov	r0, r8
 8008442:	b005      	add	sp, #20
 8008444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008448:	4645      	mov	r5, r8
 800844a:	4626      	mov	r6, r4
 800844c:	2401      	movs	r4, #1
 800844e:	e7c7      	b.n	80083e0 <__gethex+0xb4>
 8008450:	f04f 0b00 	mov.w	fp, #0
 8008454:	1ca9      	adds	r1, r5, #2
 8008456:	e7d0      	b.n	80083fa <__gethex+0xce>
 8008458:	f04f 0b01 	mov.w	fp, #1
 800845c:	e7fa      	b.n	8008454 <__gethex+0x128>
 800845e:	230a      	movs	r3, #10
 8008460:	fb03 0002 	mla	r0, r3, r2, r0
 8008464:	e7d0      	b.n	8008408 <__gethex+0xdc>
 8008466:	4629      	mov	r1, r5
 8008468:	e7e0      	b.n	800842c <__gethex+0x100>
 800846a:	4621      	mov	r1, r4
 800846c:	eba5 0308 	sub.w	r3, r5, r8
 8008470:	3b01      	subs	r3, #1
 8008472:	2b07      	cmp	r3, #7
 8008474:	dc0a      	bgt.n	800848c <__gethex+0x160>
 8008476:	4648      	mov	r0, r9
 8008478:	f7fe f9b2 	bl	80067e0 <_Balloc>
 800847c:	4604      	mov	r4, r0
 800847e:	b940      	cbnz	r0, 8008492 <__gethex+0x166>
 8008480:	4602      	mov	r2, r0
 8008482:	21e4      	movs	r1, #228	; 0xe4
 8008484:	4b61      	ldr	r3, [pc, #388]	; (800860c <__gethex+0x2e0>)
 8008486:	4862      	ldr	r0, [pc, #392]	; (8008610 <__gethex+0x2e4>)
 8008488:	f7ff feb6 	bl	80081f8 <__assert_func>
 800848c:	3101      	adds	r1, #1
 800848e:	105b      	asrs	r3, r3, #1
 8008490:	e7ef      	b.n	8008472 <__gethex+0x146>
 8008492:	2300      	movs	r3, #0
 8008494:	469b      	mov	fp, r3
 8008496:	f100 0a14 	add.w	sl, r0, #20
 800849a:	f8cd a004 	str.w	sl, [sp, #4]
 800849e:	45a8      	cmp	r8, r5
 80084a0:	d344      	bcc.n	800852c <__gethex+0x200>
 80084a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80084a6:	4658      	mov	r0, fp
 80084a8:	f848 bb04 	str.w	fp, [r8], #4
 80084ac:	eba8 080a 	sub.w	r8, r8, sl
 80084b0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80084b4:	6122      	str	r2, [r4, #16]
 80084b6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80084ba:	f7fe fa83 	bl	80069c4 <__hi0bits>
 80084be:	683d      	ldr	r5, [r7, #0]
 80084c0:	eba8 0800 	sub.w	r8, r8, r0
 80084c4:	45a8      	cmp	r8, r5
 80084c6:	dd59      	ble.n	800857c <__gethex+0x250>
 80084c8:	eba8 0805 	sub.w	r8, r8, r5
 80084cc:	4641      	mov	r1, r8
 80084ce:	4620      	mov	r0, r4
 80084d0:	f7fe fe01 	bl	80070d6 <__any_on>
 80084d4:	4683      	mov	fp, r0
 80084d6:	b1b8      	cbz	r0, 8008508 <__gethex+0x1dc>
 80084d8:	f04f 0b01 	mov.w	fp, #1
 80084dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80084e0:	1159      	asrs	r1, r3, #5
 80084e2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80084e6:	f003 021f 	and.w	r2, r3, #31
 80084ea:	fa0b f202 	lsl.w	r2, fp, r2
 80084ee:	420a      	tst	r2, r1
 80084f0:	d00a      	beq.n	8008508 <__gethex+0x1dc>
 80084f2:	455b      	cmp	r3, fp
 80084f4:	dd06      	ble.n	8008504 <__gethex+0x1d8>
 80084f6:	4620      	mov	r0, r4
 80084f8:	f1a8 0102 	sub.w	r1, r8, #2
 80084fc:	f7fe fdeb 	bl	80070d6 <__any_on>
 8008500:	2800      	cmp	r0, #0
 8008502:	d138      	bne.n	8008576 <__gethex+0x24a>
 8008504:	f04f 0b02 	mov.w	fp, #2
 8008508:	4641      	mov	r1, r8
 800850a:	4620      	mov	r0, r4
 800850c:	f7ff fea6 	bl	800825c <rshift>
 8008510:	4446      	add	r6, r8
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	42b3      	cmp	r3, r6
 8008516:	da41      	bge.n	800859c <__gethex+0x270>
 8008518:	4621      	mov	r1, r4
 800851a:	4648      	mov	r0, r9
 800851c:	f7fe f9a0 	bl	8006860 <_Bfree>
 8008520:	2300      	movs	r3, #0
 8008522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008524:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	e789      	b.n	8008440 <__gethex+0x114>
 800852c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008530:	2a2e      	cmp	r2, #46	; 0x2e
 8008532:	d014      	beq.n	800855e <__gethex+0x232>
 8008534:	2b20      	cmp	r3, #32
 8008536:	d106      	bne.n	8008546 <__gethex+0x21a>
 8008538:	9b01      	ldr	r3, [sp, #4]
 800853a:	f843 bb04 	str.w	fp, [r3], #4
 800853e:	f04f 0b00 	mov.w	fp, #0
 8008542:	9301      	str	r3, [sp, #4]
 8008544:	465b      	mov	r3, fp
 8008546:	7828      	ldrb	r0, [r5, #0]
 8008548:	9303      	str	r3, [sp, #12]
 800854a:	f7ff feda 	bl	8008302 <__hexdig_fun>
 800854e:	9b03      	ldr	r3, [sp, #12]
 8008550:	f000 000f 	and.w	r0, r0, #15
 8008554:	4098      	lsls	r0, r3
 8008556:	ea4b 0b00 	orr.w	fp, fp, r0
 800855a:	3304      	adds	r3, #4
 800855c:	e79f      	b.n	800849e <__gethex+0x172>
 800855e:	45a8      	cmp	r8, r5
 8008560:	d8e8      	bhi.n	8008534 <__gethex+0x208>
 8008562:	2201      	movs	r2, #1
 8008564:	4628      	mov	r0, r5
 8008566:	4928      	ldr	r1, [pc, #160]	; (8008608 <__gethex+0x2dc>)
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	f7ff fe0f 	bl	800818c <strncmp>
 800856e:	9b03      	ldr	r3, [sp, #12]
 8008570:	2800      	cmp	r0, #0
 8008572:	d1df      	bne.n	8008534 <__gethex+0x208>
 8008574:	e793      	b.n	800849e <__gethex+0x172>
 8008576:	f04f 0b03 	mov.w	fp, #3
 800857a:	e7c5      	b.n	8008508 <__gethex+0x1dc>
 800857c:	da0b      	bge.n	8008596 <__gethex+0x26a>
 800857e:	eba5 0808 	sub.w	r8, r5, r8
 8008582:	4621      	mov	r1, r4
 8008584:	4642      	mov	r2, r8
 8008586:	4648      	mov	r0, r9
 8008588:	f7fe fb82 	bl	8006c90 <__lshift>
 800858c:	4604      	mov	r4, r0
 800858e:	eba6 0608 	sub.w	r6, r6, r8
 8008592:	f100 0a14 	add.w	sl, r0, #20
 8008596:	f04f 0b00 	mov.w	fp, #0
 800859a:	e7ba      	b.n	8008512 <__gethex+0x1e6>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	42b3      	cmp	r3, r6
 80085a0:	dd74      	ble.n	800868c <__gethex+0x360>
 80085a2:	1b9e      	subs	r6, r3, r6
 80085a4:	42b5      	cmp	r5, r6
 80085a6:	dc35      	bgt.n	8008614 <__gethex+0x2e8>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d023      	beq.n	80085f6 <__gethex+0x2ca>
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d025      	beq.n	80085fe <__gethex+0x2d2>
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d115      	bne.n	80085e2 <__gethex+0x2b6>
 80085b6:	42b5      	cmp	r5, r6
 80085b8:	d113      	bne.n	80085e2 <__gethex+0x2b6>
 80085ba:	2d01      	cmp	r5, #1
 80085bc:	d10b      	bne.n	80085d6 <__gethex+0x2aa>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	9a02      	ldr	r2, [sp, #8]
 80085c2:	f04f 0862 	mov.w	r8, #98	; 0x62
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	2301      	movs	r3, #1
 80085ca:	6123      	str	r3, [r4, #16]
 80085cc:	f8ca 3000 	str.w	r3, [sl]
 80085d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085d2:	601c      	str	r4, [r3, #0]
 80085d4:	e734      	b.n	8008440 <__gethex+0x114>
 80085d6:	4620      	mov	r0, r4
 80085d8:	1e69      	subs	r1, r5, #1
 80085da:	f7fe fd7c 	bl	80070d6 <__any_on>
 80085de:	2800      	cmp	r0, #0
 80085e0:	d1ed      	bne.n	80085be <__gethex+0x292>
 80085e2:	4621      	mov	r1, r4
 80085e4:	4648      	mov	r0, r9
 80085e6:	f7fe f93b 	bl	8006860 <_Bfree>
 80085ea:	2300      	movs	r3, #0
 80085ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085ee:	f04f 0850 	mov.w	r8, #80	; 0x50
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	e724      	b.n	8008440 <__gethex+0x114>
 80085f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1f2      	bne.n	80085e2 <__gethex+0x2b6>
 80085fc:	e7df      	b.n	80085be <__gethex+0x292>
 80085fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1dc      	bne.n	80085be <__gethex+0x292>
 8008604:	e7ed      	b.n	80085e2 <__gethex+0x2b6>
 8008606:	bf00      	nop
 8008608:	0800b7d4 	.word	0x0800b7d4
 800860c:	0800b668 	.word	0x0800b668
 8008610:	0800b87d 	.word	0x0800b87d
 8008614:	f106 38ff 	add.w	r8, r6, #4294967295
 8008618:	f1bb 0f00 	cmp.w	fp, #0
 800861c:	d133      	bne.n	8008686 <__gethex+0x35a>
 800861e:	f1b8 0f00 	cmp.w	r8, #0
 8008622:	d004      	beq.n	800862e <__gethex+0x302>
 8008624:	4641      	mov	r1, r8
 8008626:	4620      	mov	r0, r4
 8008628:	f7fe fd55 	bl	80070d6 <__any_on>
 800862c:	4683      	mov	fp, r0
 800862e:	2301      	movs	r3, #1
 8008630:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008634:	f008 081f 	and.w	r8, r8, #31
 8008638:	fa03 f308 	lsl.w	r3, r3, r8
 800863c:	f04f 0802 	mov.w	r8, #2
 8008640:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008644:	4631      	mov	r1, r6
 8008646:	4213      	tst	r3, r2
 8008648:	4620      	mov	r0, r4
 800864a:	bf18      	it	ne
 800864c:	f04b 0b02 	orrne.w	fp, fp, #2
 8008650:	1bad      	subs	r5, r5, r6
 8008652:	f7ff fe03 	bl	800825c <rshift>
 8008656:	687e      	ldr	r6, [r7, #4]
 8008658:	f1bb 0f00 	cmp.w	fp, #0
 800865c:	d04a      	beq.n	80086f4 <__gethex+0x3c8>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b02      	cmp	r3, #2
 8008662:	d016      	beq.n	8008692 <__gethex+0x366>
 8008664:	2b03      	cmp	r3, #3
 8008666:	d018      	beq.n	800869a <__gethex+0x36e>
 8008668:	2b01      	cmp	r3, #1
 800866a:	d109      	bne.n	8008680 <__gethex+0x354>
 800866c:	f01b 0f02 	tst.w	fp, #2
 8008670:	d006      	beq.n	8008680 <__gethex+0x354>
 8008672:	f8da 3000 	ldr.w	r3, [sl]
 8008676:	ea4b 0b03 	orr.w	fp, fp, r3
 800867a:	f01b 0f01 	tst.w	fp, #1
 800867e:	d10f      	bne.n	80086a0 <__gethex+0x374>
 8008680:	f048 0810 	orr.w	r8, r8, #16
 8008684:	e036      	b.n	80086f4 <__gethex+0x3c8>
 8008686:	f04f 0b01 	mov.w	fp, #1
 800868a:	e7d0      	b.n	800862e <__gethex+0x302>
 800868c:	f04f 0801 	mov.w	r8, #1
 8008690:	e7e2      	b.n	8008658 <__gethex+0x32c>
 8008692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008694:	f1c3 0301 	rsb	r3, r3, #1
 8008698:	930f      	str	r3, [sp, #60]	; 0x3c
 800869a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0ef      	beq.n	8008680 <__gethex+0x354>
 80086a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80086a4:	f104 0214 	add.w	r2, r4, #20
 80086a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	2300      	movs	r3, #0
 80086b0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80086b4:	4694      	mov	ip, r2
 80086b6:	f852 1b04 	ldr.w	r1, [r2], #4
 80086ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 80086be:	d01e      	beq.n	80086fe <__gethex+0x3d2>
 80086c0:	3101      	adds	r1, #1
 80086c2:	f8cc 1000 	str.w	r1, [ip]
 80086c6:	f1b8 0f02 	cmp.w	r8, #2
 80086ca:	f104 0214 	add.w	r2, r4, #20
 80086ce:	d13d      	bne.n	800874c <__gethex+0x420>
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	42ab      	cmp	r3, r5
 80086d6:	d10b      	bne.n	80086f0 <__gethex+0x3c4>
 80086d8:	2301      	movs	r3, #1
 80086da:	1169      	asrs	r1, r5, #5
 80086dc:	f005 051f 	and.w	r5, r5, #31
 80086e0:	fa03 f505 	lsl.w	r5, r3, r5
 80086e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086e8:	421d      	tst	r5, r3
 80086ea:	bf18      	it	ne
 80086ec:	f04f 0801 	movne.w	r8, #1
 80086f0:	f048 0820 	orr.w	r8, r8, #32
 80086f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086f6:	601c      	str	r4, [r3, #0]
 80086f8:	9b02      	ldr	r3, [sp, #8]
 80086fa:	601e      	str	r6, [r3, #0]
 80086fc:	e6a0      	b.n	8008440 <__gethex+0x114>
 80086fe:	4290      	cmp	r0, r2
 8008700:	f842 3c04 	str.w	r3, [r2, #-4]
 8008704:	d8d6      	bhi.n	80086b4 <__gethex+0x388>
 8008706:	68a2      	ldr	r2, [r4, #8]
 8008708:	4593      	cmp	fp, r2
 800870a:	db17      	blt.n	800873c <__gethex+0x410>
 800870c:	6861      	ldr	r1, [r4, #4]
 800870e:	4648      	mov	r0, r9
 8008710:	3101      	adds	r1, #1
 8008712:	f7fe f865 	bl	80067e0 <_Balloc>
 8008716:	4682      	mov	sl, r0
 8008718:	b918      	cbnz	r0, 8008722 <__gethex+0x3f6>
 800871a:	4602      	mov	r2, r0
 800871c:	2184      	movs	r1, #132	; 0x84
 800871e:	4b1a      	ldr	r3, [pc, #104]	; (8008788 <__gethex+0x45c>)
 8008720:	e6b1      	b.n	8008486 <__gethex+0x15a>
 8008722:	6922      	ldr	r2, [r4, #16]
 8008724:	f104 010c 	add.w	r1, r4, #12
 8008728:	3202      	adds	r2, #2
 800872a:	0092      	lsls	r2, r2, #2
 800872c:	300c      	adds	r0, #12
 800872e:	f7ff fd4f 	bl	80081d0 <memcpy>
 8008732:	4621      	mov	r1, r4
 8008734:	4648      	mov	r0, r9
 8008736:	f7fe f893 	bl	8006860 <_Bfree>
 800873a:	4654      	mov	r4, sl
 800873c:	6922      	ldr	r2, [r4, #16]
 800873e:	1c51      	adds	r1, r2, #1
 8008740:	6121      	str	r1, [r4, #16]
 8008742:	2101      	movs	r1, #1
 8008744:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008748:	6151      	str	r1, [r2, #20]
 800874a:	e7bc      	b.n	80086c6 <__gethex+0x39a>
 800874c:	6921      	ldr	r1, [r4, #16]
 800874e:	4559      	cmp	r1, fp
 8008750:	dd0b      	ble.n	800876a <__gethex+0x43e>
 8008752:	2101      	movs	r1, #1
 8008754:	4620      	mov	r0, r4
 8008756:	f7ff fd81 	bl	800825c <rshift>
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	3601      	adds	r6, #1
 800875e:	42b3      	cmp	r3, r6
 8008760:	f6ff aeda 	blt.w	8008518 <__gethex+0x1ec>
 8008764:	f04f 0801 	mov.w	r8, #1
 8008768:	e7c2      	b.n	80086f0 <__gethex+0x3c4>
 800876a:	f015 051f 	ands.w	r5, r5, #31
 800876e:	d0f9      	beq.n	8008764 <__gethex+0x438>
 8008770:	9b01      	ldr	r3, [sp, #4]
 8008772:	f1c5 0520 	rsb	r5, r5, #32
 8008776:	441a      	add	r2, r3
 8008778:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800877c:	f7fe f922 	bl	80069c4 <__hi0bits>
 8008780:	42a8      	cmp	r0, r5
 8008782:	dbe6      	blt.n	8008752 <__gethex+0x426>
 8008784:	e7ee      	b.n	8008764 <__gethex+0x438>
 8008786:	bf00      	nop
 8008788:	0800b668 	.word	0x0800b668

0800878c <L_shift>:
 800878c:	f1c2 0208 	rsb	r2, r2, #8
 8008790:	0092      	lsls	r2, r2, #2
 8008792:	b570      	push	{r4, r5, r6, lr}
 8008794:	f1c2 0620 	rsb	r6, r2, #32
 8008798:	6843      	ldr	r3, [r0, #4]
 800879a:	6804      	ldr	r4, [r0, #0]
 800879c:	fa03 f506 	lsl.w	r5, r3, r6
 80087a0:	432c      	orrs	r4, r5
 80087a2:	40d3      	lsrs	r3, r2
 80087a4:	6004      	str	r4, [r0, #0]
 80087a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80087aa:	4288      	cmp	r0, r1
 80087ac:	d3f4      	bcc.n	8008798 <L_shift+0xc>
 80087ae:	bd70      	pop	{r4, r5, r6, pc}

080087b0 <__match>:
 80087b0:	b530      	push	{r4, r5, lr}
 80087b2:	6803      	ldr	r3, [r0, #0]
 80087b4:	3301      	adds	r3, #1
 80087b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ba:	b914      	cbnz	r4, 80087c2 <__match+0x12>
 80087bc:	6003      	str	r3, [r0, #0]
 80087be:	2001      	movs	r0, #1
 80087c0:	bd30      	pop	{r4, r5, pc}
 80087c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80087ca:	2d19      	cmp	r5, #25
 80087cc:	bf98      	it	ls
 80087ce:	3220      	addls	r2, #32
 80087d0:	42a2      	cmp	r2, r4
 80087d2:	d0f0      	beq.n	80087b6 <__match+0x6>
 80087d4:	2000      	movs	r0, #0
 80087d6:	e7f3      	b.n	80087c0 <__match+0x10>

080087d8 <__hexnan>:
 80087d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087dc:	2500      	movs	r5, #0
 80087de:	680b      	ldr	r3, [r1, #0]
 80087e0:	4682      	mov	sl, r0
 80087e2:	115e      	asrs	r6, r3, #5
 80087e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80087e8:	f013 031f 	ands.w	r3, r3, #31
 80087ec:	bf18      	it	ne
 80087ee:	3604      	addne	r6, #4
 80087f0:	1f37      	subs	r7, r6, #4
 80087f2:	4690      	mov	r8, r2
 80087f4:	46b9      	mov	r9, r7
 80087f6:	463c      	mov	r4, r7
 80087f8:	46ab      	mov	fp, r5
 80087fa:	b087      	sub	sp, #28
 80087fc:	6801      	ldr	r1, [r0, #0]
 80087fe:	9301      	str	r3, [sp, #4]
 8008800:	f846 5c04 	str.w	r5, [r6, #-4]
 8008804:	9502      	str	r5, [sp, #8]
 8008806:	784a      	ldrb	r2, [r1, #1]
 8008808:	1c4b      	adds	r3, r1, #1
 800880a:	9303      	str	r3, [sp, #12]
 800880c:	b342      	cbz	r2, 8008860 <__hexnan+0x88>
 800880e:	4610      	mov	r0, r2
 8008810:	9105      	str	r1, [sp, #20]
 8008812:	9204      	str	r2, [sp, #16]
 8008814:	f7ff fd75 	bl	8008302 <__hexdig_fun>
 8008818:	2800      	cmp	r0, #0
 800881a:	d14f      	bne.n	80088bc <__hexnan+0xe4>
 800881c:	9a04      	ldr	r2, [sp, #16]
 800881e:	9905      	ldr	r1, [sp, #20]
 8008820:	2a20      	cmp	r2, #32
 8008822:	d818      	bhi.n	8008856 <__hexnan+0x7e>
 8008824:	9b02      	ldr	r3, [sp, #8]
 8008826:	459b      	cmp	fp, r3
 8008828:	dd13      	ble.n	8008852 <__hexnan+0x7a>
 800882a:	454c      	cmp	r4, r9
 800882c:	d206      	bcs.n	800883c <__hexnan+0x64>
 800882e:	2d07      	cmp	r5, #7
 8008830:	dc04      	bgt.n	800883c <__hexnan+0x64>
 8008832:	462a      	mov	r2, r5
 8008834:	4649      	mov	r1, r9
 8008836:	4620      	mov	r0, r4
 8008838:	f7ff ffa8 	bl	800878c <L_shift>
 800883c:	4544      	cmp	r4, r8
 800883e:	d950      	bls.n	80088e2 <__hexnan+0x10a>
 8008840:	2300      	movs	r3, #0
 8008842:	f1a4 0904 	sub.w	r9, r4, #4
 8008846:	f844 3c04 	str.w	r3, [r4, #-4]
 800884a:	461d      	mov	r5, r3
 800884c:	464c      	mov	r4, r9
 800884e:	f8cd b008 	str.w	fp, [sp, #8]
 8008852:	9903      	ldr	r1, [sp, #12]
 8008854:	e7d7      	b.n	8008806 <__hexnan+0x2e>
 8008856:	2a29      	cmp	r2, #41	; 0x29
 8008858:	d155      	bne.n	8008906 <__hexnan+0x12e>
 800885a:	3102      	adds	r1, #2
 800885c:	f8ca 1000 	str.w	r1, [sl]
 8008860:	f1bb 0f00 	cmp.w	fp, #0
 8008864:	d04f      	beq.n	8008906 <__hexnan+0x12e>
 8008866:	454c      	cmp	r4, r9
 8008868:	d206      	bcs.n	8008878 <__hexnan+0xa0>
 800886a:	2d07      	cmp	r5, #7
 800886c:	dc04      	bgt.n	8008878 <__hexnan+0xa0>
 800886e:	462a      	mov	r2, r5
 8008870:	4649      	mov	r1, r9
 8008872:	4620      	mov	r0, r4
 8008874:	f7ff ff8a 	bl	800878c <L_shift>
 8008878:	4544      	cmp	r4, r8
 800887a:	d934      	bls.n	80088e6 <__hexnan+0x10e>
 800887c:	4623      	mov	r3, r4
 800887e:	f1a8 0204 	sub.w	r2, r8, #4
 8008882:	f853 1b04 	ldr.w	r1, [r3], #4
 8008886:	429f      	cmp	r7, r3
 8008888:	f842 1f04 	str.w	r1, [r2, #4]!
 800888c:	d2f9      	bcs.n	8008882 <__hexnan+0xaa>
 800888e:	1b3b      	subs	r3, r7, r4
 8008890:	f023 0303 	bic.w	r3, r3, #3
 8008894:	3304      	adds	r3, #4
 8008896:	3e03      	subs	r6, #3
 8008898:	3401      	adds	r4, #1
 800889a:	42a6      	cmp	r6, r4
 800889c:	bf38      	it	cc
 800889e:	2304      	movcc	r3, #4
 80088a0:	2200      	movs	r2, #0
 80088a2:	4443      	add	r3, r8
 80088a4:	f843 2b04 	str.w	r2, [r3], #4
 80088a8:	429f      	cmp	r7, r3
 80088aa:	d2fb      	bcs.n	80088a4 <__hexnan+0xcc>
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	b91b      	cbnz	r3, 80088b8 <__hexnan+0xe0>
 80088b0:	4547      	cmp	r7, r8
 80088b2:	d126      	bne.n	8008902 <__hexnan+0x12a>
 80088b4:	2301      	movs	r3, #1
 80088b6:	603b      	str	r3, [r7, #0]
 80088b8:	2005      	movs	r0, #5
 80088ba:	e025      	b.n	8008908 <__hexnan+0x130>
 80088bc:	3501      	adds	r5, #1
 80088be:	2d08      	cmp	r5, #8
 80088c0:	f10b 0b01 	add.w	fp, fp, #1
 80088c4:	dd06      	ble.n	80088d4 <__hexnan+0xfc>
 80088c6:	4544      	cmp	r4, r8
 80088c8:	d9c3      	bls.n	8008852 <__hexnan+0x7a>
 80088ca:	2300      	movs	r3, #0
 80088cc:	2501      	movs	r5, #1
 80088ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80088d2:	3c04      	subs	r4, #4
 80088d4:	6822      	ldr	r2, [r4, #0]
 80088d6:	f000 000f 	and.w	r0, r0, #15
 80088da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80088de:	6020      	str	r0, [r4, #0]
 80088e0:	e7b7      	b.n	8008852 <__hexnan+0x7a>
 80088e2:	2508      	movs	r5, #8
 80088e4:	e7b5      	b.n	8008852 <__hexnan+0x7a>
 80088e6:	9b01      	ldr	r3, [sp, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d0df      	beq.n	80088ac <__hexnan+0xd4>
 80088ec:	f04f 32ff 	mov.w	r2, #4294967295
 80088f0:	f1c3 0320 	rsb	r3, r3, #32
 80088f4:	40da      	lsrs	r2, r3
 80088f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80088fa:	4013      	ands	r3, r2
 80088fc:	f846 3c04 	str.w	r3, [r6, #-4]
 8008900:	e7d4      	b.n	80088ac <__hexnan+0xd4>
 8008902:	3f04      	subs	r7, #4
 8008904:	e7d2      	b.n	80088ac <__hexnan+0xd4>
 8008906:	2004      	movs	r0, #4
 8008908:	b007      	add	sp, #28
 800890a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800890e <__ascii_mbtowc>:
 800890e:	b082      	sub	sp, #8
 8008910:	b901      	cbnz	r1, 8008914 <__ascii_mbtowc+0x6>
 8008912:	a901      	add	r1, sp, #4
 8008914:	b142      	cbz	r2, 8008928 <__ascii_mbtowc+0x1a>
 8008916:	b14b      	cbz	r3, 800892c <__ascii_mbtowc+0x1e>
 8008918:	7813      	ldrb	r3, [r2, #0]
 800891a:	600b      	str	r3, [r1, #0]
 800891c:	7812      	ldrb	r2, [r2, #0]
 800891e:	1e10      	subs	r0, r2, #0
 8008920:	bf18      	it	ne
 8008922:	2001      	movne	r0, #1
 8008924:	b002      	add	sp, #8
 8008926:	4770      	bx	lr
 8008928:	4610      	mov	r0, r2
 800892a:	e7fb      	b.n	8008924 <__ascii_mbtowc+0x16>
 800892c:	f06f 0001 	mvn.w	r0, #1
 8008930:	e7f8      	b.n	8008924 <__ascii_mbtowc+0x16>

08008932 <_realloc_r>:
 8008932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008936:	4680      	mov	r8, r0
 8008938:	4614      	mov	r4, r2
 800893a:	460e      	mov	r6, r1
 800893c:	b921      	cbnz	r1, 8008948 <_realloc_r+0x16>
 800893e:	4611      	mov	r1, r2
 8008940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008944:	f7fd bec0 	b.w	80066c8 <_malloc_r>
 8008948:	b92a      	cbnz	r2, 8008956 <_realloc_r+0x24>
 800894a:	f7fd fe4d 	bl	80065e8 <_free_r>
 800894e:	4625      	mov	r5, r4
 8008950:	4628      	mov	r0, r5
 8008952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008956:	f000 f842 	bl	80089de <_malloc_usable_size_r>
 800895a:	4284      	cmp	r4, r0
 800895c:	4607      	mov	r7, r0
 800895e:	d802      	bhi.n	8008966 <_realloc_r+0x34>
 8008960:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008964:	d812      	bhi.n	800898c <_realloc_r+0x5a>
 8008966:	4621      	mov	r1, r4
 8008968:	4640      	mov	r0, r8
 800896a:	f7fd fead 	bl	80066c8 <_malloc_r>
 800896e:	4605      	mov	r5, r0
 8008970:	2800      	cmp	r0, #0
 8008972:	d0ed      	beq.n	8008950 <_realloc_r+0x1e>
 8008974:	42bc      	cmp	r4, r7
 8008976:	4622      	mov	r2, r4
 8008978:	4631      	mov	r1, r6
 800897a:	bf28      	it	cs
 800897c:	463a      	movcs	r2, r7
 800897e:	f7ff fc27 	bl	80081d0 <memcpy>
 8008982:	4631      	mov	r1, r6
 8008984:	4640      	mov	r0, r8
 8008986:	f7fd fe2f 	bl	80065e8 <_free_r>
 800898a:	e7e1      	b.n	8008950 <_realloc_r+0x1e>
 800898c:	4635      	mov	r5, r6
 800898e:	e7df      	b.n	8008950 <_realloc_r+0x1e>

08008990 <__ascii_wctomb>:
 8008990:	4603      	mov	r3, r0
 8008992:	4608      	mov	r0, r1
 8008994:	b141      	cbz	r1, 80089a8 <__ascii_wctomb+0x18>
 8008996:	2aff      	cmp	r2, #255	; 0xff
 8008998:	d904      	bls.n	80089a4 <__ascii_wctomb+0x14>
 800899a:	228a      	movs	r2, #138	; 0x8a
 800899c:	f04f 30ff 	mov.w	r0, #4294967295
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	4770      	bx	lr
 80089a4:	2001      	movs	r0, #1
 80089a6:	700a      	strb	r2, [r1, #0]
 80089a8:	4770      	bx	lr
	...

080089ac <fiprintf>:
 80089ac:	b40e      	push	{r1, r2, r3}
 80089ae:	b503      	push	{r0, r1, lr}
 80089b0:	4601      	mov	r1, r0
 80089b2:	ab03      	add	r3, sp, #12
 80089b4:	4805      	ldr	r0, [pc, #20]	; (80089cc <fiprintf+0x20>)
 80089b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ba:	6800      	ldr	r0, [r0, #0]
 80089bc:	9301      	str	r3, [sp, #4]
 80089be:	f000 f83d 	bl	8008a3c <_vfiprintf_r>
 80089c2:	b002      	add	sp, #8
 80089c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80089c8:	b003      	add	sp, #12
 80089ca:	4770      	bx	lr
 80089cc:	20000068 	.word	0x20000068

080089d0 <abort>:
 80089d0:	2006      	movs	r0, #6
 80089d2:	b508      	push	{r3, lr}
 80089d4:	f000 fa0a 	bl	8008dec <raise>
 80089d8:	2001      	movs	r0, #1
 80089da:	f7f8 fc26 	bl	800122a <_exit>

080089de <_malloc_usable_size_r>:
 80089de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089e2:	1f18      	subs	r0, r3, #4
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	bfbc      	itt	lt
 80089e8:	580b      	ldrlt	r3, [r1, r0]
 80089ea:	18c0      	addlt	r0, r0, r3
 80089ec:	4770      	bx	lr

080089ee <__sfputc_r>:
 80089ee:	6893      	ldr	r3, [r2, #8]
 80089f0:	b410      	push	{r4}
 80089f2:	3b01      	subs	r3, #1
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	6093      	str	r3, [r2, #8]
 80089f8:	da07      	bge.n	8008a0a <__sfputc_r+0x1c>
 80089fa:	6994      	ldr	r4, [r2, #24]
 80089fc:	42a3      	cmp	r3, r4
 80089fe:	db01      	blt.n	8008a04 <__sfputc_r+0x16>
 8008a00:	290a      	cmp	r1, #10
 8008a02:	d102      	bne.n	8008a0a <__sfputc_r+0x1c>
 8008a04:	bc10      	pop	{r4}
 8008a06:	f000 b933 	b.w	8008c70 <__swbuf_r>
 8008a0a:	6813      	ldr	r3, [r2, #0]
 8008a0c:	1c58      	adds	r0, r3, #1
 8008a0e:	6010      	str	r0, [r2, #0]
 8008a10:	7019      	strb	r1, [r3, #0]
 8008a12:	4608      	mov	r0, r1
 8008a14:	bc10      	pop	{r4}
 8008a16:	4770      	bx	lr

08008a18 <__sfputs_r>:
 8008a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	4614      	mov	r4, r2
 8008a20:	18d5      	adds	r5, r2, r3
 8008a22:	42ac      	cmp	r4, r5
 8008a24:	d101      	bne.n	8008a2a <__sfputs_r+0x12>
 8008a26:	2000      	movs	r0, #0
 8008a28:	e007      	b.n	8008a3a <__sfputs_r+0x22>
 8008a2a:	463a      	mov	r2, r7
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a32:	f7ff ffdc 	bl	80089ee <__sfputc_r>
 8008a36:	1c43      	adds	r3, r0, #1
 8008a38:	d1f3      	bne.n	8008a22 <__sfputs_r+0xa>
 8008a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a3c <_vfiprintf_r>:
 8008a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a40:	460d      	mov	r5, r1
 8008a42:	4614      	mov	r4, r2
 8008a44:	4698      	mov	r8, r3
 8008a46:	4606      	mov	r6, r0
 8008a48:	b09d      	sub	sp, #116	; 0x74
 8008a4a:	b118      	cbz	r0, 8008a54 <_vfiprintf_r+0x18>
 8008a4c:	6a03      	ldr	r3, [r0, #32]
 8008a4e:	b90b      	cbnz	r3, 8008a54 <_vfiprintf_r+0x18>
 8008a50:	f7fc fe32 	bl	80056b8 <__sinit>
 8008a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a56:	07d9      	lsls	r1, r3, #31
 8008a58:	d405      	bmi.n	8008a66 <_vfiprintf_r+0x2a>
 8008a5a:	89ab      	ldrh	r3, [r5, #12]
 8008a5c:	059a      	lsls	r2, r3, #22
 8008a5e:	d402      	bmi.n	8008a66 <_vfiprintf_r+0x2a>
 8008a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a62:	f7fc ff3f 	bl	80058e4 <__retarget_lock_acquire_recursive>
 8008a66:	89ab      	ldrh	r3, [r5, #12]
 8008a68:	071b      	lsls	r3, r3, #28
 8008a6a:	d501      	bpl.n	8008a70 <_vfiprintf_r+0x34>
 8008a6c:	692b      	ldr	r3, [r5, #16]
 8008a6e:	b99b      	cbnz	r3, 8008a98 <_vfiprintf_r+0x5c>
 8008a70:	4629      	mov	r1, r5
 8008a72:	4630      	mov	r0, r6
 8008a74:	f000 f93a 	bl	8008cec <__swsetup_r>
 8008a78:	b170      	cbz	r0, 8008a98 <_vfiprintf_r+0x5c>
 8008a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a7c:	07dc      	lsls	r4, r3, #31
 8008a7e:	d504      	bpl.n	8008a8a <_vfiprintf_r+0x4e>
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	b01d      	add	sp, #116	; 0x74
 8008a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8a:	89ab      	ldrh	r3, [r5, #12]
 8008a8c:	0598      	lsls	r0, r3, #22
 8008a8e:	d4f7      	bmi.n	8008a80 <_vfiprintf_r+0x44>
 8008a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a92:	f7fc ff28 	bl	80058e6 <__retarget_lock_release_recursive>
 8008a96:	e7f3      	b.n	8008a80 <_vfiprintf_r+0x44>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9c:	2320      	movs	r3, #32
 8008a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aa2:	2330      	movs	r3, #48	; 0x30
 8008aa4:	f04f 0901 	mov.w	r9, #1
 8008aa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aac:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008c5c <_vfiprintf_r+0x220>
 8008ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ab4:	4623      	mov	r3, r4
 8008ab6:	469a      	mov	sl, r3
 8008ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008abc:	b10a      	cbz	r2, 8008ac2 <_vfiprintf_r+0x86>
 8008abe:	2a25      	cmp	r2, #37	; 0x25
 8008ac0:	d1f9      	bne.n	8008ab6 <_vfiprintf_r+0x7a>
 8008ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ac6:	d00b      	beq.n	8008ae0 <_vfiprintf_r+0xa4>
 8008ac8:	465b      	mov	r3, fp
 8008aca:	4622      	mov	r2, r4
 8008acc:	4629      	mov	r1, r5
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f7ff ffa2 	bl	8008a18 <__sfputs_r>
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	f000 80a9 	beq.w	8008c2c <_vfiprintf_r+0x1f0>
 8008ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008adc:	445a      	add	r2, fp
 8008ade:	9209      	str	r2, [sp, #36]	; 0x24
 8008ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 80a1 	beq.w	8008c2c <_vfiprintf_r+0x1f0>
 8008aea:	2300      	movs	r3, #0
 8008aec:	f04f 32ff 	mov.w	r2, #4294967295
 8008af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008af4:	f10a 0a01 	add.w	sl, sl, #1
 8008af8:	9304      	str	r3, [sp, #16]
 8008afa:	9307      	str	r3, [sp, #28]
 8008afc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b00:	931a      	str	r3, [sp, #104]	; 0x68
 8008b02:	4654      	mov	r4, sl
 8008b04:	2205      	movs	r2, #5
 8008b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b0a:	4854      	ldr	r0, [pc, #336]	; (8008c5c <_vfiprintf_r+0x220>)
 8008b0c:	f7fc feec 	bl	80058e8 <memchr>
 8008b10:	9a04      	ldr	r2, [sp, #16]
 8008b12:	b9d8      	cbnz	r0, 8008b4c <_vfiprintf_r+0x110>
 8008b14:	06d1      	lsls	r1, r2, #27
 8008b16:	bf44      	itt	mi
 8008b18:	2320      	movmi	r3, #32
 8008b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b1e:	0713      	lsls	r3, r2, #28
 8008b20:	bf44      	itt	mi
 8008b22:	232b      	movmi	r3, #43	; 0x2b
 8008b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b28:	f89a 3000 	ldrb.w	r3, [sl]
 8008b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b2e:	d015      	beq.n	8008b5c <_vfiprintf_r+0x120>
 8008b30:	4654      	mov	r4, sl
 8008b32:	2000      	movs	r0, #0
 8008b34:	f04f 0c0a 	mov.w	ip, #10
 8008b38:	9a07      	ldr	r2, [sp, #28]
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b40:	3b30      	subs	r3, #48	; 0x30
 8008b42:	2b09      	cmp	r3, #9
 8008b44:	d94d      	bls.n	8008be2 <_vfiprintf_r+0x1a6>
 8008b46:	b1b0      	cbz	r0, 8008b76 <_vfiprintf_r+0x13a>
 8008b48:	9207      	str	r2, [sp, #28]
 8008b4a:	e014      	b.n	8008b76 <_vfiprintf_r+0x13a>
 8008b4c:	eba0 0308 	sub.w	r3, r0, r8
 8008b50:	fa09 f303 	lsl.w	r3, r9, r3
 8008b54:	4313      	orrs	r3, r2
 8008b56:	46a2      	mov	sl, r4
 8008b58:	9304      	str	r3, [sp, #16]
 8008b5a:	e7d2      	b.n	8008b02 <_vfiprintf_r+0xc6>
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	1d19      	adds	r1, r3, #4
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	9103      	str	r1, [sp, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	bfbb      	ittet	lt
 8008b68:	425b      	neglt	r3, r3
 8008b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b6e:	9307      	strge	r3, [sp, #28]
 8008b70:	9307      	strlt	r3, [sp, #28]
 8008b72:	bfb8      	it	lt
 8008b74:	9204      	strlt	r2, [sp, #16]
 8008b76:	7823      	ldrb	r3, [r4, #0]
 8008b78:	2b2e      	cmp	r3, #46	; 0x2e
 8008b7a:	d10c      	bne.n	8008b96 <_vfiprintf_r+0x15a>
 8008b7c:	7863      	ldrb	r3, [r4, #1]
 8008b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b80:	d134      	bne.n	8008bec <_vfiprintf_r+0x1b0>
 8008b82:	9b03      	ldr	r3, [sp, #12]
 8008b84:	3402      	adds	r4, #2
 8008b86:	1d1a      	adds	r2, r3, #4
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	9203      	str	r2, [sp, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	bfb8      	it	lt
 8008b90:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b94:	9305      	str	r3, [sp, #20]
 8008b96:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c60 <_vfiprintf_r+0x224>
 8008b9a:	2203      	movs	r2, #3
 8008b9c:	4650      	mov	r0, sl
 8008b9e:	7821      	ldrb	r1, [r4, #0]
 8008ba0:	f7fc fea2 	bl	80058e8 <memchr>
 8008ba4:	b138      	cbz	r0, 8008bb6 <_vfiprintf_r+0x17a>
 8008ba6:	2240      	movs	r2, #64	; 0x40
 8008ba8:	9b04      	ldr	r3, [sp, #16]
 8008baa:	eba0 000a 	sub.w	r0, r0, sl
 8008bae:	4082      	lsls	r2, r0
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	3401      	adds	r4, #1
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bba:	2206      	movs	r2, #6
 8008bbc:	4829      	ldr	r0, [pc, #164]	; (8008c64 <_vfiprintf_r+0x228>)
 8008bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bc2:	f7fc fe91 	bl	80058e8 <memchr>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d03f      	beq.n	8008c4a <_vfiprintf_r+0x20e>
 8008bca:	4b27      	ldr	r3, [pc, #156]	; (8008c68 <_vfiprintf_r+0x22c>)
 8008bcc:	bb1b      	cbnz	r3, 8008c16 <_vfiprintf_r+0x1da>
 8008bce:	9b03      	ldr	r3, [sp, #12]
 8008bd0:	3307      	adds	r3, #7
 8008bd2:	f023 0307 	bic.w	r3, r3, #7
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	9303      	str	r3, [sp, #12]
 8008bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bdc:	443b      	add	r3, r7
 8008bde:	9309      	str	r3, [sp, #36]	; 0x24
 8008be0:	e768      	b.n	8008ab4 <_vfiprintf_r+0x78>
 8008be2:	460c      	mov	r4, r1
 8008be4:	2001      	movs	r0, #1
 8008be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bea:	e7a6      	b.n	8008b3a <_vfiprintf_r+0xfe>
 8008bec:	2300      	movs	r3, #0
 8008bee:	f04f 0c0a 	mov.w	ip, #10
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	3401      	adds	r4, #1
 8008bf6:	9305      	str	r3, [sp, #20]
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bfe:	3a30      	subs	r2, #48	; 0x30
 8008c00:	2a09      	cmp	r2, #9
 8008c02:	d903      	bls.n	8008c0c <_vfiprintf_r+0x1d0>
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0c6      	beq.n	8008b96 <_vfiprintf_r+0x15a>
 8008c08:	9105      	str	r1, [sp, #20]
 8008c0a:	e7c4      	b.n	8008b96 <_vfiprintf_r+0x15a>
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	2301      	movs	r3, #1
 8008c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c14:	e7f0      	b.n	8008bf8 <_vfiprintf_r+0x1bc>
 8008c16:	ab03      	add	r3, sp, #12
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	462a      	mov	r2, r5
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	4b13      	ldr	r3, [pc, #76]	; (8008c6c <_vfiprintf_r+0x230>)
 8008c20:	a904      	add	r1, sp, #16
 8008c22:	f7fb feff 	bl	8004a24 <_printf_float>
 8008c26:	4607      	mov	r7, r0
 8008c28:	1c78      	adds	r0, r7, #1
 8008c2a:	d1d6      	bne.n	8008bda <_vfiprintf_r+0x19e>
 8008c2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c2e:	07d9      	lsls	r1, r3, #31
 8008c30:	d405      	bmi.n	8008c3e <_vfiprintf_r+0x202>
 8008c32:	89ab      	ldrh	r3, [r5, #12]
 8008c34:	059a      	lsls	r2, r3, #22
 8008c36:	d402      	bmi.n	8008c3e <_vfiprintf_r+0x202>
 8008c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c3a:	f7fc fe54 	bl	80058e6 <__retarget_lock_release_recursive>
 8008c3e:	89ab      	ldrh	r3, [r5, #12]
 8008c40:	065b      	lsls	r3, r3, #25
 8008c42:	f53f af1d 	bmi.w	8008a80 <_vfiprintf_r+0x44>
 8008c46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c48:	e71c      	b.n	8008a84 <_vfiprintf_r+0x48>
 8008c4a:	ab03      	add	r3, sp, #12
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	462a      	mov	r2, r5
 8008c50:	4630      	mov	r0, r6
 8008c52:	4b06      	ldr	r3, [pc, #24]	; (8008c6c <_vfiprintf_r+0x230>)
 8008c54:	a904      	add	r1, sp, #16
 8008c56:	f7fc f985 	bl	8004f64 <_printf_i>
 8008c5a:	e7e4      	b.n	8008c26 <_vfiprintf_r+0x1ea>
 8008c5c:	0800b828 	.word	0x0800b828
 8008c60:	0800b82e 	.word	0x0800b82e
 8008c64:	0800b832 	.word	0x0800b832
 8008c68:	08004a25 	.word	0x08004a25
 8008c6c:	08008a19 	.word	0x08008a19

08008c70 <__swbuf_r>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	460e      	mov	r6, r1
 8008c74:	4614      	mov	r4, r2
 8008c76:	4605      	mov	r5, r0
 8008c78:	b118      	cbz	r0, 8008c82 <__swbuf_r+0x12>
 8008c7a:	6a03      	ldr	r3, [r0, #32]
 8008c7c:	b90b      	cbnz	r3, 8008c82 <__swbuf_r+0x12>
 8008c7e:	f7fc fd1b 	bl	80056b8 <__sinit>
 8008c82:	69a3      	ldr	r3, [r4, #24]
 8008c84:	60a3      	str	r3, [r4, #8]
 8008c86:	89a3      	ldrh	r3, [r4, #12]
 8008c88:	071a      	lsls	r2, r3, #28
 8008c8a:	d525      	bpl.n	8008cd8 <__swbuf_r+0x68>
 8008c8c:	6923      	ldr	r3, [r4, #16]
 8008c8e:	b31b      	cbz	r3, 8008cd8 <__swbuf_r+0x68>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	6922      	ldr	r2, [r4, #16]
 8008c94:	b2f6      	uxtb	r6, r6
 8008c96:	1a98      	subs	r0, r3, r2
 8008c98:	6963      	ldr	r3, [r4, #20]
 8008c9a:	4637      	mov	r7, r6
 8008c9c:	4283      	cmp	r3, r0
 8008c9e:	dc04      	bgt.n	8008caa <__swbuf_r+0x3a>
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f7ff fa30 	bl	8008108 <_fflush_r>
 8008ca8:	b9e0      	cbnz	r0, 8008ce4 <__swbuf_r+0x74>
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	60a3      	str	r3, [r4, #8]
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	1c5a      	adds	r2, r3, #1
 8008cb4:	6022      	str	r2, [r4, #0]
 8008cb6:	701e      	strb	r6, [r3, #0]
 8008cb8:	6962      	ldr	r2, [r4, #20]
 8008cba:	1c43      	adds	r3, r0, #1
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d004      	beq.n	8008cca <__swbuf_r+0x5a>
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	07db      	lsls	r3, r3, #31
 8008cc4:	d506      	bpl.n	8008cd4 <__swbuf_r+0x64>
 8008cc6:	2e0a      	cmp	r6, #10
 8008cc8:	d104      	bne.n	8008cd4 <__swbuf_r+0x64>
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4628      	mov	r0, r5
 8008cce:	f7ff fa1b 	bl	8008108 <_fflush_r>
 8008cd2:	b938      	cbnz	r0, 8008ce4 <__swbuf_r+0x74>
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cd8:	4621      	mov	r1, r4
 8008cda:	4628      	mov	r0, r5
 8008cdc:	f000 f806 	bl	8008cec <__swsetup_r>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d0d5      	beq.n	8008c90 <__swbuf_r+0x20>
 8008ce4:	f04f 37ff 	mov.w	r7, #4294967295
 8008ce8:	e7f4      	b.n	8008cd4 <__swbuf_r+0x64>
	...

08008cec <__swsetup_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4b2a      	ldr	r3, [pc, #168]	; (8008d98 <__swsetup_r+0xac>)
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	b118      	cbz	r0, 8008d00 <__swsetup_r+0x14>
 8008cf8:	6a03      	ldr	r3, [r0, #32]
 8008cfa:	b90b      	cbnz	r3, 8008d00 <__swsetup_r+0x14>
 8008cfc:	f7fc fcdc 	bl	80056b8 <__sinit>
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d06:	0718      	lsls	r0, r3, #28
 8008d08:	d422      	bmi.n	8008d50 <__swsetup_r+0x64>
 8008d0a:	06d9      	lsls	r1, r3, #27
 8008d0c:	d407      	bmi.n	8008d1e <__swsetup_r+0x32>
 8008d0e:	2309      	movs	r3, #9
 8008d10:	602b      	str	r3, [r5, #0]
 8008d12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d16:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	e034      	b.n	8008d88 <__swsetup_r+0x9c>
 8008d1e:	0758      	lsls	r0, r3, #29
 8008d20:	d512      	bpl.n	8008d48 <__swsetup_r+0x5c>
 8008d22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d24:	b141      	cbz	r1, 8008d38 <__swsetup_r+0x4c>
 8008d26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d2a:	4299      	cmp	r1, r3
 8008d2c:	d002      	beq.n	8008d34 <__swsetup_r+0x48>
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f7fd fc5a 	bl	80065e8 <_free_r>
 8008d34:	2300      	movs	r3, #0
 8008d36:	6363      	str	r3, [r4, #52]	; 0x34
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	2300      	movs	r3, #0
 8008d42:	6063      	str	r3, [r4, #4]
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	6023      	str	r3, [r4, #0]
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f043 0308 	orr.w	r3, r3, #8
 8008d4e:	81a3      	strh	r3, [r4, #12]
 8008d50:	6923      	ldr	r3, [r4, #16]
 8008d52:	b94b      	cbnz	r3, 8008d68 <__swsetup_r+0x7c>
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d5e:	d003      	beq.n	8008d68 <__swsetup_r+0x7c>
 8008d60:	4621      	mov	r1, r4
 8008d62:	4628      	mov	r0, r5
 8008d64:	f000 f883 	bl	8008e6e <__smakebuf_r>
 8008d68:	89a0      	ldrh	r0, [r4, #12]
 8008d6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d6e:	f010 0301 	ands.w	r3, r0, #1
 8008d72:	d00a      	beq.n	8008d8a <__swsetup_r+0x9e>
 8008d74:	2300      	movs	r3, #0
 8008d76:	60a3      	str	r3, [r4, #8]
 8008d78:	6963      	ldr	r3, [r4, #20]
 8008d7a:	425b      	negs	r3, r3
 8008d7c:	61a3      	str	r3, [r4, #24]
 8008d7e:	6923      	ldr	r3, [r4, #16]
 8008d80:	b943      	cbnz	r3, 8008d94 <__swsetup_r+0xa8>
 8008d82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d86:	d1c4      	bne.n	8008d12 <__swsetup_r+0x26>
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
 8008d8a:	0781      	lsls	r1, r0, #30
 8008d8c:	bf58      	it	pl
 8008d8e:	6963      	ldrpl	r3, [r4, #20]
 8008d90:	60a3      	str	r3, [r4, #8]
 8008d92:	e7f4      	b.n	8008d7e <__swsetup_r+0x92>
 8008d94:	2000      	movs	r0, #0
 8008d96:	e7f7      	b.n	8008d88 <__swsetup_r+0x9c>
 8008d98:	20000068 	.word	0x20000068

08008d9c <_raise_r>:
 8008d9c:	291f      	cmp	r1, #31
 8008d9e:	b538      	push	{r3, r4, r5, lr}
 8008da0:	4604      	mov	r4, r0
 8008da2:	460d      	mov	r5, r1
 8008da4:	d904      	bls.n	8008db0 <_raise_r+0x14>
 8008da6:	2316      	movs	r3, #22
 8008da8:	6003      	str	r3, [r0, #0]
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008db2:	b112      	cbz	r2, 8008dba <_raise_r+0x1e>
 8008db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008db8:	b94b      	cbnz	r3, 8008dce <_raise_r+0x32>
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 f830 	bl	8008e20 <_getpid_r>
 8008dc0:	462a      	mov	r2, r5
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dca:	f000 b817 	b.w	8008dfc <_kill_r>
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d00a      	beq.n	8008de8 <_raise_r+0x4c>
 8008dd2:	1c59      	adds	r1, r3, #1
 8008dd4:	d103      	bne.n	8008dde <_raise_r+0x42>
 8008dd6:	2316      	movs	r3, #22
 8008dd8:	6003      	str	r3, [r0, #0]
 8008dda:	2001      	movs	r0, #1
 8008ddc:	e7e7      	b.n	8008dae <_raise_r+0x12>
 8008dde:	2400      	movs	r4, #0
 8008de0:	4628      	mov	r0, r5
 8008de2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008de6:	4798      	blx	r3
 8008de8:	2000      	movs	r0, #0
 8008dea:	e7e0      	b.n	8008dae <_raise_r+0x12>

08008dec <raise>:
 8008dec:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <raise+0xc>)
 8008dee:	4601      	mov	r1, r0
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	f7ff bfd3 	b.w	8008d9c <_raise_r>
 8008df6:	bf00      	nop
 8008df8:	20000068 	.word	0x20000068

08008dfc <_kill_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	2300      	movs	r3, #0
 8008e00:	4d06      	ldr	r5, [pc, #24]	; (8008e1c <_kill_r+0x20>)
 8008e02:	4604      	mov	r4, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	4611      	mov	r1, r2
 8008e08:	602b      	str	r3, [r5, #0]
 8008e0a:	f7f8 f9fe 	bl	800120a <_kill>
 8008e0e:	1c43      	adds	r3, r0, #1
 8008e10:	d102      	bne.n	8008e18 <_kill_r+0x1c>
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	b103      	cbz	r3, 8008e18 <_kill_r+0x1c>
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	bd38      	pop	{r3, r4, r5, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000828 	.word	0x20000828

08008e20 <_getpid_r>:
 8008e20:	f7f8 b9ec 	b.w	80011fc <_getpid>

08008e24 <__swhatbuf_r>:
 8008e24:	b570      	push	{r4, r5, r6, lr}
 8008e26:	460c      	mov	r4, r1
 8008e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e2c:	4615      	mov	r5, r2
 8008e2e:	2900      	cmp	r1, #0
 8008e30:	461e      	mov	r6, r3
 8008e32:	b096      	sub	sp, #88	; 0x58
 8008e34:	da0c      	bge.n	8008e50 <__swhatbuf_r+0x2c>
 8008e36:	89a3      	ldrh	r3, [r4, #12]
 8008e38:	2100      	movs	r1, #0
 8008e3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e3e:	bf0c      	ite	eq
 8008e40:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008e44:	2340      	movne	r3, #64	; 0x40
 8008e46:	2000      	movs	r0, #0
 8008e48:	6031      	str	r1, [r6, #0]
 8008e4a:	602b      	str	r3, [r5, #0]
 8008e4c:	b016      	add	sp, #88	; 0x58
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}
 8008e50:	466a      	mov	r2, sp
 8008e52:	f000 f849 	bl	8008ee8 <_fstat_r>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	dbed      	blt.n	8008e36 <__swhatbuf_r+0x12>
 8008e5a:	9901      	ldr	r1, [sp, #4]
 8008e5c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008e60:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008e64:	4259      	negs	r1, r3
 8008e66:	4159      	adcs	r1, r3
 8008e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e6c:	e7eb      	b.n	8008e46 <__swhatbuf_r+0x22>

08008e6e <__smakebuf_r>:
 8008e6e:	898b      	ldrh	r3, [r1, #12]
 8008e70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e72:	079d      	lsls	r5, r3, #30
 8008e74:	4606      	mov	r6, r0
 8008e76:	460c      	mov	r4, r1
 8008e78:	d507      	bpl.n	8008e8a <__smakebuf_r+0x1c>
 8008e7a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e7e:	6023      	str	r3, [r4, #0]
 8008e80:	6123      	str	r3, [r4, #16]
 8008e82:	2301      	movs	r3, #1
 8008e84:	6163      	str	r3, [r4, #20]
 8008e86:	b002      	add	sp, #8
 8008e88:	bd70      	pop	{r4, r5, r6, pc}
 8008e8a:	466a      	mov	r2, sp
 8008e8c:	ab01      	add	r3, sp, #4
 8008e8e:	f7ff ffc9 	bl	8008e24 <__swhatbuf_r>
 8008e92:	9900      	ldr	r1, [sp, #0]
 8008e94:	4605      	mov	r5, r0
 8008e96:	4630      	mov	r0, r6
 8008e98:	f7fd fc16 	bl	80066c8 <_malloc_r>
 8008e9c:	b948      	cbnz	r0, 8008eb2 <__smakebuf_r+0x44>
 8008e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea2:	059a      	lsls	r2, r3, #22
 8008ea4:	d4ef      	bmi.n	8008e86 <__smakebuf_r+0x18>
 8008ea6:	f023 0303 	bic.w	r3, r3, #3
 8008eaa:	f043 0302 	orr.w	r3, r3, #2
 8008eae:	81a3      	strh	r3, [r4, #12]
 8008eb0:	e7e3      	b.n	8008e7a <__smakebuf_r+0xc>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	6020      	str	r0, [r4, #0]
 8008eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	9b00      	ldr	r3, [sp, #0]
 8008ebe:	6120      	str	r0, [r4, #16]
 8008ec0:	6163      	str	r3, [r4, #20]
 8008ec2:	9b01      	ldr	r3, [sp, #4]
 8008ec4:	b15b      	cbz	r3, 8008ede <__smakebuf_r+0x70>
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ecc:	f000 f81e 	bl	8008f0c <_isatty_r>
 8008ed0:	b128      	cbz	r0, 8008ede <__smakebuf_r+0x70>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	f023 0303 	bic.w	r3, r3, #3
 8008ed8:	f043 0301 	orr.w	r3, r3, #1
 8008edc:	81a3      	strh	r3, [r4, #12]
 8008ede:	89a3      	ldrh	r3, [r4, #12]
 8008ee0:	431d      	orrs	r5, r3
 8008ee2:	81a5      	strh	r5, [r4, #12]
 8008ee4:	e7cf      	b.n	8008e86 <__smakebuf_r+0x18>
	...

08008ee8 <_fstat_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	2300      	movs	r3, #0
 8008eec:	4d06      	ldr	r5, [pc, #24]	; (8008f08 <_fstat_r+0x20>)
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	602b      	str	r3, [r5, #0]
 8008ef6:	f7f8 f9e6 	bl	80012c6 <_fstat>
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	d102      	bne.n	8008f04 <_fstat_r+0x1c>
 8008efe:	682b      	ldr	r3, [r5, #0]
 8008f00:	b103      	cbz	r3, 8008f04 <_fstat_r+0x1c>
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	bd38      	pop	{r3, r4, r5, pc}
 8008f06:	bf00      	nop
 8008f08:	20000828 	.word	0x20000828

08008f0c <_isatty_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	2300      	movs	r3, #0
 8008f10:	4d05      	ldr	r5, [pc, #20]	; (8008f28 <_isatty_r+0x1c>)
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	602b      	str	r3, [r5, #0]
 8008f18:	f7f8 f9e4 	bl	80012e4 <_isatty>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d102      	bne.n	8008f26 <_isatty_r+0x1a>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	b103      	cbz	r3, 8008f26 <_isatty_r+0x1a>
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	20000828 	.word	0x20000828

08008f2c <pow>:
 8008f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f30:	4614      	mov	r4, r2
 8008f32:	461d      	mov	r5, r3
 8008f34:	4680      	mov	r8, r0
 8008f36:	4689      	mov	r9, r1
 8008f38:	f000 ff1e 	bl	8009d78 <__ieee754_pow>
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	4606      	mov	r6, r0
 8008f40:	460f      	mov	r7, r1
 8008f42:	462b      	mov	r3, r5
 8008f44:	4620      	mov	r0, r4
 8008f46:	4629      	mov	r1, r5
 8008f48:	f7f7 fe14 	bl	8000b74 <__aeabi_dcmpun>
 8008f4c:	bbc8      	cbnz	r0, 8008fc2 <pow+0x96>
 8008f4e:	2200      	movs	r2, #0
 8008f50:	2300      	movs	r3, #0
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 fddb 	bl	8000b10 <__aeabi_dcmpeq>
 8008f5a:	b1b8      	cbz	r0, 8008f8c <pow+0x60>
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2300      	movs	r3, #0
 8008f60:	4620      	mov	r0, r4
 8008f62:	4629      	mov	r1, r5
 8008f64:	f7f7 fdd4 	bl	8000b10 <__aeabi_dcmpeq>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d141      	bne.n	8008ff0 <pow+0xc4>
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	4629      	mov	r1, r5
 8008f70:	f000 faae 	bl	80094d0 <finite>
 8008f74:	b328      	cbz	r0, 8008fc2 <pow+0x96>
 8008f76:	2200      	movs	r2, #0
 8008f78:	2300      	movs	r3, #0
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	f7f7 fdd1 	bl	8000b24 <__aeabi_dcmplt>
 8008f82:	b1f0      	cbz	r0, 8008fc2 <pow+0x96>
 8008f84:	f7fc fc84 	bl	8005890 <__errno>
 8008f88:	2322      	movs	r3, #34	; 0x22
 8008f8a:	e019      	b.n	8008fc0 <pow+0x94>
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	4639      	mov	r1, r7
 8008f90:	f000 fa9e 	bl	80094d0 <finite>
 8008f94:	b9c8      	cbnz	r0, 8008fca <pow+0x9e>
 8008f96:	4640      	mov	r0, r8
 8008f98:	4649      	mov	r1, r9
 8008f9a:	f000 fa99 	bl	80094d0 <finite>
 8008f9e:	b1a0      	cbz	r0, 8008fca <pow+0x9e>
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	f000 fa94 	bl	80094d0 <finite>
 8008fa8:	b178      	cbz	r0, 8008fca <pow+0x9e>
 8008faa:	4632      	mov	r2, r6
 8008fac:	463b      	mov	r3, r7
 8008fae:	4630      	mov	r0, r6
 8008fb0:	4639      	mov	r1, r7
 8008fb2:	f7f7 fddf 	bl	8000b74 <__aeabi_dcmpun>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d0e4      	beq.n	8008f84 <pow+0x58>
 8008fba:	f7fc fc69 	bl	8005890 <__errno>
 8008fbe:	2321      	movs	r3, #33	; 0x21
 8008fc0:	6003      	str	r3, [r0, #0]
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2300      	movs	r3, #0
 8008fce:	4630      	mov	r0, r6
 8008fd0:	4639      	mov	r1, r7
 8008fd2:	f7f7 fd9d 	bl	8000b10 <__aeabi_dcmpeq>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d0f3      	beq.n	8008fc2 <pow+0x96>
 8008fda:	4640      	mov	r0, r8
 8008fdc:	4649      	mov	r1, r9
 8008fde:	f000 fa77 	bl	80094d0 <finite>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d0ed      	beq.n	8008fc2 <pow+0x96>
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	4629      	mov	r1, r5
 8008fea:	f000 fa71 	bl	80094d0 <finite>
 8008fee:	e7c8      	b.n	8008f82 <pow+0x56>
 8008ff0:	2600      	movs	r6, #0
 8008ff2:	4f01      	ldr	r7, [pc, #4]	; (8008ff8 <pow+0xcc>)
 8008ff4:	e7e5      	b.n	8008fc2 <pow+0x96>
 8008ff6:	bf00      	nop
 8008ff8:	3ff00000 	.word	0x3ff00000

08008ffc <sqrt>:
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	4606      	mov	r6, r0
 8009000:	460f      	mov	r7, r1
 8009002:	f000 fa6b 	bl	80094dc <__ieee754_sqrt>
 8009006:	4632      	mov	r2, r6
 8009008:	4604      	mov	r4, r0
 800900a:	460d      	mov	r5, r1
 800900c:	463b      	mov	r3, r7
 800900e:	4630      	mov	r0, r6
 8009010:	4639      	mov	r1, r7
 8009012:	f7f7 fdaf 	bl	8000b74 <__aeabi_dcmpun>
 8009016:	b990      	cbnz	r0, 800903e <sqrt+0x42>
 8009018:	2200      	movs	r2, #0
 800901a:	2300      	movs	r3, #0
 800901c:	4630      	mov	r0, r6
 800901e:	4639      	mov	r1, r7
 8009020:	f7f7 fd80 	bl	8000b24 <__aeabi_dcmplt>
 8009024:	b158      	cbz	r0, 800903e <sqrt+0x42>
 8009026:	f7fc fc33 	bl	8005890 <__errno>
 800902a:	2321      	movs	r3, #33	; 0x21
 800902c:	2200      	movs	r2, #0
 800902e:	6003      	str	r3, [r0, #0]
 8009030:	2300      	movs	r3, #0
 8009032:	4610      	mov	r0, r2
 8009034:	4619      	mov	r1, r3
 8009036:	f7f7 fc2d 	bl	8000894 <__aeabi_ddiv>
 800903a:	4604      	mov	r4, r0
 800903c:	460d      	mov	r5, r1
 800903e:	4620      	mov	r0, r4
 8009040:	4629      	mov	r1, r5
 8009042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009044:	0000      	movs	r0, r0
	...

08009048 <atan>:
 8009048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	4bb6      	ldr	r3, [pc, #728]	; (8009328 <atan+0x2e0>)
 800904e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009052:	429e      	cmp	r6, r3
 8009054:	4604      	mov	r4, r0
 8009056:	460d      	mov	r5, r1
 8009058:	468b      	mov	fp, r1
 800905a:	dd17      	ble.n	800908c <atan+0x44>
 800905c:	4bb3      	ldr	r3, [pc, #716]	; (800932c <atan+0x2e4>)
 800905e:	429e      	cmp	r6, r3
 8009060:	dc01      	bgt.n	8009066 <atan+0x1e>
 8009062:	d109      	bne.n	8009078 <atan+0x30>
 8009064:	b140      	cbz	r0, 8009078 <atan+0x30>
 8009066:	4622      	mov	r2, r4
 8009068:	462b      	mov	r3, r5
 800906a:	4620      	mov	r0, r4
 800906c:	4629      	mov	r1, r5
 800906e:	f7f7 f931 	bl	80002d4 <__adddf3>
 8009072:	4604      	mov	r4, r0
 8009074:	460d      	mov	r5, r1
 8009076:	e005      	b.n	8009084 <atan+0x3c>
 8009078:	f1bb 0f00 	cmp.w	fp, #0
 800907c:	4cac      	ldr	r4, [pc, #688]	; (8009330 <atan+0x2e8>)
 800907e:	f300 8121 	bgt.w	80092c4 <atan+0x27c>
 8009082:	4dac      	ldr	r5, [pc, #688]	; (8009334 <atan+0x2ec>)
 8009084:	4620      	mov	r0, r4
 8009086:	4629      	mov	r1, r5
 8009088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908c:	4baa      	ldr	r3, [pc, #680]	; (8009338 <atan+0x2f0>)
 800908e:	429e      	cmp	r6, r3
 8009090:	dc11      	bgt.n	80090b6 <atan+0x6e>
 8009092:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009096:	429e      	cmp	r6, r3
 8009098:	dc0a      	bgt.n	80090b0 <atan+0x68>
 800909a:	a38b      	add	r3, pc, #556	; (adr r3, 80092c8 <atan+0x280>)
 800909c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a0:	f7f7 f918 	bl	80002d4 <__adddf3>
 80090a4:	2200      	movs	r2, #0
 80090a6:	4ba5      	ldr	r3, [pc, #660]	; (800933c <atan+0x2f4>)
 80090a8:	f7f7 fd5a 	bl	8000b60 <__aeabi_dcmpgt>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d1e9      	bne.n	8009084 <atan+0x3c>
 80090b0:	f04f 3aff 	mov.w	sl, #4294967295
 80090b4:	e027      	b.n	8009106 <atan+0xbe>
 80090b6:	f000 f997 	bl	80093e8 <fabs>
 80090ba:	4ba1      	ldr	r3, [pc, #644]	; (8009340 <atan+0x2f8>)
 80090bc:	4604      	mov	r4, r0
 80090be:	429e      	cmp	r6, r3
 80090c0:	460d      	mov	r5, r1
 80090c2:	f300 80b8 	bgt.w	8009236 <atan+0x1ee>
 80090c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80090ca:	429e      	cmp	r6, r3
 80090cc:	f300 809c 	bgt.w	8009208 <atan+0x1c0>
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	f7f7 f8fe 	bl	80002d4 <__adddf3>
 80090d8:	2200      	movs	r2, #0
 80090da:	4b98      	ldr	r3, [pc, #608]	; (800933c <atan+0x2f4>)
 80090dc:	f7f7 f8f8 	bl	80002d0 <__aeabi_dsub>
 80090e0:	2200      	movs	r2, #0
 80090e2:	4606      	mov	r6, r0
 80090e4:	460f      	mov	r7, r1
 80090e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090ea:	4620      	mov	r0, r4
 80090ec:	4629      	mov	r1, r5
 80090ee:	f7f7 f8f1 	bl	80002d4 <__adddf3>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	4630      	mov	r0, r6
 80090f8:	4639      	mov	r1, r7
 80090fa:	f7f7 fbcb 	bl	8000894 <__aeabi_ddiv>
 80090fe:	f04f 0a00 	mov.w	sl, #0
 8009102:	4604      	mov	r4, r0
 8009104:	460d      	mov	r5, r1
 8009106:	4622      	mov	r2, r4
 8009108:	462b      	mov	r3, r5
 800910a:	4620      	mov	r0, r4
 800910c:	4629      	mov	r1, r5
 800910e:	f7f7 fa97 	bl	8000640 <__aeabi_dmul>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	4680      	mov	r8, r0
 8009118:	4689      	mov	r9, r1
 800911a:	f7f7 fa91 	bl	8000640 <__aeabi_dmul>
 800911e:	a36c      	add	r3, pc, #432	; (adr r3, 80092d0 <atan+0x288>)
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	4606      	mov	r6, r0
 8009126:	460f      	mov	r7, r1
 8009128:	f7f7 fa8a 	bl	8000640 <__aeabi_dmul>
 800912c:	a36a      	add	r3, pc, #424	; (adr r3, 80092d8 <atan+0x290>)
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	f7f7 f8cf 	bl	80002d4 <__adddf3>
 8009136:	4632      	mov	r2, r6
 8009138:	463b      	mov	r3, r7
 800913a:	f7f7 fa81 	bl	8000640 <__aeabi_dmul>
 800913e:	a368      	add	r3, pc, #416	; (adr r3, 80092e0 <atan+0x298>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 f8c6 	bl	80002d4 <__adddf3>
 8009148:	4632      	mov	r2, r6
 800914a:	463b      	mov	r3, r7
 800914c:	f7f7 fa78 	bl	8000640 <__aeabi_dmul>
 8009150:	a365      	add	r3, pc, #404	; (adr r3, 80092e8 <atan+0x2a0>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	f7f7 f8bd 	bl	80002d4 <__adddf3>
 800915a:	4632      	mov	r2, r6
 800915c:	463b      	mov	r3, r7
 800915e:	f7f7 fa6f 	bl	8000640 <__aeabi_dmul>
 8009162:	a363      	add	r3, pc, #396	; (adr r3, 80092f0 <atan+0x2a8>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f7f7 f8b4 	bl	80002d4 <__adddf3>
 800916c:	4632      	mov	r2, r6
 800916e:	463b      	mov	r3, r7
 8009170:	f7f7 fa66 	bl	8000640 <__aeabi_dmul>
 8009174:	a360      	add	r3, pc, #384	; (adr r3, 80092f8 <atan+0x2b0>)
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	f7f7 f8ab 	bl	80002d4 <__adddf3>
 800917e:	4642      	mov	r2, r8
 8009180:	464b      	mov	r3, r9
 8009182:	f7f7 fa5d 	bl	8000640 <__aeabi_dmul>
 8009186:	a35e      	add	r3, pc, #376	; (adr r3, 8009300 <atan+0x2b8>)
 8009188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918c:	4680      	mov	r8, r0
 800918e:	4689      	mov	r9, r1
 8009190:	4630      	mov	r0, r6
 8009192:	4639      	mov	r1, r7
 8009194:	f7f7 fa54 	bl	8000640 <__aeabi_dmul>
 8009198:	a35b      	add	r3, pc, #364	; (adr r3, 8009308 <atan+0x2c0>)
 800919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919e:	f7f7 f897 	bl	80002d0 <__aeabi_dsub>
 80091a2:	4632      	mov	r2, r6
 80091a4:	463b      	mov	r3, r7
 80091a6:	f7f7 fa4b 	bl	8000640 <__aeabi_dmul>
 80091aa:	a359      	add	r3, pc, #356	; (adr r3, 8009310 <atan+0x2c8>)
 80091ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b0:	f7f7 f88e 	bl	80002d0 <__aeabi_dsub>
 80091b4:	4632      	mov	r2, r6
 80091b6:	463b      	mov	r3, r7
 80091b8:	f7f7 fa42 	bl	8000640 <__aeabi_dmul>
 80091bc:	a356      	add	r3, pc, #344	; (adr r3, 8009318 <atan+0x2d0>)
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f7f7 f885 	bl	80002d0 <__aeabi_dsub>
 80091c6:	4632      	mov	r2, r6
 80091c8:	463b      	mov	r3, r7
 80091ca:	f7f7 fa39 	bl	8000640 <__aeabi_dmul>
 80091ce:	a354      	add	r3, pc, #336	; (adr r3, 8009320 <atan+0x2d8>)
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	f7f7 f87c 	bl	80002d0 <__aeabi_dsub>
 80091d8:	4632      	mov	r2, r6
 80091da:	463b      	mov	r3, r7
 80091dc:	f7f7 fa30 	bl	8000640 <__aeabi_dmul>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4640      	mov	r0, r8
 80091e6:	4649      	mov	r1, r9
 80091e8:	f7f7 f874 	bl	80002d4 <__adddf3>
 80091ec:	4622      	mov	r2, r4
 80091ee:	462b      	mov	r3, r5
 80091f0:	f7f7 fa26 	bl	8000640 <__aeabi_dmul>
 80091f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	d144      	bne.n	8009288 <atan+0x240>
 80091fe:	4620      	mov	r0, r4
 8009200:	4629      	mov	r1, r5
 8009202:	f7f7 f865 	bl	80002d0 <__aeabi_dsub>
 8009206:	e734      	b.n	8009072 <atan+0x2a>
 8009208:	2200      	movs	r2, #0
 800920a:	4b4c      	ldr	r3, [pc, #304]	; (800933c <atan+0x2f4>)
 800920c:	f7f7 f860 	bl	80002d0 <__aeabi_dsub>
 8009210:	2200      	movs	r2, #0
 8009212:	4606      	mov	r6, r0
 8009214:	460f      	mov	r7, r1
 8009216:	4620      	mov	r0, r4
 8009218:	4629      	mov	r1, r5
 800921a:	4b48      	ldr	r3, [pc, #288]	; (800933c <atan+0x2f4>)
 800921c:	f7f7 f85a 	bl	80002d4 <__adddf3>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4630      	mov	r0, r6
 8009226:	4639      	mov	r1, r7
 8009228:	f7f7 fb34 	bl	8000894 <__aeabi_ddiv>
 800922c:	f04f 0a01 	mov.w	sl, #1
 8009230:	4604      	mov	r4, r0
 8009232:	460d      	mov	r5, r1
 8009234:	e767      	b.n	8009106 <atan+0xbe>
 8009236:	4b43      	ldr	r3, [pc, #268]	; (8009344 <atan+0x2fc>)
 8009238:	429e      	cmp	r6, r3
 800923a:	da1a      	bge.n	8009272 <atan+0x22a>
 800923c:	2200      	movs	r2, #0
 800923e:	4b42      	ldr	r3, [pc, #264]	; (8009348 <atan+0x300>)
 8009240:	f7f7 f846 	bl	80002d0 <__aeabi_dsub>
 8009244:	2200      	movs	r2, #0
 8009246:	4606      	mov	r6, r0
 8009248:	460f      	mov	r7, r1
 800924a:	4620      	mov	r0, r4
 800924c:	4629      	mov	r1, r5
 800924e:	4b3e      	ldr	r3, [pc, #248]	; (8009348 <atan+0x300>)
 8009250:	f7f7 f9f6 	bl	8000640 <__aeabi_dmul>
 8009254:	2200      	movs	r2, #0
 8009256:	4b39      	ldr	r3, [pc, #228]	; (800933c <atan+0x2f4>)
 8009258:	f7f7 f83c 	bl	80002d4 <__adddf3>
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	4630      	mov	r0, r6
 8009262:	4639      	mov	r1, r7
 8009264:	f7f7 fb16 	bl	8000894 <__aeabi_ddiv>
 8009268:	f04f 0a02 	mov.w	sl, #2
 800926c:	4604      	mov	r4, r0
 800926e:	460d      	mov	r5, r1
 8009270:	e749      	b.n	8009106 <atan+0xbe>
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	2000      	movs	r0, #0
 8009278:	4934      	ldr	r1, [pc, #208]	; (800934c <atan+0x304>)
 800927a:	f7f7 fb0b 	bl	8000894 <__aeabi_ddiv>
 800927e:	f04f 0a03 	mov.w	sl, #3
 8009282:	4604      	mov	r4, r0
 8009284:	460d      	mov	r5, r1
 8009286:	e73e      	b.n	8009106 <atan+0xbe>
 8009288:	4b31      	ldr	r3, [pc, #196]	; (8009350 <atan+0x308>)
 800928a:	4e32      	ldr	r6, [pc, #200]	; (8009354 <atan+0x30c>)
 800928c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f7f7 f81c 	bl	80002d0 <__aeabi_dsub>
 8009298:	4622      	mov	r2, r4
 800929a:	462b      	mov	r3, r5
 800929c:	f7f7 f818 	bl	80002d0 <__aeabi_dsub>
 80092a0:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80092ac:	f7f7 f810 	bl	80002d0 <__aeabi_dsub>
 80092b0:	f1bb 0f00 	cmp.w	fp, #0
 80092b4:	4604      	mov	r4, r0
 80092b6:	460d      	mov	r5, r1
 80092b8:	f6bf aee4 	bge.w	8009084 <atan+0x3c>
 80092bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092c0:	461d      	mov	r5, r3
 80092c2:	e6df      	b.n	8009084 <atan+0x3c>
 80092c4:	4d24      	ldr	r5, [pc, #144]	; (8009358 <atan+0x310>)
 80092c6:	e6dd      	b.n	8009084 <atan+0x3c>
 80092c8:	8800759c 	.word	0x8800759c
 80092cc:	7e37e43c 	.word	0x7e37e43c
 80092d0:	e322da11 	.word	0xe322da11
 80092d4:	3f90ad3a 	.word	0x3f90ad3a
 80092d8:	24760deb 	.word	0x24760deb
 80092dc:	3fa97b4b 	.word	0x3fa97b4b
 80092e0:	a0d03d51 	.word	0xa0d03d51
 80092e4:	3fb10d66 	.word	0x3fb10d66
 80092e8:	c54c206e 	.word	0xc54c206e
 80092ec:	3fb745cd 	.word	0x3fb745cd
 80092f0:	920083ff 	.word	0x920083ff
 80092f4:	3fc24924 	.word	0x3fc24924
 80092f8:	5555550d 	.word	0x5555550d
 80092fc:	3fd55555 	.word	0x3fd55555
 8009300:	2c6a6c2f 	.word	0x2c6a6c2f
 8009304:	bfa2b444 	.word	0xbfa2b444
 8009308:	52defd9a 	.word	0x52defd9a
 800930c:	3fadde2d 	.word	0x3fadde2d
 8009310:	af749a6d 	.word	0xaf749a6d
 8009314:	3fb3b0f2 	.word	0x3fb3b0f2
 8009318:	fe231671 	.word	0xfe231671
 800931c:	3fbc71c6 	.word	0x3fbc71c6
 8009320:	9998ebc4 	.word	0x9998ebc4
 8009324:	3fc99999 	.word	0x3fc99999
 8009328:	440fffff 	.word	0x440fffff
 800932c:	7ff00000 	.word	0x7ff00000
 8009330:	54442d18 	.word	0x54442d18
 8009334:	bff921fb 	.word	0xbff921fb
 8009338:	3fdbffff 	.word	0x3fdbffff
 800933c:	3ff00000 	.word	0x3ff00000
 8009340:	3ff2ffff 	.word	0x3ff2ffff
 8009344:	40038000 	.word	0x40038000
 8009348:	3ff80000 	.word	0x3ff80000
 800934c:	bff00000 	.word	0xbff00000
 8009350:	0800b900 	.word	0x0800b900
 8009354:	0800b8e0 	.word	0x0800b8e0
 8009358:	3ff921fb 	.word	0x3ff921fb

0800935c <cos>:
 800935c:	b530      	push	{r4, r5, lr}
 800935e:	4a20      	ldr	r2, [pc, #128]	; (80093e0 <cos+0x84>)
 8009360:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009364:	4293      	cmp	r3, r2
 8009366:	b087      	sub	sp, #28
 8009368:	dc06      	bgt.n	8009378 <cos+0x1c>
 800936a:	2200      	movs	r2, #0
 800936c:	2300      	movs	r3, #0
 800936e:	b007      	add	sp, #28
 8009370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009374:	f000 b98c 	b.w	8009690 <__kernel_cos>
 8009378:	4a1a      	ldr	r2, [pc, #104]	; (80093e4 <cos+0x88>)
 800937a:	4293      	cmp	r3, r2
 800937c:	dd05      	ble.n	800938a <cos+0x2e>
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	f7f6 ffa5 	bl	80002d0 <__aeabi_dsub>
 8009386:	b007      	add	sp, #28
 8009388:	bd30      	pop	{r4, r5, pc}
 800938a:	aa02      	add	r2, sp, #8
 800938c:	f001 fa0c 	bl	800a7a8 <__ieee754_rem_pio2>
 8009390:	f000 0003 	and.w	r0, r0, #3
 8009394:	2801      	cmp	r0, #1
 8009396:	d009      	beq.n	80093ac <cos+0x50>
 8009398:	2802      	cmp	r0, #2
 800939a:	d011      	beq.n	80093c0 <cos+0x64>
 800939c:	b9b8      	cbnz	r0, 80093ce <cos+0x72>
 800939e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093a6:	f000 f973 	bl	8009690 <__kernel_cos>
 80093aa:	e7ec      	b.n	8009386 <cos+0x2a>
 80093ac:	9000      	str	r0, [sp, #0]
 80093ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093b6:	f000 fa2b 	bl	8009810 <__kernel_sin>
 80093ba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80093be:	e7e2      	b.n	8009386 <cos+0x2a>
 80093c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093c8:	f000 f962 	bl	8009690 <__kernel_cos>
 80093cc:	e7f5      	b.n	80093ba <cos+0x5e>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093da:	f000 fa19 	bl	8009810 <__kernel_sin>
 80093de:	e7d2      	b.n	8009386 <cos+0x2a>
 80093e0:	3fe921fb 	.word	0x3fe921fb
 80093e4:	7fefffff 	.word	0x7fefffff

080093e8 <fabs>:
 80093e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093ec:	4619      	mov	r1, r3
 80093ee:	4770      	bx	lr

080093f0 <sin>:
 80093f0:	b530      	push	{r4, r5, lr}
 80093f2:	4a20      	ldr	r2, [pc, #128]	; (8009474 <sin+0x84>)
 80093f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093f8:	4293      	cmp	r3, r2
 80093fa:	b087      	sub	sp, #28
 80093fc:	dc06      	bgt.n	800940c <sin+0x1c>
 80093fe:	2300      	movs	r3, #0
 8009400:	2200      	movs	r2, #0
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	2300      	movs	r3, #0
 8009406:	f000 fa03 	bl	8009810 <__kernel_sin>
 800940a:	e006      	b.n	800941a <sin+0x2a>
 800940c:	4a1a      	ldr	r2, [pc, #104]	; (8009478 <sin+0x88>)
 800940e:	4293      	cmp	r3, r2
 8009410:	dd05      	ble.n	800941e <sin+0x2e>
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	f7f6 ff5b 	bl	80002d0 <__aeabi_dsub>
 800941a:	b007      	add	sp, #28
 800941c:	bd30      	pop	{r4, r5, pc}
 800941e:	aa02      	add	r2, sp, #8
 8009420:	f001 f9c2 	bl	800a7a8 <__ieee754_rem_pio2>
 8009424:	f000 0003 	and.w	r0, r0, #3
 8009428:	2801      	cmp	r0, #1
 800942a:	d009      	beq.n	8009440 <sin+0x50>
 800942c:	2802      	cmp	r0, #2
 800942e:	d00e      	beq.n	800944e <sin+0x5e>
 8009430:	b9c0      	cbnz	r0, 8009464 <sin+0x74>
 8009432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009436:	2301      	movs	r3, #1
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800943e:	e7e2      	b.n	8009406 <sin+0x16>
 8009440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009448:	f000 f922 	bl	8009690 <__kernel_cos>
 800944c:	e7e5      	b.n	800941a <sin+0x2a>
 800944e:	2301      	movs	r3, #1
 8009450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800945a:	f000 f9d9 	bl	8009810 <__kernel_sin>
 800945e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009462:	e7da      	b.n	800941a <sin+0x2a>
 8009464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800946c:	f000 f910 	bl	8009690 <__kernel_cos>
 8009470:	e7f5      	b.n	800945e <sin+0x6e>
 8009472:	bf00      	nop
 8009474:	3fe921fb 	.word	0x3fe921fb
 8009478:	7fefffff 	.word	0x7fefffff

0800947c <tan>:
 800947c:	b530      	push	{r4, r5, lr}
 800947e:	4a12      	ldr	r2, [pc, #72]	; (80094c8 <tan+0x4c>)
 8009480:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009484:	4293      	cmp	r3, r2
 8009486:	b087      	sub	sp, #28
 8009488:	dc06      	bgt.n	8009498 <tan+0x1c>
 800948a:	2301      	movs	r3, #1
 800948c:	2200      	movs	r2, #0
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	2300      	movs	r3, #0
 8009492:	f000 fa75 	bl	8009980 <__kernel_tan>
 8009496:	e006      	b.n	80094a6 <tan+0x2a>
 8009498:	4a0c      	ldr	r2, [pc, #48]	; (80094cc <tan+0x50>)
 800949a:	4293      	cmp	r3, r2
 800949c:	dd05      	ble.n	80094aa <tan+0x2e>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	f7f6 ff15 	bl	80002d0 <__aeabi_dsub>
 80094a6:	b007      	add	sp, #28
 80094a8:	bd30      	pop	{r4, r5, pc}
 80094aa:	aa02      	add	r2, sp, #8
 80094ac:	f001 f97c 	bl	800a7a8 <__ieee754_rem_pio2>
 80094b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094b4:	0040      	lsls	r0, r0, #1
 80094b6:	f000 0002 	and.w	r0, r0, #2
 80094ba:	f1c0 0001 	rsb	r0, r0, #1
 80094be:	9000      	str	r0, [sp, #0]
 80094c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094c4:	e7e5      	b.n	8009492 <tan+0x16>
 80094c6:	bf00      	nop
 80094c8:	3fe921fb 	.word	0x3fe921fb
 80094cc:	7fefffff 	.word	0x7fefffff

080094d0 <finite>:
 80094d0:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80094d4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80094d8:	0fc0      	lsrs	r0, r0, #31
 80094da:	4770      	bx	lr

080094dc <__ieee754_sqrt>:
 80094dc:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8009680 <__ieee754_sqrt+0x1a4>
 80094e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	ea3c 0c01 	bics.w	ip, ip, r1
 80094e8:	460b      	mov	r3, r1
 80094ea:	4606      	mov	r6, r0
 80094ec:	460d      	mov	r5, r1
 80094ee:	460a      	mov	r2, r1
 80094f0:	4604      	mov	r4, r0
 80094f2:	d10e      	bne.n	8009512 <__ieee754_sqrt+0x36>
 80094f4:	4602      	mov	r2, r0
 80094f6:	f7f7 f8a3 	bl	8000640 <__aeabi_dmul>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	4630      	mov	r0, r6
 8009500:	4629      	mov	r1, r5
 8009502:	f7f6 fee7 	bl	80002d4 <__adddf3>
 8009506:	4606      	mov	r6, r0
 8009508:	460d      	mov	r5, r1
 800950a:	4630      	mov	r0, r6
 800950c:	4629      	mov	r1, r5
 800950e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009512:	2900      	cmp	r1, #0
 8009514:	dc0d      	bgt.n	8009532 <__ieee754_sqrt+0x56>
 8009516:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800951a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800951e:	d0f4      	beq.n	800950a <__ieee754_sqrt+0x2e>
 8009520:	b139      	cbz	r1, 8009532 <__ieee754_sqrt+0x56>
 8009522:	4602      	mov	r2, r0
 8009524:	f7f6 fed4 	bl	80002d0 <__aeabi_dsub>
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	f7f7 f9b2 	bl	8000894 <__aeabi_ddiv>
 8009530:	e7e9      	b.n	8009506 <__ieee754_sqrt+0x2a>
 8009532:	1512      	asrs	r2, r2, #20
 8009534:	f000 8089 	beq.w	800964a <__ieee754_sqrt+0x16e>
 8009538:	2500      	movs	r5, #0
 800953a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800953e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009546:	07d2      	lsls	r2, r2, #31
 8009548:	bf5c      	itt	pl
 800954a:	005b      	lslpl	r3, r3, #1
 800954c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009550:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009554:	bf58      	it	pl
 8009556:	0064      	lslpl	r4, r4, #1
 8009558:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800955c:	0062      	lsls	r2, r4, #1
 800955e:	2016      	movs	r0, #22
 8009560:	4629      	mov	r1, r5
 8009562:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8009566:	1076      	asrs	r6, r6, #1
 8009568:	190f      	adds	r7, r1, r4
 800956a:	429f      	cmp	r7, r3
 800956c:	bfde      	ittt	le
 800956e:	1bdb      	suble	r3, r3, r7
 8009570:	1939      	addle	r1, r7, r4
 8009572:	192d      	addle	r5, r5, r4
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	3801      	subs	r0, #1
 8009578:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800957c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009580:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009584:	d1f0      	bne.n	8009568 <__ieee754_sqrt+0x8c>
 8009586:	4604      	mov	r4, r0
 8009588:	2720      	movs	r7, #32
 800958a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800958e:	428b      	cmp	r3, r1
 8009590:	eb0c 0e00 	add.w	lr, ip, r0
 8009594:	dc02      	bgt.n	800959c <__ieee754_sqrt+0xc0>
 8009596:	d113      	bne.n	80095c0 <__ieee754_sqrt+0xe4>
 8009598:	4596      	cmp	lr, r2
 800959a:	d811      	bhi.n	80095c0 <__ieee754_sqrt+0xe4>
 800959c:	f1be 0f00 	cmp.w	lr, #0
 80095a0:	eb0e 000c 	add.w	r0, lr, ip
 80095a4:	da56      	bge.n	8009654 <__ieee754_sqrt+0x178>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	db54      	blt.n	8009654 <__ieee754_sqrt+0x178>
 80095aa:	f101 0801 	add.w	r8, r1, #1
 80095ae:	1a5b      	subs	r3, r3, r1
 80095b0:	4641      	mov	r1, r8
 80095b2:	4596      	cmp	lr, r2
 80095b4:	bf88      	it	hi
 80095b6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80095ba:	eba2 020e 	sub.w	r2, r2, lr
 80095be:	4464      	add	r4, ip
 80095c0:	005b      	lsls	r3, r3, #1
 80095c2:	3f01      	subs	r7, #1
 80095c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80095c8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80095cc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80095d0:	d1dd      	bne.n	800958e <__ieee754_sqrt+0xb2>
 80095d2:	4313      	orrs	r3, r2
 80095d4:	d01b      	beq.n	800960e <__ieee754_sqrt+0x132>
 80095d6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009684 <__ieee754_sqrt+0x1a8>
 80095da:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009688 <__ieee754_sqrt+0x1ac>
 80095de:	e9da 0100 	ldrd	r0, r1, [sl]
 80095e2:	e9db 2300 	ldrd	r2, r3, [fp]
 80095e6:	f7f6 fe73 	bl	80002d0 <__aeabi_dsub>
 80095ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4640      	mov	r0, r8
 80095f4:	4649      	mov	r1, r9
 80095f6:	f7f7 fa9f 	bl	8000b38 <__aeabi_dcmple>
 80095fa:	b140      	cbz	r0, 800960e <__ieee754_sqrt+0x132>
 80095fc:	e9da 0100 	ldrd	r0, r1, [sl]
 8009600:	e9db 2300 	ldrd	r2, r3, [fp]
 8009604:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009608:	d126      	bne.n	8009658 <__ieee754_sqrt+0x17c>
 800960a:	463c      	mov	r4, r7
 800960c:	3501      	adds	r5, #1
 800960e:	106b      	asrs	r3, r5, #1
 8009610:	0864      	lsrs	r4, r4, #1
 8009612:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009616:	07ea      	lsls	r2, r5, #31
 8009618:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800961c:	bf48      	it	mi
 800961e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8009622:	4620      	mov	r0, r4
 8009624:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009628:	e76d      	b.n	8009506 <__ieee754_sqrt+0x2a>
 800962a:	0ae3      	lsrs	r3, r4, #11
 800962c:	3915      	subs	r1, #21
 800962e:	0564      	lsls	r4, r4, #21
 8009630:	2b00      	cmp	r3, #0
 8009632:	d0fa      	beq.n	800962a <__ieee754_sqrt+0x14e>
 8009634:	02d8      	lsls	r0, r3, #11
 8009636:	d50a      	bpl.n	800964e <__ieee754_sqrt+0x172>
 8009638:	f1c2 0020 	rsb	r0, r2, #32
 800963c:	fa24 f000 	lsr.w	r0, r4, r0
 8009640:	1e55      	subs	r5, r2, #1
 8009642:	4094      	lsls	r4, r2
 8009644:	4303      	orrs	r3, r0
 8009646:	1b4a      	subs	r2, r1, r5
 8009648:	e776      	b.n	8009538 <__ieee754_sqrt+0x5c>
 800964a:	4611      	mov	r1, r2
 800964c:	e7f0      	b.n	8009630 <__ieee754_sqrt+0x154>
 800964e:	005b      	lsls	r3, r3, #1
 8009650:	3201      	adds	r2, #1
 8009652:	e7ef      	b.n	8009634 <__ieee754_sqrt+0x158>
 8009654:	4688      	mov	r8, r1
 8009656:	e7aa      	b.n	80095ae <__ieee754_sqrt+0xd2>
 8009658:	f7f6 fe3c 	bl	80002d4 <__adddf3>
 800965c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	4640      	mov	r0, r8
 8009666:	4649      	mov	r1, r9
 8009668:	f7f7 fa5c 	bl	8000b24 <__aeabi_dcmplt>
 800966c:	b120      	cbz	r0, 8009678 <__ieee754_sqrt+0x19c>
 800966e:	1ca1      	adds	r1, r4, #2
 8009670:	bf08      	it	eq
 8009672:	3501      	addeq	r5, #1
 8009674:	3402      	adds	r4, #2
 8009676:	e7ca      	b.n	800960e <__ieee754_sqrt+0x132>
 8009678:	3401      	adds	r4, #1
 800967a:	f024 0401 	bic.w	r4, r4, #1
 800967e:	e7c6      	b.n	800960e <__ieee754_sqrt+0x132>
 8009680:	7ff00000 	.word	0x7ff00000
 8009684:	200001d8 	.word	0x200001d8
 8009688:	200001e0 	.word	0x200001e0
 800968c:	00000000 	.word	0x00000000

08009690 <__kernel_cos>:
 8009690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009694:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009698:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800969c:	4680      	mov	r8, r0
 800969e:	460f      	mov	r7, r1
 80096a0:	e9cd 2300 	strd	r2, r3, [sp]
 80096a4:	da04      	bge.n	80096b0 <__kernel_cos+0x20>
 80096a6:	f7f7 fa7b 	bl	8000ba0 <__aeabi_d2iz>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	f000 8086 	beq.w	80097bc <__kernel_cos+0x12c>
 80096b0:	4642      	mov	r2, r8
 80096b2:	463b      	mov	r3, r7
 80096b4:	4640      	mov	r0, r8
 80096b6:	4639      	mov	r1, r7
 80096b8:	f7f6 ffc2 	bl	8000640 <__aeabi_dmul>
 80096bc:	2200      	movs	r2, #0
 80096be:	4b4e      	ldr	r3, [pc, #312]	; (80097f8 <__kernel_cos+0x168>)
 80096c0:	4604      	mov	r4, r0
 80096c2:	460d      	mov	r5, r1
 80096c4:	f7f6 ffbc 	bl	8000640 <__aeabi_dmul>
 80096c8:	a33f      	add	r3, pc, #252	; (adr r3, 80097c8 <__kernel_cos+0x138>)
 80096ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ce:	4682      	mov	sl, r0
 80096d0:	468b      	mov	fp, r1
 80096d2:	4620      	mov	r0, r4
 80096d4:	4629      	mov	r1, r5
 80096d6:	f7f6 ffb3 	bl	8000640 <__aeabi_dmul>
 80096da:	a33d      	add	r3, pc, #244	; (adr r3, 80097d0 <__kernel_cos+0x140>)
 80096dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e0:	f7f6 fdf8 	bl	80002d4 <__adddf3>
 80096e4:	4622      	mov	r2, r4
 80096e6:	462b      	mov	r3, r5
 80096e8:	f7f6 ffaa 	bl	8000640 <__aeabi_dmul>
 80096ec:	a33a      	add	r3, pc, #232	; (adr r3, 80097d8 <__kernel_cos+0x148>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f7f6 fded 	bl	80002d0 <__aeabi_dsub>
 80096f6:	4622      	mov	r2, r4
 80096f8:	462b      	mov	r3, r5
 80096fa:	f7f6 ffa1 	bl	8000640 <__aeabi_dmul>
 80096fe:	a338      	add	r3, pc, #224	; (adr r3, 80097e0 <__kernel_cos+0x150>)
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f7f6 fde6 	bl	80002d4 <__adddf3>
 8009708:	4622      	mov	r2, r4
 800970a:	462b      	mov	r3, r5
 800970c:	f7f6 ff98 	bl	8000640 <__aeabi_dmul>
 8009710:	a335      	add	r3, pc, #212	; (adr r3, 80097e8 <__kernel_cos+0x158>)
 8009712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009716:	f7f6 fddb 	bl	80002d0 <__aeabi_dsub>
 800971a:	4622      	mov	r2, r4
 800971c:	462b      	mov	r3, r5
 800971e:	f7f6 ff8f 	bl	8000640 <__aeabi_dmul>
 8009722:	a333      	add	r3, pc, #204	; (adr r3, 80097f0 <__kernel_cos+0x160>)
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f7f6 fdd4 	bl	80002d4 <__adddf3>
 800972c:	4622      	mov	r2, r4
 800972e:	462b      	mov	r3, r5
 8009730:	f7f6 ff86 	bl	8000640 <__aeabi_dmul>
 8009734:	4622      	mov	r2, r4
 8009736:	462b      	mov	r3, r5
 8009738:	f7f6 ff82 	bl	8000640 <__aeabi_dmul>
 800973c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009740:	4604      	mov	r4, r0
 8009742:	460d      	mov	r5, r1
 8009744:	4640      	mov	r0, r8
 8009746:	4639      	mov	r1, r7
 8009748:	f7f6 ff7a 	bl	8000640 <__aeabi_dmul>
 800974c:	460b      	mov	r3, r1
 800974e:	4602      	mov	r2, r0
 8009750:	4629      	mov	r1, r5
 8009752:	4620      	mov	r0, r4
 8009754:	f7f6 fdbc 	bl	80002d0 <__aeabi_dsub>
 8009758:	4b28      	ldr	r3, [pc, #160]	; (80097fc <__kernel_cos+0x16c>)
 800975a:	4680      	mov	r8, r0
 800975c:	429e      	cmp	r6, r3
 800975e:	4689      	mov	r9, r1
 8009760:	dc0e      	bgt.n	8009780 <__kernel_cos+0xf0>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	4650      	mov	r0, sl
 8009768:	4659      	mov	r1, fp
 800976a:	f7f6 fdb1 	bl	80002d0 <__aeabi_dsub>
 800976e:	4602      	mov	r2, r0
 8009770:	2000      	movs	r0, #0
 8009772:	460b      	mov	r3, r1
 8009774:	4922      	ldr	r1, [pc, #136]	; (8009800 <__kernel_cos+0x170>)
 8009776:	f7f6 fdab 	bl	80002d0 <__aeabi_dsub>
 800977a:	b003      	add	sp, #12
 800977c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009780:	2400      	movs	r4, #0
 8009782:	4b20      	ldr	r3, [pc, #128]	; (8009804 <__kernel_cos+0x174>)
 8009784:	4622      	mov	r2, r4
 8009786:	429e      	cmp	r6, r3
 8009788:	bfcc      	ite	gt
 800978a:	4d1f      	ldrgt	r5, [pc, #124]	; (8009808 <__kernel_cos+0x178>)
 800978c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009790:	462b      	mov	r3, r5
 8009792:	2000      	movs	r0, #0
 8009794:	491a      	ldr	r1, [pc, #104]	; (8009800 <__kernel_cos+0x170>)
 8009796:	f7f6 fd9b 	bl	80002d0 <__aeabi_dsub>
 800979a:	4622      	mov	r2, r4
 800979c:	4606      	mov	r6, r0
 800979e:	460f      	mov	r7, r1
 80097a0:	462b      	mov	r3, r5
 80097a2:	4650      	mov	r0, sl
 80097a4:	4659      	mov	r1, fp
 80097a6:	f7f6 fd93 	bl	80002d0 <__aeabi_dsub>
 80097aa:	4642      	mov	r2, r8
 80097ac:	464b      	mov	r3, r9
 80097ae:	f7f6 fd8f 	bl	80002d0 <__aeabi_dsub>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4630      	mov	r0, r6
 80097b8:	4639      	mov	r1, r7
 80097ba:	e7dc      	b.n	8009776 <__kernel_cos+0xe6>
 80097bc:	2000      	movs	r0, #0
 80097be:	4910      	ldr	r1, [pc, #64]	; (8009800 <__kernel_cos+0x170>)
 80097c0:	e7db      	b.n	800977a <__kernel_cos+0xea>
 80097c2:	bf00      	nop
 80097c4:	f3af 8000 	nop.w
 80097c8:	be8838d4 	.word	0xbe8838d4
 80097cc:	bda8fae9 	.word	0xbda8fae9
 80097d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80097d4:	3e21ee9e 	.word	0x3e21ee9e
 80097d8:	809c52ad 	.word	0x809c52ad
 80097dc:	3e927e4f 	.word	0x3e927e4f
 80097e0:	19cb1590 	.word	0x19cb1590
 80097e4:	3efa01a0 	.word	0x3efa01a0
 80097e8:	16c15177 	.word	0x16c15177
 80097ec:	3f56c16c 	.word	0x3f56c16c
 80097f0:	5555554c 	.word	0x5555554c
 80097f4:	3fa55555 	.word	0x3fa55555
 80097f8:	3fe00000 	.word	0x3fe00000
 80097fc:	3fd33332 	.word	0x3fd33332
 8009800:	3ff00000 	.word	0x3ff00000
 8009804:	3fe90000 	.word	0x3fe90000
 8009808:	3fd20000 	.word	0x3fd20000
 800980c:	00000000 	.word	0x00000000

08009810 <__kernel_sin>:
 8009810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009814:	b086      	sub	sp, #24
 8009816:	e9cd 2300 	strd	r2, r3, [sp]
 800981a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800981e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009822:	4682      	mov	sl, r0
 8009824:	460c      	mov	r4, r1
 8009826:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009828:	da03      	bge.n	8009832 <__kernel_sin+0x22>
 800982a:	f7f7 f9b9 	bl	8000ba0 <__aeabi_d2iz>
 800982e:	2800      	cmp	r0, #0
 8009830:	d050      	beq.n	80098d4 <__kernel_sin+0xc4>
 8009832:	4652      	mov	r2, sl
 8009834:	4623      	mov	r3, r4
 8009836:	4650      	mov	r0, sl
 8009838:	4621      	mov	r1, r4
 800983a:	f7f6 ff01 	bl	8000640 <__aeabi_dmul>
 800983e:	4606      	mov	r6, r0
 8009840:	460f      	mov	r7, r1
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4650      	mov	r0, sl
 8009848:	4621      	mov	r1, r4
 800984a:	f7f6 fef9 	bl	8000640 <__aeabi_dmul>
 800984e:	a33e      	add	r3, pc, #248	; (adr r3, 8009948 <__kernel_sin+0x138>)
 8009850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009854:	4680      	mov	r8, r0
 8009856:	4689      	mov	r9, r1
 8009858:	4630      	mov	r0, r6
 800985a:	4639      	mov	r1, r7
 800985c:	f7f6 fef0 	bl	8000640 <__aeabi_dmul>
 8009860:	a33b      	add	r3, pc, #236	; (adr r3, 8009950 <__kernel_sin+0x140>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	f7f6 fd33 	bl	80002d0 <__aeabi_dsub>
 800986a:	4632      	mov	r2, r6
 800986c:	463b      	mov	r3, r7
 800986e:	f7f6 fee7 	bl	8000640 <__aeabi_dmul>
 8009872:	a339      	add	r3, pc, #228	; (adr r3, 8009958 <__kernel_sin+0x148>)
 8009874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009878:	f7f6 fd2c 	bl	80002d4 <__adddf3>
 800987c:	4632      	mov	r2, r6
 800987e:	463b      	mov	r3, r7
 8009880:	f7f6 fede 	bl	8000640 <__aeabi_dmul>
 8009884:	a336      	add	r3, pc, #216	; (adr r3, 8009960 <__kernel_sin+0x150>)
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	f7f6 fd21 	bl	80002d0 <__aeabi_dsub>
 800988e:	4632      	mov	r2, r6
 8009890:	463b      	mov	r3, r7
 8009892:	f7f6 fed5 	bl	8000640 <__aeabi_dmul>
 8009896:	a334      	add	r3, pc, #208	; (adr r3, 8009968 <__kernel_sin+0x158>)
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	f7f6 fd1a 	bl	80002d4 <__adddf3>
 80098a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098a4:	b9dd      	cbnz	r5, 80098de <__kernel_sin+0xce>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4630      	mov	r0, r6
 80098ac:	4639      	mov	r1, r7
 80098ae:	f7f6 fec7 	bl	8000640 <__aeabi_dmul>
 80098b2:	a32f      	add	r3, pc, #188	; (adr r3, 8009970 <__kernel_sin+0x160>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 fd0a 	bl	80002d0 <__aeabi_dsub>
 80098bc:	4642      	mov	r2, r8
 80098be:	464b      	mov	r3, r9
 80098c0:	f7f6 febe 	bl	8000640 <__aeabi_dmul>
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4650      	mov	r0, sl
 80098ca:	4621      	mov	r1, r4
 80098cc:	f7f6 fd02 	bl	80002d4 <__adddf3>
 80098d0:	4682      	mov	sl, r0
 80098d2:	460c      	mov	r4, r1
 80098d4:	4650      	mov	r0, sl
 80098d6:	4621      	mov	r1, r4
 80098d8:	b006      	add	sp, #24
 80098da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098de:	2200      	movs	r2, #0
 80098e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098e4:	4b24      	ldr	r3, [pc, #144]	; (8009978 <__kernel_sin+0x168>)
 80098e6:	f7f6 feab 	bl	8000640 <__aeabi_dmul>
 80098ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098f2:	4640      	mov	r0, r8
 80098f4:	4649      	mov	r1, r9
 80098f6:	f7f6 fea3 	bl	8000640 <__aeabi_dmul>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009902:	f7f6 fce5 	bl	80002d0 <__aeabi_dsub>
 8009906:	4632      	mov	r2, r6
 8009908:	463b      	mov	r3, r7
 800990a:	f7f6 fe99 	bl	8000640 <__aeabi_dmul>
 800990e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009912:	f7f6 fcdd 	bl	80002d0 <__aeabi_dsub>
 8009916:	a316      	add	r3, pc, #88	; (adr r3, 8009970 <__kernel_sin+0x160>)
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	4606      	mov	r6, r0
 800991e:	460f      	mov	r7, r1
 8009920:	4640      	mov	r0, r8
 8009922:	4649      	mov	r1, r9
 8009924:	f7f6 fe8c 	bl	8000640 <__aeabi_dmul>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	4630      	mov	r0, r6
 800992e:	4639      	mov	r1, r7
 8009930:	f7f6 fcd0 	bl	80002d4 <__adddf3>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4650      	mov	r0, sl
 800993a:	4621      	mov	r1, r4
 800993c:	f7f6 fcc8 	bl	80002d0 <__aeabi_dsub>
 8009940:	e7c6      	b.n	80098d0 <__kernel_sin+0xc0>
 8009942:	bf00      	nop
 8009944:	f3af 8000 	nop.w
 8009948:	5acfd57c 	.word	0x5acfd57c
 800994c:	3de5d93a 	.word	0x3de5d93a
 8009950:	8a2b9ceb 	.word	0x8a2b9ceb
 8009954:	3e5ae5e6 	.word	0x3e5ae5e6
 8009958:	57b1fe7d 	.word	0x57b1fe7d
 800995c:	3ec71de3 	.word	0x3ec71de3
 8009960:	19c161d5 	.word	0x19c161d5
 8009964:	3f2a01a0 	.word	0x3f2a01a0
 8009968:	1110f8a6 	.word	0x1110f8a6
 800996c:	3f811111 	.word	0x3f811111
 8009970:	55555549 	.word	0x55555549
 8009974:	3fc55555 	.word	0x3fc55555
 8009978:	3fe00000 	.word	0x3fe00000
 800997c:	00000000 	.word	0x00000000

08009980 <__kernel_tan>:
 8009980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	b08b      	sub	sp, #44	; 0x2c
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	4bd9      	ldr	r3, [pc, #868]	; (8009cf0 <__kernel_tan+0x370>)
 800998a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800998e:	429e      	cmp	r6, r3
 8009990:	4604      	mov	r4, r0
 8009992:	460d      	mov	r5, r1
 8009994:	4682      	mov	sl, r0
 8009996:	468b      	mov	fp, r1
 8009998:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800999a:	9202      	str	r2, [sp, #8]
 800999c:	9107      	str	r1, [sp, #28]
 800999e:	dc58      	bgt.n	8009a52 <__kernel_tan+0xd2>
 80099a0:	f7f7 f8fe 	bl	8000ba0 <__aeabi_d2iz>
 80099a4:	4605      	mov	r5, r0
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d178      	bne.n	8009a9c <__kernel_tan+0x11c>
 80099aa:	1c7b      	adds	r3, r7, #1
 80099ac:	4323      	orrs	r3, r4
 80099ae:	4333      	orrs	r3, r6
 80099b0:	d110      	bne.n	80099d4 <__kernel_tan+0x54>
 80099b2:	4620      	mov	r0, r4
 80099b4:	4659      	mov	r1, fp
 80099b6:	f7ff fd17 	bl	80093e8 <fabs>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	2000      	movs	r0, #0
 80099c0:	49cc      	ldr	r1, [pc, #816]	; (8009cf4 <__kernel_tan+0x374>)
 80099c2:	f7f6 ff67 	bl	8000894 <__aeabi_ddiv>
 80099c6:	4682      	mov	sl, r0
 80099c8:	468b      	mov	fp, r1
 80099ca:	4650      	mov	r0, sl
 80099cc:	4659      	mov	r1, fp
 80099ce:	b00b      	add	sp, #44	; 0x2c
 80099d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d4:	2f01      	cmp	r7, #1
 80099d6:	d0f8      	beq.n	80099ca <__kernel_tan+0x4a>
 80099d8:	4620      	mov	r0, r4
 80099da:	4659      	mov	r1, fp
 80099dc:	9a02      	ldr	r2, [sp, #8]
 80099de:	9b00      	ldr	r3, [sp, #0]
 80099e0:	f7f6 fc78 	bl	80002d4 <__adddf3>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	460f      	mov	r7, r1
 80099ea:	2000      	movs	r0, #0
 80099ec:	49c2      	ldr	r1, [pc, #776]	; (8009cf8 <__kernel_tan+0x378>)
 80099ee:	f7f6 ff51 	bl	8000894 <__aeabi_ddiv>
 80099f2:	462e      	mov	r6, r5
 80099f4:	4689      	mov	r9, r1
 80099f6:	4652      	mov	r2, sl
 80099f8:	465b      	mov	r3, fp
 80099fa:	4680      	mov	r8, r0
 80099fc:	462c      	mov	r4, r5
 80099fe:	4630      	mov	r0, r6
 8009a00:	460d      	mov	r5, r1
 8009a02:	4639      	mov	r1, r7
 8009a04:	f7f6 fc64 	bl	80002d0 <__aeabi_dsub>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	9802      	ldr	r0, [sp, #8]
 8009a0e:	9900      	ldr	r1, [sp, #0]
 8009a10:	f7f6 fc5e 	bl	80002d0 <__aeabi_dsub>
 8009a14:	4632      	mov	r2, r6
 8009a16:	464b      	mov	r3, r9
 8009a18:	f7f6 fe12 	bl	8000640 <__aeabi_dmul>
 8009a1c:	4632      	mov	r2, r6
 8009a1e:	4682      	mov	sl, r0
 8009a20:	468b      	mov	fp, r1
 8009a22:	464b      	mov	r3, r9
 8009a24:	4630      	mov	r0, r6
 8009a26:	4639      	mov	r1, r7
 8009a28:	f7f6 fe0a 	bl	8000640 <__aeabi_dmul>
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	4bb1      	ldr	r3, [pc, #708]	; (8009cf4 <__kernel_tan+0x374>)
 8009a30:	f7f6 fc50 	bl	80002d4 <__adddf3>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4650      	mov	r0, sl
 8009a3a:	4659      	mov	r1, fp
 8009a3c:	f7f6 fc4a 	bl	80002d4 <__adddf3>
 8009a40:	4642      	mov	r2, r8
 8009a42:	464b      	mov	r3, r9
 8009a44:	f7f6 fdfc 	bl	8000640 <__aeabi_dmul>
 8009a48:	4622      	mov	r2, r4
 8009a4a:	462b      	mov	r3, r5
 8009a4c:	f7f6 fc42 	bl	80002d4 <__adddf3>
 8009a50:	e7b9      	b.n	80099c6 <__kernel_tan+0x46>
 8009a52:	4baa      	ldr	r3, [pc, #680]	; (8009cfc <__kernel_tan+0x37c>)
 8009a54:	429e      	cmp	r6, r3
 8009a56:	dd21      	ble.n	8009a9c <__kernel_tan+0x11c>
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	da06      	bge.n	8009a6a <__kernel_tan+0xea>
 8009a5c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009a60:	469b      	mov	fp, r3
 8009a62:	9b00      	ldr	r3, [sp, #0]
 8009a64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	4652      	mov	r2, sl
 8009a6c:	a182      	add	r1, pc, #520	; (adr r1, 8009c78 <__kernel_tan+0x2f8>)
 8009a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a72:	465b      	mov	r3, fp
 8009a74:	f7f6 fc2c 	bl	80002d0 <__aeabi_dsub>
 8009a78:	4604      	mov	r4, r0
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	a180      	add	r1, pc, #512	; (adr r1, 8009c80 <__kernel_tan+0x300>)
 8009a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a82:	9a02      	ldr	r2, [sp, #8]
 8009a84:	9b00      	ldr	r3, [sp, #0]
 8009a86:	f7f6 fc23 	bl	80002d0 <__aeabi_dsub>
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	f7f6 fc21 	bl	80002d4 <__adddf3>
 8009a92:	2300      	movs	r3, #0
 8009a94:	4682      	mov	sl, r0
 8009a96:	468b      	mov	fp, r1
 8009a98:	9302      	str	r3, [sp, #8]
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	4652      	mov	r2, sl
 8009a9e:	465b      	mov	r3, fp
 8009aa0:	4650      	mov	r0, sl
 8009aa2:	4659      	mov	r1, fp
 8009aa4:	f7f6 fdcc 	bl	8000640 <__aeabi_dmul>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4680      	mov	r8, r0
 8009aae:	4689      	mov	r9, r1
 8009ab0:	f7f6 fdc6 	bl	8000640 <__aeabi_dmul>
 8009ab4:	4642      	mov	r2, r8
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	460d      	mov	r5, r1
 8009aba:	464b      	mov	r3, r9
 8009abc:	4650      	mov	r0, sl
 8009abe:	4659      	mov	r1, fp
 8009ac0:	f7f6 fdbe 	bl	8000640 <__aeabi_dmul>
 8009ac4:	a370      	add	r3, pc, #448	; (adr r3, 8009c88 <__kernel_tan+0x308>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ace:	4620      	mov	r0, r4
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	f7f6 fdb5 	bl	8000640 <__aeabi_dmul>
 8009ad6:	a36e      	add	r3, pc, #440	; (adr r3, 8009c90 <__kernel_tan+0x310>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f7f6 fbfa 	bl	80002d4 <__adddf3>
 8009ae0:	4622      	mov	r2, r4
 8009ae2:	462b      	mov	r3, r5
 8009ae4:	f7f6 fdac 	bl	8000640 <__aeabi_dmul>
 8009ae8:	a36b      	add	r3, pc, #428	; (adr r3, 8009c98 <__kernel_tan+0x318>)
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	f7f6 fbf1 	bl	80002d4 <__adddf3>
 8009af2:	4622      	mov	r2, r4
 8009af4:	462b      	mov	r3, r5
 8009af6:	f7f6 fda3 	bl	8000640 <__aeabi_dmul>
 8009afa:	a369      	add	r3, pc, #420	; (adr r3, 8009ca0 <__kernel_tan+0x320>)
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	f7f6 fbe8 	bl	80002d4 <__adddf3>
 8009b04:	4622      	mov	r2, r4
 8009b06:	462b      	mov	r3, r5
 8009b08:	f7f6 fd9a 	bl	8000640 <__aeabi_dmul>
 8009b0c:	a366      	add	r3, pc, #408	; (adr r3, 8009ca8 <__kernel_tan+0x328>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7f6 fbdf 	bl	80002d4 <__adddf3>
 8009b16:	4622      	mov	r2, r4
 8009b18:	462b      	mov	r3, r5
 8009b1a:	f7f6 fd91 	bl	8000640 <__aeabi_dmul>
 8009b1e:	a364      	add	r3, pc, #400	; (adr r3, 8009cb0 <__kernel_tan+0x330>)
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f7f6 fbd6 	bl	80002d4 <__adddf3>
 8009b28:	4642      	mov	r2, r8
 8009b2a:	464b      	mov	r3, r9
 8009b2c:	f7f6 fd88 	bl	8000640 <__aeabi_dmul>
 8009b30:	a361      	add	r3, pc, #388	; (adr r3, 8009cb8 <__kernel_tan+0x338>)
 8009b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	f7f6 fd7f 	bl	8000640 <__aeabi_dmul>
 8009b42:	a35f      	add	r3, pc, #380	; (adr r3, 8009cc0 <__kernel_tan+0x340>)
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f7f6 fbc4 	bl	80002d4 <__adddf3>
 8009b4c:	4622      	mov	r2, r4
 8009b4e:	462b      	mov	r3, r5
 8009b50:	f7f6 fd76 	bl	8000640 <__aeabi_dmul>
 8009b54:	a35c      	add	r3, pc, #368	; (adr r3, 8009cc8 <__kernel_tan+0x348>)
 8009b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5a:	f7f6 fbbb 	bl	80002d4 <__adddf3>
 8009b5e:	4622      	mov	r2, r4
 8009b60:	462b      	mov	r3, r5
 8009b62:	f7f6 fd6d 	bl	8000640 <__aeabi_dmul>
 8009b66:	a35a      	add	r3, pc, #360	; (adr r3, 8009cd0 <__kernel_tan+0x350>)
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	f7f6 fbb2 	bl	80002d4 <__adddf3>
 8009b70:	4622      	mov	r2, r4
 8009b72:	462b      	mov	r3, r5
 8009b74:	f7f6 fd64 	bl	8000640 <__aeabi_dmul>
 8009b78:	a357      	add	r3, pc, #348	; (adr r3, 8009cd8 <__kernel_tan+0x358>)
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	f7f6 fba9 	bl	80002d4 <__adddf3>
 8009b82:	4622      	mov	r2, r4
 8009b84:	462b      	mov	r3, r5
 8009b86:	f7f6 fd5b 	bl	8000640 <__aeabi_dmul>
 8009b8a:	a355      	add	r3, pc, #340	; (adr r3, 8009ce0 <__kernel_tan+0x360>)
 8009b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b90:	f7f6 fba0 	bl	80002d4 <__adddf3>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b9c:	f7f6 fb9a 	bl	80002d4 <__adddf3>
 8009ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ba4:	f7f6 fd4c 	bl	8000640 <__aeabi_dmul>
 8009ba8:	9a02      	ldr	r2, [sp, #8]
 8009baa:	9b00      	ldr	r3, [sp, #0]
 8009bac:	f7f6 fb92 	bl	80002d4 <__adddf3>
 8009bb0:	4642      	mov	r2, r8
 8009bb2:	464b      	mov	r3, r9
 8009bb4:	f7f6 fd44 	bl	8000640 <__aeabi_dmul>
 8009bb8:	9a02      	ldr	r2, [sp, #8]
 8009bba:	9b00      	ldr	r3, [sp, #0]
 8009bbc:	f7f6 fb8a 	bl	80002d4 <__adddf3>
 8009bc0:	a349      	add	r3, pc, #292	; (adr r3, 8009ce8 <__kernel_tan+0x368>)
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	460d      	mov	r5, r1
 8009bca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bce:	f7f6 fd37 	bl	8000640 <__aeabi_dmul>
 8009bd2:	4622      	mov	r2, r4
 8009bd4:	462b      	mov	r3, r5
 8009bd6:	f7f6 fb7d 	bl	80002d4 <__adddf3>
 8009bda:	460b      	mov	r3, r1
 8009bdc:	e9cd 0100 	strd	r0, r1, [sp]
 8009be0:	4602      	mov	r2, r0
 8009be2:	4659      	mov	r1, fp
 8009be4:	4650      	mov	r0, sl
 8009be6:	f7f6 fb75 	bl	80002d4 <__adddf3>
 8009bea:	4b44      	ldr	r3, [pc, #272]	; (8009cfc <__kernel_tan+0x37c>)
 8009bec:	4604      	mov	r4, r0
 8009bee:	429e      	cmp	r6, r3
 8009bf0:	460d      	mov	r5, r1
 8009bf2:	f340 8085 	ble.w	8009d00 <__kernel_tan+0x380>
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	f7f6 fcb8 	bl	800056c <__aeabi_i2d>
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	4680      	mov	r8, r0
 8009c00:	4689      	mov	r9, r1
 8009c02:	462b      	mov	r3, r5
 8009c04:	4620      	mov	r0, r4
 8009c06:	4629      	mov	r1, r5
 8009c08:	f7f6 fd1a 	bl	8000640 <__aeabi_dmul>
 8009c0c:	4642      	mov	r2, r8
 8009c0e:	4606      	mov	r6, r0
 8009c10:	460f      	mov	r7, r1
 8009c12:	464b      	mov	r3, r9
 8009c14:	4620      	mov	r0, r4
 8009c16:	4629      	mov	r1, r5
 8009c18:	f7f6 fb5c 	bl	80002d4 <__adddf3>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4630      	mov	r0, r6
 8009c22:	4639      	mov	r1, r7
 8009c24:	f7f6 fe36 	bl	8000894 <__aeabi_ddiv>
 8009c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c2c:	f7f6 fb50 	bl	80002d0 <__aeabi_dsub>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	4650      	mov	r0, sl
 8009c36:	4659      	mov	r1, fp
 8009c38:	f7f6 fb4a 	bl	80002d0 <__aeabi_dsub>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	f7f6 fb48 	bl	80002d4 <__adddf3>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4640      	mov	r0, r8
 8009c4a:	4649      	mov	r1, r9
 8009c4c:	f7f6 fb40 	bl	80002d0 <__aeabi_dsub>
 8009c50:	9b07      	ldr	r3, [sp, #28]
 8009c52:	4604      	mov	r4, r0
 8009c54:	179b      	asrs	r3, r3, #30
 8009c56:	f003 0302 	and.w	r3, r3, #2
 8009c5a:	f1c3 0001 	rsb	r0, r3, #1
 8009c5e:	460d      	mov	r5, r1
 8009c60:	f7f6 fc84 	bl	800056c <__aeabi_i2d>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4620      	mov	r0, r4
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	f7f6 fce8 	bl	8000640 <__aeabi_dmul>
 8009c70:	e6a9      	b.n	80099c6 <__kernel_tan+0x46>
 8009c72:	bf00      	nop
 8009c74:	f3af 8000 	nop.w
 8009c78:	54442d18 	.word	0x54442d18
 8009c7c:	3fe921fb 	.word	0x3fe921fb
 8009c80:	33145c07 	.word	0x33145c07
 8009c84:	3c81a626 	.word	0x3c81a626
 8009c88:	74bf7ad4 	.word	0x74bf7ad4
 8009c8c:	3efb2a70 	.word	0x3efb2a70
 8009c90:	32f0a7e9 	.word	0x32f0a7e9
 8009c94:	3f12b80f 	.word	0x3f12b80f
 8009c98:	1a8d1068 	.word	0x1a8d1068
 8009c9c:	3f3026f7 	.word	0x3f3026f7
 8009ca0:	fee08315 	.word	0xfee08315
 8009ca4:	3f57dbc8 	.word	0x3f57dbc8
 8009ca8:	e96e8493 	.word	0xe96e8493
 8009cac:	3f8226e3 	.word	0x3f8226e3
 8009cb0:	1bb341fe 	.word	0x1bb341fe
 8009cb4:	3faba1ba 	.word	0x3faba1ba
 8009cb8:	db605373 	.word	0xdb605373
 8009cbc:	bef375cb 	.word	0xbef375cb
 8009cc0:	a03792a6 	.word	0xa03792a6
 8009cc4:	3f147e88 	.word	0x3f147e88
 8009cc8:	f2f26501 	.word	0xf2f26501
 8009ccc:	3f4344d8 	.word	0x3f4344d8
 8009cd0:	c9560328 	.word	0xc9560328
 8009cd4:	3f6d6d22 	.word	0x3f6d6d22
 8009cd8:	8406d637 	.word	0x8406d637
 8009cdc:	3f9664f4 	.word	0x3f9664f4
 8009ce0:	1110fe7a 	.word	0x1110fe7a
 8009ce4:	3fc11111 	.word	0x3fc11111
 8009ce8:	55555563 	.word	0x55555563
 8009cec:	3fd55555 	.word	0x3fd55555
 8009cf0:	3e2fffff 	.word	0x3e2fffff
 8009cf4:	3ff00000 	.word	0x3ff00000
 8009cf8:	bff00000 	.word	0xbff00000
 8009cfc:	3fe59427 	.word	0x3fe59427
 8009d00:	2f01      	cmp	r7, #1
 8009d02:	d031      	beq.n	8009d68 <__kernel_tan+0x3e8>
 8009d04:	460f      	mov	r7, r1
 8009d06:	4602      	mov	r2, r0
 8009d08:	460b      	mov	r3, r1
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	4918      	ldr	r1, [pc, #96]	; (8009d70 <__kernel_tan+0x3f0>)
 8009d0e:	f7f6 fdc1 	bl	8000894 <__aeabi_ddiv>
 8009d12:	2600      	movs	r6, #0
 8009d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d1c:	4652      	mov	r2, sl
 8009d1e:	465b      	mov	r3, fp
 8009d20:	4630      	mov	r0, r6
 8009d22:	4639      	mov	r1, r7
 8009d24:	f7f6 fad4 	bl	80002d0 <__aeabi_dsub>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d30:	f7f6 face 	bl	80002d0 <__aeabi_dsub>
 8009d34:	4632      	mov	r2, r6
 8009d36:	462b      	mov	r3, r5
 8009d38:	f7f6 fc82 	bl	8000640 <__aeabi_dmul>
 8009d3c:	4632      	mov	r2, r6
 8009d3e:	4682      	mov	sl, r0
 8009d40:	468b      	mov	fp, r1
 8009d42:	462b      	mov	r3, r5
 8009d44:	4630      	mov	r0, r6
 8009d46:	4639      	mov	r1, r7
 8009d48:	f7f6 fc7a 	bl	8000640 <__aeabi_dmul>
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <__kernel_tan+0x3f4>)
 8009d50:	f7f6 fac0 	bl	80002d4 <__adddf3>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4650      	mov	r0, sl
 8009d5a:	4659      	mov	r1, fp
 8009d5c:	f7f6 faba 	bl	80002d4 <__adddf3>
 8009d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d64:	4634      	mov	r4, r6
 8009d66:	e66d      	b.n	8009a44 <__kernel_tan+0xc4>
 8009d68:	4682      	mov	sl, r0
 8009d6a:	468b      	mov	fp, r1
 8009d6c:	e62d      	b.n	80099ca <__kernel_tan+0x4a>
 8009d6e:	bf00      	nop
 8009d70:	bff00000 	.word	0xbff00000
 8009d74:	3ff00000 	.word	0x3ff00000

08009d78 <__ieee754_pow>:
 8009d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	b093      	sub	sp, #76	; 0x4c
 8009d7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d82:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009d86:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009d8a:	4689      	mov	r9, r1
 8009d8c:	ea56 0102 	orrs.w	r1, r6, r2
 8009d90:	4680      	mov	r8, r0
 8009d92:	d111      	bne.n	8009db8 <__ieee754_pow+0x40>
 8009d94:	1803      	adds	r3, r0, r0
 8009d96:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009d9a:	4152      	adcs	r2, r2
 8009d9c:	4299      	cmp	r1, r3
 8009d9e:	4b82      	ldr	r3, [pc, #520]	; (8009fa8 <__ieee754_pow+0x230>)
 8009da0:	4193      	sbcs	r3, r2
 8009da2:	f080 84ba 	bcs.w	800a71a <__ieee754_pow+0x9a2>
 8009da6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009daa:	4640      	mov	r0, r8
 8009dac:	4649      	mov	r1, r9
 8009dae:	f7f6 fa91 	bl	80002d4 <__adddf3>
 8009db2:	4683      	mov	fp, r0
 8009db4:	468c      	mov	ip, r1
 8009db6:	e06f      	b.n	8009e98 <__ieee754_pow+0x120>
 8009db8:	4b7c      	ldr	r3, [pc, #496]	; (8009fac <__ieee754_pow+0x234>)
 8009dba:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009dbe:	429c      	cmp	r4, r3
 8009dc0:	464d      	mov	r5, r9
 8009dc2:	4682      	mov	sl, r0
 8009dc4:	dc06      	bgt.n	8009dd4 <__ieee754_pow+0x5c>
 8009dc6:	d101      	bne.n	8009dcc <__ieee754_pow+0x54>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d1ec      	bne.n	8009da6 <__ieee754_pow+0x2e>
 8009dcc:	429e      	cmp	r6, r3
 8009dce:	dc01      	bgt.n	8009dd4 <__ieee754_pow+0x5c>
 8009dd0:	d10f      	bne.n	8009df2 <__ieee754_pow+0x7a>
 8009dd2:	b172      	cbz	r2, 8009df2 <__ieee754_pow+0x7a>
 8009dd4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009dd8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009ddc:	ea55 050a 	orrs.w	r5, r5, sl
 8009de0:	d1e1      	bne.n	8009da6 <__ieee754_pow+0x2e>
 8009de2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009de6:	18db      	adds	r3, r3, r3
 8009de8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009dec:	4152      	adcs	r2, r2
 8009dee:	429d      	cmp	r5, r3
 8009df0:	e7d5      	b.n	8009d9e <__ieee754_pow+0x26>
 8009df2:	2d00      	cmp	r5, #0
 8009df4:	da39      	bge.n	8009e6a <__ieee754_pow+0xf2>
 8009df6:	4b6e      	ldr	r3, [pc, #440]	; (8009fb0 <__ieee754_pow+0x238>)
 8009df8:	429e      	cmp	r6, r3
 8009dfa:	dc52      	bgt.n	8009ea2 <__ieee754_pow+0x12a>
 8009dfc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009e00:	429e      	cmp	r6, r3
 8009e02:	f340 849d 	ble.w	800a740 <__ieee754_pow+0x9c8>
 8009e06:	1533      	asrs	r3, r6, #20
 8009e08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e0c:	2b14      	cmp	r3, #20
 8009e0e:	dd0f      	ble.n	8009e30 <__ieee754_pow+0xb8>
 8009e10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009e14:	fa22 f103 	lsr.w	r1, r2, r3
 8009e18:	fa01 f303 	lsl.w	r3, r1, r3
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	f040 848f 	bne.w	800a740 <__ieee754_pow+0x9c8>
 8009e22:	f001 0101 	and.w	r1, r1, #1
 8009e26:	f1c1 0302 	rsb	r3, r1, #2
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	b182      	cbz	r2, 8009e50 <__ieee754_pow+0xd8>
 8009e2e:	e05d      	b.n	8009eec <__ieee754_pow+0x174>
 8009e30:	2a00      	cmp	r2, #0
 8009e32:	d159      	bne.n	8009ee8 <__ieee754_pow+0x170>
 8009e34:	f1c3 0314 	rsb	r3, r3, #20
 8009e38:	fa46 f103 	asr.w	r1, r6, r3
 8009e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e40:	42b3      	cmp	r3, r6
 8009e42:	f040 847a 	bne.w	800a73a <__ieee754_pow+0x9c2>
 8009e46:	f001 0101 	and.w	r1, r1, #1
 8009e4a:	f1c1 0302 	rsb	r3, r1, #2
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	4b58      	ldr	r3, [pc, #352]	; (8009fb4 <__ieee754_pow+0x23c>)
 8009e52:	429e      	cmp	r6, r3
 8009e54:	d132      	bne.n	8009ebc <__ieee754_pow+0x144>
 8009e56:	2f00      	cmp	r7, #0
 8009e58:	f280 846b 	bge.w	800a732 <__ieee754_pow+0x9ba>
 8009e5c:	4642      	mov	r2, r8
 8009e5e:	464b      	mov	r3, r9
 8009e60:	2000      	movs	r0, #0
 8009e62:	4954      	ldr	r1, [pc, #336]	; (8009fb4 <__ieee754_pow+0x23c>)
 8009e64:	f7f6 fd16 	bl	8000894 <__aeabi_ddiv>
 8009e68:	e7a3      	b.n	8009db2 <__ieee754_pow+0x3a>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	2a00      	cmp	r2, #0
 8009e70:	d13c      	bne.n	8009eec <__ieee754_pow+0x174>
 8009e72:	4b4e      	ldr	r3, [pc, #312]	; (8009fac <__ieee754_pow+0x234>)
 8009e74:	429e      	cmp	r6, r3
 8009e76:	d1eb      	bne.n	8009e50 <__ieee754_pow+0xd8>
 8009e78:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009e7c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009e80:	ea53 030a 	orrs.w	r3, r3, sl
 8009e84:	f000 8449 	beq.w	800a71a <__ieee754_pow+0x9a2>
 8009e88:	4b4b      	ldr	r3, [pc, #300]	; (8009fb8 <__ieee754_pow+0x240>)
 8009e8a:	429c      	cmp	r4, r3
 8009e8c:	dd0b      	ble.n	8009ea6 <__ieee754_pow+0x12e>
 8009e8e:	2f00      	cmp	r7, #0
 8009e90:	f2c0 8449 	blt.w	800a726 <__ieee754_pow+0x9ae>
 8009e94:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009e98:	4658      	mov	r0, fp
 8009e9a:	4661      	mov	r1, ip
 8009e9c:	b013      	add	sp, #76	; 0x4c
 8009e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	e7e2      	b.n	8009e6c <__ieee754_pow+0xf4>
 8009ea6:	2f00      	cmp	r7, #0
 8009ea8:	f04f 0b00 	mov.w	fp, #0
 8009eac:	f04f 0c00 	mov.w	ip, #0
 8009eb0:	daf2      	bge.n	8009e98 <__ieee754_pow+0x120>
 8009eb2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009eb6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009eba:	e7ed      	b.n	8009e98 <__ieee754_pow+0x120>
 8009ebc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009ec0:	d106      	bne.n	8009ed0 <__ieee754_pow+0x158>
 8009ec2:	4642      	mov	r2, r8
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	4640      	mov	r0, r8
 8009ec8:	4649      	mov	r1, r9
 8009eca:	f7f6 fbb9 	bl	8000640 <__aeabi_dmul>
 8009ece:	e770      	b.n	8009db2 <__ieee754_pow+0x3a>
 8009ed0:	4b3a      	ldr	r3, [pc, #232]	; (8009fbc <__ieee754_pow+0x244>)
 8009ed2:	429f      	cmp	r7, r3
 8009ed4:	d10a      	bne.n	8009eec <__ieee754_pow+0x174>
 8009ed6:	2d00      	cmp	r5, #0
 8009ed8:	db08      	blt.n	8009eec <__ieee754_pow+0x174>
 8009eda:	4640      	mov	r0, r8
 8009edc:	4649      	mov	r1, r9
 8009ede:	b013      	add	sp, #76	; 0x4c
 8009ee0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	f7ff bafa 	b.w	80094dc <__ieee754_sqrt>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	4640      	mov	r0, r8
 8009eee:	4649      	mov	r1, r9
 8009ef0:	f7ff fa7a 	bl	80093e8 <fabs>
 8009ef4:	4683      	mov	fp, r0
 8009ef6:	468c      	mov	ip, r1
 8009ef8:	f1ba 0f00 	cmp.w	sl, #0
 8009efc:	d128      	bne.n	8009f50 <__ieee754_pow+0x1d8>
 8009efe:	b124      	cbz	r4, 8009f0a <__ieee754_pow+0x192>
 8009f00:	4b2c      	ldr	r3, [pc, #176]	; (8009fb4 <__ieee754_pow+0x23c>)
 8009f02:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d122      	bne.n	8009f50 <__ieee754_pow+0x1d8>
 8009f0a:	2f00      	cmp	r7, #0
 8009f0c:	da07      	bge.n	8009f1e <__ieee754_pow+0x1a6>
 8009f0e:	465a      	mov	r2, fp
 8009f10:	4663      	mov	r3, ip
 8009f12:	2000      	movs	r0, #0
 8009f14:	4927      	ldr	r1, [pc, #156]	; (8009fb4 <__ieee754_pow+0x23c>)
 8009f16:	f7f6 fcbd 	bl	8000894 <__aeabi_ddiv>
 8009f1a:	4683      	mov	fp, r0
 8009f1c:	468c      	mov	ip, r1
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	daba      	bge.n	8009e98 <__ieee754_pow+0x120>
 8009f22:	9b00      	ldr	r3, [sp, #0]
 8009f24:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009f28:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009f2c:	431c      	orrs	r4, r3
 8009f2e:	d108      	bne.n	8009f42 <__ieee754_pow+0x1ca>
 8009f30:	465a      	mov	r2, fp
 8009f32:	4663      	mov	r3, ip
 8009f34:	4658      	mov	r0, fp
 8009f36:	4661      	mov	r1, ip
 8009f38:	f7f6 f9ca 	bl	80002d0 <__aeabi_dsub>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	e790      	b.n	8009e64 <__ieee754_pow+0xec>
 8009f42:	9b00      	ldr	r3, [sp, #0]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d1a7      	bne.n	8009e98 <__ieee754_pow+0x120>
 8009f48:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009f4c:	469c      	mov	ip, r3
 8009f4e:	e7a3      	b.n	8009e98 <__ieee754_pow+0x120>
 8009f50:	0feb      	lsrs	r3, r5, #31
 8009f52:	3b01      	subs	r3, #1
 8009f54:	930c      	str	r3, [sp, #48]	; 0x30
 8009f56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f58:	9b00      	ldr	r3, [sp, #0]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	d104      	bne.n	8009f68 <__ieee754_pow+0x1f0>
 8009f5e:	4642      	mov	r2, r8
 8009f60:	464b      	mov	r3, r9
 8009f62:	4640      	mov	r0, r8
 8009f64:	4649      	mov	r1, r9
 8009f66:	e7e7      	b.n	8009f38 <__ieee754_pow+0x1c0>
 8009f68:	4b15      	ldr	r3, [pc, #84]	; (8009fc0 <__ieee754_pow+0x248>)
 8009f6a:	429e      	cmp	r6, r3
 8009f6c:	f340 80f6 	ble.w	800a15c <__ieee754_pow+0x3e4>
 8009f70:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009f74:	429e      	cmp	r6, r3
 8009f76:	4b10      	ldr	r3, [pc, #64]	; (8009fb8 <__ieee754_pow+0x240>)
 8009f78:	dd09      	ble.n	8009f8e <__ieee754_pow+0x216>
 8009f7a:	429c      	cmp	r4, r3
 8009f7c:	dc0c      	bgt.n	8009f98 <__ieee754_pow+0x220>
 8009f7e:	2f00      	cmp	r7, #0
 8009f80:	da0c      	bge.n	8009f9c <__ieee754_pow+0x224>
 8009f82:	2000      	movs	r0, #0
 8009f84:	b013      	add	sp, #76	; 0x4c
 8009f86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8a:	f000 bea2 	b.w	800acd2 <__math_oflow>
 8009f8e:	429c      	cmp	r4, r3
 8009f90:	dbf5      	blt.n	8009f7e <__ieee754_pow+0x206>
 8009f92:	4b08      	ldr	r3, [pc, #32]	; (8009fb4 <__ieee754_pow+0x23c>)
 8009f94:	429c      	cmp	r4, r3
 8009f96:	dd15      	ble.n	8009fc4 <__ieee754_pow+0x24c>
 8009f98:	2f00      	cmp	r7, #0
 8009f9a:	dcf2      	bgt.n	8009f82 <__ieee754_pow+0x20a>
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	b013      	add	sp, #76	; 0x4c
 8009fa0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	f000 be90 	b.w	800acc8 <__math_uflow>
 8009fa8:	fff00000 	.word	0xfff00000
 8009fac:	7ff00000 	.word	0x7ff00000
 8009fb0:	433fffff 	.word	0x433fffff
 8009fb4:	3ff00000 	.word	0x3ff00000
 8009fb8:	3fefffff 	.word	0x3fefffff
 8009fbc:	3fe00000 	.word	0x3fe00000
 8009fc0:	41e00000 	.word	0x41e00000
 8009fc4:	4661      	mov	r1, ip
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	4658      	mov	r0, fp
 8009fca:	4b5f      	ldr	r3, [pc, #380]	; (800a148 <__ieee754_pow+0x3d0>)
 8009fcc:	f7f6 f980 	bl	80002d0 <__aeabi_dsub>
 8009fd0:	a355      	add	r3, pc, #340	; (adr r3, 800a128 <__ieee754_pow+0x3b0>)
 8009fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	460d      	mov	r5, r1
 8009fda:	f7f6 fb31 	bl	8000640 <__aeabi_dmul>
 8009fde:	a354      	add	r3, pc, #336	; (adr r3, 800a130 <__ieee754_pow+0x3b8>)
 8009fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	460f      	mov	r7, r1
 8009fe8:	4620      	mov	r0, r4
 8009fea:	4629      	mov	r1, r5
 8009fec:	f7f6 fb28 	bl	8000640 <__aeabi_dmul>
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	4682      	mov	sl, r0
 8009ff4:	468b      	mov	fp, r1
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	4b54      	ldr	r3, [pc, #336]	; (800a14c <__ieee754_pow+0x3d4>)
 8009ffc:	f7f6 fb20 	bl	8000640 <__aeabi_dmul>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	a14c      	add	r1, pc, #304	; (adr r1, 800a138 <__ieee754_pow+0x3c0>)
 800a006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a00a:	f7f6 f961 	bl	80002d0 <__aeabi_dsub>
 800a00e:	4622      	mov	r2, r4
 800a010:	462b      	mov	r3, r5
 800a012:	f7f6 fb15 	bl	8000640 <__aeabi_dmul>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	2000      	movs	r0, #0
 800a01c:	494c      	ldr	r1, [pc, #304]	; (800a150 <__ieee754_pow+0x3d8>)
 800a01e:	f7f6 f957 	bl	80002d0 <__aeabi_dsub>
 800a022:	4622      	mov	r2, r4
 800a024:	462b      	mov	r3, r5
 800a026:	4680      	mov	r8, r0
 800a028:	4689      	mov	r9, r1
 800a02a:	4620      	mov	r0, r4
 800a02c:	4629      	mov	r1, r5
 800a02e:	f7f6 fb07 	bl	8000640 <__aeabi_dmul>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	4640      	mov	r0, r8
 800a038:	4649      	mov	r1, r9
 800a03a:	f7f6 fb01 	bl	8000640 <__aeabi_dmul>
 800a03e:	a340      	add	r3, pc, #256	; (adr r3, 800a140 <__ieee754_pow+0x3c8>)
 800a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a044:	f7f6 fafc 	bl	8000640 <__aeabi_dmul>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4650      	mov	r0, sl
 800a04e:	4659      	mov	r1, fp
 800a050:	f7f6 f93e 	bl	80002d0 <__aeabi_dsub>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4604      	mov	r4, r0
 800a05a:	460d      	mov	r5, r1
 800a05c:	4630      	mov	r0, r6
 800a05e:	4639      	mov	r1, r7
 800a060:	f7f6 f938 	bl	80002d4 <__adddf3>
 800a064:	2000      	movs	r0, #0
 800a066:	4632      	mov	r2, r6
 800a068:	463b      	mov	r3, r7
 800a06a:	4682      	mov	sl, r0
 800a06c:	468b      	mov	fp, r1
 800a06e:	f7f6 f92f 	bl	80002d0 <__aeabi_dsub>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	4620      	mov	r0, r4
 800a078:	4629      	mov	r1, r5
 800a07a:	f7f6 f929 	bl	80002d0 <__aeabi_dsub>
 800a07e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a082:	9b00      	ldr	r3, [sp, #0]
 800a084:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a086:	3b01      	subs	r3, #1
 800a088:	4313      	orrs	r3, r2
 800a08a:	f04f 0600 	mov.w	r6, #0
 800a08e:	f04f 0200 	mov.w	r2, #0
 800a092:	bf0c      	ite	eq
 800a094:	4b2f      	ldreq	r3, [pc, #188]	; (800a154 <__ieee754_pow+0x3dc>)
 800a096:	4b2c      	ldrne	r3, [pc, #176]	; (800a148 <__ieee754_pow+0x3d0>)
 800a098:	4604      	mov	r4, r0
 800a09a:	460d      	mov	r5, r1
 800a09c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0a0:	e9cd 2300 	strd	r2, r3, [sp]
 800a0a4:	4632      	mov	r2, r6
 800a0a6:	463b      	mov	r3, r7
 800a0a8:	f7f6 f912 	bl	80002d0 <__aeabi_dsub>
 800a0ac:	4652      	mov	r2, sl
 800a0ae:	465b      	mov	r3, fp
 800a0b0:	f7f6 fac6 	bl	8000640 <__aeabi_dmul>
 800a0b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0b8:	4680      	mov	r8, r0
 800a0ba:	4689      	mov	r9, r1
 800a0bc:	4620      	mov	r0, r4
 800a0be:	4629      	mov	r1, r5
 800a0c0:	f7f6 fabe 	bl	8000640 <__aeabi_dmul>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	f7f6 f902 	bl	80002d4 <__adddf3>
 800a0d0:	4632      	mov	r2, r6
 800a0d2:	463b      	mov	r3, r7
 800a0d4:	4680      	mov	r8, r0
 800a0d6:	4689      	mov	r9, r1
 800a0d8:	4650      	mov	r0, sl
 800a0da:	4659      	mov	r1, fp
 800a0dc:	f7f6 fab0 	bl	8000640 <__aeabi_dmul>
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	460d      	mov	r5, r1
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	4649      	mov	r1, r9
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a0f0:	f7f6 f8f0 	bl	80002d4 <__adddf3>
 800a0f4:	4b18      	ldr	r3, [pc, #96]	; (800a158 <__ieee754_pow+0x3e0>)
 800a0f6:	4682      	mov	sl, r0
 800a0f8:	4299      	cmp	r1, r3
 800a0fa:	460f      	mov	r7, r1
 800a0fc:	460e      	mov	r6, r1
 800a0fe:	f340 82e7 	ble.w	800a6d0 <__ieee754_pow+0x958>
 800a102:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a106:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a10a:	4303      	orrs	r3, r0
 800a10c:	f000 81e2 	beq.w	800a4d4 <__ieee754_pow+0x75c>
 800a110:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a114:	2200      	movs	r2, #0
 800a116:	2300      	movs	r3, #0
 800a118:	f7f6 fd04 	bl	8000b24 <__aeabi_dcmplt>
 800a11c:	3800      	subs	r0, #0
 800a11e:	bf18      	it	ne
 800a120:	2001      	movne	r0, #1
 800a122:	e72f      	b.n	8009f84 <__ieee754_pow+0x20c>
 800a124:	f3af 8000 	nop.w
 800a128:	60000000 	.word	0x60000000
 800a12c:	3ff71547 	.word	0x3ff71547
 800a130:	f85ddf44 	.word	0xf85ddf44
 800a134:	3e54ae0b 	.word	0x3e54ae0b
 800a138:	55555555 	.word	0x55555555
 800a13c:	3fd55555 	.word	0x3fd55555
 800a140:	652b82fe 	.word	0x652b82fe
 800a144:	3ff71547 	.word	0x3ff71547
 800a148:	3ff00000 	.word	0x3ff00000
 800a14c:	3fd00000 	.word	0x3fd00000
 800a150:	3fe00000 	.word	0x3fe00000
 800a154:	bff00000 	.word	0xbff00000
 800a158:	408fffff 	.word	0x408fffff
 800a15c:	4bd4      	ldr	r3, [pc, #848]	; (800a4b0 <__ieee754_pow+0x738>)
 800a15e:	2200      	movs	r2, #0
 800a160:	402b      	ands	r3, r5
 800a162:	b943      	cbnz	r3, 800a176 <__ieee754_pow+0x3fe>
 800a164:	4658      	mov	r0, fp
 800a166:	4661      	mov	r1, ip
 800a168:	4bd2      	ldr	r3, [pc, #840]	; (800a4b4 <__ieee754_pow+0x73c>)
 800a16a:	f7f6 fa69 	bl	8000640 <__aeabi_dmul>
 800a16e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a172:	4683      	mov	fp, r0
 800a174:	460c      	mov	r4, r1
 800a176:	1523      	asrs	r3, r4, #20
 800a178:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a17c:	4413      	add	r3, r2
 800a17e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a180:	4bcd      	ldr	r3, [pc, #820]	; (800a4b8 <__ieee754_pow+0x740>)
 800a182:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a186:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a18a:	429c      	cmp	r4, r3
 800a18c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a190:	dd08      	ble.n	800a1a4 <__ieee754_pow+0x42c>
 800a192:	4bca      	ldr	r3, [pc, #808]	; (800a4bc <__ieee754_pow+0x744>)
 800a194:	429c      	cmp	r4, r3
 800a196:	f340 8164 	ble.w	800a462 <__ieee754_pow+0x6ea>
 800a19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a19c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1a4:	2600      	movs	r6, #0
 800a1a6:	00f3      	lsls	r3, r6, #3
 800a1a8:	930d      	str	r3, [sp, #52]	; 0x34
 800a1aa:	4bc5      	ldr	r3, [pc, #788]	; (800a4c0 <__ieee754_pow+0x748>)
 800a1ac:	4658      	mov	r0, fp
 800a1ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a1be:	4623      	mov	r3, r4
 800a1c0:	f7f6 f886 	bl	80002d0 <__aeabi_dsub>
 800a1c4:	46da      	mov	sl, fp
 800a1c6:	462b      	mov	r3, r5
 800a1c8:	4652      	mov	r2, sl
 800a1ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a1ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1d2:	f7f6 f87f 	bl	80002d4 <__adddf3>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	2000      	movs	r0, #0
 800a1dc:	49b9      	ldr	r1, [pc, #740]	; (800a4c4 <__ieee754_pow+0x74c>)
 800a1de:	f7f6 fb59 	bl	8000894 <__aeabi_ddiv>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a1ea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a1ee:	f7f6 fa27 	bl	8000640 <__aeabi_dmul>
 800a1f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a1f6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a1fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a1fe:	2300      	movs	r3, #0
 800a200:	2200      	movs	r2, #0
 800a202:	46ab      	mov	fp, r5
 800a204:	106d      	asrs	r5, r5, #1
 800a206:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a20a:	9304      	str	r3, [sp, #16]
 800a20c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a210:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a214:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a218:	4640      	mov	r0, r8
 800a21a:	4649      	mov	r1, r9
 800a21c:	4614      	mov	r4, r2
 800a21e:	461d      	mov	r5, r3
 800a220:	f7f6 fa0e 	bl	8000640 <__aeabi_dmul>
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a22c:	f7f6 f850 	bl	80002d0 <__aeabi_dsub>
 800a230:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a234:	4606      	mov	r6, r0
 800a236:	460f      	mov	r7, r1
 800a238:	4620      	mov	r0, r4
 800a23a:	4629      	mov	r1, r5
 800a23c:	f7f6 f848 	bl	80002d0 <__aeabi_dsub>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4650      	mov	r0, sl
 800a246:	4659      	mov	r1, fp
 800a248:	f7f6 f842 	bl	80002d0 <__aeabi_dsub>
 800a24c:	4642      	mov	r2, r8
 800a24e:	464b      	mov	r3, r9
 800a250:	f7f6 f9f6 	bl	8000640 <__aeabi_dmul>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4630      	mov	r0, r6
 800a25a:	4639      	mov	r1, r7
 800a25c:	f7f6 f838 	bl	80002d0 <__aeabi_dsub>
 800a260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a264:	f7f6 f9ec 	bl	8000640 <__aeabi_dmul>
 800a268:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a26c:	4682      	mov	sl, r0
 800a26e:	468b      	mov	fp, r1
 800a270:	4610      	mov	r0, r2
 800a272:	4619      	mov	r1, r3
 800a274:	f7f6 f9e4 	bl	8000640 <__aeabi_dmul>
 800a278:	a37b      	add	r3, pc, #492	; (adr r3, 800a468 <__ieee754_pow+0x6f0>)
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	4604      	mov	r4, r0
 800a280:	460d      	mov	r5, r1
 800a282:	f7f6 f9dd 	bl	8000640 <__aeabi_dmul>
 800a286:	a37a      	add	r3, pc, #488	; (adr r3, 800a470 <__ieee754_pow+0x6f8>)
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	f7f6 f822 	bl	80002d4 <__adddf3>
 800a290:	4622      	mov	r2, r4
 800a292:	462b      	mov	r3, r5
 800a294:	f7f6 f9d4 	bl	8000640 <__aeabi_dmul>
 800a298:	a377      	add	r3, pc, #476	; (adr r3, 800a478 <__ieee754_pow+0x700>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	f7f6 f819 	bl	80002d4 <__adddf3>
 800a2a2:	4622      	mov	r2, r4
 800a2a4:	462b      	mov	r3, r5
 800a2a6:	f7f6 f9cb 	bl	8000640 <__aeabi_dmul>
 800a2aa:	a375      	add	r3, pc, #468	; (adr r3, 800a480 <__ieee754_pow+0x708>)
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	f7f6 f810 	bl	80002d4 <__adddf3>
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	462b      	mov	r3, r5
 800a2b8:	f7f6 f9c2 	bl	8000640 <__aeabi_dmul>
 800a2bc:	a372      	add	r3, pc, #456	; (adr r3, 800a488 <__ieee754_pow+0x710>)
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	f7f6 f807 	bl	80002d4 <__adddf3>
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	462b      	mov	r3, r5
 800a2ca:	f7f6 f9b9 	bl	8000640 <__aeabi_dmul>
 800a2ce:	a370      	add	r3, pc, #448	; (adr r3, 800a490 <__ieee754_pow+0x718>)
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	f7f5 fffe 	bl	80002d4 <__adddf3>
 800a2d8:	4622      	mov	r2, r4
 800a2da:	4606      	mov	r6, r0
 800a2dc:	460f      	mov	r7, r1
 800a2de:	462b      	mov	r3, r5
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	4629      	mov	r1, r5
 800a2e4:	f7f6 f9ac 	bl	8000640 <__aeabi_dmul>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	f7f6 f9a6 	bl	8000640 <__aeabi_dmul>
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	460d      	mov	r5, r1
 800a2f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2fc:	4642      	mov	r2, r8
 800a2fe:	464b      	mov	r3, r9
 800a300:	f7f5 ffe8 	bl	80002d4 <__adddf3>
 800a304:	4652      	mov	r2, sl
 800a306:	465b      	mov	r3, fp
 800a308:	f7f6 f99a 	bl	8000640 <__aeabi_dmul>
 800a30c:	4622      	mov	r2, r4
 800a30e:	462b      	mov	r3, r5
 800a310:	f7f5 ffe0 	bl	80002d4 <__adddf3>
 800a314:	4642      	mov	r2, r8
 800a316:	4606      	mov	r6, r0
 800a318:	460f      	mov	r7, r1
 800a31a:	464b      	mov	r3, r9
 800a31c:	4640      	mov	r0, r8
 800a31e:	4649      	mov	r1, r9
 800a320:	f7f6 f98e 	bl	8000640 <__aeabi_dmul>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a32c:	2200      	movs	r2, #0
 800a32e:	4b66      	ldr	r3, [pc, #408]	; (800a4c8 <__ieee754_pow+0x750>)
 800a330:	f7f5 ffd0 	bl	80002d4 <__adddf3>
 800a334:	4632      	mov	r2, r6
 800a336:	463b      	mov	r3, r7
 800a338:	f7f5 ffcc 	bl	80002d4 <__adddf3>
 800a33c:	2400      	movs	r4, #0
 800a33e:	460d      	mov	r5, r1
 800a340:	4622      	mov	r2, r4
 800a342:	460b      	mov	r3, r1
 800a344:	4640      	mov	r0, r8
 800a346:	4649      	mov	r1, r9
 800a348:	f7f6 f97a 	bl	8000640 <__aeabi_dmul>
 800a34c:	2200      	movs	r2, #0
 800a34e:	4680      	mov	r8, r0
 800a350:	4689      	mov	r9, r1
 800a352:	4620      	mov	r0, r4
 800a354:	4629      	mov	r1, r5
 800a356:	4b5c      	ldr	r3, [pc, #368]	; (800a4c8 <__ieee754_pow+0x750>)
 800a358:	f7f5 ffba 	bl	80002d0 <__aeabi_dsub>
 800a35c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a360:	f7f5 ffb6 	bl	80002d0 <__aeabi_dsub>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4630      	mov	r0, r6
 800a36a:	4639      	mov	r1, r7
 800a36c:	f7f5 ffb0 	bl	80002d0 <__aeabi_dsub>
 800a370:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a374:	f7f6 f964 	bl	8000640 <__aeabi_dmul>
 800a378:	4622      	mov	r2, r4
 800a37a:	4606      	mov	r6, r0
 800a37c:	460f      	mov	r7, r1
 800a37e:	462b      	mov	r3, r5
 800a380:	4650      	mov	r0, sl
 800a382:	4659      	mov	r1, fp
 800a384:	f7f6 f95c 	bl	8000640 <__aeabi_dmul>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4630      	mov	r0, r6
 800a38e:	4639      	mov	r1, r7
 800a390:	f7f5 ffa0 	bl	80002d4 <__adddf3>
 800a394:	2400      	movs	r4, #0
 800a396:	4606      	mov	r6, r0
 800a398:	460f      	mov	r7, r1
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	4640      	mov	r0, r8
 800a3a0:	4649      	mov	r1, r9
 800a3a2:	f7f5 ff97 	bl	80002d4 <__adddf3>
 800a3a6:	a33c      	add	r3, pc, #240	; (adr r3, 800a498 <__ieee754_pow+0x720>)
 800a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	460d      	mov	r5, r1
 800a3b0:	f7f6 f946 	bl	8000640 <__aeabi_dmul>
 800a3b4:	4642      	mov	r2, r8
 800a3b6:	464b      	mov	r3, r9
 800a3b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a3bc:	4620      	mov	r0, r4
 800a3be:	4629      	mov	r1, r5
 800a3c0:	f7f5 ff86 	bl	80002d0 <__aeabi_dsub>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	f7f5 ff80 	bl	80002d0 <__aeabi_dsub>
 800a3d0:	a333      	add	r3, pc, #204	; (adr r3, 800a4a0 <__ieee754_pow+0x728>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f6 f933 	bl	8000640 <__aeabi_dmul>
 800a3da:	a333      	add	r3, pc, #204	; (adr r3, 800a4a8 <__ieee754_pow+0x730>)
 800a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	460f      	mov	r7, r1
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f6 f92a 	bl	8000640 <__aeabi_dmul>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	4639      	mov	r1, r7
 800a3f4:	f7f5 ff6e 	bl	80002d4 <__adddf3>
 800a3f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3fa:	4b34      	ldr	r3, [pc, #208]	; (800a4cc <__ieee754_pow+0x754>)
 800a3fc:	4413      	add	r3, r2
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	f7f5 ff67 	bl	80002d4 <__adddf3>
 800a406:	4680      	mov	r8, r0
 800a408:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a40a:	4689      	mov	r9, r1
 800a40c:	f7f6 f8ae 	bl	800056c <__aeabi_i2d>
 800a410:	4604      	mov	r4, r0
 800a412:	460d      	mov	r5, r1
 800a414:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a41a:	4b2d      	ldr	r3, [pc, #180]	; (800a4d0 <__ieee754_pow+0x758>)
 800a41c:	4413      	add	r3, r2
 800a41e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a422:	4642      	mov	r2, r8
 800a424:	464b      	mov	r3, r9
 800a426:	f7f5 ff55 	bl	80002d4 <__adddf3>
 800a42a:	4632      	mov	r2, r6
 800a42c:	463b      	mov	r3, r7
 800a42e:	f7f5 ff51 	bl	80002d4 <__adddf3>
 800a432:	4622      	mov	r2, r4
 800a434:	462b      	mov	r3, r5
 800a436:	f7f5 ff4d 	bl	80002d4 <__adddf3>
 800a43a:	2000      	movs	r0, #0
 800a43c:	4622      	mov	r2, r4
 800a43e:	462b      	mov	r3, r5
 800a440:	4682      	mov	sl, r0
 800a442:	468b      	mov	fp, r1
 800a444:	f7f5 ff44 	bl	80002d0 <__aeabi_dsub>
 800a448:	4632      	mov	r2, r6
 800a44a:	463b      	mov	r3, r7
 800a44c:	f7f5 ff40 	bl	80002d0 <__aeabi_dsub>
 800a450:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a454:	f7f5 ff3c 	bl	80002d0 <__aeabi_dsub>
 800a458:	4602      	mov	r2, r0
 800a45a:	460b      	mov	r3, r1
 800a45c:	4640      	mov	r0, r8
 800a45e:	4649      	mov	r1, r9
 800a460:	e60b      	b.n	800a07a <__ieee754_pow+0x302>
 800a462:	2601      	movs	r6, #1
 800a464:	e69f      	b.n	800a1a6 <__ieee754_pow+0x42e>
 800a466:	bf00      	nop
 800a468:	4a454eef 	.word	0x4a454eef
 800a46c:	3fca7e28 	.word	0x3fca7e28
 800a470:	93c9db65 	.word	0x93c9db65
 800a474:	3fcd864a 	.word	0x3fcd864a
 800a478:	a91d4101 	.word	0xa91d4101
 800a47c:	3fd17460 	.word	0x3fd17460
 800a480:	518f264d 	.word	0x518f264d
 800a484:	3fd55555 	.word	0x3fd55555
 800a488:	db6fabff 	.word	0xdb6fabff
 800a48c:	3fdb6db6 	.word	0x3fdb6db6
 800a490:	33333303 	.word	0x33333303
 800a494:	3fe33333 	.word	0x3fe33333
 800a498:	e0000000 	.word	0xe0000000
 800a49c:	3feec709 	.word	0x3feec709
 800a4a0:	dc3a03fd 	.word	0xdc3a03fd
 800a4a4:	3feec709 	.word	0x3feec709
 800a4a8:	145b01f5 	.word	0x145b01f5
 800a4ac:	be3e2fe0 	.word	0xbe3e2fe0
 800a4b0:	7ff00000 	.word	0x7ff00000
 800a4b4:	43400000 	.word	0x43400000
 800a4b8:	0003988e 	.word	0x0003988e
 800a4bc:	000bb679 	.word	0x000bb679
 800a4c0:	0800b920 	.word	0x0800b920
 800a4c4:	3ff00000 	.word	0x3ff00000
 800a4c8:	40080000 	.word	0x40080000
 800a4cc:	0800b940 	.word	0x0800b940
 800a4d0:	0800b930 	.word	0x0800b930
 800a4d4:	a39c      	add	r3, pc, #624	; (adr r3, 800a748 <__ieee754_pow+0x9d0>)
 800a4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4da:	4640      	mov	r0, r8
 800a4dc:	4649      	mov	r1, r9
 800a4de:	f7f5 fef9 	bl	80002d4 <__adddf3>
 800a4e2:	4622      	mov	r2, r4
 800a4e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4e8:	462b      	mov	r3, r5
 800a4ea:	4650      	mov	r0, sl
 800a4ec:	4639      	mov	r1, r7
 800a4ee:	f7f5 feef 	bl	80002d0 <__aeabi_dsub>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4fa:	f7f6 fb31 	bl	8000b60 <__aeabi_dcmpgt>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	f47f ae06 	bne.w	800a110 <__ieee754_pow+0x398>
 800a504:	4aa2      	ldr	r2, [pc, #648]	; (800a790 <__ieee754_pow+0xa18>)
 800a506:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a50a:	4293      	cmp	r3, r2
 800a50c:	f340 8100 	ble.w	800a710 <__ieee754_pow+0x998>
 800a510:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a514:	151b      	asrs	r3, r3, #20
 800a516:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a51a:	fa4a fa03 	asr.w	sl, sl, r3
 800a51e:	44b2      	add	sl, r6
 800a520:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a524:	489b      	ldr	r0, [pc, #620]	; (800a794 <__ieee754_pow+0xa1c>)
 800a526:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a52a:	4108      	asrs	r0, r1
 800a52c:	ea00 030a 	and.w	r3, r0, sl
 800a530:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a534:	f1c1 0114 	rsb	r1, r1, #20
 800a538:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a53c:	fa4a fa01 	asr.w	sl, sl, r1
 800a540:	2e00      	cmp	r6, #0
 800a542:	f04f 0200 	mov.w	r2, #0
 800a546:	4620      	mov	r0, r4
 800a548:	4629      	mov	r1, r5
 800a54a:	bfb8      	it	lt
 800a54c:	f1ca 0a00 	rsblt	sl, sl, #0
 800a550:	f7f5 febe 	bl	80002d0 <__aeabi_dsub>
 800a554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a55c:	2400      	movs	r4, #0
 800a55e:	4642      	mov	r2, r8
 800a560:	464b      	mov	r3, r9
 800a562:	f7f5 feb7 	bl	80002d4 <__adddf3>
 800a566:	a37a      	add	r3, pc, #488	; (adr r3, 800a750 <__ieee754_pow+0x9d8>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	4620      	mov	r0, r4
 800a56e:	460d      	mov	r5, r1
 800a570:	f7f6 f866 	bl	8000640 <__aeabi_dmul>
 800a574:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a578:	4606      	mov	r6, r0
 800a57a:	460f      	mov	r7, r1
 800a57c:	4620      	mov	r0, r4
 800a57e:	4629      	mov	r1, r5
 800a580:	f7f5 fea6 	bl	80002d0 <__aeabi_dsub>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4640      	mov	r0, r8
 800a58a:	4649      	mov	r1, r9
 800a58c:	f7f5 fea0 	bl	80002d0 <__aeabi_dsub>
 800a590:	a371      	add	r3, pc, #452	; (adr r3, 800a758 <__ieee754_pow+0x9e0>)
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	f7f6 f853 	bl	8000640 <__aeabi_dmul>
 800a59a:	a371      	add	r3, pc, #452	; (adr r3, 800a760 <__ieee754_pow+0x9e8>)
 800a59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a0:	4680      	mov	r8, r0
 800a5a2:	4689      	mov	r9, r1
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	f7f6 f84a 	bl	8000640 <__aeabi_dmul>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4640      	mov	r0, r8
 800a5b2:	4649      	mov	r1, r9
 800a5b4:	f7f5 fe8e 	bl	80002d4 <__adddf3>
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	460d      	mov	r5, r1
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f5 fe86 	bl	80002d4 <__adddf3>
 800a5c8:	4632      	mov	r2, r6
 800a5ca:	463b      	mov	r3, r7
 800a5cc:	4680      	mov	r8, r0
 800a5ce:	4689      	mov	r9, r1
 800a5d0:	f7f5 fe7e 	bl	80002d0 <__aeabi_dsub>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4620      	mov	r0, r4
 800a5da:	4629      	mov	r1, r5
 800a5dc:	f7f5 fe78 	bl	80002d0 <__aeabi_dsub>
 800a5e0:	4642      	mov	r2, r8
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	460f      	mov	r7, r1
 800a5e6:	464b      	mov	r3, r9
 800a5e8:	4640      	mov	r0, r8
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	f7f6 f828 	bl	8000640 <__aeabi_dmul>
 800a5f0:	a35d      	add	r3, pc, #372	; (adr r3, 800a768 <__ieee754_pow+0x9f0>)
 800a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	460d      	mov	r5, r1
 800a5fa:	f7f6 f821 	bl	8000640 <__aeabi_dmul>
 800a5fe:	a35c      	add	r3, pc, #368	; (adr r3, 800a770 <__ieee754_pow+0x9f8>)
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	f7f5 fe64 	bl	80002d0 <__aeabi_dsub>
 800a608:	4622      	mov	r2, r4
 800a60a:	462b      	mov	r3, r5
 800a60c:	f7f6 f818 	bl	8000640 <__aeabi_dmul>
 800a610:	a359      	add	r3, pc, #356	; (adr r3, 800a778 <__ieee754_pow+0xa00>)
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	f7f5 fe5d 	bl	80002d4 <__adddf3>
 800a61a:	4622      	mov	r2, r4
 800a61c:	462b      	mov	r3, r5
 800a61e:	f7f6 f80f 	bl	8000640 <__aeabi_dmul>
 800a622:	a357      	add	r3, pc, #348	; (adr r3, 800a780 <__ieee754_pow+0xa08>)
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	f7f5 fe52 	bl	80002d0 <__aeabi_dsub>
 800a62c:	4622      	mov	r2, r4
 800a62e:	462b      	mov	r3, r5
 800a630:	f7f6 f806 	bl	8000640 <__aeabi_dmul>
 800a634:	a354      	add	r3, pc, #336	; (adr r3, 800a788 <__ieee754_pow+0xa10>)
 800a636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63a:	f7f5 fe4b 	bl	80002d4 <__adddf3>
 800a63e:	4622      	mov	r2, r4
 800a640:	462b      	mov	r3, r5
 800a642:	f7f5 fffd 	bl	8000640 <__aeabi_dmul>
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	4640      	mov	r0, r8
 800a64c:	4649      	mov	r1, r9
 800a64e:	f7f5 fe3f 	bl	80002d0 <__aeabi_dsub>
 800a652:	4604      	mov	r4, r0
 800a654:	460d      	mov	r5, r1
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	4640      	mov	r0, r8
 800a65c:	4649      	mov	r1, r9
 800a65e:	f7f5 ffef 	bl	8000640 <__aeabi_dmul>
 800a662:	2200      	movs	r2, #0
 800a664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a668:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a66c:	4620      	mov	r0, r4
 800a66e:	4629      	mov	r1, r5
 800a670:	f7f5 fe2e 	bl	80002d0 <__aeabi_dsub>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a67c:	f7f6 f90a 	bl	8000894 <__aeabi_ddiv>
 800a680:	4632      	mov	r2, r6
 800a682:	4604      	mov	r4, r0
 800a684:	460d      	mov	r5, r1
 800a686:	463b      	mov	r3, r7
 800a688:	4640      	mov	r0, r8
 800a68a:	4649      	mov	r1, r9
 800a68c:	f7f5 ffd8 	bl	8000640 <__aeabi_dmul>
 800a690:	4632      	mov	r2, r6
 800a692:	463b      	mov	r3, r7
 800a694:	f7f5 fe1e 	bl	80002d4 <__adddf3>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	4620      	mov	r0, r4
 800a69e:	4629      	mov	r1, r5
 800a6a0:	f7f5 fe16 	bl	80002d0 <__aeabi_dsub>
 800a6a4:	4642      	mov	r2, r8
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	f7f5 fe12 	bl	80002d0 <__aeabi_dsub>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	4939      	ldr	r1, [pc, #228]	; (800a798 <__ieee754_pow+0xa20>)
 800a6b4:	f7f5 fe0c 	bl	80002d0 <__aeabi_dsub>
 800a6b8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a6bc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a6c0:	da29      	bge.n	800a716 <__ieee754_pow+0x99e>
 800a6c2:	4652      	mov	r2, sl
 800a6c4:	f000 fa64 	bl	800ab90 <scalbn>
 800a6c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6cc:	f7ff bbfd 	b.w	8009eca <__ieee754_pow+0x152>
 800a6d0:	4b32      	ldr	r3, [pc, #200]	; (800a79c <__ieee754_pow+0xa24>)
 800a6d2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a6d6:	429f      	cmp	r7, r3
 800a6d8:	f77f af14 	ble.w	800a504 <__ieee754_pow+0x78c>
 800a6dc:	4b30      	ldr	r3, [pc, #192]	; (800a7a0 <__ieee754_pow+0xa28>)
 800a6de:	440b      	add	r3, r1
 800a6e0:	4303      	orrs	r3, r0
 800a6e2:	d009      	beq.n	800a6f8 <__ieee754_pow+0x980>
 800a6e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	f7f6 fa1a 	bl	8000b24 <__aeabi_dcmplt>
 800a6f0:	3800      	subs	r0, #0
 800a6f2:	bf18      	it	ne
 800a6f4:	2001      	movne	r0, #1
 800a6f6:	e452      	b.n	8009f9e <__ieee754_pow+0x226>
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	462b      	mov	r3, r5
 800a6fc:	f7f5 fde8 	bl	80002d0 <__aeabi_dsub>
 800a700:	4642      	mov	r2, r8
 800a702:	464b      	mov	r3, r9
 800a704:	f7f6 fa22 	bl	8000b4c <__aeabi_dcmpge>
 800a708:	2800      	cmp	r0, #0
 800a70a:	f43f aefb 	beq.w	800a504 <__ieee754_pow+0x78c>
 800a70e:	e7e9      	b.n	800a6e4 <__ieee754_pow+0x96c>
 800a710:	f04f 0a00 	mov.w	sl, #0
 800a714:	e720      	b.n	800a558 <__ieee754_pow+0x7e0>
 800a716:	4621      	mov	r1, r4
 800a718:	e7d6      	b.n	800a6c8 <__ieee754_pow+0x950>
 800a71a:	f04f 0b00 	mov.w	fp, #0
 800a71e:	f8df c078 	ldr.w	ip, [pc, #120]	; 800a798 <__ieee754_pow+0xa20>
 800a722:	f7ff bbb9 	b.w	8009e98 <__ieee754_pow+0x120>
 800a726:	f04f 0b00 	mov.w	fp, #0
 800a72a:	f04f 0c00 	mov.w	ip, #0
 800a72e:	f7ff bbb3 	b.w	8009e98 <__ieee754_pow+0x120>
 800a732:	4640      	mov	r0, r8
 800a734:	4649      	mov	r1, r9
 800a736:	f7ff bb3c 	b.w	8009db2 <__ieee754_pow+0x3a>
 800a73a:	9200      	str	r2, [sp, #0]
 800a73c:	f7ff bb88 	b.w	8009e50 <__ieee754_pow+0xd8>
 800a740:	2300      	movs	r3, #0
 800a742:	f7ff bb72 	b.w	8009e2a <__ieee754_pow+0xb2>
 800a746:	bf00      	nop
 800a748:	652b82fe 	.word	0x652b82fe
 800a74c:	3c971547 	.word	0x3c971547
 800a750:	00000000 	.word	0x00000000
 800a754:	3fe62e43 	.word	0x3fe62e43
 800a758:	fefa39ef 	.word	0xfefa39ef
 800a75c:	3fe62e42 	.word	0x3fe62e42
 800a760:	0ca86c39 	.word	0x0ca86c39
 800a764:	be205c61 	.word	0xbe205c61
 800a768:	72bea4d0 	.word	0x72bea4d0
 800a76c:	3e663769 	.word	0x3e663769
 800a770:	c5d26bf1 	.word	0xc5d26bf1
 800a774:	3ebbbd41 	.word	0x3ebbbd41
 800a778:	af25de2c 	.word	0xaf25de2c
 800a77c:	3f11566a 	.word	0x3f11566a
 800a780:	16bebd93 	.word	0x16bebd93
 800a784:	3f66c16c 	.word	0x3f66c16c
 800a788:	5555553e 	.word	0x5555553e
 800a78c:	3fc55555 	.word	0x3fc55555
 800a790:	3fe00000 	.word	0x3fe00000
 800a794:	fff00000 	.word	0xfff00000
 800a798:	3ff00000 	.word	0x3ff00000
 800a79c:	4090cbff 	.word	0x4090cbff
 800a7a0:	3f6f3400 	.word	0x3f6f3400
 800a7a4:	00000000 	.word	0x00000000

0800a7a8 <__ieee754_rem_pio2>:
 800a7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ac:	4614      	mov	r4, r2
 800a7ae:	4ac2      	ldr	r2, [pc, #776]	; (800aab8 <__ieee754_rem_pio2+0x310>)
 800a7b0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a7b4:	b08d      	sub	sp, #52	; 0x34
 800a7b6:	4592      	cmp	sl, r2
 800a7b8:	9104      	str	r1, [sp, #16]
 800a7ba:	dc07      	bgt.n	800a7cc <__ieee754_rem_pio2+0x24>
 800a7bc:	2200      	movs	r2, #0
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e9c4 0100 	strd	r0, r1, [r4]
 800a7c4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a7c8:	2500      	movs	r5, #0
 800a7ca:	e024      	b.n	800a816 <__ieee754_rem_pio2+0x6e>
 800a7cc:	4abb      	ldr	r2, [pc, #748]	; (800aabc <__ieee754_rem_pio2+0x314>)
 800a7ce:	4592      	cmp	sl, r2
 800a7d0:	dc72      	bgt.n	800a8b8 <__ieee754_rem_pio2+0x110>
 800a7d2:	9b04      	ldr	r3, [sp, #16]
 800a7d4:	4dba      	ldr	r5, [pc, #744]	; (800aac0 <__ieee754_rem_pio2+0x318>)
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	a3a9      	add	r3, pc, #676	; (adr r3, 800aa80 <__ieee754_rem_pio2+0x2d8>)
 800a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7de:	dd36      	ble.n	800a84e <__ieee754_rem_pio2+0xa6>
 800a7e0:	f7f5 fd76 	bl	80002d0 <__aeabi_dsub>
 800a7e4:	45aa      	cmp	sl, r5
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	460f      	mov	r7, r1
 800a7ea:	d018      	beq.n	800a81e <__ieee754_rem_pio2+0x76>
 800a7ec:	a3a6      	add	r3, pc, #664	; (adr r3, 800aa88 <__ieee754_rem_pio2+0x2e0>)
 800a7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f2:	f7f5 fd6d 	bl	80002d0 <__aeabi_dsub>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	e9c4 2300 	strd	r2, r3, [r4]
 800a800:	4639      	mov	r1, r7
 800a802:	f7f5 fd65 	bl	80002d0 <__aeabi_dsub>
 800a806:	a3a0      	add	r3, pc, #640	; (adr r3, 800aa88 <__ieee754_rem_pio2+0x2e0>)
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	f7f5 fd60 	bl	80002d0 <__aeabi_dsub>
 800a810:	2501      	movs	r5, #1
 800a812:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a816:	4628      	mov	r0, r5
 800a818:	b00d      	add	sp, #52	; 0x34
 800a81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81e:	a39c      	add	r3, pc, #624	; (adr r3, 800aa90 <__ieee754_rem_pio2+0x2e8>)
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	f7f5 fd54 	bl	80002d0 <__aeabi_dsub>
 800a828:	a39b      	add	r3, pc, #620	; (adr r3, 800aa98 <__ieee754_rem_pio2+0x2f0>)
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	4606      	mov	r6, r0
 800a830:	460f      	mov	r7, r1
 800a832:	f7f5 fd4d 	bl	80002d0 <__aeabi_dsub>
 800a836:	4602      	mov	r2, r0
 800a838:	460b      	mov	r3, r1
 800a83a:	4630      	mov	r0, r6
 800a83c:	e9c4 2300 	strd	r2, r3, [r4]
 800a840:	4639      	mov	r1, r7
 800a842:	f7f5 fd45 	bl	80002d0 <__aeabi_dsub>
 800a846:	a394      	add	r3, pc, #592	; (adr r3, 800aa98 <__ieee754_rem_pio2+0x2f0>)
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	e7de      	b.n	800a80c <__ieee754_rem_pio2+0x64>
 800a84e:	f7f5 fd41 	bl	80002d4 <__adddf3>
 800a852:	45aa      	cmp	sl, r5
 800a854:	4606      	mov	r6, r0
 800a856:	460f      	mov	r7, r1
 800a858:	d016      	beq.n	800a888 <__ieee754_rem_pio2+0xe0>
 800a85a:	a38b      	add	r3, pc, #556	; (adr r3, 800aa88 <__ieee754_rem_pio2+0x2e0>)
 800a85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a860:	f7f5 fd38 	bl	80002d4 <__adddf3>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	4630      	mov	r0, r6
 800a86a:	e9c4 2300 	strd	r2, r3, [r4]
 800a86e:	4639      	mov	r1, r7
 800a870:	f7f5 fd2e 	bl	80002d0 <__aeabi_dsub>
 800a874:	a384      	add	r3, pc, #528	; (adr r3, 800aa88 <__ieee754_rem_pio2+0x2e0>)
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	f7f5 fd2b 	bl	80002d4 <__adddf3>
 800a87e:	f04f 35ff 	mov.w	r5, #4294967295
 800a882:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a886:	e7c6      	b.n	800a816 <__ieee754_rem_pio2+0x6e>
 800a888:	a381      	add	r3, pc, #516	; (adr r3, 800aa90 <__ieee754_rem_pio2+0x2e8>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	f7f5 fd21 	bl	80002d4 <__adddf3>
 800a892:	a381      	add	r3, pc, #516	; (adr r3, 800aa98 <__ieee754_rem_pio2+0x2f0>)
 800a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a898:	4606      	mov	r6, r0
 800a89a:	460f      	mov	r7, r1
 800a89c:	f7f5 fd1a 	bl	80002d4 <__adddf3>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	e9c4 2300 	strd	r2, r3, [r4]
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	f7f5 fd10 	bl	80002d0 <__aeabi_dsub>
 800a8b0:	a379      	add	r3, pc, #484	; (adr r3, 800aa98 <__ieee754_rem_pio2+0x2f0>)
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	e7e0      	b.n	800a87a <__ieee754_rem_pio2+0xd2>
 800a8b8:	4a82      	ldr	r2, [pc, #520]	; (800aac4 <__ieee754_rem_pio2+0x31c>)
 800a8ba:	4592      	cmp	sl, r2
 800a8bc:	f300 80d4 	bgt.w	800aa68 <__ieee754_rem_pio2+0x2c0>
 800a8c0:	f7fe fd92 	bl	80093e8 <fabs>
 800a8c4:	a376      	add	r3, pc, #472	; (adr r3, 800aaa0 <__ieee754_rem_pio2+0x2f8>)
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	4606      	mov	r6, r0
 800a8cc:	460f      	mov	r7, r1
 800a8ce:	f7f5 feb7 	bl	8000640 <__aeabi_dmul>
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	4b7c      	ldr	r3, [pc, #496]	; (800aac8 <__ieee754_rem_pio2+0x320>)
 800a8d6:	f7f5 fcfd 	bl	80002d4 <__adddf3>
 800a8da:	f7f6 f961 	bl	8000ba0 <__aeabi_d2iz>
 800a8de:	4605      	mov	r5, r0
 800a8e0:	f7f5 fe44 	bl	800056c <__aeabi_i2d>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8ec:	a364      	add	r3, pc, #400	; (adr r3, 800aa80 <__ieee754_rem_pio2+0x2d8>)
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	f7f5 fea5 	bl	8000640 <__aeabi_dmul>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	4639      	mov	r1, r7
 800a8fe:	f7f5 fce7 	bl	80002d0 <__aeabi_dsub>
 800a902:	a361      	add	r3, pc, #388	; (adr r3, 800aa88 <__ieee754_rem_pio2+0x2e0>)
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	4680      	mov	r8, r0
 800a90a:	4689      	mov	r9, r1
 800a90c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a910:	f7f5 fe96 	bl	8000640 <__aeabi_dmul>
 800a914:	2d1f      	cmp	r5, #31
 800a916:	4606      	mov	r6, r0
 800a918:	460f      	mov	r7, r1
 800a91a:	dc0e      	bgt.n	800a93a <__ieee754_rem_pio2+0x192>
 800a91c:	4b6b      	ldr	r3, [pc, #428]	; (800aacc <__ieee754_rem_pio2+0x324>)
 800a91e:	1e6a      	subs	r2, r5, #1
 800a920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a924:	4553      	cmp	r3, sl
 800a926:	d008      	beq.n	800a93a <__ieee754_rem_pio2+0x192>
 800a928:	4632      	mov	r2, r6
 800a92a:	463b      	mov	r3, r7
 800a92c:	4640      	mov	r0, r8
 800a92e:	4649      	mov	r1, r9
 800a930:	f7f5 fcce 	bl	80002d0 <__aeabi_dsub>
 800a934:	e9c4 0100 	strd	r0, r1, [r4]
 800a938:	e012      	b.n	800a960 <__ieee754_rem_pio2+0x1b8>
 800a93a:	463b      	mov	r3, r7
 800a93c:	4632      	mov	r2, r6
 800a93e:	4640      	mov	r0, r8
 800a940:	4649      	mov	r1, r9
 800a942:	f7f5 fcc5 	bl	80002d0 <__aeabi_dsub>
 800a946:	ea4f 532a 	mov.w	r3, sl, asr #20
 800a94a:	9305      	str	r3, [sp, #20]
 800a94c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a950:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800a954:	2b10      	cmp	r3, #16
 800a956:	dc1f      	bgt.n	800a998 <__ieee754_rem_pio2+0x1f0>
 800a958:	4602      	mov	r2, r0
 800a95a:	460b      	mov	r3, r1
 800a95c:	e9c4 2300 	strd	r2, r3, [r4]
 800a960:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800a964:	4640      	mov	r0, r8
 800a966:	4653      	mov	r3, sl
 800a968:	4649      	mov	r1, r9
 800a96a:	f7f5 fcb1 	bl	80002d0 <__aeabi_dsub>
 800a96e:	4632      	mov	r2, r6
 800a970:	463b      	mov	r3, r7
 800a972:	f7f5 fcad 	bl	80002d0 <__aeabi_dsub>
 800a976:	460b      	mov	r3, r1
 800a978:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a97c:	9904      	ldr	r1, [sp, #16]
 800a97e:	4602      	mov	r2, r0
 800a980:	2900      	cmp	r1, #0
 800a982:	f6bf af48 	bge.w	800a816 <__ieee754_rem_pio2+0x6e>
 800a986:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800a98a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a98e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a992:	60e3      	str	r3, [r4, #12]
 800a994:	426d      	negs	r5, r5
 800a996:	e73e      	b.n	800a816 <__ieee754_rem_pio2+0x6e>
 800a998:	a33d      	add	r3, pc, #244	; (adr r3, 800aa90 <__ieee754_rem_pio2+0x2e8>)
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9a2:	f7f5 fe4d 	bl	8000640 <__aeabi_dmul>
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	460f      	mov	r7, r1
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	f7f5 fc8d 	bl	80002d0 <__aeabi_dsub>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4682      	mov	sl, r0
 800a9bc:	468b      	mov	fp, r1
 800a9be:	4640      	mov	r0, r8
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	f7f5 fc85 	bl	80002d0 <__aeabi_dsub>
 800a9c6:	4632      	mov	r2, r6
 800a9c8:	463b      	mov	r3, r7
 800a9ca:	f7f5 fc81 	bl	80002d0 <__aeabi_dsub>
 800a9ce:	a332      	add	r3, pc, #200	; (adr r3, 800aa98 <__ieee754_rem_pio2+0x2f0>)
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	4606      	mov	r6, r0
 800a9d6:	460f      	mov	r7, r1
 800a9d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9dc:	f7f5 fe30 	bl	8000640 <__aeabi_dmul>
 800a9e0:	4632      	mov	r2, r6
 800a9e2:	463b      	mov	r3, r7
 800a9e4:	f7f5 fc74 	bl	80002d0 <__aeabi_dsub>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	460f      	mov	r7, r1
 800a9f0:	4650      	mov	r0, sl
 800a9f2:	4659      	mov	r1, fp
 800a9f4:	f7f5 fc6c 	bl	80002d0 <__aeabi_dsub>
 800a9f8:	9a05      	ldr	r2, [sp, #20]
 800a9fa:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	2b31      	cmp	r3, #49	; 0x31
 800aa02:	dc06      	bgt.n	800aa12 <__ieee754_rem_pio2+0x26a>
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	46d0      	mov	r8, sl
 800aa0a:	46d9      	mov	r9, fp
 800aa0c:	e9c4 2300 	strd	r2, r3, [r4]
 800aa10:	e7a6      	b.n	800a960 <__ieee754_rem_pio2+0x1b8>
 800aa12:	a325      	add	r3, pc, #148	; (adr r3, 800aaa8 <__ieee754_rem_pio2+0x300>)
 800aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa1c:	f7f5 fe10 	bl	8000640 <__aeabi_dmul>
 800aa20:	4606      	mov	r6, r0
 800aa22:	460f      	mov	r7, r1
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	4650      	mov	r0, sl
 800aa2a:	4659      	mov	r1, fp
 800aa2c:	f7f5 fc50 	bl	80002d0 <__aeabi_dsub>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	4680      	mov	r8, r0
 800aa36:	4689      	mov	r9, r1
 800aa38:	4650      	mov	r0, sl
 800aa3a:	4659      	mov	r1, fp
 800aa3c:	f7f5 fc48 	bl	80002d0 <__aeabi_dsub>
 800aa40:	4632      	mov	r2, r6
 800aa42:	463b      	mov	r3, r7
 800aa44:	f7f5 fc44 	bl	80002d0 <__aeabi_dsub>
 800aa48:	a319      	add	r3, pc, #100	; (adr r3, 800aab0 <__ieee754_rem_pio2+0x308>)
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	4606      	mov	r6, r0
 800aa50:	460f      	mov	r7, r1
 800aa52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa56:	f7f5 fdf3 	bl	8000640 <__aeabi_dmul>
 800aa5a:	4632      	mov	r2, r6
 800aa5c:	463b      	mov	r3, r7
 800aa5e:	f7f5 fc37 	bl	80002d0 <__aeabi_dsub>
 800aa62:	4606      	mov	r6, r0
 800aa64:	460f      	mov	r7, r1
 800aa66:	e75f      	b.n	800a928 <__ieee754_rem_pio2+0x180>
 800aa68:	4a19      	ldr	r2, [pc, #100]	; (800aad0 <__ieee754_rem_pio2+0x328>)
 800aa6a:	4592      	cmp	sl, r2
 800aa6c:	dd32      	ble.n	800aad4 <__ieee754_rem_pio2+0x32c>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	f7f5 fc2d 	bl	80002d0 <__aeabi_dsub>
 800aa76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa7a:	e9c4 0100 	strd	r0, r1, [r4]
 800aa7e:	e6a3      	b.n	800a7c8 <__ieee754_rem_pio2+0x20>
 800aa80:	54400000 	.word	0x54400000
 800aa84:	3ff921fb 	.word	0x3ff921fb
 800aa88:	1a626331 	.word	0x1a626331
 800aa8c:	3dd0b461 	.word	0x3dd0b461
 800aa90:	1a600000 	.word	0x1a600000
 800aa94:	3dd0b461 	.word	0x3dd0b461
 800aa98:	2e037073 	.word	0x2e037073
 800aa9c:	3ba3198a 	.word	0x3ba3198a
 800aaa0:	6dc9c883 	.word	0x6dc9c883
 800aaa4:	3fe45f30 	.word	0x3fe45f30
 800aaa8:	2e000000 	.word	0x2e000000
 800aaac:	3ba3198a 	.word	0x3ba3198a
 800aab0:	252049c1 	.word	0x252049c1
 800aab4:	397b839a 	.word	0x397b839a
 800aab8:	3fe921fb 	.word	0x3fe921fb
 800aabc:	4002d97b 	.word	0x4002d97b
 800aac0:	3ff921fb 	.word	0x3ff921fb
 800aac4:	413921fb 	.word	0x413921fb
 800aac8:	3fe00000 	.word	0x3fe00000
 800aacc:	0800b950 	.word	0x0800b950
 800aad0:	7fefffff 	.word	0x7fefffff
 800aad4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800aad8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800aadc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800aae0:	460f      	mov	r7, r1
 800aae2:	4606      	mov	r6, r0
 800aae4:	f7f6 f85c 	bl	8000ba0 <__aeabi_d2iz>
 800aae8:	f7f5 fd40 	bl	800056c <__aeabi_i2d>
 800aaec:	4602      	mov	r2, r0
 800aaee:	460b      	mov	r3, r1
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	4639      	mov	r1, r7
 800aaf4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aaf8:	f7f5 fbea 	bl	80002d0 <__aeabi_dsub>
 800aafc:	2200      	movs	r2, #0
 800aafe:	4b22      	ldr	r3, [pc, #136]	; (800ab88 <__ieee754_rem_pio2+0x3e0>)
 800ab00:	f7f5 fd9e 	bl	8000640 <__aeabi_dmul>
 800ab04:	460f      	mov	r7, r1
 800ab06:	4606      	mov	r6, r0
 800ab08:	f7f6 f84a 	bl	8000ba0 <__aeabi_d2iz>
 800ab0c:	f7f5 fd2e 	bl	800056c <__aeabi_i2d>
 800ab10:	4602      	mov	r2, r0
 800ab12:	460b      	mov	r3, r1
 800ab14:	4630      	mov	r0, r6
 800ab16:	4639      	mov	r1, r7
 800ab18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab1c:	f7f5 fbd8 	bl	80002d0 <__aeabi_dsub>
 800ab20:	2200      	movs	r2, #0
 800ab22:	4b19      	ldr	r3, [pc, #100]	; (800ab88 <__ieee754_rem_pio2+0x3e0>)
 800ab24:	f7f5 fd8c 	bl	8000640 <__aeabi_dmul>
 800ab28:	f04f 0803 	mov.w	r8, #3
 800ab2c:	2600      	movs	r6, #0
 800ab2e:	2700      	movs	r7, #0
 800ab30:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ab34:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ab38:	4632      	mov	r2, r6
 800ab3a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ab3e:	463b      	mov	r3, r7
 800ab40:	46c2      	mov	sl, r8
 800ab42:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab46:	f7f5 ffe3 	bl	8000b10 <__aeabi_dcmpeq>
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	d1f4      	bne.n	800ab38 <__ieee754_rem_pio2+0x390>
 800ab4e:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <__ieee754_rem_pio2+0x3e4>)
 800ab50:	462a      	mov	r2, r5
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	2302      	movs	r3, #2
 800ab56:	4621      	mov	r1, r4
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	a806      	add	r0, sp, #24
 800ab5c:	4653      	mov	r3, sl
 800ab5e:	f000 f8bd 	bl	800acdc <__kernel_rem_pio2>
 800ab62:	9b04      	ldr	r3, [sp, #16]
 800ab64:	4605      	mov	r5, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f6bf ae55 	bge.w	800a816 <__ieee754_rem_pio2+0x6e>
 800ab6c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ab70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab74:	e9c4 2300 	strd	r2, r3, [r4]
 800ab78:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ab7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab80:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ab84:	e706      	b.n	800a994 <__ieee754_rem_pio2+0x1ec>
 800ab86:	bf00      	nop
 800ab88:	41700000 	.word	0x41700000
 800ab8c:	0800b9d0 	.word	0x0800b9d0

0800ab90 <scalbn>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	4616      	mov	r6, r2
 800ab94:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ab98:	4604      	mov	r4, r0
 800ab9a:	460d      	mov	r5, r1
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	b992      	cbnz	r2, 800abc6 <scalbn+0x36>
 800aba0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aba4:	4303      	orrs	r3, r0
 800aba6:	d03c      	beq.n	800ac22 <scalbn+0x92>
 800aba8:	4b31      	ldr	r3, [pc, #196]	; (800ac70 <scalbn+0xe0>)
 800abaa:	2200      	movs	r2, #0
 800abac:	f7f5 fd48 	bl	8000640 <__aeabi_dmul>
 800abb0:	4b30      	ldr	r3, [pc, #192]	; (800ac74 <scalbn+0xe4>)
 800abb2:	4604      	mov	r4, r0
 800abb4:	429e      	cmp	r6, r3
 800abb6:	460d      	mov	r5, r1
 800abb8:	da0f      	bge.n	800abda <scalbn+0x4a>
 800abba:	a329      	add	r3, pc, #164	; (adr r3, 800ac60 <scalbn+0xd0>)
 800abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc0:	f7f5 fd3e 	bl	8000640 <__aeabi_dmul>
 800abc4:	e006      	b.n	800abd4 <scalbn+0x44>
 800abc6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800abca:	42ba      	cmp	r2, r7
 800abcc:	d109      	bne.n	800abe2 <scalbn+0x52>
 800abce:	4602      	mov	r2, r0
 800abd0:	f7f5 fb80 	bl	80002d4 <__adddf3>
 800abd4:	4604      	mov	r4, r0
 800abd6:	460d      	mov	r5, r1
 800abd8:	e023      	b.n	800ac22 <scalbn+0x92>
 800abda:	460b      	mov	r3, r1
 800abdc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800abe0:	3a36      	subs	r2, #54	; 0x36
 800abe2:	f24c 3150 	movw	r1, #50000	; 0xc350
 800abe6:	428e      	cmp	r6, r1
 800abe8:	dd0e      	ble.n	800ac08 <scalbn+0x78>
 800abea:	a31f      	add	r3, pc, #124	; (adr r3, 800ac68 <scalbn+0xd8>)
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800abf4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800abf8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800abfc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ac00:	481d      	ldr	r0, [pc, #116]	; (800ac78 <scalbn+0xe8>)
 800ac02:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ac06:	e7db      	b.n	800abc0 <scalbn+0x30>
 800ac08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ac0c:	4432      	add	r2, r6
 800ac0e:	428a      	cmp	r2, r1
 800ac10:	dceb      	bgt.n	800abea <scalbn+0x5a>
 800ac12:	2a00      	cmp	r2, #0
 800ac14:	dd08      	ble.n	800ac28 <scalbn+0x98>
 800ac16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac1a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac1e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac22:	4620      	mov	r0, r4
 800ac24:	4629      	mov	r1, r5
 800ac26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac28:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ac2c:	da0c      	bge.n	800ac48 <scalbn+0xb8>
 800ac2e:	a30c      	add	r3, pc, #48	; (adr r3, 800ac60 <scalbn+0xd0>)
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ac38:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ac3c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800ac40:	480e      	ldr	r0, [pc, #56]	; (800ac7c <scalbn+0xec>)
 800ac42:	f041 011f 	orr.w	r1, r1, #31
 800ac46:	e7bb      	b.n	800abc0 <scalbn+0x30>
 800ac48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac4c:	3236      	adds	r2, #54	; 0x36
 800ac4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac56:	4620      	mov	r0, r4
 800ac58:	4629      	mov	r1, r5
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	4b08      	ldr	r3, [pc, #32]	; (800ac80 <scalbn+0xf0>)
 800ac5e:	e7af      	b.n	800abc0 <scalbn+0x30>
 800ac60:	c2f8f359 	.word	0xc2f8f359
 800ac64:	01a56e1f 	.word	0x01a56e1f
 800ac68:	8800759c 	.word	0x8800759c
 800ac6c:	7e37e43c 	.word	0x7e37e43c
 800ac70:	43500000 	.word	0x43500000
 800ac74:	ffff3cb0 	.word	0xffff3cb0
 800ac78:	8800759c 	.word	0x8800759c
 800ac7c:	c2f8f359 	.word	0xc2f8f359
 800ac80:	3c900000 	.word	0x3c900000

0800ac84 <with_errno>:
 800ac84:	b570      	push	{r4, r5, r6, lr}
 800ac86:	4604      	mov	r4, r0
 800ac88:	460d      	mov	r5, r1
 800ac8a:	4616      	mov	r6, r2
 800ac8c:	f7fa fe00 	bl	8005890 <__errno>
 800ac90:	4629      	mov	r1, r5
 800ac92:	6006      	str	r6, [r0, #0]
 800ac94:	4620      	mov	r0, r4
 800ac96:	bd70      	pop	{r4, r5, r6, pc}

0800ac98 <xflow>:
 800ac98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac9a:	4615      	mov	r5, r2
 800ac9c:	461c      	mov	r4, r3
 800ac9e:	b180      	cbz	r0, 800acc2 <xflow+0x2a>
 800aca0:	4610      	mov	r0, r2
 800aca2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aca6:	e9cd 0100 	strd	r0, r1, [sp]
 800acaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acae:	4628      	mov	r0, r5
 800acb0:	4621      	mov	r1, r4
 800acb2:	f7f5 fcc5 	bl	8000640 <__aeabi_dmul>
 800acb6:	2222      	movs	r2, #34	; 0x22
 800acb8:	b003      	add	sp, #12
 800acba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acbe:	f7ff bfe1 	b.w	800ac84 <with_errno>
 800acc2:	4610      	mov	r0, r2
 800acc4:	4619      	mov	r1, r3
 800acc6:	e7ee      	b.n	800aca6 <xflow+0xe>

0800acc8 <__math_uflow>:
 800acc8:	2200      	movs	r2, #0
 800acca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800acce:	f7ff bfe3 	b.w	800ac98 <xflow>

0800acd2 <__math_oflow>:
 800acd2:	2200      	movs	r2, #0
 800acd4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800acd8:	f7ff bfde 	b.w	800ac98 <xflow>

0800acdc <__kernel_rem_pio2>:
 800acdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ace4:	9308      	str	r3, [sp, #32]
 800ace6:	9106      	str	r1, [sp, #24]
 800ace8:	4bb6      	ldr	r3, [pc, #728]	; (800afc4 <__kernel_rem_pio2+0x2e8>)
 800acea:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800acec:	f112 0f14 	cmn.w	r2, #20
 800acf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800acf4:	bfa8      	it	ge
 800acf6:	1ed4      	subge	r4, r2, #3
 800acf8:	9302      	str	r3, [sp, #8]
 800acfa:	9b08      	ldr	r3, [sp, #32]
 800acfc:	bfb8      	it	lt
 800acfe:	2400      	movlt	r4, #0
 800ad00:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad04:	9307      	str	r3, [sp, #28]
 800ad06:	bfa4      	itt	ge
 800ad08:	2318      	movge	r3, #24
 800ad0a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ad0e:	f06f 0317 	mvn.w	r3, #23
 800ad12:	fb04 3303 	mla	r3, r4, r3, r3
 800ad16:	eb03 0b02 	add.w	fp, r3, r2
 800ad1a:	9a07      	ldr	r2, [sp, #28]
 800ad1c:	9b02      	ldr	r3, [sp, #8]
 800ad1e:	1aa7      	subs	r7, r4, r2
 800ad20:	eb03 0802 	add.w	r8, r3, r2
 800ad24:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ad26:	2500      	movs	r5, #0
 800ad28:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2300      	movs	r3, #0
 800ad30:	9009      	str	r0, [sp, #36]	; 0x24
 800ad32:	ae20      	add	r6, sp, #128	; 0x80
 800ad34:	4545      	cmp	r5, r8
 800ad36:	dd14      	ble.n	800ad62 <__kernel_rem_pio2+0x86>
 800ad38:	f04f 0800 	mov.w	r8, #0
 800ad3c:	9a08      	ldr	r2, [sp, #32]
 800ad3e:	ab20      	add	r3, sp, #128	; 0x80
 800ad40:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800ad44:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800ad48:	9b02      	ldr	r3, [sp, #8]
 800ad4a:	4598      	cmp	r8, r3
 800ad4c:	dc35      	bgt.n	800adba <__kernel_rem_pio2+0xde>
 800ad4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad50:	2200      	movs	r2, #0
 800ad52:	f1a3 0908 	sub.w	r9, r3, #8
 800ad56:	2300      	movs	r3, #0
 800ad58:	462f      	mov	r7, r5
 800ad5a:	2600      	movs	r6, #0
 800ad5c:	e9cd 2300 	strd	r2, r3, [sp]
 800ad60:	e01f      	b.n	800ada2 <__kernel_rem_pio2+0xc6>
 800ad62:	42ef      	cmn	r7, r5
 800ad64:	d40b      	bmi.n	800ad7e <__kernel_rem_pio2+0xa2>
 800ad66:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ad6a:	e9cd 2300 	strd	r2, r3, [sp]
 800ad6e:	f7f5 fbfd 	bl	800056c <__aeabi_i2d>
 800ad72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad76:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ad7a:	3501      	adds	r5, #1
 800ad7c:	e7da      	b.n	800ad34 <__kernel_rem_pio2+0x58>
 800ad7e:	4610      	mov	r0, r2
 800ad80:	4619      	mov	r1, r3
 800ad82:	e7f8      	b.n	800ad76 <__kernel_rem_pio2+0x9a>
 800ad84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad88:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800ad8c:	f7f5 fc58 	bl	8000640 <__aeabi_dmul>
 800ad90:	4602      	mov	r2, r0
 800ad92:	460b      	mov	r3, r1
 800ad94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad98:	f7f5 fa9c 	bl	80002d4 <__adddf3>
 800ad9c:	e9cd 0100 	strd	r0, r1, [sp]
 800ada0:	3601      	adds	r6, #1
 800ada2:	9b07      	ldr	r3, [sp, #28]
 800ada4:	3f08      	subs	r7, #8
 800ada6:	429e      	cmp	r6, r3
 800ada8:	ddec      	ble.n	800ad84 <__kernel_rem_pio2+0xa8>
 800adaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adae:	f108 0801 	add.w	r8, r8, #1
 800adb2:	e8ea 2302 	strd	r2, r3, [sl], #8
 800adb6:	3508      	adds	r5, #8
 800adb8:	e7c6      	b.n	800ad48 <__kernel_rem_pio2+0x6c>
 800adba:	9b02      	ldr	r3, [sp, #8]
 800adbc:	aa0c      	add	r2, sp, #48	; 0x30
 800adbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adc2:	930b      	str	r3, [sp, #44]	; 0x2c
 800adc4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800adc6:	9e02      	ldr	r6, [sp, #8]
 800adc8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800adcc:	930a      	str	r3, [sp, #40]	; 0x28
 800adce:	ab98      	add	r3, sp, #608	; 0x260
 800add0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800add4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800add8:	ab70      	add	r3, sp, #448	; 0x1c0
 800adda:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800adde:	46d0      	mov	r8, sl
 800ade0:	46b1      	mov	r9, r6
 800ade2:	af0c      	add	r7, sp, #48	; 0x30
 800ade4:	9700      	str	r7, [sp, #0]
 800ade6:	f1b9 0f00 	cmp.w	r9, #0
 800adea:	f1a8 0808 	sub.w	r8, r8, #8
 800adee:	dc70      	bgt.n	800aed2 <__kernel_rem_pio2+0x1f6>
 800adf0:	465a      	mov	r2, fp
 800adf2:	4620      	mov	r0, r4
 800adf4:	4629      	mov	r1, r5
 800adf6:	f7ff fecb 	bl	800ab90 <scalbn>
 800adfa:	2200      	movs	r2, #0
 800adfc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ae00:	4604      	mov	r4, r0
 800ae02:	460d      	mov	r5, r1
 800ae04:	f7f5 fc1c 	bl	8000640 <__aeabi_dmul>
 800ae08:	f000 faaa 	bl	800b360 <floor>
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	4b6e      	ldr	r3, [pc, #440]	; (800afc8 <__kernel_rem_pio2+0x2ec>)
 800ae10:	f7f5 fc16 	bl	8000640 <__aeabi_dmul>
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	4620      	mov	r0, r4
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	f7f5 fa58 	bl	80002d0 <__aeabi_dsub>
 800ae20:	460d      	mov	r5, r1
 800ae22:	4604      	mov	r4, r0
 800ae24:	f7f5 febc 	bl	8000ba0 <__aeabi_d2iz>
 800ae28:	9004      	str	r0, [sp, #16]
 800ae2a:	f7f5 fb9f 	bl	800056c <__aeabi_i2d>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4620      	mov	r0, r4
 800ae34:	4629      	mov	r1, r5
 800ae36:	f7f5 fa4b 	bl	80002d0 <__aeabi_dsub>
 800ae3a:	f1bb 0f00 	cmp.w	fp, #0
 800ae3e:	4680      	mov	r8, r0
 800ae40:	4689      	mov	r9, r1
 800ae42:	dd6f      	ble.n	800af24 <__kernel_rem_pio2+0x248>
 800ae44:	1e71      	subs	r1, r6, #1
 800ae46:	ab0c      	add	r3, sp, #48	; 0x30
 800ae48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae4c:	9c04      	ldr	r4, [sp, #16]
 800ae4e:	f1cb 0018 	rsb	r0, fp, #24
 800ae52:	fa43 f200 	asr.w	r2, r3, r0
 800ae56:	4414      	add	r4, r2
 800ae58:	4082      	lsls	r2, r0
 800ae5a:	1a9b      	subs	r3, r3, r2
 800ae5c:	aa0c      	add	r2, sp, #48	; 0x30
 800ae5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ae62:	f1cb 0217 	rsb	r2, fp, #23
 800ae66:	9404      	str	r4, [sp, #16]
 800ae68:	4113      	asrs	r3, r2
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	9b00      	ldr	r3, [sp, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	dd66      	ble.n	800af40 <__kernel_rem_pio2+0x264>
 800ae72:	2200      	movs	r2, #0
 800ae74:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ae78:	4614      	mov	r4, r2
 800ae7a:	9b04      	ldr	r3, [sp, #16]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	9304      	str	r3, [sp, #16]
 800ae80:	4296      	cmp	r6, r2
 800ae82:	f300 80ad 	bgt.w	800afe0 <__kernel_rem_pio2+0x304>
 800ae86:	f1bb 0f00 	cmp.w	fp, #0
 800ae8a:	dd07      	ble.n	800ae9c <__kernel_rem_pio2+0x1c0>
 800ae8c:	f1bb 0f01 	cmp.w	fp, #1
 800ae90:	f000 80b5 	beq.w	800affe <__kernel_rem_pio2+0x322>
 800ae94:	f1bb 0f02 	cmp.w	fp, #2
 800ae98:	f000 80bb 	beq.w	800b012 <__kernel_rem_pio2+0x336>
 800ae9c:	9b00      	ldr	r3, [sp, #0]
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d14e      	bne.n	800af40 <__kernel_rem_pio2+0x264>
 800aea2:	4642      	mov	r2, r8
 800aea4:	464b      	mov	r3, r9
 800aea6:	2000      	movs	r0, #0
 800aea8:	4948      	ldr	r1, [pc, #288]	; (800afcc <__kernel_rem_pio2+0x2f0>)
 800aeaa:	f7f5 fa11 	bl	80002d0 <__aeabi_dsub>
 800aeae:	4680      	mov	r8, r0
 800aeb0:	4689      	mov	r9, r1
 800aeb2:	2c00      	cmp	r4, #0
 800aeb4:	d044      	beq.n	800af40 <__kernel_rem_pio2+0x264>
 800aeb6:	465a      	mov	r2, fp
 800aeb8:	2000      	movs	r0, #0
 800aeba:	4944      	ldr	r1, [pc, #272]	; (800afcc <__kernel_rem_pio2+0x2f0>)
 800aebc:	f7ff fe68 	bl	800ab90 <scalbn>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	4640      	mov	r0, r8
 800aec6:	4649      	mov	r1, r9
 800aec8:	f7f5 fa02 	bl	80002d0 <__aeabi_dsub>
 800aecc:	4680      	mov	r8, r0
 800aece:	4689      	mov	r9, r1
 800aed0:	e036      	b.n	800af40 <__kernel_rem_pio2+0x264>
 800aed2:	2200      	movs	r2, #0
 800aed4:	4b3e      	ldr	r3, [pc, #248]	; (800afd0 <__kernel_rem_pio2+0x2f4>)
 800aed6:	4620      	mov	r0, r4
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7f5 fbb1 	bl	8000640 <__aeabi_dmul>
 800aede:	f7f5 fe5f 	bl	8000ba0 <__aeabi_d2iz>
 800aee2:	f7f5 fb43 	bl	800056c <__aeabi_i2d>
 800aee6:	4602      	mov	r2, r0
 800aee8:	460b      	mov	r3, r1
 800aeea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aeee:	2200      	movs	r2, #0
 800aef0:	4b38      	ldr	r3, [pc, #224]	; (800afd4 <__kernel_rem_pio2+0x2f8>)
 800aef2:	f7f5 fba5 	bl	8000640 <__aeabi_dmul>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	4620      	mov	r0, r4
 800aefc:	4629      	mov	r1, r5
 800aefe:	f7f5 f9e7 	bl	80002d0 <__aeabi_dsub>
 800af02:	f7f5 fe4d 	bl	8000ba0 <__aeabi_d2iz>
 800af06:	9b00      	ldr	r3, [sp, #0]
 800af08:	f109 39ff 	add.w	r9, r9, #4294967295
 800af0c:	f843 0b04 	str.w	r0, [r3], #4
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af16:	e9d8 2300 	ldrd	r2, r3, [r8]
 800af1a:	f7f5 f9db 	bl	80002d4 <__adddf3>
 800af1e:	4604      	mov	r4, r0
 800af20:	460d      	mov	r5, r1
 800af22:	e760      	b.n	800ade6 <__kernel_rem_pio2+0x10a>
 800af24:	d105      	bne.n	800af32 <__kernel_rem_pio2+0x256>
 800af26:	1e73      	subs	r3, r6, #1
 800af28:	aa0c      	add	r2, sp, #48	; 0x30
 800af2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af2e:	15db      	asrs	r3, r3, #23
 800af30:	e79b      	b.n	800ae6a <__kernel_rem_pio2+0x18e>
 800af32:	2200      	movs	r2, #0
 800af34:	4b28      	ldr	r3, [pc, #160]	; (800afd8 <__kernel_rem_pio2+0x2fc>)
 800af36:	f7f5 fe09 	bl	8000b4c <__aeabi_dcmpge>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d13e      	bne.n	800afbc <__kernel_rem_pio2+0x2e0>
 800af3e:	9000      	str	r0, [sp, #0]
 800af40:	2200      	movs	r2, #0
 800af42:	2300      	movs	r3, #0
 800af44:	4640      	mov	r0, r8
 800af46:	4649      	mov	r1, r9
 800af48:	f7f5 fde2 	bl	8000b10 <__aeabi_dcmpeq>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	f000 80b2 	beq.w	800b0b6 <__kernel_rem_pio2+0x3da>
 800af52:	1e74      	subs	r4, r6, #1
 800af54:	4623      	mov	r3, r4
 800af56:	2200      	movs	r2, #0
 800af58:	9902      	ldr	r1, [sp, #8]
 800af5a:	428b      	cmp	r3, r1
 800af5c:	da60      	bge.n	800b020 <__kernel_rem_pio2+0x344>
 800af5e:	2a00      	cmp	r2, #0
 800af60:	d075      	beq.n	800b04e <__kernel_rem_pio2+0x372>
 800af62:	ab0c      	add	r3, sp, #48	; 0x30
 800af64:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800af68:	f1ab 0b18 	sub.w	fp, fp, #24
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f000 80a0 	beq.w	800b0b2 <__kernel_rem_pio2+0x3d6>
 800af72:	465a      	mov	r2, fp
 800af74:	2000      	movs	r0, #0
 800af76:	4915      	ldr	r1, [pc, #84]	; (800afcc <__kernel_rem_pio2+0x2f0>)
 800af78:	f7ff fe0a 	bl	800ab90 <scalbn>
 800af7c:	46a2      	mov	sl, r4
 800af7e:	4606      	mov	r6, r0
 800af80:	460f      	mov	r7, r1
 800af82:	f04f 0800 	mov.w	r8, #0
 800af86:	ab70      	add	r3, sp, #448	; 0x1c0
 800af88:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800afd0 <__kernel_rem_pio2+0x2f4>
 800af8c:	00e5      	lsls	r5, r4, #3
 800af8e:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800af92:	f1ba 0f00 	cmp.w	sl, #0
 800af96:	f280 80c4 	bge.w	800b122 <__kernel_rem_pio2+0x446>
 800af9a:	4626      	mov	r6, r4
 800af9c:	2e00      	cmp	r6, #0
 800af9e:	f2c0 80f6 	blt.w	800b18e <__kernel_rem_pio2+0x4b2>
 800afa2:	4b0e      	ldr	r3, [pc, #56]	; (800afdc <__kernel_rem_pio2+0x300>)
 800afa4:	f04f 0a00 	mov.w	sl, #0
 800afa8:	9307      	str	r3, [sp, #28]
 800afaa:	ab70      	add	r3, sp, #448	; 0x1c0
 800afac:	f04f 0b00 	mov.w	fp, #0
 800afb0:	f04f 0800 	mov.w	r8, #0
 800afb4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800afb8:	1ba7      	subs	r7, r4, r6
 800afba:	e0dc      	b.n	800b176 <__kernel_rem_pio2+0x49a>
 800afbc:	2302      	movs	r3, #2
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	e757      	b.n	800ae72 <__kernel_rem_pio2+0x196>
 800afc2:	bf00      	nop
 800afc4:	0800bb18 	.word	0x0800bb18
 800afc8:	40200000 	.word	0x40200000
 800afcc:	3ff00000 	.word	0x3ff00000
 800afd0:	3e700000 	.word	0x3e700000
 800afd4:	41700000 	.word	0x41700000
 800afd8:	3fe00000 	.word	0x3fe00000
 800afdc:	0800bad8 	.word	0x0800bad8
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	b944      	cbnz	r4, 800aff6 <__kernel_rem_pio2+0x31a>
 800afe4:	b11b      	cbz	r3, 800afee <__kernel_rem_pio2+0x312>
 800afe6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800afea:	603b      	str	r3, [r7, #0]
 800afec:	2301      	movs	r3, #1
 800afee:	461c      	mov	r4, r3
 800aff0:	3201      	adds	r2, #1
 800aff2:	3704      	adds	r7, #4
 800aff4:	e744      	b.n	800ae80 <__kernel_rem_pio2+0x1a4>
 800aff6:	1acb      	subs	r3, r1, r3
 800aff8:	603b      	str	r3, [r7, #0]
 800affa:	4623      	mov	r3, r4
 800affc:	e7f7      	b.n	800afee <__kernel_rem_pio2+0x312>
 800affe:	1e72      	subs	r2, r6, #1
 800b000:	ab0c      	add	r3, sp, #48	; 0x30
 800b002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b006:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b00a:	a90c      	add	r1, sp, #48	; 0x30
 800b00c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b010:	e744      	b.n	800ae9c <__kernel_rem_pio2+0x1c0>
 800b012:	1e72      	subs	r2, r6, #1
 800b014:	ab0c      	add	r3, sp, #48	; 0x30
 800b016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b01e:	e7f4      	b.n	800b00a <__kernel_rem_pio2+0x32e>
 800b020:	a90c      	add	r1, sp, #48	; 0x30
 800b022:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b026:	3b01      	subs	r3, #1
 800b028:	430a      	orrs	r2, r1
 800b02a:	e795      	b.n	800af58 <__kernel_rem_pio2+0x27c>
 800b02c:	3301      	adds	r3, #1
 800b02e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b032:	2900      	cmp	r1, #0
 800b034:	d0fa      	beq.n	800b02c <__kernel_rem_pio2+0x350>
 800b036:	9a08      	ldr	r2, [sp, #32]
 800b038:	a920      	add	r1, sp, #128	; 0x80
 800b03a:	18b2      	adds	r2, r6, r2
 800b03c:	f106 0801 	add.w	r8, r6, #1
 800b040:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800b044:	18f4      	adds	r4, r6, r3
 800b046:	4544      	cmp	r4, r8
 800b048:	da04      	bge.n	800b054 <__kernel_rem_pio2+0x378>
 800b04a:	4626      	mov	r6, r4
 800b04c:	e6bf      	b.n	800adce <__kernel_rem_pio2+0xf2>
 800b04e:	2301      	movs	r3, #1
 800b050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b052:	e7ec      	b.n	800b02e <__kernel_rem_pio2+0x352>
 800b054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b056:	f04f 0900 	mov.w	r9, #0
 800b05a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b05e:	f7f5 fa85 	bl	800056c <__aeabi_i2d>
 800b062:	2600      	movs	r6, #0
 800b064:	2700      	movs	r7, #0
 800b066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b068:	e9c5 0100 	strd	r0, r1, [r5]
 800b06c:	3b08      	subs	r3, #8
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	9504      	str	r5, [sp, #16]
 800b072:	9b07      	ldr	r3, [sp, #28]
 800b074:	4599      	cmp	r9, r3
 800b076:	dd05      	ble.n	800b084 <__kernel_rem_pio2+0x3a8>
 800b078:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800b07c:	f108 0801 	add.w	r8, r8, #1
 800b080:	3508      	adds	r5, #8
 800b082:	e7e0      	b.n	800b046 <__kernel_rem_pio2+0x36a>
 800b084:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b088:	9900      	ldr	r1, [sp, #0]
 800b08a:	f109 0901 	add.w	r9, r9, #1
 800b08e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800b092:	9100      	str	r1, [sp, #0]
 800b094:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800b098:	f8cd c010 	str.w	ip, [sp, #16]
 800b09c:	f7f5 fad0 	bl	8000640 <__aeabi_dmul>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	4639      	mov	r1, r7
 800b0a8:	f7f5 f914 	bl	80002d4 <__adddf3>
 800b0ac:	4606      	mov	r6, r0
 800b0ae:	460f      	mov	r7, r1
 800b0b0:	e7df      	b.n	800b072 <__kernel_rem_pio2+0x396>
 800b0b2:	3c01      	subs	r4, #1
 800b0b4:	e755      	b.n	800af62 <__kernel_rem_pio2+0x286>
 800b0b6:	f1cb 0200 	rsb	r2, fp, #0
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	4649      	mov	r1, r9
 800b0be:	f7ff fd67 	bl	800ab90 <scalbn>
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	4ba3      	ldr	r3, [pc, #652]	; (800b354 <__kernel_rem_pio2+0x678>)
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	460d      	mov	r5, r1
 800b0ca:	f7f5 fd3f 	bl	8000b4c <__aeabi_dcmpge>
 800b0ce:	b1f8      	cbz	r0, 800b110 <__kernel_rem_pio2+0x434>
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4ba1      	ldr	r3, [pc, #644]	; (800b358 <__kernel_rem_pio2+0x67c>)
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	4629      	mov	r1, r5
 800b0d8:	f7f5 fab2 	bl	8000640 <__aeabi_dmul>
 800b0dc:	f7f5 fd60 	bl	8000ba0 <__aeabi_d2iz>
 800b0e0:	4607      	mov	r7, r0
 800b0e2:	f7f5 fa43 	bl	800056c <__aeabi_i2d>
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	4b9a      	ldr	r3, [pc, #616]	; (800b354 <__kernel_rem_pio2+0x678>)
 800b0ea:	f7f5 faa9 	bl	8000640 <__aeabi_dmul>
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f7f5 f8eb 	bl	80002d0 <__aeabi_dsub>
 800b0fa:	f7f5 fd51 	bl	8000ba0 <__aeabi_d2iz>
 800b0fe:	1c74      	adds	r4, r6, #1
 800b100:	ab0c      	add	r3, sp, #48	; 0x30
 800b102:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b106:	f10b 0b18 	add.w	fp, fp, #24
 800b10a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800b10e:	e730      	b.n	800af72 <__kernel_rem_pio2+0x296>
 800b110:	4620      	mov	r0, r4
 800b112:	4629      	mov	r1, r5
 800b114:	f7f5 fd44 	bl	8000ba0 <__aeabi_d2iz>
 800b118:	ab0c      	add	r3, sp, #48	; 0x30
 800b11a:	4634      	mov	r4, r6
 800b11c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b120:	e727      	b.n	800af72 <__kernel_rem_pio2+0x296>
 800b122:	ab0c      	add	r3, sp, #48	; 0x30
 800b124:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b128:	f7f5 fa20 	bl	800056c <__aeabi_i2d>
 800b12c:	4632      	mov	r2, r6
 800b12e:	463b      	mov	r3, r7
 800b130:	f7f5 fa86 	bl	8000640 <__aeabi_dmul>
 800b134:	4642      	mov	r2, r8
 800b136:	e86b 0102 	strd	r0, r1, [fp], #-8
 800b13a:	464b      	mov	r3, r9
 800b13c:	4630      	mov	r0, r6
 800b13e:	4639      	mov	r1, r7
 800b140:	f7f5 fa7e 	bl	8000640 <__aeabi_dmul>
 800b144:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b148:	4606      	mov	r6, r0
 800b14a:	460f      	mov	r7, r1
 800b14c:	e721      	b.n	800af92 <__kernel_rem_pio2+0x2b6>
 800b14e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b152:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b156:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800b15a:	f8cd c01c 	str.w	ip, [sp, #28]
 800b15e:	f7f5 fa6f 	bl	8000640 <__aeabi_dmul>
 800b162:	4602      	mov	r2, r0
 800b164:	460b      	mov	r3, r1
 800b166:	4650      	mov	r0, sl
 800b168:	4659      	mov	r1, fp
 800b16a:	f7f5 f8b3 	bl	80002d4 <__adddf3>
 800b16e:	4682      	mov	sl, r0
 800b170:	468b      	mov	fp, r1
 800b172:	f108 0801 	add.w	r8, r8, #1
 800b176:	9b02      	ldr	r3, [sp, #8]
 800b178:	4598      	cmp	r8, r3
 800b17a:	dc01      	bgt.n	800b180 <__kernel_rem_pio2+0x4a4>
 800b17c:	45b8      	cmp	r8, r7
 800b17e:	dde6      	ble.n	800b14e <__kernel_rem_pio2+0x472>
 800b180:	ab48      	add	r3, sp, #288	; 0x120
 800b182:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b186:	e9c7 ab00 	strd	sl, fp, [r7]
 800b18a:	3e01      	subs	r6, #1
 800b18c:	e706      	b.n	800af9c <__kernel_rem_pio2+0x2c0>
 800b18e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b190:	2b02      	cmp	r3, #2
 800b192:	dc09      	bgt.n	800b1a8 <__kernel_rem_pio2+0x4cc>
 800b194:	2b00      	cmp	r3, #0
 800b196:	dc32      	bgt.n	800b1fe <__kernel_rem_pio2+0x522>
 800b198:	d058      	beq.n	800b24c <__kernel_rem_pio2+0x570>
 800b19a:	9b04      	ldr	r3, [sp, #16]
 800b19c:	f003 0007 	and.w	r0, r3, #7
 800b1a0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b1aa:	2b03      	cmp	r3, #3
 800b1ac:	d1f5      	bne.n	800b19a <__kernel_rem_pio2+0x4be>
 800b1ae:	ab48      	add	r3, sp, #288	; 0x120
 800b1b0:	441d      	add	r5, r3
 800b1b2:	46aa      	mov	sl, r5
 800b1b4:	46a3      	mov	fp, r4
 800b1b6:	f1bb 0f00 	cmp.w	fp, #0
 800b1ba:	dc74      	bgt.n	800b2a6 <__kernel_rem_pio2+0x5ca>
 800b1bc:	46aa      	mov	sl, r5
 800b1be:	46a3      	mov	fp, r4
 800b1c0:	f1bb 0f01 	cmp.w	fp, #1
 800b1c4:	f300 808e 	bgt.w	800b2e4 <__kernel_rem_pio2+0x608>
 800b1c8:	2700      	movs	r7, #0
 800b1ca:	463e      	mov	r6, r7
 800b1cc:	2c01      	cmp	r4, #1
 800b1ce:	f300 80a8 	bgt.w	800b322 <__kernel_rem_pio2+0x646>
 800b1d2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800b1d6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800b1da:	9b00      	ldr	r3, [sp, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f040 80aa 	bne.w	800b336 <__kernel_rem_pio2+0x65a>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	462a      	mov	r2, r5
 800b1e6:	9806      	ldr	r0, [sp, #24]
 800b1e8:	e9c0 2300 	strd	r2, r3, [r0]
 800b1ec:	4622      	mov	r2, r4
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b1f4:	463a      	mov	r2, r7
 800b1f6:	4633      	mov	r3, r6
 800b1f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b1fc:	e7cd      	b.n	800b19a <__kernel_rem_pio2+0x4be>
 800b1fe:	2000      	movs	r0, #0
 800b200:	46a0      	mov	r8, r4
 800b202:	4601      	mov	r1, r0
 800b204:	ab48      	add	r3, sp, #288	; 0x120
 800b206:	441d      	add	r5, r3
 800b208:	f1b8 0f00 	cmp.w	r8, #0
 800b20c:	da38      	bge.n	800b280 <__kernel_rem_pio2+0x5a4>
 800b20e:	9b00      	ldr	r3, [sp, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d03c      	beq.n	800b28e <__kernel_rem_pio2+0x5b2>
 800b214:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800b218:	4602      	mov	r2, r0
 800b21a:	462b      	mov	r3, r5
 800b21c:	9d06      	ldr	r5, [sp, #24]
 800b21e:	2601      	movs	r6, #1
 800b220:	e9c5 2300 	strd	r2, r3, [r5]
 800b224:	460b      	mov	r3, r1
 800b226:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b22a:	f7f5 f851 	bl	80002d0 <__aeabi_dsub>
 800b22e:	4684      	mov	ip, r0
 800b230:	460f      	mov	r7, r1
 800b232:	ad48      	add	r5, sp, #288	; 0x120
 800b234:	42b4      	cmp	r4, r6
 800b236:	da2c      	bge.n	800b292 <__kernel_rem_pio2+0x5b6>
 800b238:	9b00      	ldr	r3, [sp, #0]
 800b23a:	b10b      	cbz	r3, 800b240 <__kernel_rem_pio2+0x564>
 800b23c:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b240:	4662      	mov	r2, ip
 800b242:	463b      	mov	r3, r7
 800b244:	9906      	ldr	r1, [sp, #24]
 800b246:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b24a:	e7a6      	b.n	800b19a <__kernel_rem_pio2+0x4be>
 800b24c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800b24e:	ab48      	add	r3, sp, #288	; 0x120
 800b250:	4637      	mov	r7, r6
 800b252:	441d      	add	r5, r3
 800b254:	2c00      	cmp	r4, #0
 800b256:	da09      	bge.n	800b26c <__kernel_rem_pio2+0x590>
 800b258:	9b00      	ldr	r3, [sp, #0]
 800b25a:	b10b      	cbz	r3, 800b260 <__kernel_rem_pio2+0x584>
 800b25c:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b260:	4632      	mov	r2, r6
 800b262:	463b      	mov	r3, r7
 800b264:	9906      	ldr	r1, [sp, #24]
 800b266:	e9c1 2300 	strd	r2, r3, [r1]
 800b26a:	e796      	b.n	800b19a <__kernel_rem_pio2+0x4be>
 800b26c:	4630      	mov	r0, r6
 800b26e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b272:	4639      	mov	r1, r7
 800b274:	f7f5 f82e 	bl	80002d4 <__adddf3>
 800b278:	3c01      	subs	r4, #1
 800b27a:	4606      	mov	r6, r0
 800b27c:	460f      	mov	r7, r1
 800b27e:	e7e9      	b.n	800b254 <__kernel_rem_pio2+0x578>
 800b280:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b284:	f7f5 f826 	bl	80002d4 <__adddf3>
 800b288:	f108 38ff 	add.w	r8, r8, #4294967295
 800b28c:	e7bc      	b.n	800b208 <__kernel_rem_pio2+0x52c>
 800b28e:	460d      	mov	r5, r1
 800b290:	e7c2      	b.n	800b218 <__kernel_rem_pio2+0x53c>
 800b292:	4660      	mov	r0, ip
 800b294:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800b298:	4639      	mov	r1, r7
 800b29a:	f7f5 f81b 	bl	80002d4 <__adddf3>
 800b29e:	3601      	adds	r6, #1
 800b2a0:	4684      	mov	ip, r0
 800b2a2:	460f      	mov	r7, r1
 800b2a4:	e7c6      	b.n	800b234 <__kernel_rem_pio2+0x558>
 800b2a6:	e9da 6700 	ldrd	r6, r7, [sl]
 800b2aa:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800b2ae:	4632      	mov	r2, r6
 800b2b0:	463b      	mov	r3, r7
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	4649      	mov	r1, r9
 800b2b6:	f7f5 f80d 	bl	80002d4 <__adddf3>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	f7f5 f803 	bl	80002d0 <__aeabi_dsub>
 800b2ca:	4632      	mov	r2, r6
 800b2cc:	463b      	mov	r3, r7
 800b2ce:	f7f5 f801 	bl	80002d4 <__adddf3>
 800b2d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2d6:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b2da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2de:	e9ca 2300 	strd	r2, r3, [sl]
 800b2e2:	e768      	b.n	800b1b6 <__kernel_rem_pio2+0x4da>
 800b2e4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b2e8:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800b2ec:	4642      	mov	r2, r8
 800b2ee:	464b      	mov	r3, r9
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	4639      	mov	r1, r7
 800b2f4:	f7f4 ffee 	bl	80002d4 <__adddf3>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b300:	4630      	mov	r0, r6
 800b302:	4639      	mov	r1, r7
 800b304:	f7f4 ffe4 	bl	80002d0 <__aeabi_dsub>
 800b308:	4642      	mov	r2, r8
 800b30a:	464b      	mov	r3, r9
 800b30c:	f7f4 ffe2 	bl	80002d4 <__adddf3>
 800b310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b314:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b318:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b31c:	e9ca 2300 	strd	r2, r3, [sl]
 800b320:	e74e      	b.n	800b1c0 <__kernel_rem_pio2+0x4e4>
 800b322:	4638      	mov	r0, r7
 800b324:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b328:	4631      	mov	r1, r6
 800b32a:	f7f4 ffd3 	bl	80002d4 <__adddf3>
 800b32e:	3c01      	subs	r4, #1
 800b330:	4607      	mov	r7, r0
 800b332:	460e      	mov	r6, r1
 800b334:	e74a      	b.n	800b1cc <__kernel_rem_pio2+0x4f0>
 800b336:	9b06      	ldr	r3, [sp, #24]
 800b338:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b33c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b340:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b344:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b348:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b34c:	601d      	str	r5, [r3, #0]
 800b34e:	615e      	str	r6, [r3, #20]
 800b350:	e723      	b.n	800b19a <__kernel_rem_pio2+0x4be>
 800b352:	bf00      	nop
 800b354:	41700000 	.word	0x41700000
 800b358:	3e700000 	.word	0x3e700000
 800b35c:	00000000 	.word	0x00000000

0800b360 <floor>:
 800b360:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b368:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b36c:	2e13      	cmp	r6, #19
 800b36e:	460b      	mov	r3, r1
 800b370:	4607      	mov	r7, r0
 800b372:	460c      	mov	r4, r1
 800b374:	4605      	mov	r5, r0
 800b376:	dc32      	bgt.n	800b3de <floor+0x7e>
 800b378:	2e00      	cmp	r6, #0
 800b37a:	da14      	bge.n	800b3a6 <floor+0x46>
 800b37c:	a334      	add	r3, pc, #208	; (adr r3, 800b450 <floor+0xf0>)
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	f7f4 ffa7 	bl	80002d4 <__adddf3>
 800b386:	2200      	movs	r2, #0
 800b388:	2300      	movs	r3, #0
 800b38a:	f7f5 fbe9 	bl	8000b60 <__aeabi_dcmpgt>
 800b38e:	b138      	cbz	r0, 800b3a0 <floor+0x40>
 800b390:	2c00      	cmp	r4, #0
 800b392:	da56      	bge.n	800b442 <floor+0xe2>
 800b394:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b398:	4325      	orrs	r5, r4
 800b39a:	d055      	beq.n	800b448 <floor+0xe8>
 800b39c:	2500      	movs	r5, #0
 800b39e:	4c2e      	ldr	r4, [pc, #184]	; (800b458 <floor+0xf8>)
 800b3a0:	4623      	mov	r3, r4
 800b3a2:	462f      	mov	r7, r5
 800b3a4:	e025      	b.n	800b3f2 <floor+0x92>
 800b3a6:	4a2d      	ldr	r2, [pc, #180]	; (800b45c <floor+0xfc>)
 800b3a8:	fa42 f806 	asr.w	r8, r2, r6
 800b3ac:	ea01 0208 	and.w	r2, r1, r8
 800b3b0:	4302      	orrs	r2, r0
 800b3b2:	d01e      	beq.n	800b3f2 <floor+0x92>
 800b3b4:	a326      	add	r3, pc, #152	; (adr r3, 800b450 <floor+0xf0>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f7f4 ff8b 	bl	80002d4 <__adddf3>
 800b3be:	2200      	movs	r2, #0
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f7f5 fbcd 	bl	8000b60 <__aeabi_dcmpgt>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d0ea      	beq.n	800b3a0 <floor+0x40>
 800b3ca:	2c00      	cmp	r4, #0
 800b3cc:	bfbe      	ittt	lt
 800b3ce:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b3d2:	4133      	asrlt	r3, r6
 800b3d4:	18e4      	addlt	r4, r4, r3
 800b3d6:	2500      	movs	r5, #0
 800b3d8:	ea24 0408 	bic.w	r4, r4, r8
 800b3dc:	e7e0      	b.n	800b3a0 <floor+0x40>
 800b3de:	2e33      	cmp	r6, #51	; 0x33
 800b3e0:	dd0b      	ble.n	800b3fa <floor+0x9a>
 800b3e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b3e6:	d104      	bne.n	800b3f2 <floor+0x92>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	f7f4 ff73 	bl	80002d4 <__adddf3>
 800b3ee:	4607      	mov	r7, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3fa:	f04f 38ff 	mov.w	r8, #4294967295
 800b3fe:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b402:	fa28 f802 	lsr.w	r8, r8, r2
 800b406:	ea10 0f08 	tst.w	r0, r8
 800b40a:	d0f2      	beq.n	800b3f2 <floor+0x92>
 800b40c:	a310      	add	r3, pc, #64	; (adr r3, 800b450 <floor+0xf0>)
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	f7f4 ff5f 	bl	80002d4 <__adddf3>
 800b416:	2200      	movs	r2, #0
 800b418:	2300      	movs	r3, #0
 800b41a:	f7f5 fba1 	bl	8000b60 <__aeabi_dcmpgt>
 800b41e:	2800      	cmp	r0, #0
 800b420:	d0be      	beq.n	800b3a0 <floor+0x40>
 800b422:	2c00      	cmp	r4, #0
 800b424:	da0a      	bge.n	800b43c <floor+0xdc>
 800b426:	2e14      	cmp	r6, #20
 800b428:	d101      	bne.n	800b42e <floor+0xce>
 800b42a:	3401      	adds	r4, #1
 800b42c:	e006      	b.n	800b43c <floor+0xdc>
 800b42e:	2301      	movs	r3, #1
 800b430:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b434:	40b3      	lsls	r3, r6
 800b436:	441d      	add	r5, r3
 800b438:	42af      	cmp	r7, r5
 800b43a:	d8f6      	bhi.n	800b42a <floor+0xca>
 800b43c:	ea25 0508 	bic.w	r5, r5, r8
 800b440:	e7ae      	b.n	800b3a0 <floor+0x40>
 800b442:	2500      	movs	r5, #0
 800b444:	462c      	mov	r4, r5
 800b446:	e7ab      	b.n	800b3a0 <floor+0x40>
 800b448:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b44c:	e7a8      	b.n	800b3a0 <floor+0x40>
 800b44e:	bf00      	nop
 800b450:	8800759c 	.word	0x8800759c
 800b454:	7e37e43c 	.word	0x7e37e43c
 800b458:	bff00000 	.word	0xbff00000
 800b45c:	000fffff 	.word	0x000fffff

0800b460 <_init>:
 800b460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b462:	bf00      	nop
 800b464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b466:	bc08      	pop	{r3}
 800b468:	469e      	mov	lr, r3
 800b46a:	4770      	bx	lr

0800b46c <_fini>:
 800b46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46e:	bf00      	nop
 800b470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b472:	bc08      	pop	{r3}
 800b474:	469e      	mov	lr, r3
 800b476:	4770      	bx	lr
