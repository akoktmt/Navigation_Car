
GPS_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b350  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800b460  0800b460  0001b460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb10  0800bb10  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb10  0800bb10  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb10  0800bb10  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb10  0800bb10  0001bb10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb14  0800bb14  0001bb14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800bb18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  200001e8  0800bd00  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000838  0800bd00  00020838  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009031  00000000  00000000  00020297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002001  00000000  00000000  000292c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  0002b2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000658  00000000  00000000  0002bb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185cb  00000000  00000000  0002c190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c151  00000000  00000000  0004475b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000849d2  00000000  00000000  000508ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039d4  00000000  00000000  000d5280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d8c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b448 	.word	0x0800b448

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800b448 	.word	0x0800b448

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_GPIO_Init+0x40>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <MX_GPIO_Init+0x40>)
 80010a0:	f043 0320 	orr.w	r3, r3, #32
 80010a4:	6193      	str	r3, [r2, #24]
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_GPIO_Init+0x40>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f003 0320 	and.w	r3, r3, #32
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_GPIO_Init+0x40>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <MX_GPIO_Init+0x40>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6193      	str	r3, [r2, #24]
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <MX_GPIO_Init+0x40>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	b0ea      	sub	sp, #424	; 0x1a8
 80010dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010de:	f000 faf9 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e2:	f000 f84b 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e6:	f7ff ffd5 	bl	8001094 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010ea:	f000 f9dd 	bl	80014a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010ee:	f000 fa0d 	bl	800150c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 80010f2:	f002 f8ed 	bl	80032d0 <Ringbuf_init>
  HAL_Delay(500);
 80010f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010fa:	f000 fb4d 	bl	8001798 <HAL_Delay>
  //GPS GPS;
  EKF EKF;
  Input Input;
  Angle Angle;
  EKF_Init(&EKF,&Input);
 80010fe:	f107 0214 	add.w	r2, r7, #20
 8001102:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f002 f987 	bl	800341c <EKF_Init>
//	 		  sprintf (Buffer, "%.6f %c\r\n, %.6f%c\r\n  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
//	 				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
//	 		  HAL_UART_Transmit(&huart2,(uint8_t*) Buffer, sizeof(Buffer), HAL_MAX_DELAY);
//	  }

	  	 		  	  	  	  EKF_PredictionStep(&EKF,&Angle,&Input);
 800110e:	f107 0214 	add.w	r2, r7, #20
 8001112:	1d39      	adds	r1, r7, #4
 8001114:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001118:	4618      	mov	r0, r3
 800111a:	f002 fa11 	bl	8003540 <EKF_PredictionStep>
	  	 					//  EFK_GPSHandleMeasurement(&GPS,&EKF);
	  	 					  sprintf (Buffer, "%.6f\r\n %.6f\r\n  " ,EKF.FirPx,
 800111e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001122:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f97d 	bl	8000428 <__aeabi_f2d>
 800112e:	4604      	mov	r4, r0
 8001130:	460d      	mov	r5, r1
	  	 							  EKF.FirPy);
 8001132:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001136:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800113a:	685b      	ldr	r3, [r3, #4]
	  	 					  sprintf (Buffer, "%.6f\r\n %.6f\r\n  " ,EKF.FirPx,
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f973 	bl	8000428 <__aeabi_f2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	e9cd 2300 	strd	r2, r3, [sp]
 800114a:	4622      	mov	r2, r4
 800114c:	462b      	mov	r3, r5
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <main+0x98>)
 8001150:	4808      	ldr	r0, [pc, #32]	; (8001174 <main+0x9c>)
 8001152:	f004 fad9 	bl	8005708 <siprintf>
	  	 					  HAL_UART_Transmit(&huart2,(uint8_t*) Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	2232      	movs	r2, #50	; 0x32
 800115c:	4905      	ldr	r1, [pc, #20]	; (8001174 <main+0x9c>)
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <main+0xa0>)
 8001160:	f001 fae2 	bl	8002728 <HAL_UART_Transmit>
	  	 					  HAL_Delay(1000);
 8001164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001168:	f000 fb16 	bl	8001798 <HAL_Delay>
	  	 		  	  	  	  EKF_PredictionStep(&EKF,&Angle,&Input);
 800116c:	e7cf      	b.n	800110e <main+0x36>
 800116e:	bf00      	nop
 8001170:	0800b460 	.word	0x0800b460
 8001174:	20000204 	.word	0x20000204
 8001178:	20000284 	.word	0x20000284

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b090      	sub	sp, #64	; 0x40
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2228      	movs	r2, #40	; 0x28
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f004 fb1f 	bl	80057ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800119e:	2301      	movs	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	2302      	movs	r3, #2
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fe4f 	bl	8001e68 <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011d0:	f000 f819 	bl	8001206 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	230f      	movs	r3, #15
 80011d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d8:	2302      	movs	r3, #2
 80011da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2102      	movs	r1, #2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 f8bc 	bl	800236c <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011fa:	f000 f804 	bl	8001206 <Error_Handler>
  }
}
 80011fe:	bf00      	nop
 8001200:	3740      	adds	r7, #64	; 0x40
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120a:	b672      	cpsid	i
}
 800120c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120e:	e7fe      	b.n	800120e <Error_Handler+0x8>

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_MspInit+0x5c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a14      	ldr	r2, [pc, #80]	; (800126c <HAL_MspInit+0x5c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_MspInit+0x5c>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_MspInit+0x5c>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <HAL_MspInit+0x5c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_MspInit+0x5c>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_MspInit+0x60>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_MspInit+0x60>)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <NMI_Handler+0x4>

0800127a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <MemManage_Handler+0x4>

08001286 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <UsageFault_Handler+0x4>

08001292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr

080012aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout>0) timeout--;
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <SysTick_Handler+0x34>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <SysTick_Handler+0x18>
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <SysTick_Handler+0x34>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <SysTick_Handler+0x34>)
 80012ce:	801a      	strh	r2, [r3, #0]
	if(VCCTimeout>0) VCCTimeout--;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <SysTick_Handler+0x38>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	dd04      	ble.n	80012e2 <SysTick_Handler+0x2a>
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SysTick_Handler+0x38>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3b01      	subs	r3, #1
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <SysTick_Handler+0x38>)
 80012e0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e2:	f000 fa3d 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200002d0 	.word	0x200002d0
 80012f0:	20000000 	.word	0x20000000

080012f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <USART1_IRQHandler+0x10>)
 80012fa:	f002 f831 	bl	8003360 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000023c 	.word	0x2000023c

08001308 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <USART2_IRQHandler+0x10>)
 800130e:	f001 fa8f 	bl	8002830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000284 	.word	0x20000284

0800131c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return 1;
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <_kill>:

int _kill(int pid, int sig)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001334:	f004 fa9e 	bl	8005874 <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	2216      	movs	r2, #22
 800133c:	601a      	str	r2, [r3, #0]
  return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_exit>:

void _exit (int status)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001352:	f04f 31ff 	mov.w	r1, #4294967295
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffe7 	bl	800132a <_kill>
  while (1) {}    /* Make sure we hang here */
 800135c:	e7fe      	b.n	800135c <_exit+0x12>

0800135e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e00a      	b.n	8001386 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001370:	f3af 8000 	nop.w
 8001374:	4601      	mov	r1, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	60ba      	str	r2, [r7, #8]
 800137c:	b2ca      	uxtb	r2, r1
 800137e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3301      	adds	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	429a      	cmp	r2, r3
 800138c:	dbf0      	blt.n	8001370 <_read+0x12>
  }

  return len;
 800138e:	687b      	ldr	r3, [r7, #4]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	e009      	b.n	80013be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	60ba      	str	r2, [r7, #8]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	3301      	adds	r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	dbf1      	blt.n	80013aa <_write+0x12>
  }
  return len;
 80013c6:	687b      	ldr	r3, [r7, #4]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_close>:

int _close(int file)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f6:	605a      	str	r2, [r3, #4]
  return 0;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <_isatty>:

int _isatty(int file)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800140c:	2301      	movs	r3, #1
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f004 fa08 	bl	8005874 <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	220c      	movs	r2, #12
 8001468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20005000 	.word	0x20005000
 8001490:	00000400 	.word	0x00000400
 8001494:	20000238 	.word	0x20000238
 8001498:	20000838 	.word	0x20000838

0800149c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_USART1_UART_Init+0x5c>)
 80014ae:	4a16      	ldr	r2, [pc, #88]	; (8001508 <MX_USART1_UART_Init+0x60>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_USART1_UART_Init+0x5c>)
 80014b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_USART1_UART_Init+0x5c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_USART1_UART_Init+0x5c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_USART1_UART_Init+0x5c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_USART1_UART_Init+0x5c>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_USART1_UART_Init+0x5c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_USART1_UART_Init+0x5c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014de:	4809      	ldr	r0, [pc, #36]	; (8001504 <MX_USART1_UART_Init+0x5c>)
 80014e0:	f001 f8d2 	bl	8002688 <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ea:	f7ff fe8c 	bl	8001206 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  	  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <MX_USART1_UART_Init+0x5c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <MX_USART1_UART_Init+0x5c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0220 	orr.w	r2, r2, #32
 80014fc:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000023c 	.word	0x2000023c
 8001508:	40013800 	.word	0x40013800

0800150c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <MX_USART2_UART_Init+0x50>)
 8001514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800151c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001544:	f001 f8a0 	bl	8002688 <HAL_UART_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800154e:	f7ff fe5a 	bl	8001206 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000284 	.word	0x20000284
 800155c:	40004400 	.word	0x40004400

08001560 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0318 	add.w	r3, r7, #24
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a3f      	ldr	r2, [pc, #252]	; (8001678 <HAL_UART_MspInit+0x118>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d13a      	bne.n	80015f6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001580:	4b3e      	ldr	r3, [pc, #248]	; (800167c <HAL_UART_MspInit+0x11c>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a3d      	ldr	r2, [pc, #244]	; (800167c <HAL_UART_MspInit+0x11c>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b3b      	ldr	r3, [pc, #236]	; (800167c <HAL_UART_MspInit+0x11c>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <HAL_UART_MspInit+0x11c>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a37      	ldr	r2, [pc, #220]	; (800167c <HAL_UART_MspInit+0x11c>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b35      	ldr	r3, [pc, #212]	; (800167c <HAL_UART_MspInit+0x11c>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	4619      	mov	r1, r3
 80015c4:	482e      	ldr	r0, [pc, #184]	; (8001680 <HAL_UART_MspInit+0x120>)
 80015c6:	f000 facb 	bl	8001b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0318 	add.w	r3, r7, #24
 80015dc:	4619      	mov	r1, r3
 80015de:	4828      	ldr	r0, [pc, #160]	; (8001680 <HAL_UART_MspInit+0x120>)
 80015e0:	f000 fabe 	bl	8001b60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	2025      	movs	r0, #37	; 0x25
 80015ea:	f000 f9d0 	bl	800198e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015ee:	2025      	movs	r0, #37	; 0x25
 80015f0:	f000 f9e9 	bl	80019c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015f4:	e03c      	b.n	8001670 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a22      	ldr	r2, [pc, #136]	; (8001684 <HAL_UART_MspInit+0x124>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d137      	bne.n	8001670 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <HAL_UART_MspInit+0x11c>)
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	4a1d      	ldr	r2, [pc, #116]	; (800167c <HAL_UART_MspInit+0x11c>)
 8001606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160a:	61d3      	str	r3, [r2, #28]
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_UART_MspInit+0x11c>)
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_UART_MspInit+0x11c>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a17      	ldr	r2, [pc, #92]	; (800167c <HAL_UART_MspInit+0x11c>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_UART_MspInit+0x11c>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001630:	2304      	movs	r3, #4
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 0318 	add.w	r3, r7, #24
 8001640:	4619      	mov	r1, r3
 8001642:	480f      	ldr	r0, [pc, #60]	; (8001680 <HAL_UART_MspInit+0x120>)
 8001644:	f000 fa8c 	bl	8001b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001648:	2308      	movs	r3, #8
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	4619      	mov	r1, r3
 800165a:	4809      	ldr	r0, [pc, #36]	; (8001680 <HAL_UART_MspInit+0x120>)
 800165c:	f000 fa80 	bl	8001b60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	2026      	movs	r0, #38	; 0x26
 8001666:	f000 f992 	bl	800198e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800166a:	2026      	movs	r0, #38	; 0x26
 800166c:	f000 f9ab 	bl	80019c6 <HAL_NVIC_EnableIRQ>
}
 8001670:	bf00      	nop
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40013800 	.word	0x40013800
 800167c:	40021000 	.word	0x40021000
 8001680:	40010800 	.word	0x40010800
 8001684:	40004400 	.word	0x40004400

08001688 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001688:	f7ff ff08 	bl	800149c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800168c:	480b      	ldr	r0, [pc, #44]	; (80016bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800168e:	490c      	ldr	r1, [pc, #48]	; (80016c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001690:	4a0c      	ldr	r2, [pc, #48]	; (80016c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016a4:	4c09      	ldr	r4, [pc, #36]	; (80016cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b2:	f004 f8e5 	bl	8005880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016b6:	f7ff fd0f 	bl	80010d8 <main>
  bx lr
 80016ba:	4770      	bx	lr
  ldr r0, =_sdata
 80016bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80016c4:	0800bb18 	.word	0x0800bb18
  ldr r2, =_sbss
 80016c8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80016cc:	20000838 	.word	0x20000838

080016d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC1_2_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_Init+0x28>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_Init+0x28>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 f947 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ea:	200f      	movs	r0, #15
 80016ec:	f000 f808 	bl	8001700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f0:	f7ff fd8e 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40022000 	.word	0x40022000

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_InitTick+0x54>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x58>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001716:	fbb3 f3f1 	udiv	r3, r3, r1
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f95f 	bl	80019e2 <HAL_SYSTICK_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e00e      	b.n	800174c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d80a      	bhi.n	800174a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f000 f927 	bl	800198e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001740:	4a06      	ldr	r2, [pc, #24]	; (800175c <HAL_InitTick+0x5c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000004 	.word	0x20000004
 8001758:	2000000c 	.word	0x2000000c
 800175c:	20000008 	.word	0x20000008

08001760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_IncTick+0x1c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_IncTick+0x20>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a03      	ldr	r2, [pc, #12]	; (8001780 <HAL_IncTick+0x20>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	2000000c 	.word	0x2000000c
 8001780:	200002cc 	.word	0x200002cc

08001784 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;
 8001788:	4b02      	ldr	r3, [pc, #8]	; (8001794 <HAL_GetTick+0x10>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	200002cc 	.word	0x200002cc

08001798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff fff0 	bl	8001784 <HAL_GetTick>
 80017a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d005      	beq.n	80017be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_Delay+0x44>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017be:	bf00      	nop
 80017c0:	f7ff ffe0 	bl	8001784 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d8f7      	bhi.n	80017c0 <HAL_Delay+0x28>
  {
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000000c 	.word	0x2000000c

080017e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <__NVIC_GetPriorityGrouping+0x18>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 0307 	and.w	r3, r3, #7
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	2b00      	cmp	r3, #0
 8001854:	db0b      	blt.n	800186e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	4906      	ldr	r1, [pc, #24]	; (8001878 <__NVIC_EnableIRQ+0x34>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	2001      	movs	r0, #1
 8001866:	fa00 f202 	lsl.w	r2, r0, r2
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001944:	d301      	bcc.n	800194a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001946:	2301      	movs	r3, #1
 8001948:	e00f      	b.n	800196a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <SysTick_Config+0x40>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001952:	210f      	movs	r1, #15
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f7ff ff90 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SysTick_Config+0x40>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <SysTick_Config+0x40>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff2d 	bl	80017e0 <__NVIC_SetPriorityGrouping>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff42 	bl	8001828 <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff90 	bl	80018d0 <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5f 	bl	800187c <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff35 	bl	8001844 <__NVIC_EnableIRQ>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffa2 	bl	8001934 <SysTick_Config>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b085      	sub	sp, #20
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d008      	beq.n	8001a24 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2204      	movs	r2, #4
 8001a16:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e020      	b.n	8001a66 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 020e 	bic.w	r2, r2, #14
 8001a32:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d005      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	e051      	b.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 020e 	bic.w	r2, r2, #14
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <HAL_DMA_Abort_IT+0xd4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d029      	beq.n	8001b12 <HAL_DMA_Abort_IT+0xa2>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a21      	ldr	r2, [pc, #132]	; (8001b48 <HAL_DMA_Abort_IT+0xd8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d022      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x9e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a1f      	ldr	r2, [pc, #124]	; (8001b4c <HAL_DMA_Abort_IT+0xdc>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d01a      	beq.n	8001b08 <HAL_DMA_Abort_IT+0x98>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1e      	ldr	r2, [pc, #120]	; (8001b50 <HAL_DMA_Abort_IT+0xe0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d012      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x92>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <HAL_DMA_Abort_IT+0xe4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00a      	beq.n	8001afc <HAL_DMA_Abort_IT+0x8c>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <HAL_DMA_Abort_IT+0xe8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d102      	bne.n	8001af6 <HAL_DMA_Abort_IT+0x86>
 8001af0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001af4:	e00e      	b.n	8001b14 <HAL_DMA_Abort_IT+0xa4>
 8001af6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001afa:	e00b      	b.n	8001b14 <HAL_DMA_Abort_IT+0xa4>
 8001afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b00:	e008      	b.n	8001b14 <HAL_DMA_Abort_IT+0xa4>
 8001b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b06:	e005      	b.n	8001b14 <HAL_DMA_Abort_IT+0xa4>
 8001b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0c:	e002      	b.n	8001b14 <HAL_DMA_Abort_IT+0xa4>
 8001b0e:	2310      	movs	r3, #16
 8001b10:	e000      	b.n	8001b14 <HAL_DMA_Abort_IT+0xa4>
 8001b12:	2301      	movs	r3, #1
 8001b14:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <HAL_DMA_Abort_IT+0xec>)
 8001b16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4798      	blx	r3
    } 
  }
  return status;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40020008 	.word	0x40020008
 8001b48:	4002001c 	.word	0x4002001c
 8001b4c:	40020030 	.word	0x40020030
 8001b50:	40020044 	.word	0x40020044
 8001b54:	40020058 	.word	0x40020058
 8001b58:	4002006c 	.word	0x4002006c
 8001b5c:	40020000 	.word	0x40020000

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b08b      	sub	sp, #44	; 0x2c
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b72:	e169      	b.n	8001e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b74:	2201      	movs	r2, #1
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	f040 8158 	bne.w	8001e42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4a9a      	ldr	r2, [pc, #616]	; (8001e00 <HAL_GPIO_Init+0x2a0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d05e      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001b9c:	4a98      	ldr	r2, [pc, #608]	; (8001e00 <HAL_GPIO_Init+0x2a0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d875      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001ba2:	4a98      	ldr	r2, [pc, #608]	; (8001e04 <HAL_GPIO_Init+0x2a4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d058      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001ba8:	4a96      	ldr	r2, [pc, #600]	; (8001e04 <HAL_GPIO_Init+0x2a4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d86f      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bae:	4a96      	ldr	r2, [pc, #600]	; (8001e08 <HAL_GPIO_Init+0x2a8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d052      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001bb4:	4a94      	ldr	r2, [pc, #592]	; (8001e08 <HAL_GPIO_Init+0x2a8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d869      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bba:	4a94      	ldr	r2, [pc, #592]	; (8001e0c <HAL_GPIO_Init+0x2ac>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d04c      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001bc0:	4a92      	ldr	r2, [pc, #584]	; (8001e0c <HAL_GPIO_Init+0x2ac>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d863      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bc6:	4a92      	ldr	r2, [pc, #584]	; (8001e10 <HAL_GPIO_Init+0x2b0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d046      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001bcc:	4a90      	ldr	r2, [pc, #576]	; (8001e10 <HAL_GPIO_Init+0x2b0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d85d      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bd2:	2b12      	cmp	r3, #18
 8001bd4:	d82a      	bhi.n	8001c2c <HAL_GPIO_Init+0xcc>
 8001bd6:	2b12      	cmp	r3, #18
 8001bd8:	d859      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bda:	a201      	add	r2, pc, #4	; (adr r2, 8001be0 <HAL_GPIO_Init+0x80>)
 8001bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be0:	08001c5b 	.word	0x08001c5b
 8001be4:	08001c35 	.word	0x08001c35
 8001be8:	08001c47 	.word	0x08001c47
 8001bec:	08001c89 	.word	0x08001c89
 8001bf0:	08001c8f 	.word	0x08001c8f
 8001bf4:	08001c8f 	.word	0x08001c8f
 8001bf8:	08001c8f 	.word	0x08001c8f
 8001bfc:	08001c8f 	.word	0x08001c8f
 8001c00:	08001c8f 	.word	0x08001c8f
 8001c04:	08001c8f 	.word	0x08001c8f
 8001c08:	08001c8f 	.word	0x08001c8f
 8001c0c:	08001c8f 	.word	0x08001c8f
 8001c10:	08001c8f 	.word	0x08001c8f
 8001c14:	08001c8f 	.word	0x08001c8f
 8001c18:	08001c8f 	.word	0x08001c8f
 8001c1c:	08001c8f 	.word	0x08001c8f
 8001c20:	08001c8f 	.word	0x08001c8f
 8001c24:	08001c3d 	.word	0x08001c3d
 8001c28:	08001c51 	.word	0x08001c51
 8001c2c:	4a79      	ldr	r2, [pc, #484]	; (8001e14 <HAL_GPIO_Init+0x2b4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d013      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c32:	e02c      	b.n	8001c8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	623b      	str	r3, [r7, #32]
          break;
 8001c3a:	e029      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	3304      	adds	r3, #4
 8001c42:	623b      	str	r3, [r7, #32]
          break;
 8001c44:	e024      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	3308      	adds	r3, #8
 8001c4c:	623b      	str	r3, [r7, #32]
          break;
 8001c4e:	e01f      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	330c      	adds	r3, #12
 8001c56:	623b      	str	r3, [r7, #32]
          break;
 8001c58:	e01a      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c62:	2304      	movs	r3, #4
 8001c64:	623b      	str	r3, [r7, #32]
          break;
 8001c66:	e013      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c70:	2308      	movs	r3, #8
 8001c72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	611a      	str	r2, [r3, #16]
          break;
 8001c7a:	e009      	b.n	8001c90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	615a      	str	r2, [r3, #20]
          break;
 8001c86:	e003      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e000      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          break;
 8001c8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2bff      	cmp	r3, #255	; 0xff
 8001c94:	d801      	bhi.n	8001c9a <HAL_GPIO_Init+0x13a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	e001      	b.n	8001c9e <HAL_GPIO_Init+0x13e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2bff      	cmp	r3, #255	; 0xff
 8001ca4:	d802      	bhi.n	8001cac <HAL_GPIO_Init+0x14c>
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	e002      	b.n	8001cb2 <HAL_GPIO_Init+0x152>
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	3b08      	subs	r3, #8
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	210f      	movs	r1, #15
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	6a39      	ldr	r1, [r7, #32]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 80b1 	beq.w	8001e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce0:	4b4d      	ldr	r3, [pc, #308]	; (8001e18 <HAL_GPIO_Init+0x2b8>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a4c      	ldr	r2, [pc, #304]	; (8001e18 <HAL_GPIO_Init+0x2b8>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b4a      	ldr	r3, [pc, #296]	; (8001e18 <HAL_GPIO_Init+0x2b8>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cf8:	4a48      	ldr	r2, [pc, #288]	; (8001e1c <HAL_GPIO_Init+0x2bc>)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a40      	ldr	r2, [pc, #256]	; (8001e20 <HAL_GPIO_Init+0x2c0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <HAL_GPIO_Init+0x1ec>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3f      	ldr	r2, [pc, #252]	; (8001e24 <HAL_GPIO_Init+0x2c4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00d      	beq.n	8001d48 <HAL_GPIO_Init+0x1e8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a3e      	ldr	r2, [pc, #248]	; (8001e28 <HAL_GPIO_Init+0x2c8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d007      	beq.n	8001d44 <HAL_GPIO_Init+0x1e4>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a3d      	ldr	r2, [pc, #244]	; (8001e2c <HAL_GPIO_Init+0x2cc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_GPIO_Init+0x1e0>
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e006      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d40:	2304      	movs	r3, #4
 8001d42:	e004      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d50:	f002 0203 	and.w	r2, r2, #3
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	4093      	lsls	r3, r2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d5e:	492f      	ldr	r1, [pc, #188]	; (8001e1c <HAL_GPIO_Init+0x2bc>)
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d78:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	492c      	ldr	r1, [pc, #176]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d86:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	4928      	ldr	r1, [pc, #160]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001da0:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	4922      	ldr	r1, [pc, #136]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60cb      	str	r3, [r1, #12]
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	491e      	ldr	r1, [pc, #120]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d006      	beq.n	8001dd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	4918      	ldr	r1, [pc, #96]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	4914      	ldr	r1, [pc, #80]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d021      	beq.n	8001e34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	490e      	ldr	r1, [pc, #56]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]
 8001dfc:	e021      	b.n	8001e42 <HAL_GPIO_Init+0x2e2>
 8001dfe:	bf00      	nop
 8001e00:	10320000 	.word	0x10320000
 8001e04:	10310000 	.word	0x10310000
 8001e08:	10220000 	.word	0x10220000
 8001e0c:	10210000 	.word	0x10210000
 8001e10:	10120000 	.word	0x10120000
 8001e14:	10110000 	.word	0x10110000
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010000 	.word	0x40010000
 8001e20:	40010800 	.word	0x40010800
 8001e24:	40010c00 	.word	0x40010c00
 8001e28:	40011000 	.word	0x40011000
 8001e2c:	40011400 	.word	0x40011400
 8001e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_GPIO_Init+0x304>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	4909      	ldr	r1, [pc, #36]	; (8001e64 <HAL_GPIO_Init+0x304>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	3301      	adds	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f47f ae8e 	bne.w	8001b74 <HAL_GPIO_Init+0x14>
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	372c      	adds	r7, #44	; 0x2c
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	40010400 	.word	0x40010400

08001e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e272      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8087 	beq.w	8001f96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e88:	4b92      	ldr	r3, [pc, #584]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d00c      	beq.n	8001eae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e94:	4b8f      	ldr	r3, [pc, #572]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d112      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x5e>
 8001ea0:	4b8c      	ldr	r3, [pc, #560]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d10b      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eae:	4b89      	ldr	r3, [pc, #548]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d06c      	beq.n	8001f94 <HAL_RCC_OscConfig+0x12c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d168      	bne.n	8001f94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e24c      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x76>
 8001ed0:	4b80      	ldr	r3, [pc, #512]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a7f      	ldr	r2, [pc, #508]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	e02e      	b.n	8001f3c <HAL_RCC_OscConfig+0xd4>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x98>
 8001ee6:	4b7b      	ldr	r3, [pc, #492]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a7a      	ldr	r2, [pc, #488]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b78      	ldr	r3, [pc, #480]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a77      	ldr	r2, [pc, #476]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e01d      	b.n	8001f3c <HAL_RCC_OscConfig+0xd4>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0xbc>
 8001f0a:	4b72      	ldr	r3, [pc, #456]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a71      	ldr	r2, [pc, #452]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b6f      	ldr	r3, [pc, #444]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a6e      	ldr	r2, [pc, #440]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_OscConfig+0xd4>
 8001f24:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a6a      	ldr	r2, [pc, #424]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	4b68      	ldr	r3, [pc, #416]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a67      	ldr	r2, [pc, #412]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d013      	beq.n	8001f6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff fc1e 	bl	8001784 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff fc1a 	bl	8001784 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e200      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	4b5d      	ldr	r3, [pc, #372]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0xe4>
 8001f6a:	e014      	b.n	8001f96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fc0a 	bl	8001784 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f74:	f7ff fc06 	bl	8001784 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e1ec      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x10c>
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d063      	beq.n	800206a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa2:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fae:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d11c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x18c>
 8001fba:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d116      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_RCC_OscConfig+0x176>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e1c0      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fde:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4939      	ldr	r1, [pc, #228]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	e03a      	b.n	800206a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d020      	beq.n	800203e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ffc:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7ff fbbf 	bl	8001784 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200a:	f7ff fbbb 	bl	8001784 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e1a1      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4927      	ldr	r1, [pc, #156]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
 800203c:	e015      	b.n	800206a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203e:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fb9e 	bl	8001784 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204c:	f7ff fb9a 	bl	8001784 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e180      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d03a      	beq.n	80020ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d019      	beq.n	80020b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_RCC_OscConfig+0x274>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002084:	f7ff fb7e 	bl	8001784 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208c:	f7ff fb7a 	bl	8001784 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e160      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f000 face 	bl	800264c <RCC_Delay>
 80020b0:	e01c      	b.n	80020ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_RCC_OscConfig+0x274>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b8:	f7ff fb64 	bl	8001784 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020be:	e00f      	b.n	80020e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c0:	f7ff fb60 	bl	8001784 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d908      	bls.n	80020e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e146      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	42420000 	.word	0x42420000
 80020dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e0:	4b92      	ldr	r3, [pc, #584]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1e9      	bne.n	80020c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80a6 	beq.w	8002246 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fe:	4b8b      	ldr	r3, [pc, #556]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10d      	bne.n	8002126 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210a:	4b88      	ldr	r3, [pc, #544]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a87      	ldr	r2, [pc, #540]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002114:	61d3      	str	r3, [r2, #28]
 8002116:	4b85      	ldr	r3, [pc, #532]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002122:	2301      	movs	r3, #1
 8002124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	4b82      	ldr	r3, [pc, #520]	; (8002330 <HAL_RCC_OscConfig+0x4c8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d118      	bne.n	8002164 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002132:	4b7f      	ldr	r3, [pc, #508]	; (8002330 <HAL_RCC_OscConfig+0x4c8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a7e      	ldr	r2, [pc, #504]	; (8002330 <HAL_RCC_OscConfig+0x4c8>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213e:	f7ff fb21 	bl	8001784 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002146:	f7ff fb1d 	bl	8001784 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b64      	cmp	r3, #100	; 0x64
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e103      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	4b75      	ldr	r3, [pc, #468]	; (8002330 <HAL_RCC_OscConfig+0x4c8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x312>
 800216c:	4b6f      	ldr	r3, [pc, #444]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4a6e      	ldr	r2, [pc, #440]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6213      	str	r3, [r2, #32]
 8002178:	e02d      	b.n	80021d6 <HAL_RCC_OscConfig+0x36e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0x334>
 8002182:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a69      	ldr	r2, [pc, #420]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	6213      	str	r3, [r2, #32]
 800218e:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a66      	ldr	r2, [pc, #408]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	e01c      	b.n	80021d6 <HAL_RCC_OscConfig+0x36e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d10c      	bne.n	80021be <HAL_RCC_OscConfig+0x356>
 80021a4:	4b61      	ldr	r3, [pc, #388]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4a60      	ldr	r2, [pc, #384]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6213      	str	r3, [r2, #32]
 80021b0:	4b5e      	ldr	r3, [pc, #376]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4a5d      	ldr	r2, [pc, #372]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6213      	str	r3, [r2, #32]
 80021bc:	e00b      	b.n	80021d6 <HAL_RCC_OscConfig+0x36e>
 80021be:	4b5b      	ldr	r3, [pc, #364]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4a5a      	ldr	r2, [pc, #360]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6213      	str	r3, [r2, #32]
 80021ca:	4b58      	ldr	r3, [pc, #352]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a57      	ldr	r2, [pc, #348]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff fad1 	bl	8001784 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7ff facd 	bl	8001784 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0b1      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	4b4b      	ldr	r3, [pc, #300]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0ee      	beq.n	80021e6 <HAL_RCC_OscConfig+0x37e>
 8002208:	e014      	b.n	8002234 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7ff fabb 	bl	8001784 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7ff fab7 	bl	8001784 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e09b      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002228:	4b40      	ldr	r3, [pc, #256]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ee      	bne.n	8002212 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002234:	7dfb      	ldrb	r3, [r7, #23]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223a:	4b3c      	ldr	r3, [pc, #240]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4a3b      	ldr	r2, [pc, #236]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002244:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 8087 	beq.w	800235e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002250:	4b36      	ldr	r3, [pc, #216]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d061      	beq.n	8002320 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d146      	bne.n	80022f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002264:	4b33      	ldr	r3, [pc, #204]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7ff fa8b 	bl	8001784 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002272:	f7ff fa87 	bl	8001784 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e06d      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002284:	4b29      	ldr	r3, [pc, #164]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002298:	d108      	bne.n	80022ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	4921      	ldr	r1, [pc, #132]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ac:	4b1f      	ldr	r3, [pc, #124]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a19      	ldr	r1, [r3, #32]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	430b      	orrs	r3, r1
 80022be:	491b      	ldr	r1, [pc, #108]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7ff fa5b 	bl	8001784 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d2:	f7ff fa57 	bl	8001784 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e03d      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x46a>
 80022f0:	e035      	b.n	800235e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff fa44 	bl	8001784 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002300:	f7ff fa40 	bl	8001784 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e026      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_RCC_OscConfig+0x4c4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x498>
 800231e:	e01e      	b.n	800235e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d107      	bne.n	8002338 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e019      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
 800232c:	40021000 	.word	0x40021000
 8002330:	40007000 	.word	0x40007000
 8002334:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_OscConfig+0x500>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	429a      	cmp	r2, r3
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d001      	beq.n	800235e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000

0800236c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0d0      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002380:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d910      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b67      	ldr	r3, [pc, #412]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 0207 	bic.w	r2, r3, #7
 8002396:	4965      	ldr	r1, [pc, #404]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b63      	ldr	r3, [pc, #396]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0b8      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c8:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a58      	ldr	r2, [pc, #352]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a52      	ldr	r2, [pc, #328]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ec:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	494d      	ldr	r1, [pc, #308]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d040      	beq.n	800248c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d115      	bne.n	800244a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e07f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242a:	4b41      	ldr	r3, [pc, #260]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e073      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243a:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e06b      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244a:	4b39      	ldr	r3, [pc, #228]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f023 0203 	bic.w	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4936      	ldr	r1, [pc, #216]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800245c:	f7ff f992 	bl	8001784 <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	e00a      	b.n	800247a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002464:	f7ff f98e 	bl	8001784 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e053      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 020c 	and.w	r2, r3, #12
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	429a      	cmp	r2, r3
 800248a:	d1eb      	bne.n	8002464 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d210      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	4922      	ldr	r1, [pc, #136]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e032      	b.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4916      	ldr	r1, [pc, #88]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	490e      	ldr	r1, [pc, #56]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024fa:	f000 f821 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80024fe:	4602      	mov	r2, r0
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	490a      	ldr	r1, [pc, #40]	; (8002534 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	5ccb      	ldrb	r3, [r1, r3]
 800250e:	fa22 f303 	lsr.w	r3, r2, r3
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1cc>)
 8002514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x1d0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f8f0 	bl	8001700 <HAL_InitTick>

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40022000 	.word	0x40022000
 8002530:	40021000 	.word	0x40021000
 8002534:	0800b470 	.word	0x0800b470
 8002538:	20000004 	.word	0x20000004
 800253c:	20000008 	.word	0x20000008

08002540 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b04      	cmp	r3, #4
 8002568:	d002      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x30>
 800256a:	2b08      	cmp	r3, #8
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x36>
 800256e:	e027      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002572:	613b      	str	r3, [r7, #16]
      break;
 8002574:	e027      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	0c9b      	lsrs	r3, r3, #18
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	4a17      	ldr	r2, [pc, #92]	; (80025dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002580:	5cd3      	ldrb	r3, [r2, r3]
 8002582:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d010      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	0c5b      	lsrs	r3, r3, #17
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025a2:	fb03 f202 	mul.w	r2, r3, r2
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e004      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	613b      	str	r3, [r7, #16]
      break;
 80025be:	e002      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025c2:	613b      	str	r3, [r7, #16]
      break;
 80025c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c6:	693b      	ldr	r3, [r7, #16]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
 80025d8:	007a1200 	.word	0x007a1200
 80025dc:	0800b488 	.word	0x0800b488
 80025e0:	0800b498 	.word	0x0800b498
 80025e4:	003d0900 	.word	0x003d0900

080025e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ec:	4b02      	ldr	r3, [pc, #8]	; (80025f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	20000004 	.word	0x20000004

080025fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002600:	f7ff fff2 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002604:	4602      	mov	r2, r0
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	4903      	ldr	r1, [pc, #12]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	0800b480 	.word	0x0800b480

08002624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002628:	f7ff ffde 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	0adb      	lsrs	r3, r3, #11
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4903      	ldr	r1, [pc, #12]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	0800b480 	.word	0x0800b480

0800264c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <RCC_Delay+0x34>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <RCC_Delay+0x38>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	0a5b      	lsrs	r3, r3, #9
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002668:	bf00      	nop
  }
  while (Delay --);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1e5a      	subs	r2, r3, #1
 800266e:	60fa      	str	r2, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f9      	bne.n	8002668 <RCC_Delay+0x1c>
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	20000004 	.word	0x20000004
 8002684:	10624dd3 	.word	0x10624dd3

08002688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e042      	b.n	8002720 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe ff56 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2224      	movs	r2, #36	; 0x24
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fd71 	bl	80031b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b20      	cmp	r3, #32
 8002746:	d16d      	bne.n	8002824 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_UART_Transmit+0x2c>
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e066      	b.n	8002826 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2221      	movs	r2, #33	; 0x21
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002766:	f7ff f80d 	bl	8001784 <HAL_GetTick>
 800276a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	88fa      	ldrh	r2, [r7, #6]
 8002770:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	88fa      	ldrh	r2, [r7, #6]
 8002776:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002780:	d108      	bne.n	8002794 <HAL_UART_Transmit+0x6c>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d104      	bne.n	8002794 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	e003      	b.n	800279c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800279c:	e02a      	b.n	80027f4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2200      	movs	r2, #0
 80027a6:	2180      	movs	r1, #128	; 0x80
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 faf9 	bl	8002da0 <UART_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e036      	b.n	8002826 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10b      	bne.n	80027d6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	3302      	adds	r3, #2
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	e007      	b.n	80027e6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	3301      	adds	r3, #1
 80027e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1cf      	bne.n	800279e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2200      	movs	r2, #0
 8002806:	2140      	movs	r1, #64	; 0x40
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fac9 	bl	8002da0 <UART_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e006      	b.n	8002826 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	e000      	b.n	8002826 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002824:	2302      	movs	r3, #2
  }
}
 8002826:	4618      	mov	r0, r3
 8002828:	3720      	adds	r7, #32
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0ba      	sub	sp, #232	; 0xe8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800286e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_UART_IRQHandler+0x66>
 8002882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fbd1 	bl	8003036 <UART_Receive_IT>
      return;
 8002894:	e25b      	b.n	8002d4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 80de 	beq.w	8002a5c <HAL_UART_IRQHandler+0x22c>
 80028a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80d1 	beq.w	8002a5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_UART_IRQHandler+0xae>
 80028c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f043 0201 	orr.w	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_UART_IRQHandler+0xd2>
 80028ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f043 0202 	orr.w	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_UART_IRQHandler+0xf6>
 800290e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f043 0204 	orr.w	r2, r3, #4
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d011      	beq.n	8002956 <HAL_UART_IRQHandler+0x126>
 8002932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800293e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f043 0208 	orr.w	r2, r3, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 81f2 	beq.w	8002d44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_UART_IRQHandler+0x14e>
 800296c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fb5c 	bl	8003036 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d103      	bne.n	80029aa <HAL_UART_IRQHandler+0x17a>
 80029a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d04f      	beq.n	8002a4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fa66 	bl	8002e7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d041      	beq.n	8002a42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3314      	adds	r3, #20
 80029c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029cc:	e853 3f00 	ldrex	r3, [r3]
 80029d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029fa:	e841 2300 	strex	r3, r2, [r1]
 80029fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1d9      	bne.n	80029be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d013      	beq.n	8002a3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	4a7e      	ldr	r2, [pc, #504]	; (8002c10 <HAL_UART_IRQHandler+0x3e0>)
 8002a18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff f826 	bl	8001a70 <HAL_DMA_Abort_IT>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a34:	4610      	mov	r0, r2
 8002a36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a38:	e00e      	b.n	8002a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f99c 	bl	8002d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a40:	e00a      	b.n	8002a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f998 	bl	8002d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a48:	e006      	b.n	8002a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f994 	bl	8002d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002a56:	e175      	b.n	8002d44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a58:	bf00      	nop
    return;
 8002a5a:	e173      	b.n	8002d44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	f040 814f 	bne.w	8002d04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8148 	beq.w	8002d04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8141 	beq.w	8002d04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 80b6 	beq.w	8002c14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ab4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8145 	beq.w	8002d48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	f080 813e 	bcs.w	8002d48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ad2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	f000 8088 	beq.w	8002bf0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	330c      	adds	r3, #12
 8002ae6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aee:	e853 3f00 	ldrex	r3, [r3]
 8002af2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002af6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002afe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	330c      	adds	r3, #12
 8002b08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b0c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b14:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b1c:	e841 2300 	strex	r3, r2, [r1]
 8002b20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1d9      	bne.n	8002ae0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3314      	adds	r3, #20
 8002b32:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b36:	e853 3f00 	ldrex	r3, [r3]
 8002b3a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3314      	adds	r3, #20
 8002b4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b5c:	e841 2300 	strex	r3, r2, [r1]
 8002b60:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e1      	bne.n	8002b2c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3314      	adds	r3, #20
 8002b6e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b72:	e853 3f00 	ldrex	r3, [r3]
 8002b76:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3314      	adds	r3, #20
 8002b88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b94:	e841 2300 	strex	r3, r2, [r1]
 8002b98:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e3      	bne.n	8002b68 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	330c      	adds	r3, #12
 8002bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb8:	e853 3f00 	ldrex	r3, [r3]
 8002bbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc0:	f023 0310 	bic.w	r3, r3, #16
 8002bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002bd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bd4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e3      	bne.n	8002bae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe ff05 	bl	80019fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4619      	mov	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f8bf 	bl	8002d8a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c0c:	e09c      	b.n	8002d48 <HAL_UART_IRQHandler+0x518>
 8002c0e:	bf00      	nop
 8002c10:	08002f41 	.word	0x08002f41
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 808e 	beq.w	8002d4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8089 	beq.w	8002d4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	330c      	adds	r3, #12
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c5e:	647a      	str	r2, [r7, #68]	; 0x44
 8002c60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c66:	e841 2300 	strex	r3, r2, [r1]
 8002c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1e3      	bne.n	8002c3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3314      	adds	r3, #20
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	e853 3f00 	ldrex	r3, [r3]
 8002c80:	623b      	str	r3, [r7, #32]
   return(result);
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3314      	adds	r3, #20
 8002c92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c96:	633a      	str	r2, [r7, #48]	; 0x30
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e3      	bne.n	8002c72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	330c      	adds	r3, #12
 8002cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	e853 3f00 	ldrex	r3, [r3]
 8002cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0310 	bic.w	r3, r3, #16
 8002cce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	330c      	adds	r3, #12
 8002cd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cdc:	61fa      	str	r2, [r7, #28]
 8002cde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce0:	69b9      	ldr	r1, [r7, #24]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	e841 2300 	strex	r3, r2, [r1]
 8002ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e3      	bne.n	8002cb8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f844 	bl	8002d8a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d02:	e023      	b.n	8002d4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_UART_IRQHandler+0x4f4>
 8002d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f923 	bl	8002f68 <UART_Transmit_IT>
    return;
 8002d22:	e014      	b.n	8002d4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00e      	beq.n	8002d4e <HAL_UART_IRQHandler+0x51e>
 8002d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f962 	bl	8003006 <UART_EndTransmit_IT>
    return;
 8002d42:	e004      	b.n	8002d4e <HAL_UART_IRQHandler+0x51e>
    return;
 8002d44:	bf00      	nop
 8002d46:	e002      	b.n	8002d4e <HAL_UART_IRQHandler+0x51e>
      return;
 8002d48:	bf00      	nop
 8002d4a:	e000      	b.n	8002d4e <HAL_UART_IRQHandler+0x51e>
      return;
 8002d4c:	bf00      	nop
  }
}
 8002d4e:	37e8      	adds	r7, #232	; 0xe8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b090      	sub	sp, #64	; 0x40
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	4613      	mov	r3, r2
 8002dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db0:	e050      	b.n	8002e54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d04c      	beq.n	8002e54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dc0:	f7fe fce0 	bl	8001784 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d241      	bcs.n	8002e54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	330c      	adds	r3, #12
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	e853 3f00 	ldrex	r3, [r3]
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002df0:	637a      	str	r2, [r7, #52]	; 0x34
 8002df2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002df8:	e841 2300 	strex	r3, r2, [r1]
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e5      	bne.n	8002dd0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3314      	adds	r3, #20
 8002e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	e853 3f00 	ldrex	r3, [r3]
 8002e12:	613b      	str	r3, [r7, #16]
   return(result);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3314      	adds	r3, #20
 8002e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e24:	623a      	str	r2, [r7, #32]
 8002e26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e28:	69f9      	ldr	r1, [r7, #28]
 8002e2a:	6a3a      	ldr	r2, [r7, #32]
 8002e2c:	e841 2300 	strex	r3, r2, [r1]
 8002e30:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e5      	bne.n	8002e04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e00f      	b.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d09f      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3740      	adds	r7, #64	; 0x40
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b095      	sub	sp, #84	; 0x54
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ea4:	643a      	str	r2, [r7, #64]	; 0x40
 8002ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002eaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e5      	bne.n	8002e84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ed8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee0:	e841 2300 	strex	r3, r2, [r1]
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e5      	bne.n	8002eb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d119      	bne.n	8002f28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	e853 3f00 	ldrex	r3, [r3]
 8002f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f023 0310 	bic.w	r3, r3, #16
 8002f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	330c      	adds	r3, #12
 8002f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f14:	61ba      	str	r2, [r7, #24]
 8002f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f18:	6979      	ldr	r1, [r7, #20]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	e841 2300 	strex	r3, r2, [r1]
 8002f20:	613b      	str	r3, [r7, #16]
   return(result);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e5      	bne.n	8002ef4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f36:	bf00      	nop
 8002f38:	3754      	adds	r7, #84	; 0x54
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f7ff ff0c 	bl	8002d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b21      	cmp	r3, #33	; 0x21
 8002f7a:	d13e      	bne.n	8002ffa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f84:	d114      	bne.n	8002fb0 <UART_Transmit_IT+0x48>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d110      	bne.n	8002fb0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fa2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	1c9a      	adds	r2, r3, #2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	621a      	str	r2, [r3, #32]
 8002fae:	e008      	b.n	8002fc2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	1c59      	adds	r1, r3, #1
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6211      	str	r1, [r2, #32]
 8002fba:	781a      	ldrb	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
  }
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800301c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fe94 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b08c      	sub	sp, #48	; 0x30
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b22      	cmp	r3, #34	; 0x22
 8003048:	f040 80ae 	bne.w	80031a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003054:	d117      	bne.n	8003086 <UART_Receive_IT+0x50>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d113      	bne.n	8003086 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	b29b      	uxth	r3, r3
 8003070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003074:	b29a      	uxth	r2, r3
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	1c9a      	adds	r2, r3, #2
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
 8003084:	e026      	b.n	80030d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800308c:	2300      	movs	r3, #0
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003098:	d007      	beq.n	80030aa <UART_Receive_IT+0x74>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <UART_Receive_IT+0x82>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e008      	b.n	80030ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29b      	uxth	r3, r3
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4619      	mov	r1, r3
 80030e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d15d      	bne.n	80031a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0220 	bic.w	r2, r2, #32
 80030f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	2b01      	cmp	r3, #1
 800312c:	d135      	bne.n	800319a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	613b      	str	r3, [r7, #16]
   return(result);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f023 0310 	bic.w	r3, r3, #16
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003154:	623a      	str	r2, [r7, #32]
 8003156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	69f9      	ldr	r1, [r7, #28]
 800315a:	6a3a      	ldr	r2, [r7, #32]
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	61bb      	str	r3, [r7, #24]
   return(result);
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e5      	bne.n	8003134 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b10      	cmp	r3, #16
 8003174:	d10a      	bne.n	800318c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff fdf9 	bl	8002d8a <HAL_UARTEx_RxEventCallback>
 8003198:	e002      	b.n	80031a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fde3 	bl	8002d66 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e002      	b.n	80031aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3730      	adds	r7, #48	; 0x30
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031ee:	f023 030c 	bic.w	r3, r3, #12
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2c      	ldr	r2, [pc, #176]	; (80032c8 <UART_SetConfig+0x114>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d103      	bne.n	8003224 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800321c:	f7ff fa02 	bl	8002624 <HAL_RCC_GetPCLK2Freq>
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	e002      	b.n	800322a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003224:	f7ff f9ea 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 8003228:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009a      	lsls	r2, r3, #2
 8003234:	441a      	add	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	4a22      	ldr	r2, [pc, #136]	; (80032cc <UART_SetConfig+0x118>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	0119      	lsls	r1, r3, #4
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003260:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <UART_SetConfig+0x118>)
 8003262:	fba3 0302 	umull	r0, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2064      	movs	r0, #100	; 0x64
 800326a:	fb00 f303 	mul.w	r3, r0, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	3332      	adds	r3, #50	; 0x32
 8003274:	4a15      	ldr	r2, [pc, #84]	; (80032cc <UART_SetConfig+0x118>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003280:	4419      	add	r1, r3
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	009a      	lsls	r2, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	fbb2 f2f3 	udiv	r2, r2, r3
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <UART_SetConfig+0x118>)
 800329a:	fba3 0302 	umull	r0, r3, r3, r2
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2064      	movs	r0, #100	; 0x64
 80032a2:	fb00 f303 	mul.w	r3, r0, r3
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	3332      	adds	r3, #50	; 0x32
 80032ac:	4a07      	ldr	r2, [pc, #28]	; (80032cc <UART_SetConfig+0x118>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	f003 020f 	and.w	r2, r3, #15
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	440a      	add	r2, r1
 80032be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40013800 	.word	0x40013800
 80032cc:	51eb851f 	.word	0x51eb851f

080032d0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <Ringbuf_init+0x38>)
 80032d6:	4a0d      	ldr	r2, [pc, #52]	; (800330c <Ringbuf_init+0x3c>)
 80032d8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80032da:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <Ringbuf_init+0x40>)
 80032dc:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <Ringbuf_init+0x44>)
 80032de:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80032e0:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <Ringbuf_init+0x48>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <Ringbuf_init+0x48>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80032f0:	4b09      	ldr	r3, [pc, #36]	; (8003318 <Ringbuf_init+0x48>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <Ringbuf_init+0x48>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0220 	orr.w	r2, r2, #32
 80032fe:	60da      	str	r2, [r3, #12]
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	200006e4 	.word	0x200006e4
 800330c:	200002d4 	.word	0x200002d4
 8003310:	200006e8 	.word	0x200006e8
 8003314:	200004dc 	.word	0x200004dc
 8003318:	2000023c 	.word	0x2000023c

0800331c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	6039      	str	r1, [r7, #0]
 8003326:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800332e:	3301      	adds	r3, #1
 8003330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003334:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	429a      	cmp	r2, r3
 8003340:	d009      	beq.n	8003356 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	79f9      	ldrb	r1, [r7, #7]
 800334c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	d013      	beq.n	80033aa <Uart_isr+0x4a>
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00e      	beq.n	80033aa <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800339a:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <Uart_isr+0xb4>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ffba 	bl	800331c <store_char>
        return;
 80033a8:	e031      	b.n	800340e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d02c      	beq.n	800340e <Uart_isr+0xae>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d027      	beq.n	800340e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80033be:	4b16      	ldr	r3, [pc, #88]	; (8003418 <Uart_isr+0xb8>)
 80033c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <Uart_isr+0xb8>)
 80033c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d108      	bne.n	80033e0 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033dc:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80033de:	e015      	b.n	800340c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <Uart_isr+0xb8>)
 80033e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80033e6:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <Uart_isr+0xb8>)
 80033e8:	5cd3      	ldrb	r3, [r2, r3]
 80033ea:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <Uart_isr+0xb8>)
 80033ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f8:	4a07      	ldr	r2, [pc, #28]	; (8003418 <Uart_isr+0xb8>)
 80033fa:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	7bba      	ldrb	r2, [r7, #14]
 800340a:	605a      	str	r2, [r3, #4]
    	return;
 800340c:	bf00      	nop
    }
}
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	200006e4 	.word	0x200006e4
 8003418:	200004dc 	.word	0x200004dc

0800341c <EKF_Init>:
#include "EKFmath.h"
#include <stdint.h>
#include <string.h>

void EKF_Init(EKF *EKF,Input *Input)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
//First Step
	EKF->FirPx= 106.802343;  //input
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a3f      	ldr	r2, [pc, #252]	; (8003528 <EKF_Init+0x10c>)
 800342a:	601a      	str	r2, [r3, #0]
	EKF->FirPy=10.869826; //input
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a3f      	ldr	r2, [pc, #252]	; (800352c <EKF_Init+0x110>)
 8003430:	605a      	str	r2, [r3, #4]
	EKF->FirVelx=0; //input
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
 	EKF->CovVely=0; //input
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	63da      	str	r2, [r3, #60]	; 0x3c
	EKF->FirHea=-PI/6; //input
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a3a      	ldr	r2, [pc, #232]	; (8003530 <EKF_Init+0x114>)
 8003446:	611a      	str	r2, [r3, #16]
	EKF->FirStee=PI/6; //input
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a3a      	ldr	r2, [pc, #232]	; (8003534 <EKF_Init+0x118>)
 800344c:	615a      	str	r2, [r3, #20]
//Next Step
	EKF->NexPx=0;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	619a      	str	r2, [r3, #24]
	EKF->NexPy=0;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	61da      	str	r2, [r3, #28]
	EKF->NexVelx=0;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	621a      	str	r2, [r3, #32]
	EKF->NexVely=0;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	625a      	str	r2, [r3, #36]	; 0x24
	EKF->NexHea=0;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	629a      	str	r2, [r3, #40]	; 0x28
	EKF->NexStee=0;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c
//Covariance
	EKF->CovPx=0; //input
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
	EKF->CovPy=0; //input
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	635a      	str	r2, [r3, #52]	; 0x34
	EKF->CovVelx=0;//input
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
	EKF->CovVely=0;//input
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	63da      	str	r2, [r3, #60]	; 0x3c
	EKF->CovHea=0; //input
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
	EKF->CovStee=0; //input
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
//FirstIput
	Input->Accx=0.2;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	4a21      	ldr	r2, [pc, #132]	; (8003538 <EKF_Init+0x11c>)
 80034b2:	615a      	str	r2, [r3, #20]
	Input->Accy=0.2;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	4a20      	ldr	r2, [pc, #128]	; (8003538 <EKF_Init+0x11c>)
 80034b8:	619a      	str	r2, [r3, #24]
	Input->Accz=0.2;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	4a1e      	ldr	r2, [pc, #120]	; (8003538 <EKF_Init+0x11c>)
 80034be:	61da      	str	r2, [r3, #28]
	Input->Time=0.1; //input
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4a1e      	ldr	r2, [pc, #120]	; (800353c <EKF_Init+0x120>)
 80034c4:	621a      	str	r2, [r3, #32]
//Covariance
	memset(EKF->Prediction_CovarianceNex,0,sizeof(EKF->Prediction_CovarianceNex));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3348      	adds	r3, #72	; 0x48
 80034ca:	2290      	movs	r2, #144	; 0x90
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f002 f97d 	bl	80057ce <memset>
	memset(EKF->Prediction_CovarianceFir,0,sizeof(EKF->Prediction_CovarianceFir));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	33d8      	adds	r3, #216	; 0xd8
 80034d8:	2290      	movs	r2, #144	; 0x90
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 f976 	bl	80057ce <memset>
	EKF->Prediction_CovarianceFir[0][0]= EKF->CovPx;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	EKF->Prediction_CovarianceFir[1][1]= EKF->CovPy;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	EKF->Prediction_CovarianceFir[2][2]= EKF->CovVelx;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	EKF->Prediction_CovarianceFir[3][3]= EKF->CovVely;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	EKF->Prediction_CovarianceFir[4][4]= EKF->CovHea;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	EKF->Prediction_CovarianceFir[5][5]= EKF->CovStee;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	42d59acd 	.word	0x42d59acd
 800352c:	412deacf 	.word	0x412deacf
 8003530:	bf060a90 	.word	0xbf060a90
 8003534:	3f060a90 	.word	0x3f060a90
 8003538:	3e4ccccd 	.word	0x3e4ccccd
 800353c:	3dcccccd 	.word	0x3dcccccd

08003540 <EKF_PredictionStep>:

void EKF_PredictionStep(EKF *EKF, Angle *Angle, Input *Input){
 8003540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003544:	b0f7      	sub	sp, #476	; 0x1dc
 8003546:	af02      	add	r7, sp, #8
 8003548:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800354c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003550:	6018      	str	r0, [r3, #0]
 8003552:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003556:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800355a:	6019      	str	r1, [r3, #0]
 800355c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003560:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003564:	601a      	str	r2, [r3, #0]
// Prediction State
	float a_hx;
	float a_hy;

	 a_hx = Input->Accx * cos(Angle->Pitch) + Input->Accy * sin(Angle->Roll) * sin(Angle->Pitch) + Input->Accz * cos(Angle->Roll) * sin(Angle->Pitch);
 8003566:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800356a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fc ff58 	bl	8000428 <__aeabi_f2d>
 8003578:	4680      	mov	r8, r0
 800357a:	4689      	mov	r9, r1
 800357c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003580:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4618      	mov	r0, r3
 800358a:	f7fc ff4d 	bl	8000428 <__aeabi_f2d>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	f005 fed5 	bl	8009344 <cos>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4640      	mov	r0, r8
 80035a0:	4649      	mov	r1, r9
 80035a2:	f7fc ff99 	bl	80004d8 <__aeabi_dmul>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4692      	mov	sl, r2
 80035ac:	469b      	mov	fp, r3
 80035ae:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80035b2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fc ff34 	bl	8000428 <__aeabi_f2d>
 80035c0:	4680      	mov	r8, r0
 80035c2:	4689      	mov	r9, r1
 80035c4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80035c8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc ff29 	bl	8000428 <__aeabi_f2d>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	f005 fefb 	bl	80093d8 <sin>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4640      	mov	r0, r8
 80035e8:	4649      	mov	r1, r9
 80035ea:	f7fc ff75 	bl	80004d8 <__aeabi_dmul>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4690      	mov	r8, r2
 80035f4:	4699      	mov	r9, r3
 80035f6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80035fa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fc ff10 	bl	8000428 <__aeabi_f2d>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4610      	mov	r0, r2
 800360e:	4619      	mov	r1, r3
 8003610:	f005 fee2 	bl	80093d8 <sin>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4640      	mov	r0, r8
 800361a:	4649      	mov	r1, r9
 800361c:	f7fc ff5c 	bl	80004d8 <__aeabi_dmul>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4650      	mov	r0, sl
 8003626:	4659      	mov	r1, fp
 8003628:	f7fc fda0 	bl	800016c <__adddf3>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4692      	mov	sl, r2
 8003632:	469b      	mov	fp, r3
 8003634:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003638:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fc fef1 	bl	8000428 <__aeabi_f2d>
 8003646:	4680      	mov	r8, r0
 8003648:	4689      	mov	r9, r1
 800364a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800364e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fc fee6 	bl	8000428 <__aeabi_f2d>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4610      	mov	r0, r2
 8003662:	4619      	mov	r1, r3
 8003664:	f005 fe6e 	bl	8009344 <cos>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4640      	mov	r0, r8
 800366e:	4649      	mov	r1, r9
 8003670:	f7fc ff32 	bl	80004d8 <__aeabi_dmul>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4690      	mov	r8, r2
 800367a:	4699      	mov	r9, r3
 800367c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003680:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4618      	mov	r0, r3
 800368a:	f7fc fecd 	bl	8000428 <__aeabi_f2d>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	f005 fe9f 	bl	80093d8 <sin>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4640      	mov	r0, r8
 80036a0:	4649      	mov	r1, r9
 80036a2:	f7fc ff19 	bl	80004d8 <__aeabi_dmul>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4650      	mov	r0, sl
 80036ac:	4659      	mov	r1, fp
 80036ae:	f7fc fd5d 	bl	800016c <__adddf3>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	f7fd fa05 	bl	8000ac8 <__aeabi_d2f>
 80036be:	4603      	mov	r3, r0
 80036c0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	 a_hy = Input->Accy * cos(Angle->Roll) - Input->Accz * sin(Angle->Roll);
 80036c4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80036c8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fc fea9 	bl	8000428 <__aeabi_f2d>
 80036d6:	4680      	mov	r8, r0
 80036d8:	4689      	mov	r9, r1
 80036da:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80036de:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fc fe9e 	bl	8000428 <__aeabi_f2d>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4610      	mov	r0, r2
 80036f2:	4619      	mov	r1, r3
 80036f4:	f005 fe26 	bl	8009344 <cos>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4640      	mov	r0, r8
 80036fe:	4649      	mov	r1, r9
 8003700:	f7fc feea 	bl	80004d8 <__aeabi_dmul>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4692      	mov	sl, r2
 800370a:	469b      	mov	fp, r3
 800370c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003710:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	4618      	mov	r0, r3
 800371a:	f7fc fe85 	bl	8000428 <__aeabi_f2d>
 800371e:	4680      	mov	r8, r0
 8003720:	4689      	mov	r9, r1
 8003722:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003726:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fc fe7a 	bl	8000428 <__aeabi_f2d>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4610      	mov	r0, r2
 800373a:	4619      	mov	r1, r3
 800373c:	f005 fe4c 	bl	80093d8 <sin>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4640      	mov	r0, r8
 8003746:	4649      	mov	r1, r9
 8003748:	f7fc fec6 	bl	80004d8 <__aeabi_dmul>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4650      	mov	r0, sl
 8003752:	4659      	mov	r1, fp
 8003754:	f7fc fd08 	bl	8000168 <__aeabi_dsub>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	f7fd f9b2 	bl	8000ac8 <__aeabi_d2f>
 8003764:	4603      	mov	r3, r0
 8003766:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

	 Angle->AngleBeta= (atan(LENGTH_REAR*tan(EKF->FirStee))/LENGTH_CAR);
 800376a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800376e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fc fe56 	bl	8000428 <__aeabi_f2d>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	f005 fe6e 	bl	8009464 <tan>
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	4bcd      	ldr	r3, [pc, #820]	; (8003ac4 <EKF_PredictionStep+0x584>)
 800378e:	f7fc fea3 	bl	80004d8 <__aeabi_dmul>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f005 fc49 	bl	8009030 <atan>
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	4bc9      	ldr	r3, [pc, #804]	; (8003ac8 <EKF_PredictionStep+0x588>)
 80037a4:	f7fc ffc2 	bl	800072c <__aeabi_ddiv>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	f7fd f98a 	bl	8000ac8 <__aeabi_d2f>
 80037b4:	4602      	mov	r2, r0
 80037b6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80037ba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	601a      	str	r2, [r3, #0]

	 EKF->NexPx= EKF->FirPx + (EKF->FirVelx * cos(Angle->AngleBeta+EKF->FirHea))*Input->Time;
 80037c2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80037c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fc fe2a 	bl	8000428 <__aeabi_f2d>
 80037d4:	4680      	mov	r8, r0
 80037d6:	4689      	mov	r9, r1
 80037d8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80037dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fc fe1f 	bl	8000428 <__aeabi_f2d>
 80037ea:	4682      	mov	sl, r0
 80037ec:	468b      	mov	fp, r1
 80037ee:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80037f2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80037fe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f7fd f9b3 	bl	8000b74 <__addsf3>
 800380e:	4603      	mov	r3, r0
 8003810:	4618      	mov	r0, r3
 8003812:	f7fc fe09 	bl	8000428 <__aeabi_f2d>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	f005 fd91 	bl	8009344 <cos>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4650      	mov	r0, sl
 8003828:	4659      	mov	r1, fp
 800382a:	f7fc fe55 	bl	80004d8 <__aeabi_dmul>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4692      	mov	sl, r2
 8003834:	469b      	mov	fp, r3
 8003836:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800383a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fc fdf0 	bl	8000428 <__aeabi_f2d>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4650      	mov	r0, sl
 800384e:	4659      	mov	r1, fp
 8003850:	f7fc fe42 	bl	80004d8 <__aeabi_dmul>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4640      	mov	r0, r8
 800385a:	4649      	mov	r1, r9
 800385c:	f7fc fc86 	bl	800016c <__adddf3>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	f7fd f92e 	bl	8000ac8 <__aeabi_d2f>
 800386c:	4602      	mov	r2, r0
 800386e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003872:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	619a      	str	r2, [r3, #24]

	 EKF->NexPy= EKF->FirPy + (EKF->FirVely * sin(Angle->AngleBeta +EKF->FirHea))*Input->Time;
 800387a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800387e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fc fdce 	bl	8000428 <__aeabi_f2d>
 800388c:	4680      	mov	r8, r0
 800388e:	4689      	mov	r9, r1
 8003890:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003894:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fc fdc3 	bl	8000428 <__aeabi_f2d>
 80038a2:	4682      	mov	sl, r0
 80038a4:	468b      	mov	fp, r1
 80038a6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80038aa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80038b6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	4619      	mov	r1, r3
 80038c0:	4610      	mov	r0, r2
 80038c2:	f7fd f957 	bl	8000b74 <__addsf3>
 80038c6:	4603      	mov	r3, r0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fc fdad 	bl	8000428 <__aeabi_f2d>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	f005 fd7f 	bl	80093d8 <sin>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4650      	mov	r0, sl
 80038e0:	4659      	mov	r1, fp
 80038e2:	f7fc fdf9 	bl	80004d8 <__aeabi_dmul>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4692      	mov	sl, r2
 80038ec:	469b      	mov	fp, r3
 80038ee:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80038f2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fc fd94 	bl	8000428 <__aeabi_f2d>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4650      	mov	r0, sl
 8003906:	4659      	mov	r1, fp
 8003908:	f7fc fde6 	bl	80004d8 <__aeabi_dmul>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4640      	mov	r0, r8
 8003912:	4649      	mov	r1, r9
 8003914:	f7fc fc2a 	bl	800016c <__adddf3>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4610      	mov	r0, r2
 800391e:	4619      	mov	r1, r3
 8003920:	f7fd f8d2 	bl	8000ac8 <__aeabi_d2f>
 8003924:	4602      	mov	r2, r0
 8003926:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800392a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	61da      	str	r2, [r3, #28]

	 EKF->NexVelx= EKF->FirVelx + a_hx *Input->Time;
 8003932:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003936:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689e      	ldr	r6, [r3, #8]
 800393e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003942:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800394e:	4618      	mov	r0, r3
 8003950:	f7fd fa18 	bl	8000d84 <__aeabi_fmul>
 8003954:	4603      	mov	r3, r0
 8003956:	4619      	mov	r1, r3
 8003958:	4630      	mov	r0, r6
 800395a:	f7fd f90b 	bl	8000b74 <__addsf3>
 800395e:	4603      	mov	r3, r0
 8003960:	461a      	mov	r2, r3
 8003962:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003966:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	621a      	str	r2, [r3, #32]

	 EKF->NexVely= EKF->FirVely + a_hy *Input->Time;
 800396e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003972:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68de      	ldr	r6, [r3, #12]
 800397a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800397e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd f9fa 	bl	8000d84 <__aeabi_fmul>
 8003990:	4603      	mov	r3, r0
 8003992:	4619      	mov	r1, r3
 8003994:	4630      	mov	r0, r6
 8003996:	f7fd f8ed 	bl	8000b74 <__addsf3>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80039a2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

	 EKF->NexHea= EKF->FirHea + ((EKF->FirVely*tan(EKF->FirStee)*cos(Angle->AngleBeta))/LENGTH_CAR)*Input->Time;
 80039aa:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80039ae:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fd36 	bl	8000428 <__aeabi_f2d>
 80039bc:	4680      	mov	r8, r0
 80039be:	4689      	mov	r9, r1
 80039c0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80039c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fc fd2b 	bl	8000428 <__aeabi_f2d>
 80039d2:	4682      	mov	sl, r0
 80039d4:	468b      	mov	fp, r1
 80039d6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80039da:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fc fd20 	bl	8000428 <__aeabi_f2d>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4610      	mov	r0, r2
 80039ee:	4619      	mov	r1, r3
 80039f0:	f005 fd38 	bl	8009464 <tan>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4650      	mov	r0, sl
 80039fa:	4659      	mov	r1, fp
 80039fc:	f7fc fd6c 	bl	80004d8 <__aeabi_dmul>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4692      	mov	sl, r2
 8003a06:	469b      	mov	fp, r3
 8003a08:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003a0c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fc fd07 	bl	8000428 <__aeabi_f2d>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4610      	mov	r0, r2
 8003a20:	4619      	mov	r1, r3
 8003a22:	f005 fc8f 	bl	8009344 <cos>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4650      	mov	r0, sl
 8003a2c:	4659      	mov	r1, fp
 8003a2e:	f7fc fd53 	bl	80004d8 <__aeabi_dmul>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4610      	mov	r0, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <EKF_PredictionStep+0x588>)
 8003a40:	f7fc fe74 	bl	800072c <__aeabi_ddiv>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4692      	mov	sl, r2
 8003a4a:	469b      	mov	fp, r3
 8003a4c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003a50:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fc fce5 	bl	8000428 <__aeabi_f2d>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4650      	mov	r0, sl
 8003a64:	4659      	mov	r1, fp
 8003a66:	f7fc fd37 	bl	80004d8 <__aeabi_dmul>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4640      	mov	r0, r8
 8003a70:	4649      	mov	r1, r9
 8003a72:	f7fc fb7b 	bl	800016c <__adddf3>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f7fd f823 	bl	8000ac8 <__aeabi_d2f>
 8003a82:	4602      	mov	r2, r0
 8003a84:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003a88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28

	 EKF->NexStee= EKF->FirStee + Input->Stee*Input->Time;
 8003a90:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003a94:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695e      	ldr	r6, [r3, #20]
 8003a9c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003aa0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003aac:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f7fd f964 	bl	8000d84 <__aeabi_fmul>
 8003abc:	4603      	mov	r3, r0
 8003abe:	4619      	mov	r1, r3
 8003ac0:	e004      	b.n	8003acc <EKF_PredictionStep+0x58c>
 8003ac2:	bf00      	nop
 8003ac4:	40240000 	.word	0x40240000
 8003ac8:	40340000 	.word	0x40340000
 8003acc:	4630      	mov	r0, r6
 8003ace:	f7fd f851 	bl	8000b74 <__addsf3>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003ada:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	62da      	str	r2, [r3, #44]	; 0x2c
// Prediction Covariance
	 float Mul_Result[6][6];
	 float Trans_Result[6][6];
	 float Jacobian[6][6];

	 memset(Trans_Result,0,sizeof(Trans_Result));
 8003ae2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003ae6:	2290      	movs	r2, #144	; 0x90
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fe6f 	bl	80057ce <memset>
	 memset(Jacobian,0,sizeof(Jacobian));
 8003af0:	f107 0318 	add.w	r3, r7, #24
 8003af4:	2290      	movs	r2, #144	; 0x90
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f001 fe68 	bl	80057ce <memset>

	 Jacobian[0][0]=1;
 8003afe:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b0a:	601a      	str	r2, [r3, #0]
	 Jacobian[0][1]=0;
 8003b0c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b10:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	605a      	str	r2, [r3, #4]
	 Jacobian[0][2]=Input->Time*cos(EKF->FirHea+atan((LENGTH_REAR*tan(EKF->FirStee))/LENGTH_CAR));
 8003b1a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b1e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fc fc7e 	bl	8000428 <__aeabi_f2d>
 8003b2c:	4680      	mov	r8, r0
 8003b2e:	4689      	mov	r9, r1
 8003b30:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b34:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fc fc73 	bl	8000428 <__aeabi_f2d>
 8003b42:	4682      	mov	sl, r0
 8003b44:	468b      	mov	fp, r1
 8003b46:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b4a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fc68 	bl	8000428 <__aeabi_f2d>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f005 fc80 	bl	8009464 <tan>
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	4bd9      	ldr	r3, [pc, #868]	; (8003ed0 <EKF_PredictionStep+0x990>)
 8003b6a:	f7fc fcb5 	bl	80004d8 <__aeabi_dmul>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	4bd6      	ldr	r3, [pc, #856]	; (8003ed4 <EKF_PredictionStep+0x994>)
 8003b7c:	f7fc fdd6 	bl	800072c <__aeabi_ddiv>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4610      	mov	r0, r2
 8003b86:	4619      	mov	r1, r3
 8003b88:	f005 fa52 	bl	8009030 <atan>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4650      	mov	r0, sl
 8003b92:	4659      	mov	r1, fp
 8003b94:	f7fc faea 	bl	800016c <__adddf3>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	f005 fbd0 	bl	8009344 <cos>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4640      	mov	r0, r8
 8003baa:	4649      	mov	r1, r9
 8003bac:	f7fc fc94 	bl	80004d8 <__aeabi_dmul>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f7fc ff86 	bl	8000ac8 <__aeabi_d2f>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bc2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003bc6:	609a      	str	r2, [r3, #8]
	 Jacobian[0][3]=0;
 8003bc8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bcc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	60da      	str	r2, [r3, #12]
	 Jacobian[0][4]=-EKF->FirVelx*Input->Time*sin(EKF->FirHea+atan(LENGTH_REAR*tan(EKF->FirStee)/LENGTH_CAR));
 8003bd6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bda:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8003be6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f7fd f8c5 	bl	8000d84 <__aeabi_fmul>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fc fc13 	bl	8000428 <__aeabi_f2d>
 8003c02:	4680      	mov	r8, r0
 8003c04:	4689      	mov	r9, r1
 8003c06:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003c0a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fc fc08 	bl	8000428 <__aeabi_f2d>
 8003c18:	4682      	mov	sl, r0
 8003c1a:	468b      	mov	fp, r1
 8003c1c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003c20:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fc fbfd 	bl	8000428 <__aeabi_f2d>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	f005 fc15 	bl	8009464 <tan>
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	4ba4      	ldr	r3, [pc, #656]	; (8003ed0 <EKF_PredictionStep+0x990>)
 8003c40:	f7fc fc4a 	bl	80004d8 <__aeabi_dmul>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	4ba0      	ldr	r3, [pc, #640]	; (8003ed4 <EKF_PredictionStep+0x994>)
 8003c52:	f7fc fd6b 	bl	800072c <__aeabi_ddiv>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f005 f9e7 	bl	8009030 <atan>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4650      	mov	r0, sl
 8003c68:	4659      	mov	r1, fp
 8003c6a:	f7fc fa7f 	bl	800016c <__adddf3>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	f005 fbaf 	bl	80093d8 <sin>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4640      	mov	r0, r8
 8003c80:	4649      	mov	r1, r9
 8003c82:	f7fc fc29 	bl	80004d8 <__aeabi_dmul>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f7fc ff1b 	bl	8000ac8 <__aeabi_d2f>
 8003c92:	4602      	mov	r2, r0
 8003c94:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003c98:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003c9c:	611a      	str	r2, [r3, #16]
	 Jacobian[0][5]=-(EKF->FirVelx *LENGTH_CAR * Input->Time *sin(EKF->FirHea+atan(LENGTH_REAR*tan(EKF->FirStee)/LENGTH_CAR))*1/cos(EKF->FirStee)*cos(EKF->FirStee))/LENGTH_CAR*LENGTH_CAR+LENGTH_REAR*LENGTH_REAR*tan(EKF->FirStee)*tan(EKF->FirStee);
 8003c9e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003ca2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	498b      	ldr	r1, [pc, #556]	; (8003ed8 <EKF_PredictionStep+0x998>)
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fd f869 	bl	8000d84 <__aeabi_fmul>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003cba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f7fd f85d 	bl	8000d84 <__aeabi_fmul>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fc fbab 	bl	8000428 <__aeabi_f2d>
 8003cd2:	4680      	mov	r8, r0
 8003cd4:	4689      	mov	r9, r1
 8003cd6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003cda:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fba0 	bl	8000428 <__aeabi_f2d>
 8003ce8:	4682      	mov	sl, r0
 8003cea:	468b      	mov	fp, r1
 8003cec:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003cf0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fc fb95 	bl	8000428 <__aeabi_f2d>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4610      	mov	r0, r2
 8003d04:	4619      	mov	r1, r3
 8003d06:	f005 fbad 	bl	8009464 <tan>
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	4b70      	ldr	r3, [pc, #448]	; (8003ed0 <EKF_PredictionStep+0x990>)
 8003d10:	f7fc fbe2 	bl	80004d8 <__aeabi_dmul>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	4b6c      	ldr	r3, [pc, #432]	; (8003ed4 <EKF_PredictionStep+0x994>)
 8003d22:	f7fc fd03 	bl	800072c <__aeabi_ddiv>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f005 f97f 	bl	8009030 <atan>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4650      	mov	r0, sl
 8003d38:	4659      	mov	r1, fp
 8003d3a:	f7fc fa17 	bl	800016c <__adddf3>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4610      	mov	r0, r2
 8003d44:	4619      	mov	r1, r3
 8003d46:	f005 fb47 	bl	80093d8 <sin>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4640      	mov	r0, r8
 8003d50:	4649      	mov	r1, r9
 8003d52:	f7fc fbc1 	bl	80004d8 <__aeabi_dmul>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4690      	mov	r8, r2
 8003d5c:	4699      	mov	r9, r3
 8003d5e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d62:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fc fb5c 	bl	8000428 <__aeabi_f2d>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	f005 fae4 	bl	8009344 <cos>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4640      	mov	r0, r8
 8003d82:	4649      	mov	r1, r9
 8003d84:	f7fc fcd2 	bl	800072c <__aeabi_ddiv>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4690      	mov	r8, r2
 8003d8e:	4699      	mov	r9, r3
 8003d90:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d94:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fc fb43 	bl	8000428 <__aeabi_f2d>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	f005 facb 	bl	8009344 <cos>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4640      	mov	r0, r8
 8003db4:	4649      	mov	r1, r9
 8003db6:	f7fc fb8f 	bl	80004d8 <__aeabi_dmul>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4614      	mov	r4, r2
 8003dc0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	4b42      	ldr	r3, [pc, #264]	; (8003ed4 <EKF_PredictionStep+0x994>)
 8003dca:	4620      	mov	r0, r4
 8003dcc:	4629      	mov	r1, r5
 8003dce:	f7fc fcad 	bl	800072c <__aeabi_ddiv>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	4b3d      	ldr	r3, [pc, #244]	; (8003ed4 <EKF_PredictionStep+0x994>)
 8003de0:	f7fc fb7a 	bl	80004d8 <__aeabi_dmul>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4614      	mov	r4, r2
 8003dea:	461d      	mov	r5, r3
 8003dec:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003df0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fc fb15 	bl	8000428 <__aeabi_f2d>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4610      	mov	r0, r2
 8003e04:	4619      	mov	r1, r3
 8003e06:	f005 fb2d 	bl	8009464 <tan>
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	4b33      	ldr	r3, [pc, #204]	; (8003edc <EKF_PredictionStep+0x99c>)
 8003e10:	f7fc fb62 	bl	80004d8 <__aeabi_dmul>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4690      	mov	r8, r2
 8003e1a:	4699      	mov	r9, r3
 8003e1c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003e20:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fc fafd 	bl	8000428 <__aeabi_f2d>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	f005 fb15 	bl	8009464 <tan>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4640      	mov	r0, r8
 8003e40:	4649      	mov	r1, r9
 8003e42:	f7fc fb49 	bl	80004d8 <__aeabi_dmul>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	f7fc f98d 	bl	800016c <__adddf3>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f7fc fe35 	bl	8000ac8 <__aeabi_d2f>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003e64:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e68:	615a      	str	r2, [r3, #20]

	 Jacobian[1][0]=0;
 8003e6a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003e6e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	619a      	str	r2, [r3, #24]
	 Jacobian[1][1]=1;
 8003e78:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003e7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e84:	61da      	str	r2, [r3, #28]
	 Jacobian[1][2]=0;
 8003e86:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003e8a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	621a      	str	r2, [r3, #32]
	 Jacobian[1][3]=Input->Time*sin(EKF->FirHea+atan((LENGTH_REAR*tan(EKF->FirStee))/LENGTH_CAR));
 8003e94:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003e98:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fc fac1 	bl	8000428 <__aeabi_f2d>
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	460d      	mov	r5, r1
 8003eaa:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003eae:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fc fab6 	bl	8000428 <__aeabi_f2d>
 8003ebc:	4680      	mov	r8, r0
 8003ebe:	4689      	mov	r9, r1
 8003ec0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003ec4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	e007      	b.n	8003ee0 <EKF_PredictionStep+0x9a0>
 8003ed0:	40240000 	.word	0x40240000
 8003ed4:	40340000 	.word	0x40340000
 8003ed8:	41a00000 	.word	0x41a00000
 8003edc:	40590000 	.word	0x40590000
 8003ee0:	f7fc faa2 	bl	8000428 <__aeabi_f2d>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	f005 faba 	bl	8009464 <tan>
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	4bdd      	ldr	r3, [pc, #884]	; (800426c <EKF_PredictionStep+0xd2c>)
 8003ef6:	f7fc faef 	bl	80004d8 <__aeabi_dmul>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	4bda      	ldr	r3, [pc, #872]	; (8004270 <EKF_PredictionStep+0xd30>)
 8003f08:	f7fc fc10 	bl	800072c <__aeabi_ddiv>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4610      	mov	r0, r2
 8003f12:	4619      	mov	r1, r3
 8003f14:	f005 f88c 	bl	8009030 <atan>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4640      	mov	r0, r8
 8003f1e:	4649      	mov	r1, r9
 8003f20:	f7fc f924 	bl	800016c <__adddf3>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f005 fa54 	bl	80093d8 <sin>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4620      	mov	r0, r4
 8003f36:	4629      	mov	r1, r5
 8003f38:	f7fc face 	bl	80004d8 <__aeabi_dmul>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4610      	mov	r0, r2
 8003f42:	4619      	mov	r1, r3
 8003f44:	f7fc fdc0 	bl	8000ac8 <__aeabi_d2f>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003f4e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24
	 Jacobian[1][4]=EKF->FirVely*sin(EKF->FirHea+atan(LENGTH_REAR*tan(EKF->FirStee)/LENGTH_CAR));
 8003f54:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003f58:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fc fa61 	bl	8000428 <__aeabi_f2d>
 8003f66:	4604      	mov	r4, r0
 8003f68:	460d      	mov	r5, r1
 8003f6a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003f6e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fc fa56 	bl	8000428 <__aeabi_f2d>
 8003f7c:	4680      	mov	r8, r0
 8003f7e:	4689      	mov	r9, r1
 8003f80:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003f84:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fc fa4b 	bl	8000428 <__aeabi_f2d>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	f005 fa63 	bl	8009464 <tan>
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	4bb2      	ldr	r3, [pc, #712]	; (800426c <EKF_PredictionStep+0xd2c>)
 8003fa4:	f7fc fa98 	bl	80004d8 <__aeabi_dmul>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	4bae      	ldr	r3, [pc, #696]	; (8004270 <EKF_PredictionStep+0xd30>)
 8003fb6:	f7fc fbb9 	bl	800072c <__aeabi_ddiv>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f005 f835 	bl	8009030 <atan>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4640      	mov	r0, r8
 8003fcc:	4649      	mov	r1, r9
 8003fce:	f7fc f8cd 	bl	800016c <__adddf3>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	f005 f9fd 	bl	80093d8 <sin>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	f7fc fa77 	bl	80004d8 <__aeabi_dmul>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4610      	mov	r0, r2
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	f7fc fd69 	bl	8000ac8 <__aeabi_d2f>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003ffc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004000:	629a      	str	r2, [r3, #40]	; 0x28
	 Jacobian[1][5]=(EKF->FirVely *LENGTH_CAR * Input->Time *cos(EKF->FirHea+atan(LENGTH_REAR*tan(EKF->FirStee)/LENGTH_CAR))*1/cos(EKF->FirStee)*cos(EKF->FirStee))/LENGTH_CAR*LENGTH_CAR+LENGTH_REAR*LENGTH_REAR*tan(EKF->FirStee)*tan(EKF->FirStee);
 8004002:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004006:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4999      	ldr	r1, [pc, #612]	; (8004274 <EKF_PredictionStep+0xd34>)
 8004010:	4618      	mov	r0, r3
 8004012:	f7fc feb7 	bl	8000d84 <__aeabi_fmul>
 8004016:	4603      	mov	r3, r0
 8004018:	461a      	mov	r2, r3
 800401a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800401e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f7fc feab 	bl	8000d84 <__aeabi_fmul>
 800402e:	4603      	mov	r3, r0
 8004030:	4618      	mov	r0, r3
 8004032:	f7fc f9f9 	bl	8000428 <__aeabi_f2d>
 8004036:	4604      	mov	r4, r0
 8004038:	460d      	mov	r5, r1
 800403a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800403e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fc f9ee 	bl	8000428 <__aeabi_f2d>
 800404c:	4680      	mov	r8, r0
 800404e:	4689      	mov	r9, r1
 8004050:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004054:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	4618      	mov	r0, r3
 800405e:	f7fc f9e3 	bl	8000428 <__aeabi_f2d>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	f005 f9fb 	bl	8009464 <tan>
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	4b7e      	ldr	r3, [pc, #504]	; (800426c <EKF_PredictionStep+0xd2c>)
 8004074:	f7fc fa30 	bl	80004d8 <__aeabi_dmul>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4610      	mov	r0, r2
 800407e:	4619      	mov	r1, r3
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	4b7a      	ldr	r3, [pc, #488]	; (8004270 <EKF_PredictionStep+0xd30>)
 8004086:	f7fc fb51 	bl	800072c <__aeabi_ddiv>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4610      	mov	r0, r2
 8004090:	4619      	mov	r1, r3
 8004092:	f004 ffcd 	bl	8009030 <atan>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4640      	mov	r0, r8
 800409c:	4649      	mov	r1, r9
 800409e:	f7fc f865 	bl	800016c <__adddf3>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	f005 f94b 	bl	8009344 <cos>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4620      	mov	r0, r4
 80040b4:	4629      	mov	r1, r5
 80040b6:	f7fc fa0f 	bl	80004d8 <__aeabi_dmul>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4614      	mov	r4, r2
 80040c0:	461d      	mov	r5, r3
 80040c2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80040c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc f9aa 	bl	8000428 <__aeabi_f2d>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	f005 f932 	bl	8009344 <cos>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4620      	mov	r0, r4
 80040e6:	4629      	mov	r1, r5
 80040e8:	f7fc fb20 	bl	800072c <__aeabi_ddiv>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4614      	mov	r4, r2
 80040f2:	461d      	mov	r5, r3
 80040f4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80040f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	4618      	mov	r0, r3
 8004102:	f7fc f991 	bl	8000428 <__aeabi_f2d>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4610      	mov	r0, r2
 800410c:	4619      	mov	r1, r3
 800410e:	f005 f919 	bl	8009344 <cos>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4620      	mov	r0, r4
 8004118:	4629      	mov	r1, r5
 800411a:	f7fc f9dd 	bl	80004d8 <__aeabi_dmul>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	4b51      	ldr	r3, [pc, #324]	; (8004270 <EKF_PredictionStep+0xd30>)
 800412c:	f7fc fafe 	bl	800072c <__aeabi_ddiv>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	4b4c      	ldr	r3, [pc, #304]	; (8004270 <EKF_PredictionStep+0xd30>)
 800413e:	f7fc f9cb 	bl	80004d8 <__aeabi_dmul>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4614      	mov	r4, r2
 8004148:	461d      	mov	r5, r3
 800414a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800414e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fc f966 	bl	8000428 <__aeabi_f2d>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	f005 f97e 	bl	8009464 <tan>
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	4b42      	ldr	r3, [pc, #264]	; (8004278 <EKF_PredictionStep+0xd38>)
 800416e:	f7fc f9b3 	bl	80004d8 <__aeabi_dmul>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4690      	mov	r8, r2
 8004178:	4699      	mov	r9, r3
 800417a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800417e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc f94e 	bl	8000428 <__aeabi_f2d>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4610      	mov	r0, r2
 8004192:	4619      	mov	r1, r3
 8004194:	f005 f966 	bl	8009464 <tan>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4640      	mov	r0, r8
 800419e:	4649      	mov	r1, r9
 80041a0:	f7fc f99a 	bl	80004d8 <__aeabi_dmul>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4620      	mov	r0, r4
 80041aa:	4629      	mov	r1, r5
 80041ac:	f7fb ffde 	bl	800016c <__adddf3>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4610      	mov	r0, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	f7fc fc86 	bl	8000ac8 <__aeabi_d2f>
 80041bc:	4602      	mov	r2, r0
 80041be:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80041c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c

	 Jacobian[2][0]=0;
 80041c8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80041cc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30
	 Jacobian[2][1]=0;
 80041d6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80041da:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	635a      	str	r2, [r3, #52]	; 0x34
	 Jacobian[2][2]=1;
 80041e4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80041e8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80041ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80041f0:	639a      	str	r2, [r3, #56]	; 0x38
	 Jacobian[2][3]=0;
 80041f2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80041f6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	63da      	str	r2, [r3, #60]	; 0x3c
	 Jacobian[2][4]=0;
 8004200:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004204:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
	 Jacobian[2][5]=0;
 800420e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004212:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	645a      	str	r2, [r3, #68]	; 0x44

	 Jacobian[3][0]=0;
 800421c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004220:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	649a      	str	r2, [r3, #72]	; 0x48
	 Jacobian[3][1]=0;
 800422a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800422e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	64da      	str	r2, [r3, #76]	; 0x4c
	 Jacobian[3][2]=0;
 8004238:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800423c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	651a      	str	r2, [r3, #80]	; 0x50
	 Jacobian[3][3]=1;
 8004246:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800424a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800424e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
	 Jacobian[3][4]=0;
 8004254:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004258:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	659a      	str	r2, [r3, #88]	; 0x58
	 Jacobian[3][5]=0;
 8004262:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004266:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800426a:	e007      	b.n	800427c <EKF_PredictionStep+0xd3c>
 800426c:	40240000 	.word	0x40240000
 8004270:	40340000 	.word	0x40340000
 8004274:	41a00000 	.word	0x41a00000
 8004278:	40590000 	.word	0x40590000
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	65da      	str	r2, [r3, #92]	; 0x5c

	 Jacobian[4][0]=0;
 8004282:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004286:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	661a      	str	r2, [r3, #96]	; 0x60
	 Jacobian[4][1]=0;
 8004290:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004294:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	665a      	str	r2, [r3, #100]	; 0x64
	 Jacobian[4][2]=0;
 800429e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80042a2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	669a      	str	r2, [r3, #104]	; 0x68
	 Jacobian[4][3]=(Input->Time*tan(EKF->FirStee)*fabs(EKF->FirStee))/(EKF->FirStee*sqrt(EKF->FirStee*EKF->FirStee+LENGTH_REAR*LENGTH_REAR*tan(EKF->FirStee)*tan(EKF->FirStee)));
 80042ac:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80042b0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fc f8b5 	bl	8000428 <__aeabi_f2d>
 80042be:	4604      	mov	r4, r0
 80042c0:	460d      	mov	r5, r1
 80042c2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80042c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fc f8aa 	bl	8000428 <__aeabi_f2d>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4610      	mov	r0, r2
 80042da:	4619      	mov	r1, r3
 80042dc:	f005 f8c2 	bl	8009464 <tan>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4620      	mov	r0, r4
 80042e6:	4629      	mov	r1, r5
 80042e8:	f7fc f8f6 	bl	80004d8 <__aeabi_dmul>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4614      	mov	r4, r2
 80042f2:	461d      	mov	r5, r3
 80042f4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80042f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004304:	4618      	mov	r0, r3
 8004306:	f7fc f88f 	bl	8000428 <__aeabi_f2d>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4620      	mov	r0, r4
 8004310:	4629      	mov	r1, r5
 8004312:	f7fc f8e1 	bl	80004d8 <__aeabi_dmul>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4692      	mov	sl, r2
 800431c:	469b      	mov	fp, r3
 800431e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004322:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc f87c 	bl	8000428 <__aeabi_f2d>
 8004330:	4604      	mov	r4, r0
 8004332:	460d      	mov	r5, r1
 8004334:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004338:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695a      	ldr	r2, [r3, #20]
 8004340:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004344:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	4619      	mov	r1, r3
 800434e:	4610      	mov	r0, r2
 8004350:	f7fc fd18 	bl	8000d84 <__aeabi_fmul>
 8004354:	4603      	mov	r3, r0
 8004356:	4618      	mov	r0, r3
 8004358:	f7fc f866 	bl	8000428 <__aeabi_f2d>
 800435c:	4680      	mov	r8, r0
 800435e:	4689      	mov	r9, r1
 8004360:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004364:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	4618      	mov	r0, r3
 800436e:	f7fc f85b 	bl	8000428 <__aeabi_f2d>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	f005 f873 	bl	8009464 <tan>
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	4bb3      	ldr	r3, [pc, #716]	; (8004650 <EKF_PredictionStep+0x1110>)
 8004384:	f7fc f8a8 	bl	80004d8 <__aeabi_dmul>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	e9c7 2300 	strd	r2, r3, [r7]
 8004390:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004394:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	4618      	mov	r0, r3
 800439e:	f7fc f843 	bl	8000428 <__aeabi_f2d>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	f005 f85b 	bl	8009464 <tan>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043b6:	f7fc f88f 	bl	80004d8 <__aeabi_dmul>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4640      	mov	r0, r8
 80043c0:	4649      	mov	r1, r9
 80043c2:	f7fb fed3 	bl	800016c <__adddf3>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	f004 fe09 	bl	8008fe4 <sqrt>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4620      	mov	r0, r4
 80043d8:	4629      	mov	r1, r5
 80043da:	f7fc f87d 	bl	80004d8 <__aeabi_dmul>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4650      	mov	r0, sl
 80043e4:	4659      	mov	r1, fp
 80043e6:	f7fc f9a1 	bl	800072c <__aeabi_ddiv>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	f7fc fb69 	bl	8000ac8 <__aeabi_d2f>
 80043f6:	4602      	mov	r2, r0
 80043f8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80043fc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004400:	66da      	str	r2, [r3, #108]	; 0x6c
	 Jacobian[4][4]=1;
 8004402:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004406:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800440a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800440e:	671a      	str	r2, [r3, #112]	; 0x70
	 Jacobian[4][5]=(EKF->FirVely*LENGTH_CAR*LENGTH_CAR*LENGTH_CAR*Input->Time*(1/cos(EKF->FirStee)*1/cos(EKF->FirStee)))/(pow(LENGTH_CAR*LENGTH_CAR+LENGTH_REAR*LENGTH_REAR*tan(EKF->FirStee)*tan(EKF->FirStee),1.5)*fabs(EKF->FirStee));
 8004410:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004414:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	498d      	ldr	r1, [pc, #564]	; (8004654 <EKF_PredictionStep+0x1114>)
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc fcb0 	bl	8000d84 <__aeabi_fmul>
 8004424:	4603      	mov	r3, r0
 8004426:	498b      	ldr	r1, [pc, #556]	; (8004654 <EKF_PredictionStep+0x1114>)
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc fcab 	bl	8000d84 <__aeabi_fmul>
 800442e:	4603      	mov	r3, r0
 8004430:	4988      	ldr	r1, [pc, #544]	; (8004654 <EKF_PredictionStep+0x1114>)
 8004432:	4618      	mov	r0, r3
 8004434:	f7fc fca6 	bl	8000d84 <__aeabi_fmul>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004440:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	4619      	mov	r1, r3
 800444a:	4610      	mov	r0, r2
 800444c:	f7fc fc9a 	bl	8000d84 <__aeabi_fmul>
 8004450:	4603      	mov	r3, r0
 8004452:	4618      	mov	r0, r3
 8004454:	f7fb ffe8 	bl	8000428 <__aeabi_f2d>
 8004458:	4604      	mov	r4, r0
 800445a:	460d      	mov	r5, r1
 800445c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004460:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	4618      	mov	r0, r3
 800446a:	f7fb ffdd 	bl	8000428 <__aeabi_f2d>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	f004 ff65 	bl	8009344 <cos>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	f04f 0000 	mov.w	r0, #0
 8004482:	4975      	ldr	r1, [pc, #468]	; (8004658 <EKF_PredictionStep+0x1118>)
 8004484:	f7fc f952 	bl	800072c <__aeabi_ddiv>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4690      	mov	r8, r2
 800448e:	4699      	mov	r9, r3
 8004490:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004494:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	4618      	mov	r0, r3
 800449e:	f7fb ffc3 	bl	8000428 <__aeabi_f2d>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4610      	mov	r0, r2
 80044a8:	4619      	mov	r1, r3
 80044aa:	f004 ff4b 	bl	8009344 <cos>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4640      	mov	r0, r8
 80044b4:	4649      	mov	r1, r9
 80044b6:	f7fc f939 	bl	800072c <__aeabi_ddiv>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4620      	mov	r0, r4
 80044c0:	4629      	mov	r1, r5
 80044c2:	f7fc f809 	bl	80004d8 <__aeabi_dmul>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4690      	mov	r8, r2
 80044cc:	4699      	mov	r9, r3
 80044ce:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80044d2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fb ffa4 	bl	8000428 <__aeabi_f2d>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4610      	mov	r0, r2
 80044e6:	4619      	mov	r1, r3
 80044e8:	f004 ffbc 	bl	8009464 <tan>
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	4b57      	ldr	r3, [pc, #348]	; (8004650 <EKF_PredictionStep+0x1110>)
 80044f2:	f7fb fff1 	bl	80004d8 <__aeabi_dmul>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4614      	mov	r4, r2
 80044fc:	461d      	mov	r5, r3
 80044fe:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004502:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fb ff8c 	bl	8000428 <__aeabi_f2d>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4610      	mov	r0, r2
 8004516:	4619      	mov	r1, r3
 8004518:	f004 ffa4 	bl	8009464 <tan>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4620      	mov	r0, r4
 8004522:	4629      	mov	r1, r5
 8004524:	f7fb ffd8 	bl	80004d8 <__aeabi_dmul>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	4b49      	ldr	r3, [pc, #292]	; (800465c <EKF_PredictionStep+0x111c>)
 8004536:	f7fb fe19 	bl	800016c <__adddf3>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	4b46      	ldr	r3, [pc, #280]	; (8004660 <EKF_PredictionStep+0x1120>)
 8004548:	f004 fce4 	bl	8008f14 <pow>
 800454c:	4604      	mov	r4, r0
 800454e:	460d      	mov	r5, r1
 8004550:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004554:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004560:	4618      	mov	r0, r3
 8004562:	f7fb ff61 	bl	8000428 <__aeabi_f2d>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4620      	mov	r0, r4
 800456c:	4629      	mov	r1, r5
 800456e:	f7fb ffb3 	bl	80004d8 <__aeabi_dmul>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4640      	mov	r0, r8
 8004578:	4649      	mov	r1, r9
 800457a:	f7fc f8d7 	bl	800072c <__aeabi_ddiv>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	f7fc fa9f 	bl	8000ac8 <__aeabi_d2f>
 800458a:	4602      	mov	r2, r0
 800458c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004590:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004594:	675a      	str	r2, [r3, #116]	; 0x74

	 Jacobian[5][0]=0;
 8004596:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800459a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	679a      	str	r2, [r3, #120]	; 0x78
	 Jacobian[5][1]=0;
 80045a4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80045a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	67da      	str	r2, [r3, #124]	; 0x7c
	 Jacobian[5][2]=0;
 80045b2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80045b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	 Jacobian[5][3]=0;
 80045c2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80045c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	 Jacobian[5][4]=0;
 80045d2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80045d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	 Jacobian[5][5]=1;
 80045e2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80045e6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80045ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	 multiplyMatrices(Jacobian,EKF->Prediction_CovarianceFir, Mul_Result,6,6);
 80045f2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80045f6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004600:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004604:	f107 0018 	add.w	r0, r7, #24
 8004608:	2306      	movs	r3, #6
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	2306      	movs	r3, #6
 800460e:	f000 f829 	bl	8004664 <multiplyMatrices>
	 transposeMatrix(Jacobian, Trans_Result,6,6);
 8004612:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8004616:	f107 0018 	add.w	r0, r7, #24
 800461a:	2306      	movs	r3, #6
 800461c:	2206      	movs	r2, #6
 800461e:	f000 f88e 	bl	800473e <transposeMatrix>
	 multiplyMatrices(Mul_Result,Trans_Result,EKF->Prediction_CovarianceNex,6,6);
 8004622:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004626:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004630:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8004634:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8004638:	2306      	movs	r3, #6
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2306      	movs	r3, #6
 800463e:	f000 f811 	bl	8004664 <multiplyMatrices>
}
 8004642:	bf00      	nop
 8004644:	f507 77ea 	add.w	r7, r7, #468	; 0x1d4
 8004648:	46bd      	mov	sp, r7
 800464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800464e:	bf00      	nop
 8004650:	40590000 	.word	0x40590000
 8004654:	41a00000 	.word	0x41a00000
 8004658:	3ff00000 	.word	0x3ff00000
 800465c:	40790000 	.word	0x40790000
 8004660:	3ff80000 	.word	0x3ff80000

08004664 <multiplyMatrices>:
            result[i][j] = firstMatrix[i][j] - secondMatrix[i][j];
        }
    }
}

void multiplyMatrices(float firstMatrix[SIZE][SIZE], float secondMatrix[SIZE][SIZE], float result[SIZE][SIZE], int row, int col) {
 8004664:	b5b0      	push	{r4, r5, r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < row; ++i) {
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	e059      	b.n	800472c <multiplyMatrices+0xc8>
        for (int j = 0; j < col; ++j) {
 8004678:	2300      	movs	r3, #0
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	e04f      	b.n	800471e <multiplyMatrices+0xba>
            result[i][j] = 0;
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	4613      	mov	r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4413      	add	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	461a      	mov	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	f04f 0100 	mov.w	r1, #0
 8004694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int k = 0; k < col; ++k) {
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	e038      	b.n	8004710 <multiplyMatrices+0xac>
                result[i][j] += firstMatrix[i][k] * secondMatrix[k][j];
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	4613      	mov	r3, r2
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4413      	add	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	461a      	mov	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	4613      	mov	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	461a      	mov	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4613      	mov	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	461a      	mov	r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4413      	add	r3, r2
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e0:	4619      	mov	r1, r3
 80046e2:	f7fc fb4f 	bl	8000d84 <__aeabi_fmul>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4619      	mov	r1, r3
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	4613      	mov	r3, r2
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	4413      	add	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	189c      	adds	r4, r3, r2
 80046fa:	4628      	mov	r0, r5
 80046fc:	f7fc fa3a 	bl	8000b74 <__addsf3>
 8004700:	4603      	mov	r3, r0
 8004702:	461a      	mov	r2, r3
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
            for (int k = 0; k < col; ++k) {
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	3301      	adds	r3, #1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	429a      	cmp	r2, r3
 8004716:	dbc2      	blt.n	800469e <multiplyMatrices+0x3a>
        for (int j = 0; j < col; ++j) {
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	3301      	adds	r3, #1
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	429a      	cmp	r2, r3
 8004724:	dbab      	blt.n	800467e <multiplyMatrices+0x1a>
    for (int i = 0; i < row; ++i) {
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3301      	adds	r3, #1
 800472a:	61fb      	str	r3, [r7, #28]
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	dba1      	blt.n	8004678 <multiplyMatrices+0x14>
            }
        }
    }
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bdb0      	pop	{r4, r5, r7, pc}

0800473e <transposeMatrix>:

void transposeMatrix(float matrix[SIZE][SIZE], float result[SIZE][SIZE], int row, int col) {
 800473e:	b480      	push	{r7}
 8004740:	b087      	sub	sp, #28
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
 800474a:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < row; ++i) {
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e022      	b.n	8004798 <transposeMatrix+0x5a>
        for (int j = 0; j < col; ++j) {
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	e018      	b.n	800478a <transposeMatrix+0x4c>
            result[j][i] = matrix[i][j];
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4613      	mov	r3, r2
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	4413      	add	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	1899      	adds	r1, r3, r2
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4613      	mov	r3, r2
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	4413      	add	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	461a      	mov	r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4413      	add	r3, r2
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < col; ++j) {
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	3301      	adds	r3, #1
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	dbe2      	blt.n	8004758 <transposeMatrix+0x1a>
    for (int i = 0; i < row; ++i) {
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	3301      	adds	r3, #1
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	429a      	cmp	r2, r3
 800479e:	dbd8      	blt.n	8004752 <transposeMatrix+0x14>
        }
    }
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <_strtol_l.constprop.0>:
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b2:	4686      	mov	lr, r0
 80047b4:	4690      	mov	r8, r2
 80047b6:	d001      	beq.n	80047bc <_strtol_l.constprop.0+0x10>
 80047b8:	2b24      	cmp	r3, #36	; 0x24
 80047ba:	d906      	bls.n	80047ca <_strtol_l.constprop.0+0x1e>
 80047bc:	f001 f85a 	bl	8005874 <__errno>
 80047c0:	2316      	movs	r3, #22
 80047c2:	6003      	str	r3, [r0, #0]
 80047c4:	2000      	movs	r0, #0
 80047c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ca:	460d      	mov	r5, r1
 80047cc:	4835      	ldr	r0, [pc, #212]	; (80048a4 <_strtol_l.constprop.0+0xf8>)
 80047ce:	462a      	mov	r2, r5
 80047d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047d4:	5d06      	ldrb	r6, [r0, r4]
 80047d6:	f016 0608 	ands.w	r6, r6, #8
 80047da:	d1f8      	bne.n	80047ce <_strtol_l.constprop.0+0x22>
 80047dc:	2c2d      	cmp	r4, #45	; 0x2d
 80047de:	d12e      	bne.n	800483e <_strtol_l.constprop.0+0x92>
 80047e0:	2601      	movs	r6, #1
 80047e2:	782c      	ldrb	r4, [r5, #0]
 80047e4:	1c95      	adds	r5, r2, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d057      	beq.n	800489a <_strtol_l.constprop.0+0xee>
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	d109      	bne.n	8004802 <_strtol_l.constprop.0+0x56>
 80047ee:	2c30      	cmp	r4, #48	; 0x30
 80047f0:	d107      	bne.n	8004802 <_strtol_l.constprop.0+0x56>
 80047f2:	782a      	ldrb	r2, [r5, #0]
 80047f4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80047f8:	2a58      	cmp	r2, #88	; 0x58
 80047fa:	d149      	bne.n	8004890 <_strtol_l.constprop.0+0xe4>
 80047fc:	2310      	movs	r3, #16
 80047fe:	786c      	ldrb	r4, [r5, #1]
 8004800:	3502      	adds	r5, #2
 8004802:	2200      	movs	r2, #0
 8004804:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8004808:	f10c 3cff 	add.w	ip, ip, #4294967295
 800480c:	fbbc f9f3 	udiv	r9, ip, r3
 8004810:	4610      	mov	r0, r2
 8004812:	fb03 ca19 	mls	sl, r3, r9, ip
 8004816:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800481a:	2f09      	cmp	r7, #9
 800481c:	d814      	bhi.n	8004848 <_strtol_l.constprop.0+0x9c>
 800481e:	463c      	mov	r4, r7
 8004820:	42a3      	cmp	r3, r4
 8004822:	dd20      	ble.n	8004866 <_strtol_l.constprop.0+0xba>
 8004824:	1c57      	adds	r7, r2, #1
 8004826:	d007      	beq.n	8004838 <_strtol_l.constprop.0+0x8c>
 8004828:	4581      	cmp	r9, r0
 800482a:	d319      	bcc.n	8004860 <_strtol_l.constprop.0+0xb4>
 800482c:	d101      	bne.n	8004832 <_strtol_l.constprop.0+0x86>
 800482e:	45a2      	cmp	sl, r4
 8004830:	db16      	blt.n	8004860 <_strtol_l.constprop.0+0xb4>
 8004832:	2201      	movs	r2, #1
 8004834:	fb00 4003 	mla	r0, r0, r3, r4
 8004838:	f815 4b01 	ldrb.w	r4, [r5], #1
 800483c:	e7eb      	b.n	8004816 <_strtol_l.constprop.0+0x6a>
 800483e:	2c2b      	cmp	r4, #43	; 0x2b
 8004840:	bf04      	itt	eq
 8004842:	782c      	ldrbeq	r4, [r5, #0]
 8004844:	1c95      	addeq	r5, r2, #2
 8004846:	e7ce      	b.n	80047e6 <_strtol_l.constprop.0+0x3a>
 8004848:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800484c:	2f19      	cmp	r7, #25
 800484e:	d801      	bhi.n	8004854 <_strtol_l.constprop.0+0xa8>
 8004850:	3c37      	subs	r4, #55	; 0x37
 8004852:	e7e5      	b.n	8004820 <_strtol_l.constprop.0+0x74>
 8004854:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004858:	2f19      	cmp	r7, #25
 800485a:	d804      	bhi.n	8004866 <_strtol_l.constprop.0+0xba>
 800485c:	3c57      	subs	r4, #87	; 0x57
 800485e:	e7df      	b.n	8004820 <_strtol_l.constprop.0+0x74>
 8004860:	f04f 32ff 	mov.w	r2, #4294967295
 8004864:	e7e8      	b.n	8004838 <_strtol_l.constprop.0+0x8c>
 8004866:	1c53      	adds	r3, r2, #1
 8004868:	d108      	bne.n	800487c <_strtol_l.constprop.0+0xd0>
 800486a:	2322      	movs	r3, #34	; 0x22
 800486c:	4660      	mov	r0, ip
 800486e:	f8ce 3000 	str.w	r3, [lr]
 8004872:	f1b8 0f00 	cmp.w	r8, #0
 8004876:	d0a6      	beq.n	80047c6 <_strtol_l.constprop.0+0x1a>
 8004878:	1e69      	subs	r1, r5, #1
 800487a:	e006      	b.n	800488a <_strtol_l.constprop.0+0xde>
 800487c:	b106      	cbz	r6, 8004880 <_strtol_l.constprop.0+0xd4>
 800487e:	4240      	negs	r0, r0
 8004880:	f1b8 0f00 	cmp.w	r8, #0
 8004884:	d09f      	beq.n	80047c6 <_strtol_l.constprop.0+0x1a>
 8004886:	2a00      	cmp	r2, #0
 8004888:	d1f6      	bne.n	8004878 <_strtol_l.constprop.0+0xcc>
 800488a:	f8c8 1000 	str.w	r1, [r8]
 800488e:	e79a      	b.n	80047c6 <_strtol_l.constprop.0+0x1a>
 8004890:	2430      	movs	r4, #48	; 0x30
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1b5      	bne.n	8004802 <_strtol_l.constprop.0+0x56>
 8004896:	2308      	movs	r3, #8
 8004898:	e7b3      	b.n	8004802 <_strtol_l.constprop.0+0x56>
 800489a:	2c30      	cmp	r4, #48	; 0x30
 800489c:	d0a9      	beq.n	80047f2 <_strtol_l.constprop.0+0x46>
 800489e:	230a      	movs	r3, #10
 80048a0:	e7af      	b.n	8004802 <_strtol_l.constprop.0+0x56>
 80048a2:	bf00      	nop
 80048a4:	0800b49b 	.word	0x0800b49b

080048a8 <_strtol_r>:
 80048a8:	f7ff bf80 	b.w	80047ac <_strtol_l.constprop.0>

080048ac <__cvt>:
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b2:	461f      	mov	r7, r3
 80048b4:	bfbb      	ittet	lt
 80048b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80048ba:	461f      	movlt	r7, r3
 80048bc:	2300      	movge	r3, #0
 80048be:	232d      	movlt	r3, #45	; 0x2d
 80048c0:	b088      	sub	sp, #32
 80048c2:	4614      	mov	r4, r2
 80048c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80048c8:	7013      	strb	r3, [r2, #0]
 80048ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80048d0:	f023 0820 	bic.w	r8, r3, #32
 80048d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048d8:	d005      	beq.n	80048e6 <__cvt+0x3a>
 80048da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048de:	d100      	bne.n	80048e2 <__cvt+0x36>
 80048e0:	3501      	adds	r5, #1
 80048e2:	2302      	movs	r3, #2
 80048e4:	e000      	b.n	80048e8 <__cvt+0x3c>
 80048e6:	2303      	movs	r3, #3
 80048e8:	aa07      	add	r2, sp, #28
 80048ea:	9204      	str	r2, [sp, #16]
 80048ec:	aa06      	add	r2, sp, #24
 80048ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048f2:	e9cd 3500 	strd	r3, r5, [sp]
 80048f6:	4622      	mov	r2, r4
 80048f8:	463b      	mov	r3, r7
 80048fa:	f001 f885 	bl	8005a08 <_dtoa_r>
 80048fe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004902:	4606      	mov	r6, r0
 8004904:	d102      	bne.n	800490c <__cvt+0x60>
 8004906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004908:	07db      	lsls	r3, r3, #31
 800490a:	d522      	bpl.n	8004952 <__cvt+0xa6>
 800490c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004910:	eb06 0905 	add.w	r9, r6, r5
 8004914:	d110      	bne.n	8004938 <__cvt+0x8c>
 8004916:	7833      	ldrb	r3, [r6, #0]
 8004918:	2b30      	cmp	r3, #48	; 0x30
 800491a:	d10a      	bne.n	8004932 <__cvt+0x86>
 800491c:	2200      	movs	r2, #0
 800491e:	2300      	movs	r3, #0
 8004920:	4620      	mov	r0, r4
 8004922:	4639      	mov	r1, r7
 8004924:	f7fc f840 	bl	80009a8 <__aeabi_dcmpeq>
 8004928:	b918      	cbnz	r0, 8004932 <__cvt+0x86>
 800492a:	f1c5 0501 	rsb	r5, r5, #1
 800492e:	f8ca 5000 	str.w	r5, [sl]
 8004932:	f8da 3000 	ldr.w	r3, [sl]
 8004936:	4499      	add	r9, r3
 8004938:	2200      	movs	r2, #0
 800493a:	2300      	movs	r3, #0
 800493c:	4620      	mov	r0, r4
 800493e:	4639      	mov	r1, r7
 8004940:	f7fc f832 	bl	80009a8 <__aeabi_dcmpeq>
 8004944:	b108      	cbz	r0, 800494a <__cvt+0x9e>
 8004946:	f8cd 901c 	str.w	r9, [sp, #28]
 800494a:	2230      	movs	r2, #48	; 0x30
 800494c:	9b07      	ldr	r3, [sp, #28]
 800494e:	454b      	cmp	r3, r9
 8004950:	d307      	bcc.n	8004962 <__cvt+0xb6>
 8004952:	4630      	mov	r0, r6
 8004954:	9b07      	ldr	r3, [sp, #28]
 8004956:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004958:	1b9b      	subs	r3, r3, r6
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	b008      	add	sp, #32
 800495e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004962:	1c59      	adds	r1, r3, #1
 8004964:	9107      	str	r1, [sp, #28]
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	e7f0      	b.n	800494c <__cvt+0xa0>

0800496a <__exponent>:
 800496a:	4603      	mov	r3, r0
 800496c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800496e:	2900      	cmp	r1, #0
 8004970:	f803 2b02 	strb.w	r2, [r3], #2
 8004974:	bfb6      	itet	lt
 8004976:	222d      	movlt	r2, #45	; 0x2d
 8004978:	222b      	movge	r2, #43	; 0x2b
 800497a:	4249      	neglt	r1, r1
 800497c:	2909      	cmp	r1, #9
 800497e:	7042      	strb	r2, [r0, #1]
 8004980:	dd2a      	ble.n	80049d8 <__exponent+0x6e>
 8004982:	f10d 0207 	add.w	r2, sp, #7
 8004986:	4617      	mov	r7, r2
 8004988:	260a      	movs	r6, #10
 800498a:	fb91 f5f6 	sdiv	r5, r1, r6
 800498e:	4694      	mov	ip, r2
 8004990:	fb06 1415 	mls	r4, r6, r5, r1
 8004994:	3430      	adds	r4, #48	; 0x30
 8004996:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800499a:	460c      	mov	r4, r1
 800499c:	2c63      	cmp	r4, #99	; 0x63
 800499e:	4629      	mov	r1, r5
 80049a0:	f102 32ff 	add.w	r2, r2, #4294967295
 80049a4:	dcf1      	bgt.n	800498a <__exponent+0x20>
 80049a6:	3130      	adds	r1, #48	; 0x30
 80049a8:	f1ac 0402 	sub.w	r4, ip, #2
 80049ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049b0:	4622      	mov	r2, r4
 80049b2:	1c41      	adds	r1, r0, #1
 80049b4:	42ba      	cmp	r2, r7
 80049b6:	d30a      	bcc.n	80049ce <__exponent+0x64>
 80049b8:	f10d 0209 	add.w	r2, sp, #9
 80049bc:	eba2 020c 	sub.w	r2, r2, ip
 80049c0:	42bc      	cmp	r4, r7
 80049c2:	bf88      	it	hi
 80049c4:	2200      	movhi	r2, #0
 80049c6:	4413      	add	r3, r2
 80049c8:	1a18      	subs	r0, r3, r0
 80049ca:	b003      	add	sp, #12
 80049cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ce:	f812 5b01 	ldrb.w	r5, [r2], #1
 80049d2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80049d6:	e7ed      	b.n	80049b4 <__exponent+0x4a>
 80049d8:	2330      	movs	r3, #48	; 0x30
 80049da:	3130      	adds	r1, #48	; 0x30
 80049dc:	7083      	strb	r3, [r0, #2]
 80049de:	70c1      	strb	r1, [r0, #3]
 80049e0:	1d03      	adds	r3, r0, #4
 80049e2:	e7f1      	b.n	80049c8 <__exponent+0x5e>

080049e4 <_printf_float>:
 80049e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e8:	b091      	sub	sp, #68	; 0x44
 80049ea:	460c      	mov	r4, r1
 80049ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80049f0:	4616      	mov	r6, r2
 80049f2:	461f      	mov	r7, r3
 80049f4:	4605      	mov	r5, r0
 80049f6:	f000 fef3 	bl	80057e0 <_localeconv_r>
 80049fa:	6803      	ldr	r3, [r0, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004a00:	f7fb fba6 	bl	8000150 <strlen>
 8004a04:	2300      	movs	r3, #0
 8004a06:	930e      	str	r3, [sp, #56]	; 0x38
 8004a08:	f8d8 3000 	ldr.w	r3, [r8]
 8004a0c:	900a      	str	r0, [sp, #40]	; 0x28
 8004a0e:	3307      	adds	r3, #7
 8004a10:	f023 0307 	bic.w	r3, r3, #7
 8004a14:	f103 0208 	add.w	r2, r3, #8
 8004a18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a1c:	f8d4 b000 	ldr.w	fp, [r4]
 8004a20:	f8c8 2000 	str.w	r2, [r8]
 8004a24:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004a28:	4652      	mov	r2, sl
 8004a2a:	4643      	mov	r3, r8
 8004a2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a30:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a36:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3a:	4650      	mov	r0, sl
 8004a3c:	4b9c      	ldr	r3, [pc, #624]	; (8004cb0 <_printf_float+0x2cc>)
 8004a3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a40:	f7fb ffe4 	bl	8000a0c <__aeabi_dcmpun>
 8004a44:	bb70      	cbnz	r0, 8004aa4 <_printf_float+0xc0>
 8004a46:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4a:	4650      	mov	r0, sl
 8004a4c:	4b98      	ldr	r3, [pc, #608]	; (8004cb0 <_printf_float+0x2cc>)
 8004a4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a50:	f7fb ffbe 	bl	80009d0 <__aeabi_dcmple>
 8004a54:	bb30      	cbnz	r0, 8004aa4 <_printf_float+0xc0>
 8004a56:	2200      	movs	r2, #0
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4650      	mov	r0, sl
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	f7fb ffad 	bl	80009bc <__aeabi_dcmplt>
 8004a62:	b110      	cbz	r0, 8004a6a <_printf_float+0x86>
 8004a64:	232d      	movs	r3, #45	; 0x2d
 8004a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a6a:	4a92      	ldr	r2, [pc, #584]	; (8004cb4 <_printf_float+0x2d0>)
 8004a6c:	4b92      	ldr	r3, [pc, #584]	; (8004cb8 <_printf_float+0x2d4>)
 8004a6e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004a72:	bf94      	ite	ls
 8004a74:	4690      	movls	r8, r2
 8004a76:	4698      	movhi	r8, r3
 8004a78:	2303      	movs	r3, #3
 8004a7a:	f04f 0a00 	mov.w	sl, #0
 8004a7e:	6123      	str	r3, [r4, #16]
 8004a80:	f02b 0304 	bic.w	r3, fp, #4
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	4633      	mov	r3, r6
 8004a88:	4621      	mov	r1, r4
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	9700      	str	r7, [sp, #0]
 8004a8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004a90:	f000 f9d6 	bl	8004e40 <_printf_common>
 8004a94:	3001      	adds	r0, #1
 8004a96:	f040 8090 	bne.w	8004bba <_printf_float+0x1d6>
 8004a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9e:	b011      	add	sp, #68	; 0x44
 8004aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa4:	4652      	mov	r2, sl
 8004aa6:	4643      	mov	r3, r8
 8004aa8:	4650      	mov	r0, sl
 8004aaa:	4641      	mov	r1, r8
 8004aac:	f7fb ffae 	bl	8000a0c <__aeabi_dcmpun>
 8004ab0:	b148      	cbz	r0, 8004ac6 <_printf_float+0xe2>
 8004ab2:	f1b8 0f00 	cmp.w	r8, #0
 8004ab6:	bfb8      	it	lt
 8004ab8:	232d      	movlt	r3, #45	; 0x2d
 8004aba:	4a80      	ldr	r2, [pc, #512]	; (8004cbc <_printf_float+0x2d8>)
 8004abc:	bfb8      	it	lt
 8004abe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ac2:	4b7f      	ldr	r3, [pc, #508]	; (8004cc0 <_printf_float+0x2dc>)
 8004ac4:	e7d3      	b.n	8004a6e <_printf_float+0x8a>
 8004ac6:	6863      	ldr	r3, [r4, #4]
 8004ac8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	d142      	bne.n	8004b56 <_printf_float+0x172>
 8004ad0:	2306      	movs	r3, #6
 8004ad2:	6063      	str	r3, [r4, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	9206      	str	r2, [sp, #24]
 8004ad8:	aa0e      	add	r2, sp, #56	; 0x38
 8004ada:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ade:	aa0d      	add	r2, sp, #52	; 0x34
 8004ae0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004ae4:	9203      	str	r2, [sp, #12]
 8004ae6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004aea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004aee:	6023      	str	r3, [r4, #0]
 8004af0:	6863      	ldr	r3, [r4, #4]
 8004af2:	4652      	mov	r2, sl
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4628      	mov	r0, r5
 8004af8:	4643      	mov	r3, r8
 8004afa:	910b      	str	r1, [sp, #44]	; 0x2c
 8004afc:	f7ff fed6 	bl	80048ac <__cvt>
 8004b00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b02:	4680      	mov	r8, r0
 8004b04:	2947      	cmp	r1, #71	; 0x47
 8004b06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b08:	d108      	bne.n	8004b1c <_printf_float+0x138>
 8004b0a:	1cc8      	adds	r0, r1, #3
 8004b0c:	db02      	blt.n	8004b14 <_printf_float+0x130>
 8004b0e:	6863      	ldr	r3, [r4, #4]
 8004b10:	4299      	cmp	r1, r3
 8004b12:	dd40      	ble.n	8004b96 <_printf_float+0x1b2>
 8004b14:	f1a9 0902 	sub.w	r9, r9, #2
 8004b18:	fa5f f989 	uxtb.w	r9, r9
 8004b1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b20:	d81f      	bhi.n	8004b62 <_printf_float+0x17e>
 8004b22:	464a      	mov	r2, r9
 8004b24:	3901      	subs	r1, #1
 8004b26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b2a:	910d      	str	r1, [sp, #52]	; 0x34
 8004b2c:	f7ff ff1d 	bl	800496a <__exponent>
 8004b30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b32:	4682      	mov	sl, r0
 8004b34:	1813      	adds	r3, r2, r0
 8004b36:	2a01      	cmp	r2, #1
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	dc02      	bgt.n	8004b42 <_printf_float+0x15e>
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	07d2      	lsls	r2, r2, #31
 8004b40:	d501      	bpl.n	8004b46 <_printf_float+0x162>
 8004b42:	3301      	adds	r3, #1
 8004b44:	6123      	str	r3, [r4, #16]
 8004b46:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d09b      	beq.n	8004a86 <_printf_float+0xa2>
 8004b4e:	232d      	movs	r3, #45	; 0x2d
 8004b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b54:	e797      	b.n	8004a86 <_printf_float+0xa2>
 8004b56:	2947      	cmp	r1, #71	; 0x47
 8004b58:	d1bc      	bne.n	8004ad4 <_printf_float+0xf0>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1ba      	bne.n	8004ad4 <_printf_float+0xf0>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e7b7      	b.n	8004ad2 <_printf_float+0xee>
 8004b62:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004b66:	d118      	bne.n	8004b9a <_printf_float+0x1b6>
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	6863      	ldr	r3, [r4, #4]
 8004b6c:	dd0b      	ble.n	8004b86 <_printf_float+0x1a2>
 8004b6e:	6121      	str	r1, [r4, #16]
 8004b70:	b913      	cbnz	r3, 8004b78 <_printf_float+0x194>
 8004b72:	6822      	ldr	r2, [r4, #0]
 8004b74:	07d0      	lsls	r0, r2, #31
 8004b76:	d502      	bpl.n	8004b7e <_printf_float+0x19a>
 8004b78:	3301      	adds	r3, #1
 8004b7a:	440b      	add	r3, r1
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	f04f 0a00 	mov.w	sl, #0
 8004b82:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b84:	e7df      	b.n	8004b46 <_printf_float+0x162>
 8004b86:	b913      	cbnz	r3, 8004b8e <_printf_float+0x1aa>
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	07d2      	lsls	r2, r2, #31
 8004b8c:	d501      	bpl.n	8004b92 <_printf_float+0x1ae>
 8004b8e:	3302      	adds	r3, #2
 8004b90:	e7f4      	b.n	8004b7c <_printf_float+0x198>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e7f2      	b.n	8004b7c <_printf_float+0x198>
 8004b96:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	db05      	blt.n	8004bac <_printf_float+0x1c8>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	6121      	str	r1, [r4, #16]
 8004ba4:	07d8      	lsls	r0, r3, #31
 8004ba6:	d5ea      	bpl.n	8004b7e <_printf_float+0x19a>
 8004ba8:	1c4b      	adds	r3, r1, #1
 8004baa:	e7e7      	b.n	8004b7c <_printf_float+0x198>
 8004bac:	2900      	cmp	r1, #0
 8004bae:	bfcc      	ite	gt
 8004bb0:	2201      	movgt	r2, #1
 8004bb2:	f1c1 0202 	rsble	r2, r1, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	e7e0      	b.n	8004b7c <_printf_float+0x198>
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	055a      	lsls	r2, r3, #21
 8004bbe:	d407      	bmi.n	8004bd0 <_printf_float+0x1ec>
 8004bc0:	6923      	ldr	r3, [r4, #16]
 8004bc2:	4642      	mov	r2, r8
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	47b8      	blx	r7
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d12b      	bne.n	8004c26 <_printf_float+0x242>
 8004bce:	e764      	b.n	8004a9a <_printf_float+0xb6>
 8004bd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004bd4:	f240 80dd 	bls.w	8004d92 <_printf_float+0x3ae>
 8004bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2300      	movs	r3, #0
 8004be0:	f7fb fee2 	bl	80009a8 <__aeabi_dcmpeq>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d033      	beq.n	8004c50 <_printf_float+0x26c>
 8004be8:	2301      	movs	r3, #1
 8004bea:	4631      	mov	r1, r6
 8004bec:	4628      	mov	r0, r5
 8004bee:	4a35      	ldr	r2, [pc, #212]	; (8004cc4 <_printf_float+0x2e0>)
 8004bf0:	47b8      	blx	r7
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f43f af51 	beq.w	8004a9a <_printf_float+0xb6>
 8004bf8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	db02      	blt.n	8004c06 <_printf_float+0x222>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	07d8      	lsls	r0, r3, #31
 8004c04:	d50f      	bpl.n	8004c26 <_printf_float+0x242>
 8004c06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	47b8      	blx	r7
 8004c10:	3001      	adds	r0, #1
 8004c12:	f43f af42 	beq.w	8004a9a <_printf_float+0xb6>
 8004c16:	f04f 0800 	mov.w	r8, #0
 8004c1a:	f104 091a 	add.w	r9, r4, #26
 8004c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c20:	3b01      	subs	r3, #1
 8004c22:	4543      	cmp	r3, r8
 8004c24:	dc09      	bgt.n	8004c3a <_printf_float+0x256>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	079b      	lsls	r3, r3, #30
 8004c2a:	f100 8104 	bmi.w	8004e36 <_printf_float+0x452>
 8004c2e:	68e0      	ldr	r0, [r4, #12]
 8004c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c32:	4298      	cmp	r0, r3
 8004c34:	bfb8      	it	lt
 8004c36:	4618      	movlt	r0, r3
 8004c38:	e731      	b.n	8004a9e <_printf_float+0xba>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	464a      	mov	r2, r9
 8004c3e:	4631      	mov	r1, r6
 8004c40:	4628      	mov	r0, r5
 8004c42:	47b8      	blx	r7
 8004c44:	3001      	adds	r0, #1
 8004c46:	f43f af28 	beq.w	8004a9a <_printf_float+0xb6>
 8004c4a:	f108 0801 	add.w	r8, r8, #1
 8004c4e:	e7e6      	b.n	8004c1e <_printf_float+0x23a>
 8004c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	dc38      	bgt.n	8004cc8 <_printf_float+0x2e4>
 8004c56:	2301      	movs	r3, #1
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <_printf_float+0x2e0>)
 8004c5e:	47b8      	blx	r7
 8004c60:	3001      	adds	r0, #1
 8004c62:	f43f af1a 	beq.w	8004a9a <_printf_float+0xb6>
 8004c66:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	d102      	bne.n	8004c74 <_printf_float+0x290>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	07d9      	lsls	r1, r3, #31
 8004c72:	d5d8      	bpl.n	8004c26 <_printf_float+0x242>
 8004c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c78:	4631      	mov	r1, r6
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	47b8      	blx	r7
 8004c7e:	3001      	adds	r0, #1
 8004c80:	f43f af0b 	beq.w	8004a9a <_printf_float+0xb6>
 8004c84:	f04f 0900 	mov.w	r9, #0
 8004c88:	f104 0a1a 	add.w	sl, r4, #26
 8004c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c8e:	425b      	negs	r3, r3
 8004c90:	454b      	cmp	r3, r9
 8004c92:	dc01      	bgt.n	8004c98 <_printf_float+0x2b4>
 8004c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c96:	e794      	b.n	8004bc2 <_printf_float+0x1de>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4652      	mov	r2, sl
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b8      	blx	r7
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	f43f aef9 	beq.w	8004a9a <_printf_float+0xb6>
 8004ca8:	f109 0901 	add.w	r9, r9, #1
 8004cac:	e7ee      	b.n	8004c8c <_printf_float+0x2a8>
 8004cae:	bf00      	nop
 8004cb0:	7fefffff 	.word	0x7fefffff
 8004cb4:	0800b59b 	.word	0x0800b59b
 8004cb8:	0800b59f 	.word	0x0800b59f
 8004cbc:	0800b5a3 	.word	0x0800b5a3
 8004cc0:	0800b5a7 	.word	0x0800b5a7
 8004cc4:	0800b5ab 	.word	0x0800b5ab
 8004cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	bfa8      	it	ge
 8004cd0:	461a      	movge	r2, r3
 8004cd2:	2a00      	cmp	r2, #0
 8004cd4:	4691      	mov	r9, r2
 8004cd6:	dc37      	bgt.n	8004d48 <_printf_float+0x364>
 8004cd8:	f04f 0b00 	mov.w	fp, #0
 8004cdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ce0:	f104 021a 	add.w	r2, r4, #26
 8004ce4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ce8:	ebaa 0309 	sub.w	r3, sl, r9
 8004cec:	455b      	cmp	r3, fp
 8004cee:	dc33      	bgt.n	8004d58 <_printf_float+0x374>
 8004cf0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	db3b      	blt.n	8004d70 <_printf_float+0x38c>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	07da      	lsls	r2, r3, #31
 8004cfc:	d438      	bmi.n	8004d70 <_printf_float+0x38c>
 8004cfe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d02:	eba2 0903 	sub.w	r9, r2, r3
 8004d06:	eba2 020a 	sub.w	r2, r2, sl
 8004d0a:	4591      	cmp	r9, r2
 8004d0c:	bfa8      	it	ge
 8004d0e:	4691      	movge	r9, r2
 8004d10:	f1b9 0f00 	cmp.w	r9, #0
 8004d14:	dc34      	bgt.n	8004d80 <_printf_float+0x39c>
 8004d16:	f04f 0800 	mov.w	r8, #0
 8004d1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d1e:	f104 0a1a 	add.w	sl, r4, #26
 8004d22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	eba3 0309 	sub.w	r3, r3, r9
 8004d2c:	4543      	cmp	r3, r8
 8004d2e:	f77f af7a 	ble.w	8004c26 <_printf_float+0x242>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4652      	mov	r2, sl
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	f43f aeac 	beq.w	8004a9a <_printf_float+0xb6>
 8004d42:	f108 0801 	add.w	r8, r8, #1
 8004d46:	e7ec      	b.n	8004d22 <_printf_float+0x33e>
 8004d48:	4613      	mov	r3, r2
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	4628      	mov	r0, r5
 8004d50:	47b8      	blx	r7
 8004d52:	3001      	adds	r0, #1
 8004d54:	d1c0      	bne.n	8004cd8 <_printf_float+0x2f4>
 8004d56:	e6a0      	b.n	8004a9a <_printf_float+0xb6>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d60:	47b8      	blx	r7
 8004d62:	3001      	adds	r0, #1
 8004d64:	f43f ae99 	beq.w	8004a9a <_printf_float+0xb6>
 8004d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d6a:	f10b 0b01 	add.w	fp, fp, #1
 8004d6e:	e7b9      	b.n	8004ce4 <_printf_float+0x300>
 8004d70:	4631      	mov	r1, r6
 8004d72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d76:	4628      	mov	r0, r5
 8004d78:	47b8      	blx	r7
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	d1bf      	bne.n	8004cfe <_printf_float+0x31a>
 8004d7e:	e68c      	b.n	8004a9a <_printf_float+0xb6>
 8004d80:	464b      	mov	r3, r9
 8004d82:	4631      	mov	r1, r6
 8004d84:	4628      	mov	r0, r5
 8004d86:	eb08 020a 	add.w	r2, r8, sl
 8004d8a:	47b8      	blx	r7
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d1c2      	bne.n	8004d16 <_printf_float+0x332>
 8004d90:	e683      	b.n	8004a9a <_printf_float+0xb6>
 8004d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d94:	2a01      	cmp	r2, #1
 8004d96:	dc01      	bgt.n	8004d9c <_printf_float+0x3b8>
 8004d98:	07db      	lsls	r3, r3, #31
 8004d9a:	d539      	bpl.n	8004e10 <_printf_float+0x42c>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4642      	mov	r2, r8
 8004da0:	4631      	mov	r1, r6
 8004da2:	4628      	mov	r0, r5
 8004da4:	47b8      	blx	r7
 8004da6:	3001      	adds	r0, #1
 8004da8:	f43f ae77 	beq.w	8004a9a <_printf_float+0xb6>
 8004dac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004db0:	4631      	mov	r1, r6
 8004db2:	4628      	mov	r0, r5
 8004db4:	47b8      	blx	r7
 8004db6:	3001      	adds	r0, #1
 8004db8:	f43f ae6f 	beq.w	8004a9a <_printf_float+0xb6>
 8004dbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004dc8:	f7fb fdee 	bl	80009a8 <__aeabi_dcmpeq>
 8004dcc:	b9d8      	cbnz	r0, 8004e06 <_printf_float+0x422>
 8004dce:	f109 33ff 	add.w	r3, r9, #4294967295
 8004dd2:	f108 0201 	add.w	r2, r8, #1
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b8      	blx	r7
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d10e      	bne.n	8004dfe <_printf_float+0x41a>
 8004de0:	e65b      	b.n	8004a9a <_printf_float+0xb6>
 8004de2:	2301      	movs	r3, #1
 8004de4:	464a      	mov	r2, r9
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	f43f ae54 	beq.w	8004a9a <_printf_float+0xb6>
 8004df2:	f108 0801 	add.w	r8, r8, #1
 8004df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	4543      	cmp	r3, r8
 8004dfc:	dcf1      	bgt.n	8004de2 <_printf_float+0x3fe>
 8004dfe:	4653      	mov	r3, sl
 8004e00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e04:	e6de      	b.n	8004bc4 <_printf_float+0x1e0>
 8004e06:	f04f 0800 	mov.w	r8, #0
 8004e0a:	f104 091a 	add.w	r9, r4, #26
 8004e0e:	e7f2      	b.n	8004df6 <_printf_float+0x412>
 8004e10:	2301      	movs	r3, #1
 8004e12:	4642      	mov	r2, r8
 8004e14:	e7df      	b.n	8004dd6 <_printf_float+0x3f2>
 8004e16:	2301      	movs	r3, #1
 8004e18:	464a      	mov	r2, r9
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	f43f ae3a 	beq.w	8004a9a <_printf_float+0xb6>
 8004e26:	f108 0801 	add.w	r8, r8, #1
 8004e2a:	68e3      	ldr	r3, [r4, #12]
 8004e2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e2e:	1a5b      	subs	r3, r3, r1
 8004e30:	4543      	cmp	r3, r8
 8004e32:	dcf0      	bgt.n	8004e16 <_printf_float+0x432>
 8004e34:	e6fb      	b.n	8004c2e <_printf_float+0x24a>
 8004e36:	f04f 0800 	mov.w	r8, #0
 8004e3a:	f104 0919 	add.w	r9, r4, #25
 8004e3e:	e7f4      	b.n	8004e2a <_printf_float+0x446>

08004e40 <_printf_common>:
 8004e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	4616      	mov	r6, r2
 8004e46:	4699      	mov	r9, r3
 8004e48:	688a      	ldr	r2, [r1, #8]
 8004e4a:	690b      	ldr	r3, [r1, #16]
 8004e4c:	4607      	mov	r7, r0
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	bfb8      	it	lt
 8004e52:	4613      	movlt	r3, r2
 8004e54:	6033      	str	r3, [r6, #0]
 8004e56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e60:	b10a      	cbz	r2, 8004e66 <_printf_common+0x26>
 8004e62:	3301      	adds	r3, #1
 8004e64:	6033      	str	r3, [r6, #0]
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	0699      	lsls	r1, r3, #26
 8004e6a:	bf42      	ittt	mi
 8004e6c:	6833      	ldrmi	r3, [r6, #0]
 8004e6e:	3302      	addmi	r3, #2
 8004e70:	6033      	strmi	r3, [r6, #0]
 8004e72:	6825      	ldr	r5, [r4, #0]
 8004e74:	f015 0506 	ands.w	r5, r5, #6
 8004e78:	d106      	bne.n	8004e88 <_printf_common+0x48>
 8004e7a:	f104 0a19 	add.w	sl, r4, #25
 8004e7e:	68e3      	ldr	r3, [r4, #12]
 8004e80:	6832      	ldr	r2, [r6, #0]
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	42ab      	cmp	r3, r5
 8004e86:	dc2b      	bgt.n	8004ee0 <_printf_common+0xa0>
 8004e88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e8c:	1e13      	subs	r3, r2, #0
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	bf18      	it	ne
 8004e92:	2301      	movne	r3, #1
 8004e94:	0692      	lsls	r2, r2, #26
 8004e96:	d430      	bmi.n	8004efa <_printf_common+0xba>
 8004e98:	4649      	mov	r1, r9
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ea0:	47c0      	blx	r8
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d023      	beq.n	8004eee <_printf_common+0xae>
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	6922      	ldr	r2, [r4, #16]
 8004eaa:	f003 0306 	and.w	r3, r3, #6
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	bf14      	ite	ne
 8004eb2:	2500      	movne	r5, #0
 8004eb4:	6833      	ldreq	r3, [r6, #0]
 8004eb6:	f04f 0600 	mov.w	r6, #0
 8004eba:	bf08      	it	eq
 8004ebc:	68e5      	ldreq	r5, [r4, #12]
 8004ebe:	f104 041a 	add.w	r4, r4, #26
 8004ec2:	bf08      	it	eq
 8004ec4:	1aed      	subeq	r5, r5, r3
 8004ec6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004eca:	bf08      	it	eq
 8004ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	bfc4      	itt	gt
 8004ed4:	1a9b      	subgt	r3, r3, r2
 8004ed6:	18ed      	addgt	r5, r5, r3
 8004ed8:	42b5      	cmp	r5, r6
 8004eda:	d11a      	bne.n	8004f12 <_printf_common+0xd2>
 8004edc:	2000      	movs	r0, #0
 8004ede:	e008      	b.n	8004ef2 <_printf_common+0xb2>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	4652      	mov	r2, sl
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	47c0      	blx	r8
 8004eea:	3001      	adds	r0, #1
 8004eec:	d103      	bne.n	8004ef6 <_printf_common+0xb6>
 8004eee:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef6:	3501      	adds	r5, #1
 8004ef8:	e7c1      	b.n	8004e7e <_printf_common+0x3e>
 8004efa:	2030      	movs	r0, #48	; 0x30
 8004efc:	18e1      	adds	r1, r4, r3
 8004efe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f08:	4422      	add	r2, r4
 8004f0a:	3302      	adds	r3, #2
 8004f0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f10:	e7c2      	b.n	8004e98 <_printf_common+0x58>
 8004f12:	2301      	movs	r3, #1
 8004f14:	4622      	mov	r2, r4
 8004f16:	4649      	mov	r1, r9
 8004f18:	4638      	mov	r0, r7
 8004f1a:	47c0      	blx	r8
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d0e6      	beq.n	8004eee <_printf_common+0xae>
 8004f20:	3601      	adds	r6, #1
 8004f22:	e7d9      	b.n	8004ed8 <_printf_common+0x98>

08004f24 <_printf_i>:
 8004f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	7e0f      	ldrb	r7, [r1, #24]
 8004f2a:	4691      	mov	r9, r2
 8004f2c:	2f78      	cmp	r7, #120	; 0x78
 8004f2e:	4680      	mov	r8, r0
 8004f30:	460c      	mov	r4, r1
 8004f32:	469a      	mov	sl, r3
 8004f34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f3a:	d807      	bhi.n	8004f4c <_printf_i+0x28>
 8004f3c:	2f62      	cmp	r7, #98	; 0x62
 8004f3e:	d80a      	bhi.n	8004f56 <_printf_i+0x32>
 8004f40:	2f00      	cmp	r7, #0
 8004f42:	f000 80d5 	beq.w	80050f0 <_printf_i+0x1cc>
 8004f46:	2f58      	cmp	r7, #88	; 0x58
 8004f48:	f000 80c1 	beq.w	80050ce <_printf_i+0x1aa>
 8004f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f54:	e03a      	b.n	8004fcc <_printf_i+0xa8>
 8004f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f5a:	2b15      	cmp	r3, #21
 8004f5c:	d8f6      	bhi.n	8004f4c <_printf_i+0x28>
 8004f5e:	a101      	add	r1, pc, #4	; (adr r1, 8004f64 <_printf_i+0x40>)
 8004f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f64:	08004fbd 	.word	0x08004fbd
 8004f68:	08004fd1 	.word	0x08004fd1
 8004f6c:	08004f4d 	.word	0x08004f4d
 8004f70:	08004f4d 	.word	0x08004f4d
 8004f74:	08004f4d 	.word	0x08004f4d
 8004f78:	08004f4d 	.word	0x08004f4d
 8004f7c:	08004fd1 	.word	0x08004fd1
 8004f80:	08004f4d 	.word	0x08004f4d
 8004f84:	08004f4d 	.word	0x08004f4d
 8004f88:	08004f4d 	.word	0x08004f4d
 8004f8c:	08004f4d 	.word	0x08004f4d
 8004f90:	080050d7 	.word	0x080050d7
 8004f94:	08004ffd 	.word	0x08004ffd
 8004f98:	08005091 	.word	0x08005091
 8004f9c:	08004f4d 	.word	0x08004f4d
 8004fa0:	08004f4d 	.word	0x08004f4d
 8004fa4:	080050f9 	.word	0x080050f9
 8004fa8:	08004f4d 	.word	0x08004f4d
 8004fac:	08004ffd 	.word	0x08004ffd
 8004fb0:	08004f4d 	.word	0x08004f4d
 8004fb4:	08004f4d 	.word	0x08004f4d
 8004fb8:	08005099 	.word	0x08005099
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	1d1a      	adds	r2, r3, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	602a      	str	r2, [r5, #0]
 8004fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0a0      	b.n	8005112 <_printf_i+0x1ee>
 8004fd0:	6820      	ldr	r0, [r4, #0]
 8004fd2:	682b      	ldr	r3, [r5, #0]
 8004fd4:	0607      	lsls	r7, r0, #24
 8004fd6:	f103 0104 	add.w	r1, r3, #4
 8004fda:	6029      	str	r1, [r5, #0]
 8004fdc:	d501      	bpl.n	8004fe2 <_printf_i+0xbe>
 8004fde:	681e      	ldr	r6, [r3, #0]
 8004fe0:	e003      	b.n	8004fea <_printf_i+0xc6>
 8004fe2:	0646      	lsls	r6, r0, #25
 8004fe4:	d5fb      	bpl.n	8004fde <_printf_i+0xba>
 8004fe6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004fea:	2e00      	cmp	r6, #0
 8004fec:	da03      	bge.n	8004ff6 <_printf_i+0xd2>
 8004fee:	232d      	movs	r3, #45	; 0x2d
 8004ff0:	4276      	negs	r6, r6
 8004ff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff6:	230a      	movs	r3, #10
 8004ff8:	4859      	ldr	r0, [pc, #356]	; (8005160 <_printf_i+0x23c>)
 8004ffa:	e012      	b.n	8005022 <_printf_i+0xfe>
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	6820      	ldr	r0, [r4, #0]
 8005000:	1d19      	adds	r1, r3, #4
 8005002:	6029      	str	r1, [r5, #0]
 8005004:	0605      	lsls	r5, r0, #24
 8005006:	d501      	bpl.n	800500c <_printf_i+0xe8>
 8005008:	681e      	ldr	r6, [r3, #0]
 800500a:	e002      	b.n	8005012 <_printf_i+0xee>
 800500c:	0641      	lsls	r1, r0, #25
 800500e:	d5fb      	bpl.n	8005008 <_printf_i+0xe4>
 8005010:	881e      	ldrh	r6, [r3, #0]
 8005012:	2f6f      	cmp	r7, #111	; 0x6f
 8005014:	bf0c      	ite	eq
 8005016:	2308      	moveq	r3, #8
 8005018:	230a      	movne	r3, #10
 800501a:	4851      	ldr	r0, [pc, #324]	; (8005160 <_printf_i+0x23c>)
 800501c:	2100      	movs	r1, #0
 800501e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005022:	6865      	ldr	r5, [r4, #4]
 8005024:	2d00      	cmp	r5, #0
 8005026:	bfa8      	it	ge
 8005028:	6821      	ldrge	r1, [r4, #0]
 800502a:	60a5      	str	r5, [r4, #8]
 800502c:	bfa4      	itt	ge
 800502e:	f021 0104 	bicge.w	r1, r1, #4
 8005032:	6021      	strge	r1, [r4, #0]
 8005034:	b90e      	cbnz	r6, 800503a <_printf_i+0x116>
 8005036:	2d00      	cmp	r5, #0
 8005038:	d04b      	beq.n	80050d2 <_printf_i+0x1ae>
 800503a:	4615      	mov	r5, r2
 800503c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005040:	fb03 6711 	mls	r7, r3, r1, r6
 8005044:	5dc7      	ldrb	r7, [r0, r7]
 8005046:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800504a:	4637      	mov	r7, r6
 800504c:	42bb      	cmp	r3, r7
 800504e:	460e      	mov	r6, r1
 8005050:	d9f4      	bls.n	800503c <_printf_i+0x118>
 8005052:	2b08      	cmp	r3, #8
 8005054:	d10b      	bne.n	800506e <_printf_i+0x14a>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	07de      	lsls	r6, r3, #31
 800505a:	d508      	bpl.n	800506e <_printf_i+0x14a>
 800505c:	6923      	ldr	r3, [r4, #16]
 800505e:	6861      	ldr	r1, [r4, #4]
 8005060:	4299      	cmp	r1, r3
 8005062:	bfde      	ittt	le
 8005064:	2330      	movle	r3, #48	; 0x30
 8005066:	f805 3c01 	strble.w	r3, [r5, #-1]
 800506a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800506e:	1b52      	subs	r2, r2, r5
 8005070:	6122      	str	r2, [r4, #16]
 8005072:	464b      	mov	r3, r9
 8005074:	4621      	mov	r1, r4
 8005076:	4640      	mov	r0, r8
 8005078:	f8cd a000 	str.w	sl, [sp]
 800507c:	aa03      	add	r2, sp, #12
 800507e:	f7ff fedf 	bl	8004e40 <_printf_common>
 8005082:	3001      	adds	r0, #1
 8005084:	d14a      	bne.n	800511c <_printf_i+0x1f8>
 8005086:	f04f 30ff 	mov.w	r0, #4294967295
 800508a:	b004      	add	sp, #16
 800508c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	f043 0320 	orr.w	r3, r3, #32
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	2778      	movs	r7, #120	; 0x78
 800509a:	4832      	ldr	r0, [pc, #200]	; (8005164 <_printf_i+0x240>)
 800509c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	6829      	ldr	r1, [r5, #0]
 80050a4:	061f      	lsls	r7, r3, #24
 80050a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80050aa:	d402      	bmi.n	80050b2 <_printf_i+0x18e>
 80050ac:	065f      	lsls	r7, r3, #25
 80050ae:	bf48      	it	mi
 80050b0:	b2b6      	uxthmi	r6, r6
 80050b2:	07df      	lsls	r7, r3, #31
 80050b4:	bf48      	it	mi
 80050b6:	f043 0320 	orrmi.w	r3, r3, #32
 80050ba:	6029      	str	r1, [r5, #0]
 80050bc:	bf48      	it	mi
 80050be:	6023      	strmi	r3, [r4, #0]
 80050c0:	b91e      	cbnz	r6, 80050ca <_printf_i+0x1a6>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	f023 0320 	bic.w	r3, r3, #32
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	2310      	movs	r3, #16
 80050cc:	e7a6      	b.n	800501c <_printf_i+0xf8>
 80050ce:	4824      	ldr	r0, [pc, #144]	; (8005160 <_printf_i+0x23c>)
 80050d0:	e7e4      	b.n	800509c <_printf_i+0x178>
 80050d2:	4615      	mov	r5, r2
 80050d4:	e7bd      	b.n	8005052 <_printf_i+0x12e>
 80050d6:	682b      	ldr	r3, [r5, #0]
 80050d8:	6826      	ldr	r6, [r4, #0]
 80050da:	1d18      	adds	r0, r3, #4
 80050dc:	6961      	ldr	r1, [r4, #20]
 80050de:	6028      	str	r0, [r5, #0]
 80050e0:	0635      	lsls	r5, r6, #24
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	d501      	bpl.n	80050ea <_printf_i+0x1c6>
 80050e6:	6019      	str	r1, [r3, #0]
 80050e8:	e002      	b.n	80050f0 <_printf_i+0x1cc>
 80050ea:	0670      	lsls	r0, r6, #25
 80050ec:	d5fb      	bpl.n	80050e6 <_printf_i+0x1c2>
 80050ee:	8019      	strh	r1, [r3, #0]
 80050f0:	2300      	movs	r3, #0
 80050f2:	4615      	mov	r5, r2
 80050f4:	6123      	str	r3, [r4, #16]
 80050f6:	e7bc      	b.n	8005072 <_printf_i+0x14e>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	2100      	movs	r1, #0
 80050fc:	1d1a      	adds	r2, r3, #4
 80050fe:	602a      	str	r2, [r5, #0]
 8005100:	681d      	ldr	r5, [r3, #0]
 8005102:	6862      	ldr	r2, [r4, #4]
 8005104:	4628      	mov	r0, r5
 8005106:	f000 fbe2 	bl	80058ce <memchr>
 800510a:	b108      	cbz	r0, 8005110 <_printf_i+0x1ec>
 800510c:	1b40      	subs	r0, r0, r5
 800510e:	6060      	str	r0, [r4, #4]
 8005110:	6863      	ldr	r3, [r4, #4]
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	2300      	movs	r3, #0
 8005116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800511a:	e7aa      	b.n	8005072 <_printf_i+0x14e>
 800511c:	462a      	mov	r2, r5
 800511e:	4649      	mov	r1, r9
 8005120:	4640      	mov	r0, r8
 8005122:	6923      	ldr	r3, [r4, #16]
 8005124:	47d0      	blx	sl
 8005126:	3001      	adds	r0, #1
 8005128:	d0ad      	beq.n	8005086 <_printf_i+0x162>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	079b      	lsls	r3, r3, #30
 800512e:	d413      	bmi.n	8005158 <_printf_i+0x234>
 8005130:	68e0      	ldr	r0, [r4, #12]
 8005132:	9b03      	ldr	r3, [sp, #12]
 8005134:	4298      	cmp	r0, r3
 8005136:	bfb8      	it	lt
 8005138:	4618      	movlt	r0, r3
 800513a:	e7a6      	b.n	800508a <_printf_i+0x166>
 800513c:	2301      	movs	r3, #1
 800513e:	4632      	mov	r2, r6
 8005140:	4649      	mov	r1, r9
 8005142:	4640      	mov	r0, r8
 8005144:	47d0      	blx	sl
 8005146:	3001      	adds	r0, #1
 8005148:	d09d      	beq.n	8005086 <_printf_i+0x162>
 800514a:	3501      	adds	r5, #1
 800514c:	68e3      	ldr	r3, [r4, #12]
 800514e:	9903      	ldr	r1, [sp, #12]
 8005150:	1a5b      	subs	r3, r3, r1
 8005152:	42ab      	cmp	r3, r5
 8005154:	dcf2      	bgt.n	800513c <_printf_i+0x218>
 8005156:	e7eb      	b.n	8005130 <_printf_i+0x20c>
 8005158:	2500      	movs	r5, #0
 800515a:	f104 0619 	add.w	r6, r4, #25
 800515e:	e7f5      	b.n	800514c <_printf_i+0x228>
 8005160:	0800b5ad 	.word	0x0800b5ad
 8005164:	0800b5be 	.word	0x0800b5be

08005168 <_scanf_float>:
 8005168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516c:	b087      	sub	sp, #28
 800516e:	9303      	str	r3, [sp, #12]
 8005170:	688b      	ldr	r3, [r1, #8]
 8005172:	4617      	mov	r7, r2
 8005174:	1e5a      	subs	r2, r3, #1
 8005176:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800517a:	bf85      	ittet	hi
 800517c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005180:	195b      	addhi	r3, r3, r5
 8005182:	2300      	movls	r3, #0
 8005184:	9302      	strhi	r3, [sp, #8]
 8005186:	bf88      	it	hi
 8005188:	f240 135d 	movwhi	r3, #349	; 0x15d
 800518c:	468b      	mov	fp, r1
 800518e:	f04f 0500 	mov.w	r5, #0
 8005192:	bf8c      	ite	hi
 8005194:	608b      	strhi	r3, [r1, #8]
 8005196:	9302      	strls	r3, [sp, #8]
 8005198:	680b      	ldr	r3, [r1, #0]
 800519a:	4680      	mov	r8, r0
 800519c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80051a0:	f84b 3b1c 	str.w	r3, [fp], #28
 80051a4:	460c      	mov	r4, r1
 80051a6:	465e      	mov	r6, fp
 80051a8:	46aa      	mov	sl, r5
 80051aa:	46a9      	mov	r9, r5
 80051ac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80051b0:	9501      	str	r5, [sp, #4]
 80051b2:	68a2      	ldr	r2, [r4, #8]
 80051b4:	b152      	cbz	r2, 80051cc <_scanf_float+0x64>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b4e      	cmp	r3, #78	; 0x4e
 80051bc:	d864      	bhi.n	8005288 <_scanf_float+0x120>
 80051be:	2b40      	cmp	r3, #64	; 0x40
 80051c0:	d83c      	bhi.n	800523c <_scanf_float+0xd4>
 80051c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80051c6:	b2c8      	uxtb	r0, r1
 80051c8:	280e      	cmp	r0, #14
 80051ca:	d93a      	bls.n	8005242 <_scanf_float+0xda>
 80051cc:	f1b9 0f00 	cmp.w	r9, #0
 80051d0:	d003      	beq.n	80051da <_scanf_float+0x72>
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051de:	f1ba 0f01 	cmp.w	sl, #1
 80051e2:	f200 8113 	bhi.w	800540c <_scanf_float+0x2a4>
 80051e6:	455e      	cmp	r6, fp
 80051e8:	f200 8105 	bhi.w	80053f6 <_scanf_float+0x28e>
 80051ec:	2501      	movs	r5, #1
 80051ee:	4628      	mov	r0, r5
 80051f0:	b007      	add	sp, #28
 80051f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80051fa:	2a0d      	cmp	r2, #13
 80051fc:	d8e6      	bhi.n	80051cc <_scanf_float+0x64>
 80051fe:	a101      	add	r1, pc, #4	; (adr r1, 8005204 <_scanf_float+0x9c>)
 8005200:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005204:	08005343 	.word	0x08005343
 8005208:	080051cd 	.word	0x080051cd
 800520c:	080051cd 	.word	0x080051cd
 8005210:	080051cd 	.word	0x080051cd
 8005214:	080053a3 	.word	0x080053a3
 8005218:	0800537b 	.word	0x0800537b
 800521c:	080051cd 	.word	0x080051cd
 8005220:	080051cd 	.word	0x080051cd
 8005224:	08005351 	.word	0x08005351
 8005228:	080051cd 	.word	0x080051cd
 800522c:	080051cd 	.word	0x080051cd
 8005230:	080051cd 	.word	0x080051cd
 8005234:	080051cd 	.word	0x080051cd
 8005238:	08005309 	.word	0x08005309
 800523c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005240:	e7db      	b.n	80051fa <_scanf_float+0x92>
 8005242:	290e      	cmp	r1, #14
 8005244:	d8c2      	bhi.n	80051cc <_scanf_float+0x64>
 8005246:	a001      	add	r0, pc, #4	; (adr r0, 800524c <_scanf_float+0xe4>)
 8005248:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800524c:	080052fb 	.word	0x080052fb
 8005250:	080051cd 	.word	0x080051cd
 8005254:	080052fb 	.word	0x080052fb
 8005258:	0800538f 	.word	0x0800538f
 800525c:	080051cd 	.word	0x080051cd
 8005260:	080052a9 	.word	0x080052a9
 8005264:	080052e5 	.word	0x080052e5
 8005268:	080052e5 	.word	0x080052e5
 800526c:	080052e5 	.word	0x080052e5
 8005270:	080052e5 	.word	0x080052e5
 8005274:	080052e5 	.word	0x080052e5
 8005278:	080052e5 	.word	0x080052e5
 800527c:	080052e5 	.word	0x080052e5
 8005280:	080052e5 	.word	0x080052e5
 8005284:	080052e5 	.word	0x080052e5
 8005288:	2b6e      	cmp	r3, #110	; 0x6e
 800528a:	d809      	bhi.n	80052a0 <_scanf_float+0x138>
 800528c:	2b60      	cmp	r3, #96	; 0x60
 800528e:	d8b2      	bhi.n	80051f6 <_scanf_float+0x8e>
 8005290:	2b54      	cmp	r3, #84	; 0x54
 8005292:	d077      	beq.n	8005384 <_scanf_float+0x21c>
 8005294:	2b59      	cmp	r3, #89	; 0x59
 8005296:	d199      	bne.n	80051cc <_scanf_float+0x64>
 8005298:	2d07      	cmp	r5, #7
 800529a:	d197      	bne.n	80051cc <_scanf_float+0x64>
 800529c:	2508      	movs	r5, #8
 800529e:	e029      	b.n	80052f4 <_scanf_float+0x18c>
 80052a0:	2b74      	cmp	r3, #116	; 0x74
 80052a2:	d06f      	beq.n	8005384 <_scanf_float+0x21c>
 80052a4:	2b79      	cmp	r3, #121	; 0x79
 80052a6:	e7f6      	b.n	8005296 <_scanf_float+0x12e>
 80052a8:	6821      	ldr	r1, [r4, #0]
 80052aa:	05c8      	lsls	r0, r1, #23
 80052ac:	d51a      	bpl.n	80052e4 <_scanf_float+0x17c>
 80052ae:	9b02      	ldr	r3, [sp, #8]
 80052b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80052b4:	6021      	str	r1, [r4, #0]
 80052b6:	f109 0901 	add.w	r9, r9, #1
 80052ba:	b11b      	cbz	r3, 80052c4 <_scanf_float+0x15c>
 80052bc:	3b01      	subs	r3, #1
 80052be:	3201      	adds	r2, #1
 80052c0:	9302      	str	r3, [sp, #8]
 80052c2:	60a2      	str	r2, [r4, #8]
 80052c4:	68a3      	ldr	r3, [r4, #8]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	60a3      	str	r3, [r4, #8]
 80052ca:	6923      	ldr	r3, [r4, #16]
 80052cc:	3301      	adds	r3, #1
 80052ce:	6123      	str	r3, [r4, #16]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	607b      	str	r3, [r7, #4]
 80052d8:	f340 8084 	ble.w	80053e4 <_scanf_float+0x27c>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	3301      	adds	r3, #1
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	e766      	b.n	80051b2 <_scanf_float+0x4a>
 80052e4:	eb1a 0f05 	cmn.w	sl, r5
 80052e8:	f47f af70 	bne.w	80051cc <_scanf_float+0x64>
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80052f2:	6022      	str	r2, [r4, #0]
 80052f4:	f806 3b01 	strb.w	r3, [r6], #1
 80052f8:	e7e4      	b.n	80052c4 <_scanf_float+0x15c>
 80052fa:	6822      	ldr	r2, [r4, #0]
 80052fc:	0610      	lsls	r0, r2, #24
 80052fe:	f57f af65 	bpl.w	80051cc <_scanf_float+0x64>
 8005302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005306:	e7f4      	b.n	80052f2 <_scanf_float+0x18a>
 8005308:	f1ba 0f00 	cmp.w	sl, #0
 800530c:	d10e      	bne.n	800532c <_scanf_float+0x1c4>
 800530e:	f1b9 0f00 	cmp.w	r9, #0
 8005312:	d10e      	bne.n	8005332 <_scanf_float+0x1ca>
 8005314:	6822      	ldr	r2, [r4, #0]
 8005316:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800531a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800531e:	d108      	bne.n	8005332 <_scanf_float+0x1ca>
 8005320:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005324:	f04f 0a01 	mov.w	sl, #1
 8005328:	6022      	str	r2, [r4, #0]
 800532a:	e7e3      	b.n	80052f4 <_scanf_float+0x18c>
 800532c:	f1ba 0f02 	cmp.w	sl, #2
 8005330:	d055      	beq.n	80053de <_scanf_float+0x276>
 8005332:	2d01      	cmp	r5, #1
 8005334:	d002      	beq.n	800533c <_scanf_float+0x1d4>
 8005336:	2d04      	cmp	r5, #4
 8005338:	f47f af48 	bne.w	80051cc <_scanf_float+0x64>
 800533c:	3501      	adds	r5, #1
 800533e:	b2ed      	uxtb	r5, r5
 8005340:	e7d8      	b.n	80052f4 <_scanf_float+0x18c>
 8005342:	f1ba 0f01 	cmp.w	sl, #1
 8005346:	f47f af41 	bne.w	80051cc <_scanf_float+0x64>
 800534a:	f04f 0a02 	mov.w	sl, #2
 800534e:	e7d1      	b.n	80052f4 <_scanf_float+0x18c>
 8005350:	b97d      	cbnz	r5, 8005372 <_scanf_float+0x20a>
 8005352:	f1b9 0f00 	cmp.w	r9, #0
 8005356:	f47f af3c 	bne.w	80051d2 <_scanf_float+0x6a>
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005360:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005364:	f47f af39 	bne.w	80051da <_scanf_float+0x72>
 8005368:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800536c:	2501      	movs	r5, #1
 800536e:	6022      	str	r2, [r4, #0]
 8005370:	e7c0      	b.n	80052f4 <_scanf_float+0x18c>
 8005372:	2d03      	cmp	r5, #3
 8005374:	d0e2      	beq.n	800533c <_scanf_float+0x1d4>
 8005376:	2d05      	cmp	r5, #5
 8005378:	e7de      	b.n	8005338 <_scanf_float+0x1d0>
 800537a:	2d02      	cmp	r5, #2
 800537c:	f47f af26 	bne.w	80051cc <_scanf_float+0x64>
 8005380:	2503      	movs	r5, #3
 8005382:	e7b7      	b.n	80052f4 <_scanf_float+0x18c>
 8005384:	2d06      	cmp	r5, #6
 8005386:	f47f af21 	bne.w	80051cc <_scanf_float+0x64>
 800538a:	2507      	movs	r5, #7
 800538c:	e7b2      	b.n	80052f4 <_scanf_float+0x18c>
 800538e:	6822      	ldr	r2, [r4, #0]
 8005390:	0591      	lsls	r1, r2, #22
 8005392:	f57f af1b 	bpl.w	80051cc <_scanf_float+0x64>
 8005396:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800539a:	6022      	str	r2, [r4, #0]
 800539c:	f8cd 9004 	str.w	r9, [sp, #4]
 80053a0:	e7a8      	b.n	80052f4 <_scanf_float+0x18c>
 80053a2:	6822      	ldr	r2, [r4, #0]
 80053a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80053a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80053ac:	d006      	beq.n	80053bc <_scanf_float+0x254>
 80053ae:	0550      	lsls	r0, r2, #21
 80053b0:	f57f af0c 	bpl.w	80051cc <_scanf_float+0x64>
 80053b4:	f1b9 0f00 	cmp.w	r9, #0
 80053b8:	f43f af0f 	beq.w	80051da <_scanf_float+0x72>
 80053bc:	0591      	lsls	r1, r2, #22
 80053be:	bf58      	it	pl
 80053c0:	9901      	ldrpl	r1, [sp, #4]
 80053c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053c6:	bf58      	it	pl
 80053c8:	eba9 0101 	subpl.w	r1, r9, r1
 80053cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80053d0:	f04f 0900 	mov.w	r9, #0
 80053d4:	bf58      	it	pl
 80053d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80053da:	6022      	str	r2, [r4, #0]
 80053dc:	e78a      	b.n	80052f4 <_scanf_float+0x18c>
 80053de:	f04f 0a03 	mov.w	sl, #3
 80053e2:	e787      	b.n	80052f4 <_scanf_float+0x18c>
 80053e4:	4639      	mov	r1, r7
 80053e6:	4640      	mov	r0, r8
 80053e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80053ec:	4798      	blx	r3
 80053ee:	2800      	cmp	r0, #0
 80053f0:	f43f aedf 	beq.w	80051b2 <_scanf_float+0x4a>
 80053f4:	e6ea      	b.n	80051cc <_scanf_float+0x64>
 80053f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053fa:	463a      	mov	r2, r7
 80053fc:	4640      	mov	r0, r8
 80053fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005402:	4798      	blx	r3
 8005404:	6923      	ldr	r3, [r4, #16]
 8005406:	3b01      	subs	r3, #1
 8005408:	6123      	str	r3, [r4, #16]
 800540a:	e6ec      	b.n	80051e6 <_scanf_float+0x7e>
 800540c:	1e6b      	subs	r3, r5, #1
 800540e:	2b06      	cmp	r3, #6
 8005410:	d825      	bhi.n	800545e <_scanf_float+0x2f6>
 8005412:	2d02      	cmp	r5, #2
 8005414:	d836      	bhi.n	8005484 <_scanf_float+0x31c>
 8005416:	455e      	cmp	r6, fp
 8005418:	f67f aee8 	bls.w	80051ec <_scanf_float+0x84>
 800541c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005420:	463a      	mov	r2, r7
 8005422:	4640      	mov	r0, r8
 8005424:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005428:	4798      	blx	r3
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	3b01      	subs	r3, #1
 800542e:	6123      	str	r3, [r4, #16]
 8005430:	e7f1      	b.n	8005416 <_scanf_float+0x2ae>
 8005432:	9802      	ldr	r0, [sp, #8]
 8005434:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005438:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800543c:	463a      	mov	r2, r7
 800543e:	9002      	str	r0, [sp, #8]
 8005440:	4640      	mov	r0, r8
 8005442:	4798      	blx	r3
 8005444:	6923      	ldr	r3, [r4, #16]
 8005446:	3b01      	subs	r3, #1
 8005448:	6123      	str	r3, [r4, #16]
 800544a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800544e:	fa5f fa8a 	uxtb.w	sl, sl
 8005452:	f1ba 0f02 	cmp.w	sl, #2
 8005456:	d1ec      	bne.n	8005432 <_scanf_float+0x2ca>
 8005458:	3d03      	subs	r5, #3
 800545a:	b2ed      	uxtb	r5, r5
 800545c:	1b76      	subs	r6, r6, r5
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	05da      	lsls	r2, r3, #23
 8005462:	d52f      	bpl.n	80054c4 <_scanf_float+0x35c>
 8005464:	055b      	lsls	r3, r3, #21
 8005466:	d510      	bpl.n	800548a <_scanf_float+0x322>
 8005468:	455e      	cmp	r6, fp
 800546a:	f67f aebf 	bls.w	80051ec <_scanf_float+0x84>
 800546e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005472:	463a      	mov	r2, r7
 8005474:	4640      	mov	r0, r8
 8005476:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800547a:	4798      	blx	r3
 800547c:	6923      	ldr	r3, [r4, #16]
 800547e:	3b01      	subs	r3, #1
 8005480:	6123      	str	r3, [r4, #16]
 8005482:	e7f1      	b.n	8005468 <_scanf_float+0x300>
 8005484:	46aa      	mov	sl, r5
 8005486:	9602      	str	r6, [sp, #8]
 8005488:	e7df      	b.n	800544a <_scanf_float+0x2e2>
 800548a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800548e:	6923      	ldr	r3, [r4, #16]
 8005490:	2965      	cmp	r1, #101	; 0x65
 8005492:	f103 33ff 	add.w	r3, r3, #4294967295
 8005496:	f106 35ff 	add.w	r5, r6, #4294967295
 800549a:	6123      	str	r3, [r4, #16]
 800549c:	d00c      	beq.n	80054b8 <_scanf_float+0x350>
 800549e:	2945      	cmp	r1, #69	; 0x45
 80054a0:	d00a      	beq.n	80054b8 <_scanf_float+0x350>
 80054a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054a6:	463a      	mov	r2, r7
 80054a8:	4640      	mov	r0, r8
 80054aa:	4798      	blx	r3
 80054ac:	6923      	ldr	r3, [r4, #16]
 80054ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	1eb5      	subs	r5, r6, #2
 80054b6:	6123      	str	r3, [r4, #16]
 80054b8:	463a      	mov	r2, r7
 80054ba:	4640      	mov	r0, r8
 80054bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054c0:	4798      	blx	r3
 80054c2:	462e      	mov	r6, r5
 80054c4:	6825      	ldr	r5, [r4, #0]
 80054c6:	f015 0510 	ands.w	r5, r5, #16
 80054ca:	d155      	bne.n	8005578 <_scanf_float+0x410>
 80054cc:	7035      	strb	r5, [r6, #0]
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d8:	d11d      	bne.n	8005516 <_scanf_float+0x3ae>
 80054da:	9b01      	ldr	r3, [sp, #4]
 80054dc:	454b      	cmp	r3, r9
 80054de:	eba3 0209 	sub.w	r2, r3, r9
 80054e2:	d125      	bne.n	8005530 <_scanf_float+0x3c8>
 80054e4:	2200      	movs	r2, #0
 80054e6:	4659      	mov	r1, fp
 80054e8:	4640      	mov	r0, r8
 80054ea:	f002 fc21 	bl	8007d30 <_strtod_r>
 80054ee:	9b03      	ldr	r3, [sp, #12]
 80054f0:	f8d4 c000 	ldr.w	ip, [r4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f01c 0f02 	tst.w	ip, #2
 80054fa:	4606      	mov	r6, r0
 80054fc:	460f      	mov	r7, r1
 80054fe:	f103 0204 	add.w	r2, r3, #4
 8005502:	d020      	beq.n	8005546 <_scanf_float+0x3de>
 8005504:	9903      	ldr	r1, [sp, #12]
 8005506:	600a      	str	r2, [r1, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	e9c3 6700 	strd	r6, r7, [r3]
 800550e:	68e3      	ldr	r3, [r4, #12]
 8005510:	3301      	adds	r3, #1
 8005512:	60e3      	str	r3, [r4, #12]
 8005514:	e66b      	b.n	80051ee <_scanf_float+0x86>
 8005516:	9b04      	ldr	r3, [sp, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0e3      	beq.n	80054e4 <_scanf_float+0x37c>
 800551c:	9905      	ldr	r1, [sp, #20]
 800551e:	230a      	movs	r3, #10
 8005520:	462a      	mov	r2, r5
 8005522:	4640      	mov	r0, r8
 8005524:	3101      	adds	r1, #1
 8005526:	f7ff f9bf 	bl	80048a8 <_strtol_r>
 800552a:	9b04      	ldr	r3, [sp, #16]
 800552c:	9e05      	ldr	r6, [sp, #20]
 800552e:	1ac2      	subs	r2, r0, r3
 8005530:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005534:	429e      	cmp	r6, r3
 8005536:	bf28      	it	cs
 8005538:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800553c:	4630      	mov	r0, r6
 800553e:	490f      	ldr	r1, [pc, #60]	; (800557c <_scanf_float+0x414>)
 8005540:	f000 f8e2 	bl	8005708 <siprintf>
 8005544:	e7ce      	b.n	80054e4 <_scanf_float+0x37c>
 8005546:	f01c 0f04 	tst.w	ip, #4
 800554a:	d1db      	bne.n	8005504 <_scanf_float+0x39c>
 800554c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005550:	f8cc 2000 	str.w	r2, [ip]
 8005554:	f8d3 8000 	ldr.w	r8, [r3]
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	f7fb fa56 	bl	8000a0c <__aeabi_dcmpun>
 8005560:	b128      	cbz	r0, 800556e <_scanf_float+0x406>
 8005562:	4807      	ldr	r0, [pc, #28]	; (8005580 <_scanf_float+0x418>)
 8005564:	f000 f9c2 	bl	80058ec <nanf>
 8005568:	f8c8 0000 	str.w	r0, [r8]
 800556c:	e7cf      	b.n	800550e <_scanf_float+0x3a6>
 800556e:	4630      	mov	r0, r6
 8005570:	4639      	mov	r1, r7
 8005572:	f7fb faa9 	bl	8000ac8 <__aeabi_d2f>
 8005576:	e7f7      	b.n	8005568 <_scanf_float+0x400>
 8005578:	2500      	movs	r5, #0
 800557a:	e638      	b.n	80051ee <_scanf_float+0x86>
 800557c:	0800b5cf 	.word	0x0800b5cf
 8005580:	0800b864 	.word	0x0800b864

08005584 <std>:
 8005584:	2300      	movs	r3, #0
 8005586:	b510      	push	{r4, lr}
 8005588:	4604      	mov	r4, r0
 800558a:	e9c0 3300 	strd	r3, r3, [r0]
 800558e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005592:	6083      	str	r3, [r0, #8]
 8005594:	8181      	strh	r1, [r0, #12]
 8005596:	6643      	str	r3, [r0, #100]	; 0x64
 8005598:	81c2      	strh	r2, [r0, #14]
 800559a:	6183      	str	r3, [r0, #24]
 800559c:	4619      	mov	r1, r3
 800559e:	2208      	movs	r2, #8
 80055a0:	305c      	adds	r0, #92	; 0x5c
 80055a2:	f000 f914 	bl	80057ce <memset>
 80055a6:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <std+0x58>)
 80055a8:	6224      	str	r4, [r4, #32]
 80055aa:	6263      	str	r3, [r4, #36]	; 0x24
 80055ac:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <std+0x5c>)
 80055ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <std+0x60>)
 80055b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <std+0x64>)
 80055b6:	6323      	str	r3, [r4, #48]	; 0x30
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <std+0x68>)
 80055ba:	429c      	cmp	r4, r3
 80055bc:	d006      	beq.n	80055cc <std+0x48>
 80055be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80055c2:	4294      	cmp	r4, r2
 80055c4:	d002      	beq.n	80055cc <std+0x48>
 80055c6:	33d0      	adds	r3, #208	; 0xd0
 80055c8:	429c      	cmp	r4, r3
 80055ca:	d105      	bne.n	80055d8 <std+0x54>
 80055cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d4:	f000 b978 	b.w	80058c8 <__retarget_lock_init_recursive>
 80055d8:	bd10      	pop	{r4, pc}
 80055da:	bf00      	nop
 80055dc:	08005749 	.word	0x08005749
 80055e0:	0800576b 	.word	0x0800576b
 80055e4:	080057a3 	.word	0x080057a3
 80055e8:	080057c7 	.word	0x080057c7
 80055ec:	200006ec 	.word	0x200006ec

080055f0 <stdio_exit_handler>:
 80055f0:	4a02      	ldr	r2, [pc, #8]	; (80055fc <stdio_exit_handler+0xc>)
 80055f2:	4903      	ldr	r1, [pc, #12]	; (8005600 <stdio_exit_handler+0x10>)
 80055f4:	4803      	ldr	r0, [pc, #12]	; (8005604 <stdio_exit_handler+0x14>)
 80055f6:	f000 b869 	b.w	80056cc <_fwalk_sglue>
 80055fa:	bf00      	nop
 80055fc:	20000010 	.word	0x20000010
 8005600:	080080f1 	.word	0x080080f1
 8005604:	2000001c 	.word	0x2000001c

08005608 <cleanup_stdio>:
 8005608:	6841      	ldr	r1, [r0, #4]
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <cleanup_stdio+0x34>)
 800560c:	b510      	push	{r4, lr}
 800560e:	4299      	cmp	r1, r3
 8005610:	4604      	mov	r4, r0
 8005612:	d001      	beq.n	8005618 <cleanup_stdio+0x10>
 8005614:	f002 fd6c 	bl	80080f0 <_fflush_r>
 8005618:	68a1      	ldr	r1, [r4, #8]
 800561a:	4b09      	ldr	r3, [pc, #36]	; (8005640 <cleanup_stdio+0x38>)
 800561c:	4299      	cmp	r1, r3
 800561e:	d002      	beq.n	8005626 <cleanup_stdio+0x1e>
 8005620:	4620      	mov	r0, r4
 8005622:	f002 fd65 	bl	80080f0 <_fflush_r>
 8005626:	68e1      	ldr	r1, [r4, #12]
 8005628:	4b06      	ldr	r3, [pc, #24]	; (8005644 <cleanup_stdio+0x3c>)
 800562a:	4299      	cmp	r1, r3
 800562c:	d004      	beq.n	8005638 <cleanup_stdio+0x30>
 800562e:	4620      	mov	r0, r4
 8005630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005634:	f002 bd5c 	b.w	80080f0 <_fflush_r>
 8005638:	bd10      	pop	{r4, pc}
 800563a:	bf00      	nop
 800563c:	200006ec 	.word	0x200006ec
 8005640:	20000754 	.word	0x20000754
 8005644:	200007bc 	.word	0x200007bc

08005648 <global_stdio_init.part.0>:
 8005648:	b510      	push	{r4, lr}
 800564a:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <global_stdio_init.part.0+0x30>)
 800564c:	4c0b      	ldr	r4, [pc, #44]	; (800567c <global_stdio_init.part.0+0x34>)
 800564e:	4a0c      	ldr	r2, [pc, #48]	; (8005680 <global_stdio_init.part.0+0x38>)
 8005650:	4620      	mov	r0, r4
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	2104      	movs	r1, #4
 8005656:	2200      	movs	r2, #0
 8005658:	f7ff ff94 	bl	8005584 <std>
 800565c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005660:	2201      	movs	r2, #1
 8005662:	2109      	movs	r1, #9
 8005664:	f7ff ff8e 	bl	8005584 <std>
 8005668:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800566c:	2202      	movs	r2, #2
 800566e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005672:	2112      	movs	r1, #18
 8005674:	f7ff bf86 	b.w	8005584 <std>
 8005678:	20000824 	.word	0x20000824
 800567c:	200006ec 	.word	0x200006ec
 8005680:	080055f1 	.word	0x080055f1

08005684 <__sfp_lock_acquire>:
 8005684:	4801      	ldr	r0, [pc, #4]	; (800568c <__sfp_lock_acquire+0x8>)
 8005686:	f000 b920 	b.w	80058ca <__retarget_lock_acquire_recursive>
 800568a:	bf00      	nop
 800568c:	2000082d 	.word	0x2000082d

08005690 <__sfp_lock_release>:
 8005690:	4801      	ldr	r0, [pc, #4]	; (8005698 <__sfp_lock_release+0x8>)
 8005692:	f000 b91b 	b.w	80058cc <__retarget_lock_release_recursive>
 8005696:	bf00      	nop
 8005698:	2000082d 	.word	0x2000082d

0800569c <__sinit>:
 800569c:	b510      	push	{r4, lr}
 800569e:	4604      	mov	r4, r0
 80056a0:	f7ff fff0 	bl	8005684 <__sfp_lock_acquire>
 80056a4:	6a23      	ldr	r3, [r4, #32]
 80056a6:	b11b      	cbz	r3, 80056b0 <__sinit+0x14>
 80056a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ac:	f7ff bff0 	b.w	8005690 <__sfp_lock_release>
 80056b0:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <__sinit+0x28>)
 80056b2:	6223      	str	r3, [r4, #32]
 80056b4:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <__sinit+0x2c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f5      	bne.n	80056a8 <__sinit+0xc>
 80056bc:	f7ff ffc4 	bl	8005648 <global_stdio_init.part.0>
 80056c0:	e7f2      	b.n	80056a8 <__sinit+0xc>
 80056c2:	bf00      	nop
 80056c4:	08005609 	.word	0x08005609
 80056c8:	20000824 	.word	0x20000824

080056cc <_fwalk_sglue>:
 80056cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d0:	4607      	mov	r7, r0
 80056d2:	4688      	mov	r8, r1
 80056d4:	4614      	mov	r4, r2
 80056d6:	2600      	movs	r6, #0
 80056d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056dc:	f1b9 0901 	subs.w	r9, r9, #1
 80056e0:	d505      	bpl.n	80056ee <_fwalk_sglue+0x22>
 80056e2:	6824      	ldr	r4, [r4, #0]
 80056e4:	2c00      	cmp	r4, #0
 80056e6:	d1f7      	bne.n	80056d8 <_fwalk_sglue+0xc>
 80056e8:	4630      	mov	r0, r6
 80056ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ee:	89ab      	ldrh	r3, [r5, #12]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d907      	bls.n	8005704 <_fwalk_sglue+0x38>
 80056f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056f8:	3301      	adds	r3, #1
 80056fa:	d003      	beq.n	8005704 <_fwalk_sglue+0x38>
 80056fc:	4629      	mov	r1, r5
 80056fe:	4638      	mov	r0, r7
 8005700:	47c0      	blx	r8
 8005702:	4306      	orrs	r6, r0
 8005704:	3568      	adds	r5, #104	; 0x68
 8005706:	e7e9      	b.n	80056dc <_fwalk_sglue+0x10>

08005708 <siprintf>:
 8005708:	b40e      	push	{r1, r2, r3}
 800570a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800570e:	b500      	push	{lr}
 8005710:	b09c      	sub	sp, #112	; 0x70
 8005712:	ab1d      	add	r3, sp, #116	; 0x74
 8005714:	9002      	str	r0, [sp, #8]
 8005716:	9006      	str	r0, [sp, #24]
 8005718:	9107      	str	r1, [sp, #28]
 800571a:	9104      	str	r1, [sp, #16]
 800571c:	4808      	ldr	r0, [pc, #32]	; (8005740 <siprintf+0x38>)
 800571e:	4909      	ldr	r1, [pc, #36]	; (8005744 <siprintf+0x3c>)
 8005720:	f853 2b04 	ldr.w	r2, [r3], #4
 8005724:	9105      	str	r1, [sp, #20]
 8005726:	6800      	ldr	r0, [r0, #0]
 8005728:	a902      	add	r1, sp, #8
 800572a:	9301      	str	r3, [sp, #4]
 800572c:	f002 fb60 	bl	8007df0 <_svfiprintf_r>
 8005730:	2200      	movs	r2, #0
 8005732:	9b02      	ldr	r3, [sp, #8]
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	b01c      	add	sp, #112	; 0x70
 8005738:	f85d eb04 	ldr.w	lr, [sp], #4
 800573c:	b003      	add	sp, #12
 800573e:	4770      	bx	lr
 8005740:	20000068 	.word	0x20000068
 8005744:	ffff0208 	.word	0xffff0208

08005748 <__sread>:
 8005748:	b510      	push	{r4, lr}
 800574a:	460c      	mov	r4, r1
 800574c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005750:	f000 f86c 	bl	800582c <_read_r>
 8005754:	2800      	cmp	r0, #0
 8005756:	bfab      	itete	ge
 8005758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800575a:	89a3      	ldrhlt	r3, [r4, #12]
 800575c:	181b      	addge	r3, r3, r0
 800575e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005762:	bfac      	ite	ge
 8005764:	6563      	strge	r3, [r4, #84]	; 0x54
 8005766:	81a3      	strhlt	r3, [r4, #12]
 8005768:	bd10      	pop	{r4, pc}

0800576a <__swrite>:
 800576a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800576e:	461f      	mov	r7, r3
 8005770:	898b      	ldrh	r3, [r1, #12]
 8005772:	4605      	mov	r5, r0
 8005774:	05db      	lsls	r3, r3, #23
 8005776:	460c      	mov	r4, r1
 8005778:	4616      	mov	r6, r2
 800577a:	d505      	bpl.n	8005788 <__swrite+0x1e>
 800577c:	2302      	movs	r3, #2
 800577e:	2200      	movs	r2, #0
 8005780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005784:	f000 f840 	bl	8005808 <_lseek_r>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	4632      	mov	r2, r6
 800578c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005790:	81a3      	strh	r3, [r4, #12]
 8005792:	4628      	mov	r0, r5
 8005794:	463b      	mov	r3, r7
 8005796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800579a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800579e:	f000 b857 	b.w	8005850 <_write_r>

080057a2 <__sseek>:
 80057a2:	b510      	push	{r4, lr}
 80057a4:	460c      	mov	r4, r1
 80057a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057aa:	f000 f82d 	bl	8005808 <_lseek_r>
 80057ae:	1c43      	adds	r3, r0, #1
 80057b0:	89a3      	ldrh	r3, [r4, #12]
 80057b2:	bf15      	itete	ne
 80057b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80057b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057be:	81a3      	strheq	r3, [r4, #12]
 80057c0:	bf18      	it	ne
 80057c2:	81a3      	strhne	r3, [r4, #12]
 80057c4:	bd10      	pop	{r4, pc}

080057c6 <__sclose>:
 80057c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ca:	f000 b80d 	b.w	80057e8 <_close_r>

080057ce <memset>:
 80057ce:	4603      	mov	r3, r0
 80057d0:	4402      	add	r2, r0
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d100      	bne.n	80057d8 <memset+0xa>
 80057d6:	4770      	bx	lr
 80057d8:	f803 1b01 	strb.w	r1, [r3], #1
 80057dc:	e7f9      	b.n	80057d2 <memset+0x4>
	...

080057e0 <_localeconv_r>:
 80057e0:	4800      	ldr	r0, [pc, #0]	; (80057e4 <_localeconv_r+0x4>)
 80057e2:	4770      	bx	lr
 80057e4:	2000015c 	.word	0x2000015c

080057e8 <_close_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	2300      	movs	r3, #0
 80057ec:	4d05      	ldr	r5, [pc, #20]	; (8005804 <_close_r+0x1c>)
 80057ee:	4604      	mov	r4, r0
 80057f0:	4608      	mov	r0, r1
 80057f2:	602b      	str	r3, [r5, #0]
 80057f4:	f7fb fdec 	bl	80013d0 <_close>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	d102      	bne.n	8005802 <_close_r+0x1a>
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	b103      	cbz	r3, 8005802 <_close_r+0x1a>
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	bd38      	pop	{r3, r4, r5, pc}
 8005804:	20000828 	.word	0x20000828

08005808 <_lseek_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	4604      	mov	r4, r0
 800580c:	4608      	mov	r0, r1
 800580e:	4611      	mov	r1, r2
 8005810:	2200      	movs	r2, #0
 8005812:	4d05      	ldr	r5, [pc, #20]	; (8005828 <_lseek_r+0x20>)
 8005814:	602a      	str	r2, [r5, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	f7fb fdfe 	bl	8001418 <_lseek>
 800581c:	1c43      	adds	r3, r0, #1
 800581e:	d102      	bne.n	8005826 <_lseek_r+0x1e>
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	b103      	cbz	r3, 8005826 <_lseek_r+0x1e>
 8005824:	6023      	str	r3, [r4, #0]
 8005826:	bd38      	pop	{r3, r4, r5, pc}
 8005828:	20000828 	.word	0x20000828

0800582c <_read_r>:
 800582c:	b538      	push	{r3, r4, r5, lr}
 800582e:	4604      	mov	r4, r0
 8005830:	4608      	mov	r0, r1
 8005832:	4611      	mov	r1, r2
 8005834:	2200      	movs	r2, #0
 8005836:	4d05      	ldr	r5, [pc, #20]	; (800584c <_read_r+0x20>)
 8005838:	602a      	str	r2, [r5, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	f7fb fd8f 	bl	800135e <_read>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d102      	bne.n	800584a <_read_r+0x1e>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	b103      	cbz	r3, 800584a <_read_r+0x1e>
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	bd38      	pop	{r3, r4, r5, pc}
 800584c:	20000828 	.word	0x20000828

08005850 <_write_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4604      	mov	r4, r0
 8005854:	4608      	mov	r0, r1
 8005856:	4611      	mov	r1, r2
 8005858:	2200      	movs	r2, #0
 800585a:	4d05      	ldr	r5, [pc, #20]	; (8005870 <_write_r+0x20>)
 800585c:	602a      	str	r2, [r5, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	f7fb fd9a 	bl	8001398 <_write>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	d102      	bne.n	800586e <_write_r+0x1e>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	b103      	cbz	r3, 800586e <_write_r+0x1e>
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	20000828 	.word	0x20000828

08005874 <__errno>:
 8005874:	4b01      	ldr	r3, [pc, #4]	; (800587c <__errno+0x8>)
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000068 	.word	0x20000068

08005880 <__libc_init_array>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	2600      	movs	r6, #0
 8005884:	4d0c      	ldr	r5, [pc, #48]	; (80058b8 <__libc_init_array+0x38>)
 8005886:	4c0d      	ldr	r4, [pc, #52]	; (80058bc <__libc_init_array+0x3c>)
 8005888:	1b64      	subs	r4, r4, r5
 800588a:	10a4      	asrs	r4, r4, #2
 800588c:	42a6      	cmp	r6, r4
 800588e:	d109      	bne.n	80058a4 <__libc_init_array+0x24>
 8005890:	f005 fdda 	bl	800b448 <_init>
 8005894:	2600      	movs	r6, #0
 8005896:	4d0a      	ldr	r5, [pc, #40]	; (80058c0 <__libc_init_array+0x40>)
 8005898:	4c0a      	ldr	r4, [pc, #40]	; (80058c4 <__libc_init_array+0x44>)
 800589a:	1b64      	subs	r4, r4, r5
 800589c:	10a4      	asrs	r4, r4, #2
 800589e:	42a6      	cmp	r6, r4
 80058a0:	d105      	bne.n	80058ae <__libc_init_array+0x2e>
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a8:	4798      	blx	r3
 80058aa:	3601      	adds	r6, #1
 80058ac:	e7ee      	b.n	800588c <__libc_init_array+0xc>
 80058ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b2:	4798      	blx	r3
 80058b4:	3601      	adds	r6, #1
 80058b6:	e7f2      	b.n	800589e <__libc_init_array+0x1e>
 80058b8:	0800bb10 	.word	0x0800bb10
 80058bc:	0800bb10 	.word	0x0800bb10
 80058c0:	0800bb10 	.word	0x0800bb10
 80058c4:	0800bb14 	.word	0x0800bb14

080058c8 <__retarget_lock_init_recursive>:
 80058c8:	4770      	bx	lr

080058ca <__retarget_lock_acquire_recursive>:
 80058ca:	4770      	bx	lr

080058cc <__retarget_lock_release_recursive>:
 80058cc:	4770      	bx	lr

080058ce <memchr>:
 80058ce:	4603      	mov	r3, r0
 80058d0:	b510      	push	{r4, lr}
 80058d2:	b2c9      	uxtb	r1, r1
 80058d4:	4402      	add	r2, r0
 80058d6:	4293      	cmp	r3, r2
 80058d8:	4618      	mov	r0, r3
 80058da:	d101      	bne.n	80058e0 <memchr+0x12>
 80058dc:	2000      	movs	r0, #0
 80058de:	e003      	b.n	80058e8 <memchr+0x1a>
 80058e0:	7804      	ldrb	r4, [r0, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	428c      	cmp	r4, r1
 80058e6:	d1f6      	bne.n	80058d6 <memchr+0x8>
 80058e8:	bd10      	pop	{r4, pc}
	...

080058ec <nanf>:
 80058ec:	4800      	ldr	r0, [pc, #0]	; (80058f0 <nanf+0x4>)
 80058ee:	4770      	bx	lr
 80058f0:	7fc00000 	.word	0x7fc00000

080058f4 <quorem>:
 80058f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	6903      	ldr	r3, [r0, #16]
 80058fa:	690c      	ldr	r4, [r1, #16]
 80058fc:	4607      	mov	r7, r0
 80058fe:	42a3      	cmp	r3, r4
 8005900:	db7f      	blt.n	8005a02 <quorem+0x10e>
 8005902:	3c01      	subs	r4, #1
 8005904:	f100 0514 	add.w	r5, r0, #20
 8005908:	f101 0814 	add.w	r8, r1, #20
 800590c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005916:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800591a:	3301      	adds	r3, #1
 800591c:	429a      	cmp	r2, r3
 800591e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005922:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005926:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800592a:	d331      	bcc.n	8005990 <quorem+0x9c>
 800592c:	f04f 0e00 	mov.w	lr, #0
 8005930:	4640      	mov	r0, r8
 8005932:	46ac      	mov	ip, r5
 8005934:	46f2      	mov	sl, lr
 8005936:	f850 2b04 	ldr.w	r2, [r0], #4
 800593a:	b293      	uxth	r3, r2
 800593c:	fb06 e303 	mla	r3, r6, r3, lr
 8005940:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005944:	0c1a      	lsrs	r2, r3, #16
 8005946:	b29b      	uxth	r3, r3
 8005948:	fb06 220e 	mla	r2, r6, lr, r2
 800594c:	ebaa 0303 	sub.w	r3, sl, r3
 8005950:	f8dc a000 	ldr.w	sl, [ip]
 8005954:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005958:	fa1f fa8a 	uxth.w	sl, sl
 800595c:	4453      	add	r3, sl
 800595e:	f8dc a000 	ldr.w	sl, [ip]
 8005962:	b292      	uxth	r2, r2
 8005964:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005968:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800596c:	b29b      	uxth	r3, r3
 800596e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005972:	4581      	cmp	r9, r0
 8005974:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005978:	f84c 3b04 	str.w	r3, [ip], #4
 800597c:	d2db      	bcs.n	8005936 <quorem+0x42>
 800597e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005982:	b92b      	cbnz	r3, 8005990 <quorem+0x9c>
 8005984:	9b01      	ldr	r3, [sp, #4]
 8005986:	3b04      	subs	r3, #4
 8005988:	429d      	cmp	r5, r3
 800598a:	461a      	mov	r2, r3
 800598c:	d32d      	bcc.n	80059ea <quorem+0xf6>
 800598e:	613c      	str	r4, [r7, #16]
 8005990:	4638      	mov	r0, r7
 8005992:	f001 f9dd 	bl	8006d50 <__mcmp>
 8005996:	2800      	cmp	r0, #0
 8005998:	db23      	blt.n	80059e2 <quorem+0xee>
 800599a:	4629      	mov	r1, r5
 800599c:	2000      	movs	r0, #0
 800599e:	3601      	adds	r6, #1
 80059a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80059a4:	f8d1 c000 	ldr.w	ip, [r1]
 80059a8:	b293      	uxth	r3, r2
 80059aa:	1ac3      	subs	r3, r0, r3
 80059ac:	0c12      	lsrs	r2, r2, #16
 80059ae:	fa1f f08c 	uxth.w	r0, ip
 80059b2:	4403      	add	r3, r0
 80059b4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80059b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059bc:	b29b      	uxth	r3, r3
 80059be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059c2:	45c1      	cmp	r9, r8
 80059c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80059c8:	f841 3b04 	str.w	r3, [r1], #4
 80059cc:	d2e8      	bcs.n	80059a0 <quorem+0xac>
 80059ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059d6:	b922      	cbnz	r2, 80059e2 <quorem+0xee>
 80059d8:	3b04      	subs	r3, #4
 80059da:	429d      	cmp	r5, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	d30a      	bcc.n	80059f6 <quorem+0x102>
 80059e0:	613c      	str	r4, [r7, #16]
 80059e2:	4630      	mov	r0, r6
 80059e4:	b003      	add	sp, #12
 80059e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	3b04      	subs	r3, #4
 80059ee:	2a00      	cmp	r2, #0
 80059f0:	d1cd      	bne.n	800598e <quorem+0x9a>
 80059f2:	3c01      	subs	r4, #1
 80059f4:	e7c8      	b.n	8005988 <quorem+0x94>
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	3b04      	subs	r3, #4
 80059fa:	2a00      	cmp	r2, #0
 80059fc:	d1f0      	bne.n	80059e0 <quorem+0xec>
 80059fe:	3c01      	subs	r4, #1
 8005a00:	e7eb      	b.n	80059da <quorem+0xe6>
 8005a02:	2000      	movs	r0, #0
 8005a04:	e7ee      	b.n	80059e4 <quorem+0xf0>
	...

08005a08 <_dtoa_r>:
 8005a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0c:	4616      	mov	r6, r2
 8005a0e:	461f      	mov	r7, r3
 8005a10:	69c4      	ldr	r4, [r0, #28]
 8005a12:	b099      	sub	sp, #100	; 0x64
 8005a14:	4605      	mov	r5, r0
 8005a16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005a1a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005a1e:	b974      	cbnz	r4, 8005a3e <_dtoa_r+0x36>
 8005a20:	2010      	movs	r0, #16
 8005a22:	f000 fe1d 	bl	8006660 <malloc>
 8005a26:	4602      	mov	r2, r0
 8005a28:	61e8      	str	r0, [r5, #28]
 8005a2a:	b920      	cbnz	r0, 8005a36 <_dtoa_r+0x2e>
 8005a2c:	21ef      	movs	r1, #239	; 0xef
 8005a2e:	4bac      	ldr	r3, [pc, #688]	; (8005ce0 <_dtoa_r+0x2d8>)
 8005a30:	48ac      	ldr	r0, [pc, #688]	; (8005ce4 <_dtoa_r+0x2dc>)
 8005a32:	f002 fbd5 	bl	80081e0 <__assert_func>
 8005a36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a3a:	6004      	str	r4, [r0, #0]
 8005a3c:	60c4      	str	r4, [r0, #12]
 8005a3e:	69eb      	ldr	r3, [r5, #28]
 8005a40:	6819      	ldr	r1, [r3, #0]
 8005a42:	b151      	cbz	r1, 8005a5a <_dtoa_r+0x52>
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	2301      	movs	r3, #1
 8005a48:	4093      	lsls	r3, r2
 8005a4a:	604a      	str	r2, [r1, #4]
 8005a4c:	608b      	str	r3, [r1, #8]
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 fefa 	bl	8006848 <_Bfree>
 8005a54:	2200      	movs	r2, #0
 8005a56:	69eb      	ldr	r3, [r5, #28]
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	1e3b      	subs	r3, r7, #0
 8005a5c:	bfaf      	iteee	ge
 8005a5e:	2300      	movge	r3, #0
 8005a60:	2201      	movlt	r2, #1
 8005a62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a66:	9305      	strlt	r3, [sp, #20]
 8005a68:	bfa8      	it	ge
 8005a6a:	f8c8 3000 	strge.w	r3, [r8]
 8005a6e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005a72:	4b9d      	ldr	r3, [pc, #628]	; (8005ce8 <_dtoa_r+0x2e0>)
 8005a74:	bfb8      	it	lt
 8005a76:	f8c8 2000 	strlt.w	r2, [r8]
 8005a7a:	ea33 0309 	bics.w	r3, r3, r9
 8005a7e:	d119      	bne.n	8005ab4 <_dtoa_r+0xac>
 8005a80:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a8c:	4333      	orrs	r3, r6
 8005a8e:	f000 8589 	beq.w	80065a4 <_dtoa_r+0xb9c>
 8005a92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a94:	b953      	cbnz	r3, 8005aac <_dtoa_r+0xa4>
 8005a96:	4b95      	ldr	r3, [pc, #596]	; (8005cec <_dtoa_r+0x2e4>)
 8005a98:	e023      	b.n	8005ae2 <_dtoa_r+0xda>
 8005a9a:	4b95      	ldr	r3, [pc, #596]	; (8005cf0 <_dtoa_r+0x2e8>)
 8005a9c:	9303      	str	r3, [sp, #12]
 8005a9e:	3308      	adds	r3, #8
 8005aa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	9803      	ldr	r0, [sp, #12]
 8005aa6:	b019      	add	sp, #100	; 0x64
 8005aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aac:	4b8f      	ldr	r3, [pc, #572]	; (8005cec <_dtoa_r+0x2e4>)
 8005aae:	9303      	str	r3, [sp, #12]
 8005ab0:	3303      	adds	r3, #3
 8005ab2:	e7f5      	b.n	8005aa0 <_dtoa_r+0x98>
 8005ab4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005ab8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005abc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f7fa ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8005ac8:	4680      	mov	r8, r0
 8005aca:	b160      	cbz	r0, 8005ae6 <_dtoa_r+0xde>
 8005acc:	2301      	movs	r3, #1
 8005ace:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8562 	beq.w	800659e <_dtoa_r+0xb96>
 8005ada:	4b86      	ldr	r3, [pc, #536]	; (8005cf4 <_dtoa_r+0x2ec>)
 8005adc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	9303      	str	r3, [sp, #12]
 8005ae4:	e7de      	b.n	8005aa4 <_dtoa_r+0x9c>
 8005ae6:	ab16      	add	r3, sp, #88	; 0x58
 8005ae8:	9301      	str	r3, [sp, #4]
 8005aea:	ab17      	add	r3, sp, #92	; 0x5c
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	4628      	mov	r0, r5
 8005af0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005af4:	f001 fa3c 	bl	8006f70 <__d2b>
 8005af8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005afc:	4682      	mov	sl, r0
 8005afe:	2c00      	cmp	r4, #0
 8005b00:	d07e      	beq.n	8005c00 <_dtoa_r+0x1f8>
 8005b02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b08:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b10:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005b14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005b18:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	2200      	movs	r2, #0
 8005b20:	4b75      	ldr	r3, [pc, #468]	; (8005cf8 <_dtoa_r+0x2f0>)
 8005b22:	f7fa fb21 	bl	8000168 <__aeabi_dsub>
 8005b26:	a368      	add	r3, pc, #416	; (adr r3, 8005cc8 <_dtoa_r+0x2c0>)
 8005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2c:	f7fa fcd4 	bl	80004d8 <__aeabi_dmul>
 8005b30:	a367      	add	r3, pc, #412	; (adr r3, 8005cd0 <_dtoa_r+0x2c8>)
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	f7fa fb19 	bl	800016c <__adddf3>
 8005b3a:	4606      	mov	r6, r0
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	460f      	mov	r7, r1
 8005b40:	f7fa fc60 	bl	8000404 <__aeabi_i2d>
 8005b44:	a364      	add	r3, pc, #400	; (adr r3, 8005cd8 <_dtoa_r+0x2d0>)
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f7fa fcc5 	bl	80004d8 <__aeabi_dmul>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4630      	mov	r0, r6
 8005b54:	4639      	mov	r1, r7
 8005b56:	f7fa fb09 	bl	800016c <__adddf3>
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	460f      	mov	r7, r1
 8005b5e:	f7fa ff6b 	bl	8000a38 <__aeabi_d2iz>
 8005b62:	2200      	movs	r2, #0
 8005b64:	4683      	mov	fp, r0
 8005b66:	2300      	movs	r3, #0
 8005b68:	4630      	mov	r0, r6
 8005b6a:	4639      	mov	r1, r7
 8005b6c:	f7fa ff26 	bl	80009bc <__aeabi_dcmplt>
 8005b70:	b148      	cbz	r0, 8005b86 <_dtoa_r+0x17e>
 8005b72:	4658      	mov	r0, fp
 8005b74:	f7fa fc46 	bl	8000404 <__aeabi_i2d>
 8005b78:	4632      	mov	r2, r6
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	f7fa ff14 	bl	80009a8 <__aeabi_dcmpeq>
 8005b80:	b908      	cbnz	r0, 8005b86 <_dtoa_r+0x17e>
 8005b82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b86:	f1bb 0f16 	cmp.w	fp, #22
 8005b8a:	d857      	bhi.n	8005c3c <_dtoa_r+0x234>
 8005b8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b90:	4b5a      	ldr	r3, [pc, #360]	; (8005cfc <_dtoa_r+0x2f4>)
 8005b92:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	f7fa ff0f 	bl	80009bc <__aeabi_dcmplt>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d04e      	beq.n	8005c40 <_dtoa_r+0x238>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ba8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005baa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005bac:	1b1b      	subs	r3, r3, r4
 8005bae:	1e5a      	subs	r2, r3, #1
 8005bb0:	bf46      	itte	mi
 8005bb2:	f1c3 0901 	rsbmi	r9, r3, #1
 8005bb6:	2300      	movmi	r3, #0
 8005bb8:	f04f 0900 	movpl.w	r9, #0
 8005bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8005bbe:	bf48      	it	mi
 8005bc0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005bc2:	f1bb 0f00 	cmp.w	fp, #0
 8005bc6:	db3d      	blt.n	8005c44 <_dtoa_r+0x23c>
 8005bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bca:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005bce:	445b      	add	r3, fp
 8005bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	930a      	str	r3, [sp, #40]	; 0x28
 8005bd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bd8:	2b09      	cmp	r3, #9
 8005bda:	d867      	bhi.n	8005cac <_dtoa_r+0x2a4>
 8005bdc:	2b05      	cmp	r3, #5
 8005bde:	bfc4      	itt	gt
 8005be0:	3b04      	subgt	r3, #4
 8005be2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005be4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005be6:	bfc8      	it	gt
 8005be8:	2400      	movgt	r4, #0
 8005bea:	f1a3 0302 	sub.w	r3, r3, #2
 8005bee:	bfd8      	it	le
 8005bf0:	2401      	movle	r4, #1
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	f200 8086 	bhi.w	8005d04 <_dtoa_r+0x2fc>
 8005bf8:	e8df f003 	tbb	[pc, r3]
 8005bfc:	5637392c 	.word	0x5637392c
 8005c00:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005c04:	441c      	add	r4, r3
 8005c06:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	bfc1      	itttt	gt
 8005c0e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c12:	fa09 f903 	lslgt.w	r9, r9, r3
 8005c16:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005c1a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005c1e:	bfd6      	itet	le
 8005c20:	f1c3 0320 	rsble	r3, r3, #32
 8005c24:	ea49 0003 	orrgt.w	r0, r9, r3
 8005c28:	fa06 f003 	lslle.w	r0, r6, r3
 8005c2c:	f7fa fbda 	bl	80003e4 <__aeabi_ui2d>
 8005c30:	2201      	movs	r2, #1
 8005c32:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005c36:	3c01      	subs	r4, #1
 8005c38:	9213      	str	r2, [sp, #76]	; 0x4c
 8005c3a:	e76f      	b.n	8005b1c <_dtoa_r+0x114>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e7b3      	b.n	8005ba8 <_dtoa_r+0x1a0>
 8005c40:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c42:	e7b2      	b.n	8005baa <_dtoa_r+0x1a2>
 8005c44:	f1cb 0300 	rsb	r3, fp, #0
 8005c48:	930a      	str	r3, [sp, #40]	; 0x28
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	eba9 090b 	sub.w	r9, r9, fp
 8005c50:	930e      	str	r3, [sp, #56]	; 0x38
 8005c52:	e7c0      	b.n	8005bd6 <_dtoa_r+0x1ce>
 8005c54:	2300      	movs	r3, #0
 8005c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	dc55      	bgt.n	8005d0a <_dtoa_r+0x302>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	461a      	mov	r2, r3
 8005c62:	9306      	str	r3, [sp, #24]
 8005c64:	9308      	str	r3, [sp, #32]
 8005c66:	9223      	str	r2, [sp, #140]	; 0x8c
 8005c68:	e00b      	b.n	8005c82 <_dtoa_r+0x27a>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e7f3      	b.n	8005c56 <_dtoa_r+0x24e>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c74:	445b      	add	r3, fp
 8005c76:	9306      	str	r3, [sp, #24]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	9308      	str	r3, [sp, #32]
 8005c7e:	bfb8      	it	lt
 8005c80:	2301      	movlt	r3, #1
 8005c82:	2100      	movs	r1, #0
 8005c84:	2204      	movs	r2, #4
 8005c86:	69e8      	ldr	r0, [r5, #28]
 8005c88:	f102 0614 	add.w	r6, r2, #20
 8005c8c:	429e      	cmp	r6, r3
 8005c8e:	d940      	bls.n	8005d12 <_dtoa_r+0x30a>
 8005c90:	6041      	str	r1, [r0, #4]
 8005c92:	4628      	mov	r0, r5
 8005c94:	f000 fd98 	bl	80067c8 <_Balloc>
 8005c98:	9003      	str	r0, [sp, #12]
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d13c      	bne.n	8005d18 <_dtoa_r+0x310>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	f240 11af 	movw	r1, #431	; 0x1af
 8005ca4:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <_dtoa_r+0x2f8>)
 8005ca6:	e6c3      	b.n	8005a30 <_dtoa_r+0x28>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e7e1      	b.n	8005c70 <_dtoa_r+0x268>
 8005cac:	2401      	movs	r4, #1
 8005cae:	2300      	movs	r3, #0
 8005cb0:	940b      	str	r4, [sp, #44]	; 0x2c
 8005cb2:	9322      	str	r3, [sp, #136]	; 0x88
 8005cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb8:	2200      	movs	r2, #0
 8005cba:	9306      	str	r3, [sp, #24]
 8005cbc:	9308      	str	r3, [sp, #32]
 8005cbe:	2312      	movs	r3, #18
 8005cc0:	e7d1      	b.n	8005c66 <_dtoa_r+0x25e>
 8005cc2:	bf00      	nop
 8005cc4:	f3af 8000 	nop.w
 8005cc8:	636f4361 	.word	0x636f4361
 8005ccc:	3fd287a7 	.word	0x3fd287a7
 8005cd0:	8b60c8b3 	.word	0x8b60c8b3
 8005cd4:	3fc68a28 	.word	0x3fc68a28
 8005cd8:	509f79fb 	.word	0x509f79fb
 8005cdc:	3fd34413 	.word	0x3fd34413
 8005ce0:	0800b5e1 	.word	0x0800b5e1
 8005ce4:	0800b5f8 	.word	0x0800b5f8
 8005ce8:	7ff00000 	.word	0x7ff00000
 8005cec:	0800b5dd 	.word	0x0800b5dd
 8005cf0:	0800b5d4 	.word	0x0800b5d4
 8005cf4:	0800b5ac 	.word	0x0800b5ac
 8005cf8:	3ff80000 	.word	0x3ff80000
 8005cfc:	0800b6e8 	.word	0x0800b6e8
 8005d00:	0800b650 	.word	0x0800b650
 8005d04:	2301      	movs	r3, #1
 8005d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d08:	e7d4      	b.n	8005cb4 <_dtoa_r+0x2ac>
 8005d0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d0c:	9306      	str	r3, [sp, #24]
 8005d0e:	9308      	str	r3, [sp, #32]
 8005d10:	e7b7      	b.n	8005c82 <_dtoa_r+0x27a>
 8005d12:	3101      	adds	r1, #1
 8005d14:	0052      	lsls	r2, r2, #1
 8005d16:	e7b7      	b.n	8005c88 <_dtoa_r+0x280>
 8005d18:	69eb      	ldr	r3, [r5, #28]
 8005d1a:	9a03      	ldr	r2, [sp, #12]
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	9b08      	ldr	r3, [sp, #32]
 8005d20:	2b0e      	cmp	r3, #14
 8005d22:	f200 80a8 	bhi.w	8005e76 <_dtoa_r+0x46e>
 8005d26:	2c00      	cmp	r4, #0
 8005d28:	f000 80a5 	beq.w	8005e76 <_dtoa_r+0x46e>
 8005d2c:	f1bb 0f00 	cmp.w	fp, #0
 8005d30:	dd34      	ble.n	8005d9c <_dtoa_r+0x394>
 8005d32:	4b9a      	ldr	r3, [pc, #616]	; (8005f9c <_dtoa_r+0x594>)
 8005d34:	f00b 020f 	and.w	r2, fp, #15
 8005d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005d40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d44:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d48:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005d4c:	d016      	beq.n	8005d7c <_dtoa_r+0x374>
 8005d4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d52:	4b93      	ldr	r3, [pc, #588]	; (8005fa0 <_dtoa_r+0x598>)
 8005d54:	2703      	movs	r7, #3
 8005d56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d5a:	f7fa fce7 	bl	800072c <__aeabi_ddiv>
 8005d5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d62:	f004 040f 	and.w	r4, r4, #15
 8005d66:	4e8e      	ldr	r6, [pc, #568]	; (8005fa0 <_dtoa_r+0x598>)
 8005d68:	b954      	cbnz	r4, 8005d80 <_dtoa_r+0x378>
 8005d6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d72:	f7fa fcdb 	bl	800072c <__aeabi_ddiv>
 8005d76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d7a:	e029      	b.n	8005dd0 <_dtoa_r+0x3c8>
 8005d7c:	2702      	movs	r7, #2
 8005d7e:	e7f2      	b.n	8005d66 <_dtoa_r+0x35e>
 8005d80:	07e1      	lsls	r1, r4, #31
 8005d82:	d508      	bpl.n	8005d96 <_dtoa_r+0x38e>
 8005d84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d8c:	f7fa fba4 	bl	80004d8 <__aeabi_dmul>
 8005d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d94:	3701      	adds	r7, #1
 8005d96:	1064      	asrs	r4, r4, #1
 8005d98:	3608      	adds	r6, #8
 8005d9a:	e7e5      	b.n	8005d68 <_dtoa_r+0x360>
 8005d9c:	f000 80a5 	beq.w	8005eea <_dtoa_r+0x4e2>
 8005da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005da4:	f1cb 0400 	rsb	r4, fp, #0
 8005da8:	4b7c      	ldr	r3, [pc, #496]	; (8005f9c <_dtoa_r+0x594>)
 8005daa:	f004 020f 	and.w	r2, r4, #15
 8005dae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	f7fa fb8f 	bl	80004d8 <__aeabi_dmul>
 8005dba:	2702      	movs	r7, #2
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dc2:	4e77      	ldr	r6, [pc, #476]	; (8005fa0 <_dtoa_r+0x598>)
 8005dc4:	1124      	asrs	r4, r4, #4
 8005dc6:	2c00      	cmp	r4, #0
 8005dc8:	f040 8084 	bne.w	8005ed4 <_dtoa_r+0x4cc>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1d2      	bne.n	8005d76 <_dtoa_r+0x36e>
 8005dd0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005dd4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005dd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 8087 	beq.w	8005eee <_dtoa_r+0x4e6>
 8005de0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005de4:	2200      	movs	r2, #0
 8005de6:	4b6f      	ldr	r3, [pc, #444]	; (8005fa4 <_dtoa_r+0x59c>)
 8005de8:	f7fa fde8 	bl	80009bc <__aeabi_dcmplt>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d07e      	beq.n	8005eee <_dtoa_r+0x4e6>
 8005df0:	9b08      	ldr	r3, [sp, #32]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d07b      	beq.n	8005eee <_dtoa_r+0x4e6>
 8005df6:	9b06      	ldr	r3, [sp, #24]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	dd38      	ble.n	8005e6e <_dtoa_r+0x466>
 8005dfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e00:	2200      	movs	r2, #0
 8005e02:	4b69      	ldr	r3, [pc, #420]	; (8005fa8 <_dtoa_r+0x5a0>)
 8005e04:	f7fa fb68 	bl	80004d8 <__aeabi_dmul>
 8005e08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e0c:	9c06      	ldr	r4, [sp, #24]
 8005e0e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005e12:	3701      	adds	r7, #1
 8005e14:	4638      	mov	r0, r7
 8005e16:	f7fa faf5 	bl	8000404 <__aeabi_i2d>
 8005e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e1e:	f7fa fb5b 	bl	80004d8 <__aeabi_dmul>
 8005e22:	2200      	movs	r2, #0
 8005e24:	4b61      	ldr	r3, [pc, #388]	; (8005fac <_dtoa_r+0x5a4>)
 8005e26:	f7fa f9a1 	bl	800016c <__adddf3>
 8005e2a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005e2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e32:	9611      	str	r6, [sp, #68]	; 0x44
 8005e34:	2c00      	cmp	r4, #0
 8005e36:	d15d      	bne.n	8005ef4 <_dtoa_r+0x4ec>
 8005e38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	4b5c      	ldr	r3, [pc, #368]	; (8005fb0 <_dtoa_r+0x5a8>)
 8005e40:	f7fa f992 	bl	8000168 <__aeabi_dsub>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e4c:	4633      	mov	r3, r6
 8005e4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e50:	f7fa fdd2 	bl	80009f8 <__aeabi_dcmpgt>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	f040 8295 	bne.w	8006384 <_dtoa_r+0x97c>
 8005e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005e64:	f7fa fdaa 	bl	80009bc <__aeabi_dcmplt>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	f040 8289 	bne.w	8006380 <_dtoa_r+0x978>
 8005e6e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005e72:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f2c0 8151 	blt.w	8006120 <_dtoa_r+0x718>
 8005e7e:	f1bb 0f0e 	cmp.w	fp, #14
 8005e82:	f300 814d 	bgt.w	8006120 <_dtoa_r+0x718>
 8005e86:	4b45      	ldr	r3, [pc, #276]	; (8005f9c <_dtoa_r+0x594>)
 8005e88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e90:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005e94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f280 80da 	bge.w	8006050 <_dtoa_r+0x648>
 8005e9c:	9b08      	ldr	r3, [sp, #32]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f300 80d6 	bgt.w	8006050 <_dtoa_r+0x648>
 8005ea4:	f040 826b 	bne.w	800637e <_dtoa_r+0x976>
 8005ea8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eac:	2200      	movs	r2, #0
 8005eae:	4b40      	ldr	r3, [pc, #256]	; (8005fb0 <_dtoa_r+0x5a8>)
 8005eb0:	f7fa fb12 	bl	80004d8 <__aeabi_dmul>
 8005eb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eb8:	f7fa fd94 	bl	80009e4 <__aeabi_dcmpge>
 8005ebc:	9c08      	ldr	r4, [sp, #32]
 8005ebe:	4626      	mov	r6, r4
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	f040 8241 	bne.w	8006348 <_dtoa_r+0x940>
 8005ec6:	2331      	movs	r3, #49	; 0x31
 8005ec8:	9f03      	ldr	r7, [sp, #12]
 8005eca:	f10b 0b01 	add.w	fp, fp, #1
 8005ece:	f807 3b01 	strb.w	r3, [r7], #1
 8005ed2:	e23d      	b.n	8006350 <_dtoa_r+0x948>
 8005ed4:	07e2      	lsls	r2, r4, #31
 8005ed6:	d505      	bpl.n	8005ee4 <_dtoa_r+0x4dc>
 8005ed8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005edc:	f7fa fafc 	bl	80004d8 <__aeabi_dmul>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	3701      	adds	r7, #1
 8005ee4:	1064      	asrs	r4, r4, #1
 8005ee6:	3608      	adds	r6, #8
 8005ee8:	e76d      	b.n	8005dc6 <_dtoa_r+0x3be>
 8005eea:	2702      	movs	r7, #2
 8005eec:	e770      	b.n	8005dd0 <_dtoa_r+0x3c8>
 8005eee:	46d8      	mov	r8, fp
 8005ef0:	9c08      	ldr	r4, [sp, #32]
 8005ef2:	e78f      	b.n	8005e14 <_dtoa_r+0x40c>
 8005ef4:	9903      	ldr	r1, [sp, #12]
 8005ef6:	4b29      	ldr	r3, [pc, #164]	; (8005f9c <_dtoa_r+0x594>)
 8005ef8:	4421      	add	r1, r4
 8005efa:	9112      	str	r1, [sp, #72]	; 0x48
 8005efc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005efe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f02:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005f06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f0a:	2900      	cmp	r1, #0
 8005f0c:	d054      	beq.n	8005fb8 <_dtoa_r+0x5b0>
 8005f0e:	2000      	movs	r0, #0
 8005f10:	4928      	ldr	r1, [pc, #160]	; (8005fb4 <_dtoa_r+0x5ac>)
 8005f12:	f7fa fc0b 	bl	800072c <__aeabi_ddiv>
 8005f16:	463b      	mov	r3, r7
 8005f18:	4632      	mov	r2, r6
 8005f1a:	f7fa f925 	bl	8000168 <__aeabi_dsub>
 8005f1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f22:	9f03      	ldr	r7, [sp, #12]
 8005f24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f28:	f7fa fd86 	bl	8000a38 <__aeabi_d2iz>
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	f7fa fa69 	bl	8000404 <__aeabi_i2d>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f3a:	f7fa f915 	bl	8000168 <__aeabi_dsub>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	3430      	adds	r4, #48	; 0x30
 8005f44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f4c:	f807 4b01 	strb.w	r4, [r7], #1
 8005f50:	f7fa fd34 	bl	80009bc <__aeabi_dcmplt>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d173      	bne.n	8006040 <_dtoa_r+0x638>
 8005f58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	4911      	ldr	r1, [pc, #68]	; (8005fa4 <_dtoa_r+0x59c>)
 8005f60:	f7fa f902 	bl	8000168 <__aeabi_dsub>
 8005f64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f68:	f7fa fd28 	bl	80009bc <__aeabi_dcmplt>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	f040 80b6 	bne.w	80060de <_dtoa_r+0x6d6>
 8005f72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f74:	429f      	cmp	r7, r3
 8005f76:	f43f af7a 	beq.w	8005e6e <_dtoa_r+0x466>
 8005f7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f7e:	2200      	movs	r2, #0
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <_dtoa_r+0x5a0>)
 8005f82:	f7fa faa9 	bl	80004d8 <__aeabi_dmul>
 8005f86:	2200      	movs	r2, #0
 8005f88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <_dtoa_r+0x5a0>)
 8005f92:	f7fa faa1 	bl	80004d8 <__aeabi_dmul>
 8005f96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f9a:	e7c3      	b.n	8005f24 <_dtoa_r+0x51c>
 8005f9c:	0800b6e8 	.word	0x0800b6e8
 8005fa0:	0800b6c0 	.word	0x0800b6c0
 8005fa4:	3ff00000 	.word	0x3ff00000
 8005fa8:	40240000 	.word	0x40240000
 8005fac:	401c0000 	.word	0x401c0000
 8005fb0:	40140000 	.word	0x40140000
 8005fb4:	3fe00000 	.word	0x3fe00000
 8005fb8:	4630      	mov	r0, r6
 8005fba:	4639      	mov	r1, r7
 8005fbc:	f7fa fa8c 	bl	80004d8 <__aeabi_dmul>
 8005fc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fc2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fc6:	9c03      	ldr	r4, [sp, #12]
 8005fc8:	9314      	str	r3, [sp, #80]	; 0x50
 8005fca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fce:	f7fa fd33 	bl	8000a38 <__aeabi_d2iz>
 8005fd2:	9015      	str	r0, [sp, #84]	; 0x54
 8005fd4:	f7fa fa16 	bl	8000404 <__aeabi_i2d>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fe0:	f7fa f8c2 	bl	8000168 <__aeabi_dsub>
 8005fe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	3330      	adds	r3, #48	; 0x30
 8005fea:	f804 3b01 	strb.w	r3, [r4], #1
 8005fee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ff0:	460f      	mov	r7, r1
 8005ff2:	429c      	cmp	r4, r3
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	d124      	bne.n	8006044 <_dtoa_r+0x63c>
 8005ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ffe:	4baf      	ldr	r3, [pc, #700]	; (80062bc <_dtoa_r+0x8b4>)
 8006000:	f7fa f8b4 	bl	800016c <__adddf3>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4630      	mov	r0, r6
 800600a:	4639      	mov	r1, r7
 800600c:	f7fa fcf4 	bl	80009f8 <__aeabi_dcmpgt>
 8006010:	2800      	cmp	r0, #0
 8006012:	d163      	bne.n	80060dc <_dtoa_r+0x6d4>
 8006014:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006018:	2000      	movs	r0, #0
 800601a:	49a8      	ldr	r1, [pc, #672]	; (80062bc <_dtoa_r+0x8b4>)
 800601c:	f7fa f8a4 	bl	8000168 <__aeabi_dsub>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4630      	mov	r0, r6
 8006026:	4639      	mov	r1, r7
 8006028:	f7fa fcc8 	bl	80009bc <__aeabi_dcmplt>
 800602c:	2800      	cmp	r0, #0
 800602e:	f43f af1e 	beq.w	8005e6e <_dtoa_r+0x466>
 8006032:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006034:	1e7b      	subs	r3, r7, #1
 8006036:	9314      	str	r3, [sp, #80]	; 0x50
 8006038:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800603c:	2b30      	cmp	r3, #48	; 0x30
 800603e:	d0f8      	beq.n	8006032 <_dtoa_r+0x62a>
 8006040:	46c3      	mov	fp, r8
 8006042:	e03b      	b.n	80060bc <_dtoa_r+0x6b4>
 8006044:	4b9e      	ldr	r3, [pc, #632]	; (80062c0 <_dtoa_r+0x8b8>)
 8006046:	f7fa fa47 	bl	80004d8 <__aeabi_dmul>
 800604a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800604e:	e7bc      	b.n	8005fca <_dtoa_r+0x5c2>
 8006050:	9f03      	ldr	r7, [sp, #12]
 8006052:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006056:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800605a:	4640      	mov	r0, r8
 800605c:	4649      	mov	r1, r9
 800605e:	f7fa fb65 	bl	800072c <__aeabi_ddiv>
 8006062:	f7fa fce9 	bl	8000a38 <__aeabi_d2iz>
 8006066:	4604      	mov	r4, r0
 8006068:	f7fa f9cc 	bl	8000404 <__aeabi_i2d>
 800606c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006070:	f7fa fa32 	bl	80004d8 <__aeabi_dmul>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4640      	mov	r0, r8
 800607a:	4649      	mov	r1, r9
 800607c:	f7fa f874 	bl	8000168 <__aeabi_dsub>
 8006080:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006084:	f807 6b01 	strb.w	r6, [r7], #1
 8006088:	9e03      	ldr	r6, [sp, #12]
 800608a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800608e:	1bbe      	subs	r6, r7, r6
 8006090:	45b4      	cmp	ip, r6
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	d136      	bne.n	8006106 <_dtoa_r+0x6fe>
 8006098:	f7fa f868 	bl	800016c <__adddf3>
 800609c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060a0:	4680      	mov	r8, r0
 80060a2:	4689      	mov	r9, r1
 80060a4:	f7fa fca8 	bl	80009f8 <__aeabi_dcmpgt>
 80060a8:	bb58      	cbnz	r0, 8006102 <_dtoa_r+0x6fa>
 80060aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060ae:	4640      	mov	r0, r8
 80060b0:	4649      	mov	r1, r9
 80060b2:	f7fa fc79 	bl	80009a8 <__aeabi_dcmpeq>
 80060b6:	b108      	cbz	r0, 80060bc <_dtoa_r+0x6b4>
 80060b8:	07e3      	lsls	r3, r4, #31
 80060ba:	d422      	bmi.n	8006102 <_dtoa_r+0x6fa>
 80060bc:	4651      	mov	r1, sl
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 fbc2 	bl	8006848 <_Bfree>
 80060c4:	2300      	movs	r3, #0
 80060c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060c8:	703b      	strb	r3, [r7, #0]
 80060ca:	f10b 0301 	add.w	r3, fp, #1
 80060ce:	6013      	str	r3, [r2, #0]
 80060d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f43f ace6 	beq.w	8005aa4 <_dtoa_r+0x9c>
 80060d8:	601f      	str	r7, [r3, #0]
 80060da:	e4e3      	b.n	8005aa4 <_dtoa_r+0x9c>
 80060dc:	4627      	mov	r7, r4
 80060de:	463b      	mov	r3, r7
 80060e0:	461f      	mov	r7, r3
 80060e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060e6:	2a39      	cmp	r2, #57	; 0x39
 80060e8:	d107      	bne.n	80060fa <_dtoa_r+0x6f2>
 80060ea:	9a03      	ldr	r2, [sp, #12]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d1f7      	bne.n	80060e0 <_dtoa_r+0x6d8>
 80060f0:	2230      	movs	r2, #48	; 0x30
 80060f2:	9903      	ldr	r1, [sp, #12]
 80060f4:	f108 0801 	add.w	r8, r8, #1
 80060f8:	700a      	strb	r2, [r1, #0]
 80060fa:	781a      	ldrb	r2, [r3, #0]
 80060fc:	3201      	adds	r2, #1
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	e79e      	b.n	8006040 <_dtoa_r+0x638>
 8006102:	46d8      	mov	r8, fp
 8006104:	e7eb      	b.n	80060de <_dtoa_r+0x6d6>
 8006106:	2200      	movs	r2, #0
 8006108:	4b6d      	ldr	r3, [pc, #436]	; (80062c0 <_dtoa_r+0x8b8>)
 800610a:	f7fa f9e5 	bl	80004d8 <__aeabi_dmul>
 800610e:	2200      	movs	r2, #0
 8006110:	2300      	movs	r3, #0
 8006112:	4680      	mov	r8, r0
 8006114:	4689      	mov	r9, r1
 8006116:	f7fa fc47 	bl	80009a8 <__aeabi_dcmpeq>
 800611a:	2800      	cmp	r0, #0
 800611c:	d09b      	beq.n	8006056 <_dtoa_r+0x64e>
 800611e:	e7cd      	b.n	80060bc <_dtoa_r+0x6b4>
 8006120:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006122:	2a00      	cmp	r2, #0
 8006124:	f000 80c4 	beq.w	80062b0 <_dtoa_r+0x8a8>
 8006128:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800612a:	2a01      	cmp	r2, #1
 800612c:	f300 80a8 	bgt.w	8006280 <_dtoa_r+0x878>
 8006130:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006132:	2a00      	cmp	r2, #0
 8006134:	f000 80a0 	beq.w	8006278 <_dtoa_r+0x870>
 8006138:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800613c:	464f      	mov	r7, r9
 800613e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006142:	2101      	movs	r1, #1
 8006144:	441a      	add	r2, r3
 8006146:	4628      	mov	r0, r5
 8006148:	4499      	add	r9, r3
 800614a:	9209      	str	r2, [sp, #36]	; 0x24
 800614c:	f000 fc7c 	bl	8006a48 <__i2b>
 8006150:	4606      	mov	r6, r0
 8006152:	b15f      	cbz	r7, 800616c <_dtoa_r+0x764>
 8006154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006156:	2b00      	cmp	r3, #0
 8006158:	dd08      	ble.n	800616c <_dtoa_r+0x764>
 800615a:	42bb      	cmp	r3, r7
 800615c:	bfa8      	it	ge
 800615e:	463b      	movge	r3, r7
 8006160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006162:	eba9 0903 	sub.w	r9, r9, r3
 8006166:	1aff      	subs	r7, r7, r3
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	9309      	str	r3, [sp, #36]	; 0x24
 800616c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800616e:	b1f3      	cbz	r3, 80061ae <_dtoa_r+0x7a6>
 8006170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80a0 	beq.w	80062b8 <_dtoa_r+0x8b0>
 8006178:	2c00      	cmp	r4, #0
 800617a:	dd10      	ble.n	800619e <_dtoa_r+0x796>
 800617c:	4631      	mov	r1, r6
 800617e:	4622      	mov	r2, r4
 8006180:	4628      	mov	r0, r5
 8006182:	f000 fd1f 	bl	8006bc4 <__pow5mult>
 8006186:	4652      	mov	r2, sl
 8006188:	4601      	mov	r1, r0
 800618a:	4606      	mov	r6, r0
 800618c:	4628      	mov	r0, r5
 800618e:	f000 fc71 	bl	8006a74 <__multiply>
 8006192:	4680      	mov	r8, r0
 8006194:	4651      	mov	r1, sl
 8006196:	4628      	mov	r0, r5
 8006198:	f000 fb56 	bl	8006848 <_Bfree>
 800619c:	46c2      	mov	sl, r8
 800619e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a0:	1b1a      	subs	r2, r3, r4
 80061a2:	d004      	beq.n	80061ae <_dtoa_r+0x7a6>
 80061a4:	4651      	mov	r1, sl
 80061a6:	4628      	mov	r0, r5
 80061a8:	f000 fd0c 	bl	8006bc4 <__pow5mult>
 80061ac:	4682      	mov	sl, r0
 80061ae:	2101      	movs	r1, #1
 80061b0:	4628      	mov	r0, r5
 80061b2:	f000 fc49 	bl	8006a48 <__i2b>
 80061b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061b8:	4604      	mov	r4, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f340 8082 	ble.w	80062c4 <_dtoa_r+0x8bc>
 80061c0:	461a      	mov	r2, r3
 80061c2:	4601      	mov	r1, r0
 80061c4:	4628      	mov	r0, r5
 80061c6:	f000 fcfd 	bl	8006bc4 <__pow5mult>
 80061ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061cc:	4604      	mov	r4, r0
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	dd7b      	ble.n	80062ca <_dtoa_r+0x8c2>
 80061d2:	f04f 0800 	mov.w	r8, #0
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061dc:	6918      	ldr	r0, [r3, #16]
 80061de:	f000 fbe5 	bl	80069ac <__hi0bits>
 80061e2:	f1c0 0020 	rsb	r0, r0, #32
 80061e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e8:	4418      	add	r0, r3
 80061ea:	f010 001f 	ands.w	r0, r0, #31
 80061ee:	f000 8092 	beq.w	8006316 <_dtoa_r+0x90e>
 80061f2:	f1c0 0320 	rsb	r3, r0, #32
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	f340 8085 	ble.w	8006306 <_dtoa_r+0x8fe>
 80061fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fe:	f1c0 001c 	rsb	r0, r0, #28
 8006202:	4403      	add	r3, r0
 8006204:	4481      	add	r9, r0
 8006206:	4407      	add	r7, r0
 8006208:	9309      	str	r3, [sp, #36]	; 0x24
 800620a:	f1b9 0f00 	cmp.w	r9, #0
 800620e:	dd05      	ble.n	800621c <_dtoa_r+0x814>
 8006210:	4651      	mov	r1, sl
 8006212:	464a      	mov	r2, r9
 8006214:	4628      	mov	r0, r5
 8006216:	f000 fd2f 	bl	8006c78 <__lshift>
 800621a:	4682      	mov	sl, r0
 800621c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	dd05      	ble.n	800622e <_dtoa_r+0x826>
 8006222:	4621      	mov	r1, r4
 8006224:	461a      	mov	r2, r3
 8006226:	4628      	mov	r0, r5
 8006228:	f000 fd26 	bl	8006c78 <__lshift>
 800622c:	4604      	mov	r4, r0
 800622e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d072      	beq.n	800631a <_dtoa_r+0x912>
 8006234:	4621      	mov	r1, r4
 8006236:	4650      	mov	r0, sl
 8006238:	f000 fd8a 	bl	8006d50 <__mcmp>
 800623c:	2800      	cmp	r0, #0
 800623e:	da6c      	bge.n	800631a <_dtoa_r+0x912>
 8006240:	2300      	movs	r3, #0
 8006242:	4651      	mov	r1, sl
 8006244:	220a      	movs	r2, #10
 8006246:	4628      	mov	r0, r5
 8006248:	f000 fb20 	bl	800688c <__multadd>
 800624c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800624e:	4682      	mov	sl, r0
 8006250:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 81ac 	beq.w	80065b2 <_dtoa_r+0xbaa>
 800625a:	2300      	movs	r3, #0
 800625c:	4631      	mov	r1, r6
 800625e:	220a      	movs	r2, #10
 8006260:	4628      	mov	r0, r5
 8006262:	f000 fb13 	bl	800688c <__multadd>
 8006266:	9b06      	ldr	r3, [sp, #24]
 8006268:	4606      	mov	r6, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	f300 8093 	bgt.w	8006396 <_dtoa_r+0x98e>
 8006270:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006272:	2b02      	cmp	r3, #2
 8006274:	dc59      	bgt.n	800632a <_dtoa_r+0x922>
 8006276:	e08e      	b.n	8006396 <_dtoa_r+0x98e>
 8006278:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800627a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800627e:	e75d      	b.n	800613c <_dtoa_r+0x734>
 8006280:	9b08      	ldr	r3, [sp, #32]
 8006282:	1e5c      	subs	r4, r3, #1
 8006284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006286:	42a3      	cmp	r3, r4
 8006288:	bfbf      	itttt	lt
 800628a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800628c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800628e:	1ae3      	sublt	r3, r4, r3
 8006290:	18d2      	addlt	r2, r2, r3
 8006292:	bfa8      	it	ge
 8006294:	1b1c      	subge	r4, r3, r4
 8006296:	9b08      	ldr	r3, [sp, #32]
 8006298:	bfbe      	ittt	lt
 800629a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800629c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800629e:	2400      	movlt	r4, #0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bfb5      	itete	lt
 80062a4:	eba9 0703 	sublt.w	r7, r9, r3
 80062a8:	464f      	movge	r7, r9
 80062aa:	2300      	movlt	r3, #0
 80062ac:	9b08      	ldrge	r3, [sp, #32]
 80062ae:	e747      	b.n	8006140 <_dtoa_r+0x738>
 80062b0:	464f      	mov	r7, r9
 80062b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80062b6:	e74c      	b.n	8006152 <_dtoa_r+0x74a>
 80062b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062ba:	e773      	b.n	80061a4 <_dtoa_r+0x79c>
 80062bc:	3fe00000 	.word	0x3fe00000
 80062c0:	40240000 	.word	0x40240000
 80062c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	dc18      	bgt.n	80062fc <_dtoa_r+0x8f4>
 80062ca:	9b04      	ldr	r3, [sp, #16]
 80062cc:	b9b3      	cbnz	r3, 80062fc <_dtoa_r+0x8f4>
 80062ce:	9b05      	ldr	r3, [sp, #20]
 80062d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d4:	b993      	cbnz	r3, 80062fc <_dtoa_r+0x8f4>
 80062d6:	9b05      	ldr	r3, [sp, #20]
 80062d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062dc:	0d1b      	lsrs	r3, r3, #20
 80062de:	051b      	lsls	r3, r3, #20
 80062e0:	b17b      	cbz	r3, 8006302 <_dtoa_r+0x8fa>
 80062e2:	f04f 0801 	mov.w	r8, #1
 80062e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e8:	f109 0901 	add.w	r9, r9, #1
 80062ec:	3301      	adds	r3, #1
 80062ee:	9309      	str	r3, [sp, #36]	; 0x24
 80062f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f47f af6f 	bne.w	80061d6 <_dtoa_r+0x7ce>
 80062f8:	2001      	movs	r0, #1
 80062fa:	e774      	b.n	80061e6 <_dtoa_r+0x7de>
 80062fc:	f04f 0800 	mov.w	r8, #0
 8006300:	e7f6      	b.n	80062f0 <_dtoa_r+0x8e8>
 8006302:	4698      	mov	r8, r3
 8006304:	e7f4      	b.n	80062f0 <_dtoa_r+0x8e8>
 8006306:	d080      	beq.n	800620a <_dtoa_r+0x802>
 8006308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800630a:	331c      	adds	r3, #28
 800630c:	441a      	add	r2, r3
 800630e:	4499      	add	r9, r3
 8006310:	441f      	add	r7, r3
 8006312:	9209      	str	r2, [sp, #36]	; 0x24
 8006314:	e779      	b.n	800620a <_dtoa_r+0x802>
 8006316:	4603      	mov	r3, r0
 8006318:	e7f6      	b.n	8006308 <_dtoa_r+0x900>
 800631a:	9b08      	ldr	r3, [sp, #32]
 800631c:	2b00      	cmp	r3, #0
 800631e:	dc34      	bgt.n	800638a <_dtoa_r+0x982>
 8006320:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006322:	2b02      	cmp	r3, #2
 8006324:	dd31      	ble.n	800638a <_dtoa_r+0x982>
 8006326:	9b08      	ldr	r3, [sp, #32]
 8006328:	9306      	str	r3, [sp, #24]
 800632a:	9b06      	ldr	r3, [sp, #24]
 800632c:	b963      	cbnz	r3, 8006348 <_dtoa_r+0x940>
 800632e:	4621      	mov	r1, r4
 8006330:	2205      	movs	r2, #5
 8006332:	4628      	mov	r0, r5
 8006334:	f000 faaa 	bl	800688c <__multadd>
 8006338:	4601      	mov	r1, r0
 800633a:	4604      	mov	r4, r0
 800633c:	4650      	mov	r0, sl
 800633e:	f000 fd07 	bl	8006d50 <__mcmp>
 8006342:	2800      	cmp	r0, #0
 8006344:	f73f adbf 	bgt.w	8005ec6 <_dtoa_r+0x4be>
 8006348:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800634a:	9f03      	ldr	r7, [sp, #12]
 800634c:	ea6f 0b03 	mvn.w	fp, r3
 8006350:	f04f 0800 	mov.w	r8, #0
 8006354:	4621      	mov	r1, r4
 8006356:	4628      	mov	r0, r5
 8006358:	f000 fa76 	bl	8006848 <_Bfree>
 800635c:	2e00      	cmp	r6, #0
 800635e:	f43f aead 	beq.w	80060bc <_dtoa_r+0x6b4>
 8006362:	f1b8 0f00 	cmp.w	r8, #0
 8006366:	d005      	beq.n	8006374 <_dtoa_r+0x96c>
 8006368:	45b0      	cmp	r8, r6
 800636a:	d003      	beq.n	8006374 <_dtoa_r+0x96c>
 800636c:	4641      	mov	r1, r8
 800636e:	4628      	mov	r0, r5
 8006370:	f000 fa6a 	bl	8006848 <_Bfree>
 8006374:	4631      	mov	r1, r6
 8006376:	4628      	mov	r0, r5
 8006378:	f000 fa66 	bl	8006848 <_Bfree>
 800637c:	e69e      	b.n	80060bc <_dtoa_r+0x6b4>
 800637e:	2400      	movs	r4, #0
 8006380:	4626      	mov	r6, r4
 8006382:	e7e1      	b.n	8006348 <_dtoa_r+0x940>
 8006384:	46c3      	mov	fp, r8
 8006386:	4626      	mov	r6, r4
 8006388:	e59d      	b.n	8005ec6 <_dtoa_r+0x4be>
 800638a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 80c8 	beq.w	8006522 <_dtoa_r+0xb1a>
 8006392:	9b08      	ldr	r3, [sp, #32]
 8006394:	9306      	str	r3, [sp, #24]
 8006396:	2f00      	cmp	r7, #0
 8006398:	dd05      	ble.n	80063a6 <_dtoa_r+0x99e>
 800639a:	4631      	mov	r1, r6
 800639c:	463a      	mov	r2, r7
 800639e:	4628      	mov	r0, r5
 80063a0:	f000 fc6a 	bl	8006c78 <__lshift>
 80063a4:	4606      	mov	r6, r0
 80063a6:	f1b8 0f00 	cmp.w	r8, #0
 80063aa:	d05b      	beq.n	8006464 <_dtoa_r+0xa5c>
 80063ac:	4628      	mov	r0, r5
 80063ae:	6871      	ldr	r1, [r6, #4]
 80063b0:	f000 fa0a 	bl	80067c8 <_Balloc>
 80063b4:	4607      	mov	r7, r0
 80063b6:	b928      	cbnz	r0, 80063c4 <_dtoa_r+0x9bc>
 80063b8:	4602      	mov	r2, r0
 80063ba:	f240 21ef 	movw	r1, #751	; 0x2ef
 80063be:	4b81      	ldr	r3, [pc, #516]	; (80065c4 <_dtoa_r+0xbbc>)
 80063c0:	f7ff bb36 	b.w	8005a30 <_dtoa_r+0x28>
 80063c4:	6932      	ldr	r2, [r6, #16]
 80063c6:	f106 010c 	add.w	r1, r6, #12
 80063ca:	3202      	adds	r2, #2
 80063cc:	0092      	lsls	r2, r2, #2
 80063ce:	300c      	adds	r0, #12
 80063d0:	f001 fef2 	bl	80081b8 <memcpy>
 80063d4:	2201      	movs	r2, #1
 80063d6:	4639      	mov	r1, r7
 80063d8:	4628      	mov	r0, r5
 80063da:	f000 fc4d 	bl	8006c78 <__lshift>
 80063de:	46b0      	mov	r8, r6
 80063e0:	4606      	mov	r6, r0
 80063e2:	9b03      	ldr	r3, [sp, #12]
 80063e4:	9a03      	ldr	r2, [sp, #12]
 80063e6:	3301      	adds	r3, #1
 80063e8:	9308      	str	r3, [sp, #32]
 80063ea:	9b06      	ldr	r3, [sp, #24]
 80063ec:	4413      	add	r3, r2
 80063ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80063f0:	9b04      	ldr	r3, [sp, #16]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	930a      	str	r3, [sp, #40]	; 0x28
 80063f8:	9b08      	ldr	r3, [sp, #32]
 80063fa:	4621      	mov	r1, r4
 80063fc:	3b01      	subs	r3, #1
 80063fe:	4650      	mov	r0, sl
 8006400:	9304      	str	r3, [sp, #16]
 8006402:	f7ff fa77 	bl	80058f4 <quorem>
 8006406:	4641      	mov	r1, r8
 8006408:	9006      	str	r0, [sp, #24]
 800640a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800640e:	4650      	mov	r0, sl
 8006410:	f000 fc9e 	bl	8006d50 <__mcmp>
 8006414:	4632      	mov	r2, r6
 8006416:	9009      	str	r0, [sp, #36]	; 0x24
 8006418:	4621      	mov	r1, r4
 800641a:	4628      	mov	r0, r5
 800641c:	f000 fcb4 	bl	8006d88 <__mdiff>
 8006420:	68c2      	ldr	r2, [r0, #12]
 8006422:	4607      	mov	r7, r0
 8006424:	bb02      	cbnz	r2, 8006468 <_dtoa_r+0xa60>
 8006426:	4601      	mov	r1, r0
 8006428:	4650      	mov	r0, sl
 800642a:	f000 fc91 	bl	8006d50 <__mcmp>
 800642e:	4602      	mov	r2, r0
 8006430:	4639      	mov	r1, r7
 8006432:	4628      	mov	r0, r5
 8006434:	920c      	str	r2, [sp, #48]	; 0x30
 8006436:	f000 fa07 	bl	8006848 <_Bfree>
 800643a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800643c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800643e:	9f08      	ldr	r7, [sp, #32]
 8006440:	ea43 0102 	orr.w	r1, r3, r2
 8006444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006446:	4319      	orrs	r1, r3
 8006448:	d110      	bne.n	800646c <_dtoa_r+0xa64>
 800644a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800644e:	d029      	beq.n	80064a4 <_dtoa_r+0xa9c>
 8006450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006452:	2b00      	cmp	r3, #0
 8006454:	dd02      	ble.n	800645c <_dtoa_r+0xa54>
 8006456:	9b06      	ldr	r3, [sp, #24]
 8006458:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800645c:	9b04      	ldr	r3, [sp, #16]
 800645e:	f883 9000 	strb.w	r9, [r3]
 8006462:	e777      	b.n	8006354 <_dtoa_r+0x94c>
 8006464:	4630      	mov	r0, r6
 8006466:	e7ba      	b.n	80063de <_dtoa_r+0x9d6>
 8006468:	2201      	movs	r2, #1
 800646a:	e7e1      	b.n	8006430 <_dtoa_r+0xa28>
 800646c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646e:	2b00      	cmp	r3, #0
 8006470:	db04      	blt.n	800647c <_dtoa_r+0xa74>
 8006472:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006474:	430b      	orrs	r3, r1
 8006476:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006478:	430b      	orrs	r3, r1
 800647a:	d120      	bne.n	80064be <_dtoa_r+0xab6>
 800647c:	2a00      	cmp	r2, #0
 800647e:	dded      	ble.n	800645c <_dtoa_r+0xa54>
 8006480:	4651      	mov	r1, sl
 8006482:	2201      	movs	r2, #1
 8006484:	4628      	mov	r0, r5
 8006486:	f000 fbf7 	bl	8006c78 <__lshift>
 800648a:	4621      	mov	r1, r4
 800648c:	4682      	mov	sl, r0
 800648e:	f000 fc5f 	bl	8006d50 <__mcmp>
 8006492:	2800      	cmp	r0, #0
 8006494:	dc03      	bgt.n	800649e <_dtoa_r+0xa96>
 8006496:	d1e1      	bne.n	800645c <_dtoa_r+0xa54>
 8006498:	f019 0f01 	tst.w	r9, #1
 800649c:	d0de      	beq.n	800645c <_dtoa_r+0xa54>
 800649e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064a2:	d1d8      	bne.n	8006456 <_dtoa_r+0xa4e>
 80064a4:	2339      	movs	r3, #57	; 0x39
 80064a6:	9a04      	ldr	r2, [sp, #16]
 80064a8:	7013      	strb	r3, [r2, #0]
 80064aa:	463b      	mov	r3, r7
 80064ac:	461f      	mov	r7, r3
 80064ae:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	2a39      	cmp	r2, #57	; 0x39
 80064b6:	d06b      	beq.n	8006590 <_dtoa_r+0xb88>
 80064b8:	3201      	adds	r2, #1
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	e74a      	b.n	8006354 <_dtoa_r+0x94c>
 80064be:	2a00      	cmp	r2, #0
 80064c0:	dd07      	ble.n	80064d2 <_dtoa_r+0xaca>
 80064c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064c6:	d0ed      	beq.n	80064a4 <_dtoa_r+0xa9c>
 80064c8:	9a04      	ldr	r2, [sp, #16]
 80064ca:	f109 0301 	add.w	r3, r9, #1
 80064ce:	7013      	strb	r3, [r2, #0]
 80064d0:	e740      	b.n	8006354 <_dtoa_r+0x94c>
 80064d2:	9b08      	ldr	r3, [sp, #32]
 80064d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064d6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80064da:	4293      	cmp	r3, r2
 80064dc:	d042      	beq.n	8006564 <_dtoa_r+0xb5c>
 80064de:	4651      	mov	r1, sl
 80064e0:	2300      	movs	r3, #0
 80064e2:	220a      	movs	r2, #10
 80064e4:	4628      	mov	r0, r5
 80064e6:	f000 f9d1 	bl	800688c <__multadd>
 80064ea:	45b0      	cmp	r8, r6
 80064ec:	4682      	mov	sl, r0
 80064ee:	f04f 0300 	mov.w	r3, #0
 80064f2:	f04f 020a 	mov.w	r2, #10
 80064f6:	4641      	mov	r1, r8
 80064f8:	4628      	mov	r0, r5
 80064fa:	d107      	bne.n	800650c <_dtoa_r+0xb04>
 80064fc:	f000 f9c6 	bl	800688c <__multadd>
 8006500:	4680      	mov	r8, r0
 8006502:	4606      	mov	r6, r0
 8006504:	9b08      	ldr	r3, [sp, #32]
 8006506:	3301      	adds	r3, #1
 8006508:	9308      	str	r3, [sp, #32]
 800650a:	e775      	b.n	80063f8 <_dtoa_r+0x9f0>
 800650c:	f000 f9be 	bl	800688c <__multadd>
 8006510:	4631      	mov	r1, r6
 8006512:	4680      	mov	r8, r0
 8006514:	2300      	movs	r3, #0
 8006516:	220a      	movs	r2, #10
 8006518:	4628      	mov	r0, r5
 800651a:	f000 f9b7 	bl	800688c <__multadd>
 800651e:	4606      	mov	r6, r0
 8006520:	e7f0      	b.n	8006504 <_dtoa_r+0xafc>
 8006522:	9b08      	ldr	r3, [sp, #32]
 8006524:	9306      	str	r3, [sp, #24]
 8006526:	9f03      	ldr	r7, [sp, #12]
 8006528:	4621      	mov	r1, r4
 800652a:	4650      	mov	r0, sl
 800652c:	f7ff f9e2 	bl	80058f4 <quorem>
 8006530:	9b03      	ldr	r3, [sp, #12]
 8006532:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006536:	f807 9b01 	strb.w	r9, [r7], #1
 800653a:	1afa      	subs	r2, r7, r3
 800653c:	9b06      	ldr	r3, [sp, #24]
 800653e:	4293      	cmp	r3, r2
 8006540:	dd07      	ble.n	8006552 <_dtoa_r+0xb4a>
 8006542:	4651      	mov	r1, sl
 8006544:	2300      	movs	r3, #0
 8006546:	220a      	movs	r2, #10
 8006548:	4628      	mov	r0, r5
 800654a:	f000 f99f 	bl	800688c <__multadd>
 800654e:	4682      	mov	sl, r0
 8006550:	e7ea      	b.n	8006528 <_dtoa_r+0xb20>
 8006552:	9b06      	ldr	r3, [sp, #24]
 8006554:	f04f 0800 	mov.w	r8, #0
 8006558:	2b00      	cmp	r3, #0
 800655a:	bfcc      	ite	gt
 800655c:	461f      	movgt	r7, r3
 800655e:	2701      	movle	r7, #1
 8006560:	9b03      	ldr	r3, [sp, #12]
 8006562:	441f      	add	r7, r3
 8006564:	4651      	mov	r1, sl
 8006566:	2201      	movs	r2, #1
 8006568:	4628      	mov	r0, r5
 800656a:	f000 fb85 	bl	8006c78 <__lshift>
 800656e:	4621      	mov	r1, r4
 8006570:	4682      	mov	sl, r0
 8006572:	f000 fbed 	bl	8006d50 <__mcmp>
 8006576:	2800      	cmp	r0, #0
 8006578:	dc97      	bgt.n	80064aa <_dtoa_r+0xaa2>
 800657a:	d102      	bne.n	8006582 <_dtoa_r+0xb7a>
 800657c:	f019 0f01 	tst.w	r9, #1
 8006580:	d193      	bne.n	80064aa <_dtoa_r+0xaa2>
 8006582:	463b      	mov	r3, r7
 8006584:	461f      	mov	r7, r3
 8006586:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800658a:	2a30      	cmp	r2, #48	; 0x30
 800658c:	d0fa      	beq.n	8006584 <_dtoa_r+0xb7c>
 800658e:	e6e1      	b.n	8006354 <_dtoa_r+0x94c>
 8006590:	9a03      	ldr	r2, [sp, #12]
 8006592:	429a      	cmp	r2, r3
 8006594:	d18a      	bne.n	80064ac <_dtoa_r+0xaa4>
 8006596:	2331      	movs	r3, #49	; 0x31
 8006598:	f10b 0b01 	add.w	fp, fp, #1
 800659c:	e797      	b.n	80064ce <_dtoa_r+0xac6>
 800659e:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <_dtoa_r+0xbc0>)
 80065a0:	f7ff ba9f 	b.w	8005ae2 <_dtoa_r+0xda>
 80065a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f47f aa77 	bne.w	8005a9a <_dtoa_r+0x92>
 80065ac:	4b07      	ldr	r3, [pc, #28]	; (80065cc <_dtoa_r+0xbc4>)
 80065ae:	f7ff ba98 	b.w	8005ae2 <_dtoa_r+0xda>
 80065b2:	9b06      	ldr	r3, [sp, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	dcb6      	bgt.n	8006526 <_dtoa_r+0xb1e>
 80065b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	f73f aeb5 	bgt.w	800632a <_dtoa_r+0x922>
 80065c0:	e7b1      	b.n	8006526 <_dtoa_r+0xb1e>
 80065c2:	bf00      	nop
 80065c4:	0800b650 	.word	0x0800b650
 80065c8:	0800b5ab 	.word	0x0800b5ab
 80065cc:	0800b5d4 	.word	0x0800b5d4

080065d0 <_free_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4605      	mov	r5, r0
 80065d4:	2900      	cmp	r1, #0
 80065d6:	d040      	beq.n	800665a <_free_r+0x8a>
 80065d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065dc:	1f0c      	subs	r4, r1, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	bfb8      	it	lt
 80065e2:	18e4      	addlt	r4, r4, r3
 80065e4:	f000 f8e4 	bl	80067b0 <__malloc_lock>
 80065e8:	4a1c      	ldr	r2, [pc, #112]	; (800665c <_free_r+0x8c>)
 80065ea:	6813      	ldr	r3, [r2, #0]
 80065ec:	b933      	cbnz	r3, 80065fc <_free_r+0x2c>
 80065ee:	6063      	str	r3, [r4, #4]
 80065f0:	6014      	str	r4, [r2, #0]
 80065f2:	4628      	mov	r0, r5
 80065f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065f8:	f000 b8e0 	b.w	80067bc <__malloc_unlock>
 80065fc:	42a3      	cmp	r3, r4
 80065fe:	d908      	bls.n	8006612 <_free_r+0x42>
 8006600:	6820      	ldr	r0, [r4, #0]
 8006602:	1821      	adds	r1, r4, r0
 8006604:	428b      	cmp	r3, r1
 8006606:	bf01      	itttt	eq
 8006608:	6819      	ldreq	r1, [r3, #0]
 800660a:	685b      	ldreq	r3, [r3, #4]
 800660c:	1809      	addeq	r1, r1, r0
 800660e:	6021      	streq	r1, [r4, #0]
 8006610:	e7ed      	b.n	80065ee <_free_r+0x1e>
 8006612:	461a      	mov	r2, r3
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	b10b      	cbz	r3, 800661c <_free_r+0x4c>
 8006618:	42a3      	cmp	r3, r4
 800661a:	d9fa      	bls.n	8006612 <_free_r+0x42>
 800661c:	6811      	ldr	r1, [r2, #0]
 800661e:	1850      	adds	r0, r2, r1
 8006620:	42a0      	cmp	r0, r4
 8006622:	d10b      	bne.n	800663c <_free_r+0x6c>
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	4401      	add	r1, r0
 8006628:	1850      	adds	r0, r2, r1
 800662a:	4283      	cmp	r3, r0
 800662c:	6011      	str	r1, [r2, #0]
 800662e:	d1e0      	bne.n	80065f2 <_free_r+0x22>
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	4408      	add	r0, r1
 8006636:	6010      	str	r0, [r2, #0]
 8006638:	6053      	str	r3, [r2, #4]
 800663a:	e7da      	b.n	80065f2 <_free_r+0x22>
 800663c:	d902      	bls.n	8006644 <_free_r+0x74>
 800663e:	230c      	movs	r3, #12
 8006640:	602b      	str	r3, [r5, #0]
 8006642:	e7d6      	b.n	80065f2 <_free_r+0x22>
 8006644:	6820      	ldr	r0, [r4, #0]
 8006646:	1821      	adds	r1, r4, r0
 8006648:	428b      	cmp	r3, r1
 800664a:	bf01      	itttt	eq
 800664c:	6819      	ldreq	r1, [r3, #0]
 800664e:	685b      	ldreq	r3, [r3, #4]
 8006650:	1809      	addeq	r1, r1, r0
 8006652:	6021      	streq	r1, [r4, #0]
 8006654:	6063      	str	r3, [r4, #4]
 8006656:	6054      	str	r4, [r2, #4]
 8006658:	e7cb      	b.n	80065f2 <_free_r+0x22>
 800665a:	bd38      	pop	{r3, r4, r5, pc}
 800665c:	20000830 	.word	0x20000830

08006660 <malloc>:
 8006660:	4b02      	ldr	r3, [pc, #8]	; (800666c <malloc+0xc>)
 8006662:	4601      	mov	r1, r0
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	f000 b823 	b.w	80066b0 <_malloc_r>
 800666a:	bf00      	nop
 800666c:	20000068 	.word	0x20000068

08006670 <sbrk_aligned>:
 8006670:	b570      	push	{r4, r5, r6, lr}
 8006672:	4e0e      	ldr	r6, [pc, #56]	; (80066ac <sbrk_aligned+0x3c>)
 8006674:	460c      	mov	r4, r1
 8006676:	6831      	ldr	r1, [r6, #0]
 8006678:	4605      	mov	r5, r0
 800667a:	b911      	cbnz	r1, 8006682 <sbrk_aligned+0x12>
 800667c:	f001 fd8c 	bl	8008198 <_sbrk_r>
 8006680:	6030      	str	r0, [r6, #0]
 8006682:	4621      	mov	r1, r4
 8006684:	4628      	mov	r0, r5
 8006686:	f001 fd87 	bl	8008198 <_sbrk_r>
 800668a:	1c43      	adds	r3, r0, #1
 800668c:	d00a      	beq.n	80066a4 <sbrk_aligned+0x34>
 800668e:	1cc4      	adds	r4, r0, #3
 8006690:	f024 0403 	bic.w	r4, r4, #3
 8006694:	42a0      	cmp	r0, r4
 8006696:	d007      	beq.n	80066a8 <sbrk_aligned+0x38>
 8006698:	1a21      	subs	r1, r4, r0
 800669a:	4628      	mov	r0, r5
 800669c:	f001 fd7c 	bl	8008198 <_sbrk_r>
 80066a0:	3001      	adds	r0, #1
 80066a2:	d101      	bne.n	80066a8 <sbrk_aligned+0x38>
 80066a4:	f04f 34ff 	mov.w	r4, #4294967295
 80066a8:	4620      	mov	r0, r4
 80066aa:	bd70      	pop	{r4, r5, r6, pc}
 80066ac:	20000834 	.word	0x20000834

080066b0 <_malloc_r>:
 80066b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066b4:	1ccd      	adds	r5, r1, #3
 80066b6:	f025 0503 	bic.w	r5, r5, #3
 80066ba:	3508      	adds	r5, #8
 80066bc:	2d0c      	cmp	r5, #12
 80066be:	bf38      	it	cc
 80066c0:	250c      	movcc	r5, #12
 80066c2:	2d00      	cmp	r5, #0
 80066c4:	4607      	mov	r7, r0
 80066c6:	db01      	blt.n	80066cc <_malloc_r+0x1c>
 80066c8:	42a9      	cmp	r1, r5
 80066ca:	d905      	bls.n	80066d8 <_malloc_r+0x28>
 80066cc:	230c      	movs	r3, #12
 80066ce:	2600      	movs	r6, #0
 80066d0:	603b      	str	r3, [r7, #0]
 80066d2:	4630      	mov	r0, r6
 80066d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067ac <_malloc_r+0xfc>
 80066dc:	f000 f868 	bl	80067b0 <__malloc_lock>
 80066e0:	f8d8 3000 	ldr.w	r3, [r8]
 80066e4:	461c      	mov	r4, r3
 80066e6:	bb5c      	cbnz	r4, 8006740 <_malloc_r+0x90>
 80066e8:	4629      	mov	r1, r5
 80066ea:	4638      	mov	r0, r7
 80066ec:	f7ff ffc0 	bl	8006670 <sbrk_aligned>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	4604      	mov	r4, r0
 80066f4:	d155      	bne.n	80067a2 <_malloc_r+0xf2>
 80066f6:	f8d8 4000 	ldr.w	r4, [r8]
 80066fa:	4626      	mov	r6, r4
 80066fc:	2e00      	cmp	r6, #0
 80066fe:	d145      	bne.n	800678c <_malloc_r+0xdc>
 8006700:	2c00      	cmp	r4, #0
 8006702:	d048      	beq.n	8006796 <_malloc_r+0xe6>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	4631      	mov	r1, r6
 8006708:	4638      	mov	r0, r7
 800670a:	eb04 0903 	add.w	r9, r4, r3
 800670e:	f001 fd43 	bl	8008198 <_sbrk_r>
 8006712:	4581      	cmp	r9, r0
 8006714:	d13f      	bne.n	8006796 <_malloc_r+0xe6>
 8006716:	6821      	ldr	r1, [r4, #0]
 8006718:	4638      	mov	r0, r7
 800671a:	1a6d      	subs	r5, r5, r1
 800671c:	4629      	mov	r1, r5
 800671e:	f7ff ffa7 	bl	8006670 <sbrk_aligned>
 8006722:	3001      	adds	r0, #1
 8006724:	d037      	beq.n	8006796 <_malloc_r+0xe6>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	442b      	add	r3, r5
 800672a:	6023      	str	r3, [r4, #0]
 800672c:	f8d8 3000 	ldr.w	r3, [r8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d038      	beq.n	80067a6 <_malloc_r+0xf6>
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	42a2      	cmp	r2, r4
 8006738:	d12b      	bne.n	8006792 <_malloc_r+0xe2>
 800673a:	2200      	movs	r2, #0
 800673c:	605a      	str	r2, [r3, #4]
 800673e:	e00f      	b.n	8006760 <_malloc_r+0xb0>
 8006740:	6822      	ldr	r2, [r4, #0]
 8006742:	1b52      	subs	r2, r2, r5
 8006744:	d41f      	bmi.n	8006786 <_malloc_r+0xd6>
 8006746:	2a0b      	cmp	r2, #11
 8006748:	d917      	bls.n	800677a <_malloc_r+0xca>
 800674a:	1961      	adds	r1, r4, r5
 800674c:	42a3      	cmp	r3, r4
 800674e:	6025      	str	r5, [r4, #0]
 8006750:	bf18      	it	ne
 8006752:	6059      	strne	r1, [r3, #4]
 8006754:	6863      	ldr	r3, [r4, #4]
 8006756:	bf08      	it	eq
 8006758:	f8c8 1000 	streq.w	r1, [r8]
 800675c:	5162      	str	r2, [r4, r5]
 800675e:	604b      	str	r3, [r1, #4]
 8006760:	4638      	mov	r0, r7
 8006762:	f104 060b 	add.w	r6, r4, #11
 8006766:	f000 f829 	bl	80067bc <__malloc_unlock>
 800676a:	f026 0607 	bic.w	r6, r6, #7
 800676e:	1d23      	adds	r3, r4, #4
 8006770:	1af2      	subs	r2, r6, r3
 8006772:	d0ae      	beq.n	80066d2 <_malloc_r+0x22>
 8006774:	1b9b      	subs	r3, r3, r6
 8006776:	50a3      	str	r3, [r4, r2]
 8006778:	e7ab      	b.n	80066d2 <_malloc_r+0x22>
 800677a:	42a3      	cmp	r3, r4
 800677c:	6862      	ldr	r2, [r4, #4]
 800677e:	d1dd      	bne.n	800673c <_malloc_r+0x8c>
 8006780:	f8c8 2000 	str.w	r2, [r8]
 8006784:	e7ec      	b.n	8006760 <_malloc_r+0xb0>
 8006786:	4623      	mov	r3, r4
 8006788:	6864      	ldr	r4, [r4, #4]
 800678a:	e7ac      	b.n	80066e6 <_malloc_r+0x36>
 800678c:	4634      	mov	r4, r6
 800678e:	6876      	ldr	r6, [r6, #4]
 8006790:	e7b4      	b.n	80066fc <_malloc_r+0x4c>
 8006792:	4613      	mov	r3, r2
 8006794:	e7cc      	b.n	8006730 <_malloc_r+0x80>
 8006796:	230c      	movs	r3, #12
 8006798:	4638      	mov	r0, r7
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	f000 f80e 	bl	80067bc <__malloc_unlock>
 80067a0:	e797      	b.n	80066d2 <_malloc_r+0x22>
 80067a2:	6025      	str	r5, [r4, #0]
 80067a4:	e7dc      	b.n	8006760 <_malloc_r+0xb0>
 80067a6:	605b      	str	r3, [r3, #4]
 80067a8:	deff      	udf	#255	; 0xff
 80067aa:	bf00      	nop
 80067ac:	20000830 	.word	0x20000830

080067b0 <__malloc_lock>:
 80067b0:	4801      	ldr	r0, [pc, #4]	; (80067b8 <__malloc_lock+0x8>)
 80067b2:	f7ff b88a 	b.w	80058ca <__retarget_lock_acquire_recursive>
 80067b6:	bf00      	nop
 80067b8:	2000082c 	.word	0x2000082c

080067bc <__malloc_unlock>:
 80067bc:	4801      	ldr	r0, [pc, #4]	; (80067c4 <__malloc_unlock+0x8>)
 80067be:	f7ff b885 	b.w	80058cc <__retarget_lock_release_recursive>
 80067c2:	bf00      	nop
 80067c4:	2000082c 	.word	0x2000082c

080067c8 <_Balloc>:
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	69c6      	ldr	r6, [r0, #28]
 80067cc:	4604      	mov	r4, r0
 80067ce:	460d      	mov	r5, r1
 80067d0:	b976      	cbnz	r6, 80067f0 <_Balloc+0x28>
 80067d2:	2010      	movs	r0, #16
 80067d4:	f7ff ff44 	bl	8006660 <malloc>
 80067d8:	4602      	mov	r2, r0
 80067da:	61e0      	str	r0, [r4, #28]
 80067dc:	b920      	cbnz	r0, 80067e8 <_Balloc+0x20>
 80067de:	216b      	movs	r1, #107	; 0x6b
 80067e0:	4b17      	ldr	r3, [pc, #92]	; (8006840 <_Balloc+0x78>)
 80067e2:	4818      	ldr	r0, [pc, #96]	; (8006844 <_Balloc+0x7c>)
 80067e4:	f001 fcfc 	bl	80081e0 <__assert_func>
 80067e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067ec:	6006      	str	r6, [r0, #0]
 80067ee:	60c6      	str	r6, [r0, #12]
 80067f0:	69e6      	ldr	r6, [r4, #28]
 80067f2:	68f3      	ldr	r3, [r6, #12]
 80067f4:	b183      	cbz	r3, 8006818 <_Balloc+0x50>
 80067f6:	69e3      	ldr	r3, [r4, #28]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067fe:	b9b8      	cbnz	r0, 8006830 <_Balloc+0x68>
 8006800:	2101      	movs	r1, #1
 8006802:	fa01 f605 	lsl.w	r6, r1, r5
 8006806:	1d72      	adds	r2, r6, #5
 8006808:	4620      	mov	r0, r4
 800680a:	0092      	lsls	r2, r2, #2
 800680c:	f001 fd06 	bl	800821c <_calloc_r>
 8006810:	b160      	cbz	r0, 800682c <_Balloc+0x64>
 8006812:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006816:	e00e      	b.n	8006836 <_Balloc+0x6e>
 8006818:	2221      	movs	r2, #33	; 0x21
 800681a:	2104      	movs	r1, #4
 800681c:	4620      	mov	r0, r4
 800681e:	f001 fcfd 	bl	800821c <_calloc_r>
 8006822:	69e3      	ldr	r3, [r4, #28]
 8006824:	60f0      	str	r0, [r6, #12]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1e4      	bne.n	80067f6 <_Balloc+0x2e>
 800682c:	2000      	movs	r0, #0
 800682e:	bd70      	pop	{r4, r5, r6, pc}
 8006830:	6802      	ldr	r2, [r0, #0]
 8006832:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006836:	2300      	movs	r3, #0
 8006838:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800683c:	e7f7      	b.n	800682e <_Balloc+0x66>
 800683e:	bf00      	nop
 8006840:	0800b5e1 	.word	0x0800b5e1
 8006844:	0800b661 	.word	0x0800b661

08006848 <_Bfree>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	69c6      	ldr	r6, [r0, #28]
 800684c:	4605      	mov	r5, r0
 800684e:	460c      	mov	r4, r1
 8006850:	b976      	cbnz	r6, 8006870 <_Bfree+0x28>
 8006852:	2010      	movs	r0, #16
 8006854:	f7ff ff04 	bl	8006660 <malloc>
 8006858:	4602      	mov	r2, r0
 800685a:	61e8      	str	r0, [r5, #28]
 800685c:	b920      	cbnz	r0, 8006868 <_Bfree+0x20>
 800685e:	218f      	movs	r1, #143	; 0x8f
 8006860:	4b08      	ldr	r3, [pc, #32]	; (8006884 <_Bfree+0x3c>)
 8006862:	4809      	ldr	r0, [pc, #36]	; (8006888 <_Bfree+0x40>)
 8006864:	f001 fcbc 	bl	80081e0 <__assert_func>
 8006868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800686c:	6006      	str	r6, [r0, #0]
 800686e:	60c6      	str	r6, [r0, #12]
 8006870:	b13c      	cbz	r4, 8006882 <_Bfree+0x3a>
 8006872:	69eb      	ldr	r3, [r5, #28]
 8006874:	6862      	ldr	r2, [r4, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800687c:	6021      	str	r1, [r4, #0]
 800687e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	0800b5e1 	.word	0x0800b5e1
 8006888:	0800b661 	.word	0x0800b661

0800688c <__multadd>:
 800688c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006890:	4607      	mov	r7, r0
 8006892:	460c      	mov	r4, r1
 8006894:	461e      	mov	r6, r3
 8006896:	2000      	movs	r0, #0
 8006898:	690d      	ldr	r5, [r1, #16]
 800689a:	f101 0c14 	add.w	ip, r1, #20
 800689e:	f8dc 3000 	ldr.w	r3, [ip]
 80068a2:	3001      	adds	r0, #1
 80068a4:	b299      	uxth	r1, r3
 80068a6:	fb02 6101 	mla	r1, r2, r1, r6
 80068aa:	0c1e      	lsrs	r6, r3, #16
 80068ac:	0c0b      	lsrs	r3, r1, #16
 80068ae:	fb02 3306 	mla	r3, r2, r6, r3
 80068b2:	b289      	uxth	r1, r1
 80068b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068b8:	4285      	cmp	r5, r0
 80068ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068be:	f84c 1b04 	str.w	r1, [ip], #4
 80068c2:	dcec      	bgt.n	800689e <__multadd+0x12>
 80068c4:	b30e      	cbz	r6, 800690a <__multadd+0x7e>
 80068c6:	68a3      	ldr	r3, [r4, #8]
 80068c8:	42ab      	cmp	r3, r5
 80068ca:	dc19      	bgt.n	8006900 <__multadd+0x74>
 80068cc:	6861      	ldr	r1, [r4, #4]
 80068ce:	4638      	mov	r0, r7
 80068d0:	3101      	adds	r1, #1
 80068d2:	f7ff ff79 	bl	80067c8 <_Balloc>
 80068d6:	4680      	mov	r8, r0
 80068d8:	b928      	cbnz	r0, 80068e6 <__multadd+0x5a>
 80068da:	4602      	mov	r2, r0
 80068dc:	21ba      	movs	r1, #186	; 0xba
 80068de:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <__multadd+0x84>)
 80068e0:	480c      	ldr	r0, [pc, #48]	; (8006914 <__multadd+0x88>)
 80068e2:	f001 fc7d 	bl	80081e0 <__assert_func>
 80068e6:	6922      	ldr	r2, [r4, #16]
 80068e8:	f104 010c 	add.w	r1, r4, #12
 80068ec:	3202      	adds	r2, #2
 80068ee:	0092      	lsls	r2, r2, #2
 80068f0:	300c      	adds	r0, #12
 80068f2:	f001 fc61 	bl	80081b8 <memcpy>
 80068f6:	4621      	mov	r1, r4
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7ff ffa5 	bl	8006848 <_Bfree>
 80068fe:	4644      	mov	r4, r8
 8006900:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006904:	3501      	adds	r5, #1
 8006906:	615e      	str	r6, [r3, #20]
 8006908:	6125      	str	r5, [r4, #16]
 800690a:	4620      	mov	r0, r4
 800690c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006910:	0800b650 	.word	0x0800b650
 8006914:	0800b661 	.word	0x0800b661

08006918 <__s2b>:
 8006918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800691c:	4615      	mov	r5, r2
 800691e:	2209      	movs	r2, #9
 8006920:	461f      	mov	r7, r3
 8006922:	3308      	adds	r3, #8
 8006924:	460c      	mov	r4, r1
 8006926:	fb93 f3f2 	sdiv	r3, r3, r2
 800692a:	4606      	mov	r6, r0
 800692c:	2201      	movs	r2, #1
 800692e:	2100      	movs	r1, #0
 8006930:	429a      	cmp	r2, r3
 8006932:	db09      	blt.n	8006948 <__s2b+0x30>
 8006934:	4630      	mov	r0, r6
 8006936:	f7ff ff47 	bl	80067c8 <_Balloc>
 800693a:	b940      	cbnz	r0, 800694e <__s2b+0x36>
 800693c:	4602      	mov	r2, r0
 800693e:	21d3      	movs	r1, #211	; 0xd3
 8006940:	4b18      	ldr	r3, [pc, #96]	; (80069a4 <__s2b+0x8c>)
 8006942:	4819      	ldr	r0, [pc, #100]	; (80069a8 <__s2b+0x90>)
 8006944:	f001 fc4c 	bl	80081e0 <__assert_func>
 8006948:	0052      	lsls	r2, r2, #1
 800694a:	3101      	adds	r1, #1
 800694c:	e7f0      	b.n	8006930 <__s2b+0x18>
 800694e:	9b08      	ldr	r3, [sp, #32]
 8006950:	2d09      	cmp	r5, #9
 8006952:	6143      	str	r3, [r0, #20]
 8006954:	f04f 0301 	mov.w	r3, #1
 8006958:	6103      	str	r3, [r0, #16]
 800695a:	dd16      	ble.n	800698a <__s2b+0x72>
 800695c:	f104 0909 	add.w	r9, r4, #9
 8006960:	46c8      	mov	r8, r9
 8006962:	442c      	add	r4, r5
 8006964:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006968:	4601      	mov	r1, r0
 800696a:	220a      	movs	r2, #10
 800696c:	4630      	mov	r0, r6
 800696e:	3b30      	subs	r3, #48	; 0x30
 8006970:	f7ff ff8c 	bl	800688c <__multadd>
 8006974:	45a0      	cmp	r8, r4
 8006976:	d1f5      	bne.n	8006964 <__s2b+0x4c>
 8006978:	f1a5 0408 	sub.w	r4, r5, #8
 800697c:	444c      	add	r4, r9
 800697e:	1b2d      	subs	r5, r5, r4
 8006980:	1963      	adds	r3, r4, r5
 8006982:	42bb      	cmp	r3, r7
 8006984:	db04      	blt.n	8006990 <__s2b+0x78>
 8006986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800698a:	2509      	movs	r5, #9
 800698c:	340a      	adds	r4, #10
 800698e:	e7f6      	b.n	800697e <__s2b+0x66>
 8006990:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006994:	4601      	mov	r1, r0
 8006996:	220a      	movs	r2, #10
 8006998:	4630      	mov	r0, r6
 800699a:	3b30      	subs	r3, #48	; 0x30
 800699c:	f7ff ff76 	bl	800688c <__multadd>
 80069a0:	e7ee      	b.n	8006980 <__s2b+0x68>
 80069a2:	bf00      	nop
 80069a4:	0800b650 	.word	0x0800b650
 80069a8:	0800b661 	.word	0x0800b661

080069ac <__hi0bits>:
 80069ac:	0c02      	lsrs	r2, r0, #16
 80069ae:	0412      	lsls	r2, r2, #16
 80069b0:	4603      	mov	r3, r0
 80069b2:	b9ca      	cbnz	r2, 80069e8 <__hi0bits+0x3c>
 80069b4:	0403      	lsls	r3, r0, #16
 80069b6:	2010      	movs	r0, #16
 80069b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80069bc:	bf04      	itt	eq
 80069be:	021b      	lsleq	r3, r3, #8
 80069c0:	3008      	addeq	r0, #8
 80069c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80069c6:	bf04      	itt	eq
 80069c8:	011b      	lsleq	r3, r3, #4
 80069ca:	3004      	addeq	r0, #4
 80069cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80069d0:	bf04      	itt	eq
 80069d2:	009b      	lsleq	r3, r3, #2
 80069d4:	3002      	addeq	r0, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	db05      	blt.n	80069e6 <__hi0bits+0x3a>
 80069da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80069de:	f100 0001 	add.w	r0, r0, #1
 80069e2:	bf08      	it	eq
 80069e4:	2020      	moveq	r0, #32
 80069e6:	4770      	bx	lr
 80069e8:	2000      	movs	r0, #0
 80069ea:	e7e5      	b.n	80069b8 <__hi0bits+0xc>

080069ec <__lo0bits>:
 80069ec:	6803      	ldr	r3, [r0, #0]
 80069ee:	4602      	mov	r2, r0
 80069f0:	f013 0007 	ands.w	r0, r3, #7
 80069f4:	d00b      	beq.n	8006a0e <__lo0bits+0x22>
 80069f6:	07d9      	lsls	r1, r3, #31
 80069f8:	d421      	bmi.n	8006a3e <__lo0bits+0x52>
 80069fa:	0798      	lsls	r0, r3, #30
 80069fc:	bf49      	itett	mi
 80069fe:	085b      	lsrmi	r3, r3, #1
 8006a00:	089b      	lsrpl	r3, r3, #2
 8006a02:	2001      	movmi	r0, #1
 8006a04:	6013      	strmi	r3, [r2, #0]
 8006a06:	bf5c      	itt	pl
 8006a08:	2002      	movpl	r0, #2
 8006a0a:	6013      	strpl	r3, [r2, #0]
 8006a0c:	4770      	bx	lr
 8006a0e:	b299      	uxth	r1, r3
 8006a10:	b909      	cbnz	r1, 8006a16 <__lo0bits+0x2a>
 8006a12:	2010      	movs	r0, #16
 8006a14:	0c1b      	lsrs	r3, r3, #16
 8006a16:	b2d9      	uxtb	r1, r3
 8006a18:	b909      	cbnz	r1, 8006a1e <__lo0bits+0x32>
 8006a1a:	3008      	adds	r0, #8
 8006a1c:	0a1b      	lsrs	r3, r3, #8
 8006a1e:	0719      	lsls	r1, r3, #28
 8006a20:	bf04      	itt	eq
 8006a22:	091b      	lsreq	r3, r3, #4
 8006a24:	3004      	addeq	r0, #4
 8006a26:	0799      	lsls	r1, r3, #30
 8006a28:	bf04      	itt	eq
 8006a2a:	089b      	lsreq	r3, r3, #2
 8006a2c:	3002      	addeq	r0, #2
 8006a2e:	07d9      	lsls	r1, r3, #31
 8006a30:	d403      	bmi.n	8006a3a <__lo0bits+0x4e>
 8006a32:	085b      	lsrs	r3, r3, #1
 8006a34:	f100 0001 	add.w	r0, r0, #1
 8006a38:	d003      	beq.n	8006a42 <__lo0bits+0x56>
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	4770      	bx	lr
 8006a3e:	2000      	movs	r0, #0
 8006a40:	4770      	bx	lr
 8006a42:	2020      	movs	r0, #32
 8006a44:	4770      	bx	lr
	...

08006a48 <__i2b>:
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	f7ff febb 	bl	80067c8 <_Balloc>
 8006a52:	4602      	mov	r2, r0
 8006a54:	b928      	cbnz	r0, 8006a62 <__i2b+0x1a>
 8006a56:	f240 1145 	movw	r1, #325	; 0x145
 8006a5a:	4b04      	ldr	r3, [pc, #16]	; (8006a6c <__i2b+0x24>)
 8006a5c:	4804      	ldr	r0, [pc, #16]	; (8006a70 <__i2b+0x28>)
 8006a5e:	f001 fbbf 	bl	80081e0 <__assert_func>
 8006a62:	2301      	movs	r3, #1
 8006a64:	6144      	str	r4, [r0, #20]
 8006a66:	6103      	str	r3, [r0, #16]
 8006a68:	bd10      	pop	{r4, pc}
 8006a6a:	bf00      	nop
 8006a6c:	0800b650 	.word	0x0800b650
 8006a70:	0800b661 	.word	0x0800b661

08006a74 <__multiply>:
 8006a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a78:	4691      	mov	r9, r2
 8006a7a:	690a      	ldr	r2, [r1, #16]
 8006a7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a80:	460c      	mov	r4, r1
 8006a82:	429a      	cmp	r2, r3
 8006a84:	bfbe      	ittt	lt
 8006a86:	460b      	movlt	r3, r1
 8006a88:	464c      	movlt	r4, r9
 8006a8a:	4699      	movlt	r9, r3
 8006a8c:	6927      	ldr	r7, [r4, #16]
 8006a8e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a92:	68a3      	ldr	r3, [r4, #8]
 8006a94:	6861      	ldr	r1, [r4, #4]
 8006a96:	eb07 060a 	add.w	r6, r7, sl
 8006a9a:	42b3      	cmp	r3, r6
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	bfb8      	it	lt
 8006aa0:	3101      	addlt	r1, #1
 8006aa2:	f7ff fe91 	bl	80067c8 <_Balloc>
 8006aa6:	b930      	cbnz	r0, 8006ab6 <__multiply+0x42>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006aae:	4b43      	ldr	r3, [pc, #268]	; (8006bbc <__multiply+0x148>)
 8006ab0:	4843      	ldr	r0, [pc, #268]	; (8006bc0 <__multiply+0x14c>)
 8006ab2:	f001 fb95 	bl	80081e0 <__assert_func>
 8006ab6:	f100 0514 	add.w	r5, r0, #20
 8006aba:	462b      	mov	r3, r5
 8006abc:	2200      	movs	r2, #0
 8006abe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ac2:	4543      	cmp	r3, r8
 8006ac4:	d321      	bcc.n	8006b0a <__multiply+0x96>
 8006ac6:	f104 0314 	add.w	r3, r4, #20
 8006aca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ace:	f109 0314 	add.w	r3, r9, #20
 8006ad2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ad6:	9202      	str	r2, [sp, #8]
 8006ad8:	1b3a      	subs	r2, r7, r4
 8006ada:	3a15      	subs	r2, #21
 8006adc:	f022 0203 	bic.w	r2, r2, #3
 8006ae0:	3204      	adds	r2, #4
 8006ae2:	f104 0115 	add.w	r1, r4, #21
 8006ae6:	428f      	cmp	r7, r1
 8006ae8:	bf38      	it	cc
 8006aea:	2204      	movcc	r2, #4
 8006aec:	9201      	str	r2, [sp, #4]
 8006aee:	9a02      	ldr	r2, [sp, #8]
 8006af0:	9303      	str	r3, [sp, #12]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d80c      	bhi.n	8006b10 <__multiply+0x9c>
 8006af6:	2e00      	cmp	r6, #0
 8006af8:	dd03      	ble.n	8006b02 <__multiply+0x8e>
 8006afa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d05a      	beq.n	8006bb8 <__multiply+0x144>
 8006b02:	6106      	str	r6, [r0, #16]
 8006b04:	b005      	add	sp, #20
 8006b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0a:	f843 2b04 	str.w	r2, [r3], #4
 8006b0e:	e7d8      	b.n	8006ac2 <__multiply+0x4e>
 8006b10:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b14:	f1ba 0f00 	cmp.w	sl, #0
 8006b18:	d023      	beq.n	8006b62 <__multiply+0xee>
 8006b1a:	46a9      	mov	r9, r5
 8006b1c:	f04f 0c00 	mov.w	ip, #0
 8006b20:	f104 0e14 	add.w	lr, r4, #20
 8006b24:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b28:	f8d9 1000 	ldr.w	r1, [r9]
 8006b2c:	fa1f fb82 	uxth.w	fp, r2
 8006b30:	b289      	uxth	r1, r1
 8006b32:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b36:	4461      	add	r1, ip
 8006b38:	f8d9 c000 	ldr.w	ip, [r9]
 8006b3c:	0c12      	lsrs	r2, r2, #16
 8006b3e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006b42:	fb0a c202 	mla	r2, sl, r2, ip
 8006b46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b4a:	b289      	uxth	r1, r1
 8006b4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b50:	4577      	cmp	r7, lr
 8006b52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b56:	f849 1b04 	str.w	r1, [r9], #4
 8006b5a:	d8e3      	bhi.n	8006b24 <__multiply+0xb0>
 8006b5c:	9a01      	ldr	r2, [sp, #4]
 8006b5e:	f845 c002 	str.w	ip, [r5, r2]
 8006b62:	9a03      	ldr	r2, [sp, #12]
 8006b64:	3304      	adds	r3, #4
 8006b66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b6a:	f1b9 0f00 	cmp.w	r9, #0
 8006b6e:	d021      	beq.n	8006bb4 <__multiply+0x140>
 8006b70:	46ae      	mov	lr, r5
 8006b72:	f04f 0a00 	mov.w	sl, #0
 8006b76:	6829      	ldr	r1, [r5, #0]
 8006b78:	f104 0c14 	add.w	ip, r4, #20
 8006b7c:	f8bc b000 	ldrh.w	fp, [ip]
 8006b80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b84:	b289      	uxth	r1, r1
 8006b86:	fb09 220b 	mla	r2, r9, fp, r2
 8006b8a:	4452      	add	r2, sl
 8006b8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b90:	f84e 1b04 	str.w	r1, [lr], #4
 8006b94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b9c:	f8be 1000 	ldrh.w	r1, [lr]
 8006ba0:	4567      	cmp	r7, ip
 8006ba2:	fb09 110a 	mla	r1, r9, sl, r1
 8006ba6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006baa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bae:	d8e5      	bhi.n	8006b7c <__multiply+0x108>
 8006bb0:	9a01      	ldr	r2, [sp, #4]
 8006bb2:	50a9      	str	r1, [r5, r2]
 8006bb4:	3504      	adds	r5, #4
 8006bb6:	e79a      	b.n	8006aee <__multiply+0x7a>
 8006bb8:	3e01      	subs	r6, #1
 8006bba:	e79c      	b.n	8006af6 <__multiply+0x82>
 8006bbc:	0800b650 	.word	0x0800b650
 8006bc0:	0800b661 	.word	0x0800b661

08006bc4 <__pow5mult>:
 8006bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc8:	4615      	mov	r5, r2
 8006bca:	f012 0203 	ands.w	r2, r2, #3
 8006bce:	4606      	mov	r6, r0
 8006bd0:	460f      	mov	r7, r1
 8006bd2:	d007      	beq.n	8006be4 <__pow5mult+0x20>
 8006bd4:	4c25      	ldr	r4, [pc, #148]	; (8006c6c <__pow5mult+0xa8>)
 8006bd6:	3a01      	subs	r2, #1
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bde:	f7ff fe55 	bl	800688c <__multadd>
 8006be2:	4607      	mov	r7, r0
 8006be4:	10ad      	asrs	r5, r5, #2
 8006be6:	d03d      	beq.n	8006c64 <__pow5mult+0xa0>
 8006be8:	69f4      	ldr	r4, [r6, #28]
 8006bea:	b97c      	cbnz	r4, 8006c0c <__pow5mult+0x48>
 8006bec:	2010      	movs	r0, #16
 8006bee:	f7ff fd37 	bl	8006660 <malloc>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	61f0      	str	r0, [r6, #28]
 8006bf6:	b928      	cbnz	r0, 8006c04 <__pow5mult+0x40>
 8006bf8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006bfc:	4b1c      	ldr	r3, [pc, #112]	; (8006c70 <__pow5mult+0xac>)
 8006bfe:	481d      	ldr	r0, [pc, #116]	; (8006c74 <__pow5mult+0xb0>)
 8006c00:	f001 faee 	bl	80081e0 <__assert_func>
 8006c04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c08:	6004      	str	r4, [r0, #0]
 8006c0a:	60c4      	str	r4, [r0, #12]
 8006c0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006c10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c14:	b94c      	cbnz	r4, 8006c2a <__pow5mult+0x66>
 8006c16:	f240 2171 	movw	r1, #625	; 0x271
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f7ff ff14 	bl	8006a48 <__i2b>
 8006c20:	2300      	movs	r3, #0
 8006c22:	4604      	mov	r4, r0
 8006c24:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c28:	6003      	str	r3, [r0, #0]
 8006c2a:	f04f 0900 	mov.w	r9, #0
 8006c2e:	07eb      	lsls	r3, r5, #31
 8006c30:	d50a      	bpl.n	8006c48 <__pow5mult+0x84>
 8006c32:	4639      	mov	r1, r7
 8006c34:	4622      	mov	r2, r4
 8006c36:	4630      	mov	r0, r6
 8006c38:	f7ff ff1c 	bl	8006a74 <__multiply>
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	4639      	mov	r1, r7
 8006c40:	4630      	mov	r0, r6
 8006c42:	f7ff fe01 	bl	8006848 <_Bfree>
 8006c46:	4647      	mov	r7, r8
 8006c48:	106d      	asrs	r5, r5, #1
 8006c4a:	d00b      	beq.n	8006c64 <__pow5mult+0xa0>
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	b938      	cbnz	r0, 8006c60 <__pow5mult+0x9c>
 8006c50:	4622      	mov	r2, r4
 8006c52:	4621      	mov	r1, r4
 8006c54:	4630      	mov	r0, r6
 8006c56:	f7ff ff0d 	bl	8006a74 <__multiply>
 8006c5a:	6020      	str	r0, [r4, #0]
 8006c5c:	f8c0 9000 	str.w	r9, [r0]
 8006c60:	4604      	mov	r4, r0
 8006c62:	e7e4      	b.n	8006c2e <__pow5mult+0x6a>
 8006c64:	4638      	mov	r0, r7
 8006c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c6a:	bf00      	nop
 8006c6c:	0800b7b0 	.word	0x0800b7b0
 8006c70:	0800b5e1 	.word	0x0800b5e1
 8006c74:	0800b661 	.word	0x0800b661

08006c78 <__lshift>:
 8006c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c7c:	460c      	mov	r4, r1
 8006c7e:	4607      	mov	r7, r0
 8006c80:	4691      	mov	r9, r2
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	6849      	ldr	r1, [r1, #4]
 8006c86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c8a:	68a3      	ldr	r3, [r4, #8]
 8006c8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c90:	f108 0601 	add.w	r6, r8, #1
 8006c94:	42b3      	cmp	r3, r6
 8006c96:	db0b      	blt.n	8006cb0 <__lshift+0x38>
 8006c98:	4638      	mov	r0, r7
 8006c9a:	f7ff fd95 	bl	80067c8 <_Balloc>
 8006c9e:	4605      	mov	r5, r0
 8006ca0:	b948      	cbnz	r0, 8006cb6 <__lshift+0x3e>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006ca8:	4b27      	ldr	r3, [pc, #156]	; (8006d48 <__lshift+0xd0>)
 8006caa:	4828      	ldr	r0, [pc, #160]	; (8006d4c <__lshift+0xd4>)
 8006cac:	f001 fa98 	bl	80081e0 <__assert_func>
 8006cb0:	3101      	adds	r1, #1
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	e7ee      	b.n	8006c94 <__lshift+0x1c>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f100 0114 	add.w	r1, r0, #20
 8006cbc:	f100 0210 	add.w	r2, r0, #16
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	4553      	cmp	r3, sl
 8006cc4:	db33      	blt.n	8006d2e <__lshift+0xb6>
 8006cc6:	6920      	ldr	r0, [r4, #16]
 8006cc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ccc:	f104 0314 	add.w	r3, r4, #20
 8006cd0:	f019 091f 	ands.w	r9, r9, #31
 8006cd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cdc:	d02b      	beq.n	8006d36 <__lshift+0xbe>
 8006cde:	468a      	mov	sl, r1
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f1c9 0e20 	rsb	lr, r9, #32
 8006ce6:	6818      	ldr	r0, [r3, #0]
 8006ce8:	fa00 f009 	lsl.w	r0, r0, r9
 8006cec:	4310      	orrs	r0, r2
 8006cee:	f84a 0b04 	str.w	r0, [sl], #4
 8006cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cf6:	459c      	cmp	ip, r3
 8006cf8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006cfc:	d8f3      	bhi.n	8006ce6 <__lshift+0x6e>
 8006cfe:	ebac 0304 	sub.w	r3, ip, r4
 8006d02:	3b15      	subs	r3, #21
 8006d04:	f023 0303 	bic.w	r3, r3, #3
 8006d08:	3304      	adds	r3, #4
 8006d0a:	f104 0015 	add.w	r0, r4, #21
 8006d0e:	4584      	cmp	ip, r0
 8006d10:	bf38      	it	cc
 8006d12:	2304      	movcc	r3, #4
 8006d14:	50ca      	str	r2, [r1, r3]
 8006d16:	b10a      	cbz	r2, 8006d1c <__lshift+0xa4>
 8006d18:	f108 0602 	add.w	r6, r8, #2
 8006d1c:	3e01      	subs	r6, #1
 8006d1e:	4638      	mov	r0, r7
 8006d20:	4621      	mov	r1, r4
 8006d22:	612e      	str	r6, [r5, #16]
 8006d24:	f7ff fd90 	bl	8006848 <_Bfree>
 8006d28:	4628      	mov	r0, r5
 8006d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d32:	3301      	adds	r3, #1
 8006d34:	e7c5      	b.n	8006cc2 <__lshift+0x4a>
 8006d36:	3904      	subs	r1, #4
 8006d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d3c:	459c      	cmp	ip, r3
 8006d3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d42:	d8f9      	bhi.n	8006d38 <__lshift+0xc0>
 8006d44:	e7ea      	b.n	8006d1c <__lshift+0xa4>
 8006d46:	bf00      	nop
 8006d48:	0800b650 	.word	0x0800b650
 8006d4c:	0800b661 	.word	0x0800b661

08006d50 <__mcmp>:
 8006d50:	4603      	mov	r3, r0
 8006d52:	690a      	ldr	r2, [r1, #16]
 8006d54:	6900      	ldr	r0, [r0, #16]
 8006d56:	b530      	push	{r4, r5, lr}
 8006d58:	1a80      	subs	r0, r0, r2
 8006d5a:	d10d      	bne.n	8006d78 <__mcmp+0x28>
 8006d5c:	3314      	adds	r3, #20
 8006d5e:	3114      	adds	r1, #20
 8006d60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d70:	4295      	cmp	r5, r2
 8006d72:	d002      	beq.n	8006d7a <__mcmp+0x2a>
 8006d74:	d304      	bcc.n	8006d80 <__mcmp+0x30>
 8006d76:	2001      	movs	r0, #1
 8006d78:	bd30      	pop	{r4, r5, pc}
 8006d7a:	42a3      	cmp	r3, r4
 8006d7c:	d3f4      	bcc.n	8006d68 <__mcmp+0x18>
 8006d7e:	e7fb      	b.n	8006d78 <__mcmp+0x28>
 8006d80:	f04f 30ff 	mov.w	r0, #4294967295
 8006d84:	e7f8      	b.n	8006d78 <__mcmp+0x28>
	...

08006d88 <__mdiff>:
 8006d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8c:	460d      	mov	r5, r1
 8006d8e:	4607      	mov	r7, r0
 8006d90:	4611      	mov	r1, r2
 8006d92:	4628      	mov	r0, r5
 8006d94:	4614      	mov	r4, r2
 8006d96:	f7ff ffdb 	bl	8006d50 <__mcmp>
 8006d9a:	1e06      	subs	r6, r0, #0
 8006d9c:	d111      	bne.n	8006dc2 <__mdiff+0x3a>
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4638      	mov	r0, r7
 8006da2:	f7ff fd11 	bl	80067c8 <_Balloc>
 8006da6:	4602      	mov	r2, r0
 8006da8:	b928      	cbnz	r0, 8006db6 <__mdiff+0x2e>
 8006daa:	f240 2137 	movw	r1, #567	; 0x237
 8006dae:	4b3a      	ldr	r3, [pc, #232]	; (8006e98 <__mdiff+0x110>)
 8006db0:	483a      	ldr	r0, [pc, #232]	; (8006e9c <__mdiff+0x114>)
 8006db2:	f001 fa15 	bl	80081e0 <__assert_func>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc2:	bfa4      	itt	ge
 8006dc4:	4623      	movge	r3, r4
 8006dc6:	462c      	movge	r4, r5
 8006dc8:	4638      	mov	r0, r7
 8006dca:	6861      	ldr	r1, [r4, #4]
 8006dcc:	bfa6      	itte	ge
 8006dce:	461d      	movge	r5, r3
 8006dd0:	2600      	movge	r6, #0
 8006dd2:	2601      	movlt	r6, #1
 8006dd4:	f7ff fcf8 	bl	80067c8 <_Balloc>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	b918      	cbnz	r0, 8006de4 <__mdiff+0x5c>
 8006ddc:	f240 2145 	movw	r1, #581	; 0x245
 8006de0:	4b2d      	ldr	r3, [pc, #180]	; (8006e98 <__mdiff+0x110>)
 8006de2:	e7e5      	b.n	8006db0 <__mdiff+0x28>
 8006de4:	f102 0814 	add.w	r8, r2, #20
 8006de8:	46c2      	mov	sl, r8
 8006dea:	f04f 0c00 	mov.w	ip, #0
 8006dee:	6927      	ldr	r7, [r4, #16]
 8006df0:	60c6      	str	r6, [r0, #12]
 8006df2:	692e      	ldr	r6, [r5, #16]
 8006df4:	f104 0014 	add.w	r0, r4, #20
 8006df8:	f105 0914 	add.w	r9, r5, #20
 8006dfc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006e00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e04:	3410      	adds	r4, #16
 8006e06:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006e0a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e0e:	fa1f f18b 	uxth.w	r1, fp
 8006e12:	4461      	add	r1, ip
 8006e14:	fa1f fc83 	uxth.w	ip, r3
 8006e18:	0c1b      	lsrs	r3, r3, #16
 8006e1a:	eba1 010c 	sub.w	r1, r1, ip
 8006e1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e22:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006e26:	b289      	uxth	r1, r1
 8006e28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006e2c:	454e      	cmp	r6, r9
 8006e2e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006e32:	f84a 1b04 	str.w	r1, [sl], #4
 8006e36:	d8e6      	bhi.n	8006e06 <__mdiff+0x7e>
 8006e38:	1b73      	subs	r3, r6, r5
 8006e3a:	3b15      	subs	r3, #21
 8006e3c:	f023 0303 	bic.w	r3, r3, #3
 8006e40:	3515      	adds	r5, #21
 8006e42:	3304      	adds	r3, #4
 8006e44:	42ae      	cmp	r6, r5
 8006e46:	bf38      	it	cc
 8006e48:	2304      	movcc	r3, #4
 8006e4a:	4418      	add	r0, r3
 8006e4c:	4443      	add	r3, r8
 8006e4e:	461e      	mov	r6, r3
 8006e50:	4605      	mov	r5, r0
 8006e52:	4575      	cmp	r5, lr
 8006e54:	d30e      	bcc.n	8006e74 <__mdiff+0xec>
 8006e56:	f10e 0103 	add.w	r1, lr, #3
 8006e5a:	1a09      	subs	r1, r1, r0
 8006e5c:	f021 0103 	bic.w	r1, r1, #3
 8006e60:	3803      	subs	r0, #3
 8006e62:	4586      	cmp	lr, r0
 8006e64:	bf38      	it	cc
 8006e66:	2100      	movcc	r1, #0
 8006e68:	440b      	add	r3, r1
 8006e6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e6e:	b189      	cbz	r1, 8006e94 <__mdiff+0x10c>
 8006e70:	6117      	str	r7, [r2, #16]
 8006e72:	e7a3      	b.n	8006dbc <__mdiff+0x34>
 8006e74:	f855 8b04 	ldr.w	r8, [r5], #4
 8006e78:	fa1f f188 	uxth.w	r1, r8
 8006e7c:	4461      	add	r1, ip
 8006e7e:	140c      	asrs	r4, r1, #16
 8006e80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e84:	b289      	uxth	r1, r1
 8006e86:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006e8a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006e8e:	f846 1b04 	str.w	r1, [r6], #4
 8006e92:	e7de      	b.n	8006e52 <__mdiff+0xca>
 8006e94:	3f01      	subs	r7, #1
 8006e96:	e7e8      	b.n	8006e6a <__mdiff+0xe2>
 8006e98:	0800b650 	.word	0x0800b650
 8006e9c:	0800b661 	.word	0x0800b661

08006ea0 <__ulp>:
 8006ea0:	4b0e      	ldr	r3, [pc, #56]	; (8006edc <__ulp+0x3c>)
 8006ea2:	400b      	ands	r3, r1
 8006ea4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	dc08      	bgt.n	8006ebe <__ulp+0x1e>
 8006eac:	425b      	negs	r3, r3
 8006eae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006eb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006eb6:	da04      	bge.n	8006ec2 <__ulp+0x22>
 8006eb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ebc:	4113      	asrs	r3, r2
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	e008      	b.n	8006ed4 <__ulp+0x34>
 8006ec2:	f1a2 0314 	sub.w	r3, r2, #20
 8006ec6:	2b1e      	cmp	r3, #30
 8006ec8:	bfd6      	itet	le
 8006eca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006ece:	2201      	movgt	r2, #1
 8006ed0:	40da      	lsrle	r2, r3
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	7ff00000 	.word	0x7ff00000

08006ee0 <__b2d>:
 8006ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee2:	6905      	ldr	r5, [r0, #16]
 8006ee4:	f100 0714 	add.w	r7, r0, #20
 8006ee8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006eec:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006ef0:	1f2e      	subs	r6, r5, #4
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f7ff fd5a 	bl	80069ac <__hi0bits>
 8006ef8:	f1c0 0220 	rsb	r2, r0, #32
 8006efc:	280a      	cmp	r0, #10
 8006efe:	4603      	mov	r3, r0
 8006f00:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006f6c <__b2d+0x8c>
 8006f04:	600a      	str	r2, [r1, #0]
 8006f06:	dc12      	bgt.n	8006f2e <__b2d+0x4e>
 8006f08:	f1c0 0e0b 	rsb	lr, r0, #11
 8006f0c:	fa24 f20e 	lsr.w	r2, r4, lr
 8006f10:	42b7      	cmp	r7, r6
 8006f12:	ea42 010c 	orr.w	r1, r2, ip
 8006f16:	bf2c      	ite	cs
 8006f18:	2200      	movcs	r2, #0
 8006f1a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006f1e:	3315      	adds	r3, #21
 8006f20:	fa04 f303 	lsl.w	r3, r4, r3
 8006f24:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f2e:	42b7      	cmp	r7, r6
 8006f30:	bf2e      	itee	cs
 8006f32:	2200      	movcs	r2, #0
 8006f34:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006f38:	f1a5 0608 	subcc.w	r6, r5, #8
 8006f3c:	3b0b      	subs	r3, #11
 8006f3e:	d012      	beq.n	8006f66 <__b2d+0x86>
 8006f40:	f1c3 0520 	rsb	r5, r3, #32
 8006f44:	fa22 f105 	lsr.w	r1, r2, r5
 8006f48:	409c      	lsls	r4, r3
 8006f4a:	430c      	orrs	r4, r1
 8006f4c:	42be      	cmp	r6, r7
 8006f4e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006f52:	bf94      	ite	ls
 8006f54:	2400      	movls	r4, #0
 8006f56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006f5a:	409a      	lsls	r2, r3
 8006f5c:	40ec      	lsrs	r4, r5
 8006f5e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006f62:	4322      	orrs	r2, r4
 8006f64:	e7e1      	b.n	8006f2a <__b2d+0x4a>
 8006f66:	ea44 010c 	orr.w	r1, r4, ip
 8006f6a:	e7de      	b.n	8006f2a <__b2d+0x4a>
 8006f6c:	3ff00000 	.word	0x3ff00000

08006f70 <__d2b>:
 8006f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f72:	2101      	movs	r1, #1
 8006f74:	4617      	mov	r7, r2
 8006f76:	461c      	mov	r4, r3
 8006f78:	9e08      	ldr	r6, [sp, #32]
 8006f7a:	f7ff fc25 	bl	80067c8 <_Balloc>
 8006f7e:	4605      	mov	r5, r0
 8006f80:	b930      	cbnz	r0, 8006f90 <__d2b+0x20>
 8006f82:	4602      	mov	r2, r0
 8006f84:	f240 310f 	movw	r1, #783	; 0x30f
 8006f88:	4b22      	ldr	r3, [pc, #136]	; (8007014 <__d2b+0xa4>)
 8006f8a:	4823      	ldr	r0, [pc, #140]	; (8007018 <__d2b+0xa8>)
 8006f8c:	f001 f928 	bl	80081e0 <__assert_func>
 8006f90:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006f94:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006f98:	bb24      	cbnz	r4, 8006fe4 <__d2b+0x74>
 8006f9a:	2f00      	cmp	r7, #0
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	d026      	beq.n	8006fee <__d2b+0x7e>
 8006fa0:	4668      	mov	r0, sp
 8006fa2:	9700      	str	r7, [sp, #0]
 8006fa4:	f7ff fd22 	bl	80069ec <__lo0bits>
 8006fa8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fac:	b1e8      	cbz	r0, 8006fea <__d2b+0x7a>
 8006fae:	f1c0 0320 	rsb	r3, r0, #32
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	40c2      	lsrs	r2, r0
 8006fba:	616b      	str	r3, [r5, #20]
 8006fbc:	9201      	str	r2, [sp, #4]
 8006fbe:	9b01      	ldr	r3, [sp, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	bf14      	ite	ne
 8006fc4:	2102      	movne	r1, #2
 8006fc6:	2101      	moveq	r1, #1
 8006fc8:	61ab      	str	r3, [r5, #24]
 8006fca:	6129      	str	r1, [r5, #16]
 8006fcc:	b1bc      	cbz	r4, 8006ffe <__d2b+0x8e>
 8006fce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006fd2:	4404      	add	r4, r0
 8006fd4:	6034      	str	r4, [r6, #0]
 8006fd6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fdc:	6018      	str	r0, [r3, #0]
 8006fde:	4628      	mov	r0, r5
 8006fe0:	b003      	add	sp, #12
 8006fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fe8:	e7d7      	b.n	8006f9a <__d2b+0x2a>
 8006fea:	6169      	str	r1, [r5, #20]
 8006fec:	e7e7      	b.n	8006fbe <__d2b+0x4e>
 8006fee:	a801      	add	r0, sp, #4
 8006ff0:	f7ff fcfc 	bl	80069ec <__lo0bits>
 8006ff4:	9b01      	ldr	r3, [sp, #4]
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	616b      	str	r3, [r5, #20]
 8006ffa:	3020      	adds	r0, #32
 8006ffc:	e7e5      	b.n	8006fca <__d2b+0x5a>
 8006ffe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007002:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007006:	6030      	str	r0, [r6, #0]
 8007008:	6918      	ldr	r0, [r3, #16]
 800700a:	f7ff fccf 	bl	80069ac <__hi0bits>
 800700e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007012:	e7e2      	b.n	8006fda <__d2b+0x6a>
 8007014:	0800b650 	.word	0x0800b650
 8007018:	0800b661 	.word	0x0800b661

0800701c <__ratio>:
 800701c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007020:	4688      	mov	r8, r1
 8007022:	4669      	mov	r1, sp
 8007024:	4681      	mov	r9, r0
 8007026:	f7ff ff5b 	bl	8006ee0 <__b2d>
 800702a:	460f      	mov	r7, r1
 800702c:	4604      	mov	r4, r0
 800702e:	460d      	mov	r5, r1
 8007030:	4640      	mov	r0, r8
 8007032:	a901      	add	r1, sp, #4
 8007034:	f7ff ff54 	bl	8006ee0 <__b2d>
 8007038:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800703c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007040:	468b      	mov	fp, r1
 8007042:	eba3 0c02 	sub.w	ip, r3, r2
 8007046:	e9dd 3200 	ldrd	r3, r2, [sp]
 800704a:	1a9b      	subs	r3, r3, r2
 800704c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007050:	2b00      	cmp	r3, #0
 8007052:	bfd5      	itete	le
 8007054:	460a      	movle	r2, r1
 8007056:	462a      	movgt	r2, r5
 8007058:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800705c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007060:	bfd8      	it	le
 8007062:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007066:	465b      	mov	r3, fp
 8007068:	4602      	mov	r2, r0
 800706a:	4639      	mov	r1, r7
 800706c:	4620      	mov	r0, r4
 800706e:	f7f9 fb5d 	bl	800072c <__aeabi_ddiv>
 8007072:	b003      	add	sp, #12
 8007074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007078 <__copybits>:
 8007078:	3901      	subs	r1, #1
 800707a:	b570      	push	{r4, r5, r6, lr}
 800707c:	1149      	asrs	r1, r1, #5
 800707e:	6914      	ldr	r4, [r2, #16]
 8007080:	3101      	adds	r1, #1
 8007082:	f102 0314 	add.w	r3, r2, #20
 8007086:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800708a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800708e:	1f05      	subs	r5, r0, #4
 8007090:	42a3      	cmp	r3, r4
 8007092:	d30c      	bcc.n	80070ae <__copybits+0x36>
 8007094:	1aa3      	subs	r3, r4, r2
 8007096:	3b11      	subs	r3, #17
 8007098:	f023 0303 	bic.w	r3, r3, #3
 800709c:	3211      	adds	r2, #17
 800709e:	42a2      	cmp	r2, r4
 80070a0:	bf88      	it	hi
 80070a2:	2300      	movhi	r3, #0
 80070a4:	4418      	add	r0, r3
 80070a6:	2300      	movs	r3, #0
 80070a8:	4288      	cmp	r0, r1
 80070aa:	d305      	bcc.n	80070b8 <__copybits+0x40>
 80070ac:	bd70      	pop	{r4, r5, r6, pc}
 80070ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80070b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80070b6:	e7eb      	b.n	8007090 <__copybits+0x18>
 80070b8:	f840 3b04 	str.w	r3, [r0], #4
 80070bc:	e7f4      	b.n	80070a8 <__copybits+0x30>

080070be <__any_on>:
 80070be:	f100 0214 	add.w	r2, r0, #20
 80070c2:	6900      	ldr	r0, [r0, #16]
 80070c4:	114b      	asrs	r3, r1, #5
 80070c6:	4298      	cmp	r0, r3
 80070c8:	b510      	push	{r4, lr}
 80070ca:	db11      	blt.n	80070f0 <__any_on+0x32>
 80070cc:	dd0a      	ble.n	80070e4 <__any_on+0x26>
 80070ce:	f011 011f 	ands.w	r1, r1, #31
 80070d2:	d007      	beq.n	80070e4 <__any_on+0x26>
 80070d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80070d8:	fa24 f001 	lsr.w	r0, r4, r1
 80070dc:	fa00 f101 	lsl.w	r1, r0, r1
 80070e0:	428c      	cmp	r4, r1
 80070e2:	d10b      	bne.n	80070fc <__any_on+0x3e>
 80070e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d803      	bhi.n	80070f4 <__any_on+0x36>
 80070ec:	2000      	movs	r0, #0
 80070ee:	bd10      	pop	{r4, pc}
 80070f0:	4603      	mov	r3, r0
 80070f2:	e7f7      	b.n	80070e4 <__any_on+0x26>
 80070f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80070f8:	2900      	cmp	r1, #0
 80070fa:	d0f5      	beq.n	80070e8 <__any_on+0x2a>
 80070fc:	2001      	movs	r0, #1
 80070fe:	e7f6      	b.n	80070ee <__any_on+0x30>

08007100 <sulp>:
 8007100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007104:	460f      	mov	r7, r1
 8007106:	4690      	mov	r8, r2
 8007108:	f7ff feca 	bl	8006ea0 <__ulp>
 800710c:	4604      	mov	r4, r0
 800710e:	460d      	mov	r5, r1
 8007110:	f1b8 0f00 	cmp.w	r8, #0
 8007114:	d011      	beq.n	800713a <sulp+0x3a>
 8007116:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800711a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800711e:	2b00      	cmp	r3, #0
 8007120:	dd0b      	ble.n	800713a <sulp+0x3a>
 8007122:	2400      	movs	r4, #0
 8007124:	051b      	lsls	r3, r3, #20
 8007126:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800712a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800712e:	4622      	mov	r2, r4
 8007130:	462b      	mov	r3, r5
 8007132:	f7f9 f9d1 	bl	80004d8 <__aeabi_dmul>
 8007136:	4604      	mov	r4, r0
 8007138:	460d      	mov	r5, r1
 800713a:	4620      	mov	r0, r4
 800713c:	4629      	mov	r1, r5
 800713e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007142:	0000      	movs	r0, r0
 8007144:	0000      	movs	r0, r0
	...

08007148 <_strtod_l>:
 8007148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	b09f      	sub	sp, #124	; 0x7c
 800714e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007150:	2200      	movs	r2, #0
 8007152:	4604      	mov	r4, r0
 8007154:	921a      	str	r2, [sp, #104]	; 0x68
 8007156:	460d      	mov	r5, r1
 8007158:	f04f 0800 	mov.w	r8, #0
 800715c:	f04f 0900 	mov.w	r9, #0
 8007160:	460a      	mov	r2, r1
 8007162:	9219      	str	r2, [sp, #100]	; 0x64
 8007164:	7811      	ldrb	r1, [r2, #0]
 8007166:	292b      	cmp	r1, #43	; 0x2b
 8007168:	d04a      	beq.n	8007200 <_strtod_l+0xb8>
 800716a:	d838      	bhi.n	80071de <_strtod_l+0x96>
 800716c:	290d      	cmp	r1, #13
 800716e:	d832      	bhi.n	80071d6 <_strtod_l+0x8e>
 8007170:	2908      	cmp	r1, #8
 8007172:	d832      	bhi.n	80071da <_strtod_l+0x92>
 8007174:	2900      	cmp	r1, #0
 8007176:	d03b      	beq.n	80071f0 <_strtod_l+0xa8>
 8007178:	2200      	movs	r2, #0
 800717a:	920e      	str	r2, [sp, #56]	; 0x38
 800717c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800717e:	7832      	ldrb	r2, [r6, #0]
 8007180:	2a30      	cmp	r2, #48	; 0x30
 8007182:	f040 80b2 	bne.w	80072ea <_strtod_l+0x1a2>
 8007186:	7872      	ldrb	r2, [r6, #1]
 8007188:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800718c:	2a58      	cmp	r2, #88	; 0x58
 800718e:	d16e      	bne.n	800726e <_strtod_l+0x126>
 8007190:	9302      	str	r3, [sp, #8]
 8007192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007194:	4620      	mov	r0, r4
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	ab1a      	add	r3, sp, #104	; 0x68
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	4a8c      	ldr	r2, [pc, #560]	; (80073d0 <_strtod_l+0x288>)
 800719e:	ab1b      	add	r3, sp, #108	; 0x6c
 80071a0:	a919      	add	r1, sp, #100	; 0x64
 80071a2:	f001 f8b7 	bl	8008314 <__gethex>
 80071a6:	f010 070f 	ands.w	r7, r0, #15
 80071aa:	4605      	mov	r5, r0
 80071ac:	d005      	beq.n	80071ba <_strtod_l+0x72>
 80071ae:	2f06      	cmp	r7, #6
 80071b0:	d128      	bne.n	8007204 <_strtod_l+0xbc>
 80071b2:	2300      	movs	r3, #0
 80071b4:	3601      	adds	r6, #1
 80071b6:	9619      	str	r6, [sp, #100]	; 0x64
 80071b8:	930e      	str	r3, [sp, #56]	; 0x38
 80071ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 85a0 	bne.w	8007d02 <_strtod_l+0xbba>
 80071c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071c4:	b1cb      	cbz	r3, 80071fa <_strtod_l+0xb2>
 80071c6:	4642      	mov	r2, r8
 80071c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071cc:	4610      	mov	r0, r2
 80071ce:	4619      	mov	r1, r3
 80071d0:	b01f      	add	sp, #124	; 0x7c
 80071d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d6:	2920      	cmp	r1, #32
 80071d8:	d1ce      	bne.n	8007178 <_strtod_l+0x30>
 80071da:	3201      	adds	r2, #1
 80071dc:	e7c1      	b.n	8007162 <_strtod_l+0x1a>
 80071de:	292d      	cmp	r1, #45	; 0x2d
 80071e0:	d1ca      	bne.n	8007178 <_strtod_l+0x30>
 80071e2:	2101      	movs	r1, #1
 80071e4:	910e      	str	r1, [sp, #56]	; 0x38
 80071e6:	1c51      	adds	r1, r2, #1
 80071e8:	9119      	str	r1, [sp, #100]	; 0x64
 80071ea:	7852      	ldrb	r2, [r2, #1]
 80071ec:	2a00      	cmp	r2, #0
 80071ee:	d1c5      	bne.n	800717c <_strtod_l+0x34>
 80071f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071f2:	9519      	str	r5, [sp, #100]	; 0x64
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f040 8582 	bne.w	8007cfe <_strtod_l+0xbb6>
 80071fa:	4642      	mov	r2, r8
 80071fc:	464b      	mov	r3, r9
 80071fe:	e7e5      	b.n	80071cc <_strtod_l+0x84>
 8007200:	2100      	movs	r1, #0
 8007202:	e7ef      	b.n	80071e4 <_strtod_l+0x9c>
 8007204:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007206:	b13a      	cbz	r2, 8007218 <_strtod_l+0xd0>
 8007208:	2135      	movs	r1, #53	; 0x35
 800720a:	a81c      	add	r0, sp, #112	; 0x70
 800720c:	f7ff ff34 	bl	8007078 <__copybits>
 8007210:	4620      	mov	r0, r4
 8007212:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007214:	f7ff fb18 	bl	8006848 <_Bfree>
 8007218:	3f01      	subs	r7, #1
 800721a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800721c:	2f04      	cmp	r7, #4
 800721e:	d806      	bhi.n	800722e <_strtod_l+0xe6>
 8007220:	e8df f007 	tbb	[pc, r7]
 8007224:	201d0314 	.word	0x201d0314
 8007228:	14          	.byte	0x14
 8007229:	00          	.byte	0x00
 800722a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800722e:	05e9      	lsls	r1, r5, #23
 8007230:	bf48      	it	mi
 8007232:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007236:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800723a:	0d1b      	lsrs	r3, r3, #20
 800723c:	051b      	lsls	r3, r3, #20
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1bb      	bne.n	80071ba <_strtod_l+0x72>
 8007242:	f7fe fb17 	bl	8005874 <__errno>
 8007246:	2322      	movs	r3, #34	; 0x22
 8007248:	6003      	str	r3, [r0, #0]
 800724a:	e7b6      	b.n	80071ba <_strtod_l+0x72>
 800724c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007250:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007254:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007258:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800725c:	e7e7      	b.n	800722e <_strtod_l+0xe6>
 800725e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80073d4 <_strtod_l+0x28c>
 8007262:	e7e4      	b.n	800722e <_strtod_l+0xe6>
 8007264:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007268:	f04f 38ff 	mov.w	r8, #4294967295
 800726c:	e7df      	b.n	800722e <_strtod_l+0xe6>
 800726e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	9219      	str	r2, [sp, #100]	; 0x64
 8007274:	785b      	ldrb	r3, [r3, #1]
 8007276:	2b30      	cmp	r3, #48	; 0x30
 8007278:	d0f9      	beq.n	800726e <_strtod_l+0x126>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d09d      	beq.n	80071ba <_strtod_l+0x72>
 800727e:	2301      	movs	r3, #1
 8007280:	f04f 0a00 	mov.w	sl, #0
 8007284:	220a      	movs	r2, #10
 8007286:	46d3      	mov	fp, sl
 8007288:	9305      	str	r3, [sp, #20]
 800728a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800728c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007290:	930b      	str	r3, [sp, #44]	; 0x2c
 8007292:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007294:	7806      	ldrb	r6, [r0, #0]
 8007296:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800729a:	b2d9      	uxtb	r1, r3
 800729c:	2909      	cmp	r1, #9
 800729e:	d926      	bls.n	80072ee <_strtod_l+0x1a6>
 80072a0:	2201      	movs	r2, #1
 80072a2:	494d      	ldr	r1, [pc, #308]	; (80073d8 <_strtod_l+0x290>)
 80072a4:	f000 ff66 	bl	8008174 <strncmp>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d030      	beq.n	800730e <_strtod_l+0x1c6>
 80072ac:	2000      	movs	r0, #0
 80072ae:	4632      	mov	r2, r6
 80072b0:	4603      	mov	r3, r0
 80072b2:	465e      	mov	r6, fp
 80072b4:	9008      	str	r0, [sp, #32]
 80072b6:	2a65      	cmp	r2, #101	; 0x65
 80072b8:	d001      	beq.n	80072be <_strtod_l+0x176>
 80072ba:	2a45      	cmp	r2, #69	; 0x45
 80072bc:	d113      	bne.n	80072e6 <_strtod_l+0x19e>
 80072be:	b91e      	cbnz	r6, 80072c8 <_strtod_l+0x180>
 80072c0:	9a05      	ldr	r2, [sp, #20]
 80072c2:	4302      	orrs	r2, r0
 80072c4:	d094      	beq.n	80071f0 <_strtod_l+0xa8>
 80072c6:	2600      	movs	r6, #0
 80072c8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80072ca:	1c6a      	adds	r2, r5, #1
 80072cc:	9219      	str	r2, [sp, #100]	; 0x64
 80072ce:	786a      	ldrb	r2, [r5, #1]
 80072d0:	2a2b      	cmp	r2, #43	; 0x2b
 80072d2:	d074      	beq.n	80073be <_strtod_l+0x276>
 80072d4:	2a2d      	cmp	r2, #45	; 0x2d
 80072d6:	d078      	beq.n	80073ca <_strtod_l+0x282>
 80072d8:	f04f 0c00 	mov.w	ip, #0
 80072dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072e0:	2909      	cmp	r1, #9
 80072e2:	d97f      	bls.n	80073e4 <_strtod_l+0x29c>
 80072e4:	9519      	str	r5, [sp, #100]	; 0x64
 80072e6:	2700      	movs	r7, #0
 80072e8:	e09e      	b.n	8007428 <_strtod_l+0x2e0>
 80072ea:	2300      	movs	r3, #0
 80072ec:	e7c8      	b.n	8007280 <_strtod_l+0x138>
 80072ee:	f1bb 0f08 	cmp.w	fp, #8
 80072f2:	bfd8      	it	le
 80072f4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80072f6:	f100 0001 	add.w	r0, r0, #1
 80072fa:	bfd6      	itet	le
 80072fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007300:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007304:	930a      	strle	r3, [sp, #40]	; 0x28
 8007306:	f10b 0b01 	add.w	fp, fp, #1
 800730a:	9019      	str	r0, [sp, #100]	; 0x64
 800730c:	e7c1      	b.n	8007292 <_strtod_l+0x14a>
 800730e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	9219      	str	r2, [sp, #100]	; 0x64
 8007314:	785a      	ldrb	r2, [r3, #1]
 8007316:	f1bb 0f00 	cmp.w	fp, #0
 800731a:	d037      	beq.n	800738c <_strtod_l+0x244>
 800731c:	465e      	mov	r6, fp
 800731e:	9008      	str	r0, [sp, #32]
 8007320:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007324:	2b09      	cmp	r3, #9
 8007326:	d912      	bls.n	800734e <_strtod_l+0x206>
 8007328:	2301      	movs	r3, #1
 800732a:	e7c4      	b.n	80072b6 <_strtod_l+0x16e>
 800732c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800732e:	3001      	adds	r0, #1
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	9219      	str	r2, [sp, #100]	; 0x64
 8007334:	785a      	ldrb	r2, [r3, #1]
 8007336:	2a30      	cmp	r2, #48	; 0x30
 8007338:	d0f8      	beq.n	800732c <_strtod_l+0x1e4>
 800733a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800733e:	2b08      	cmp	r3, #8
 8007340:	f200 84e4 	bhi.w	8007d0c <_strtod_l+0xbc4>
 8007344:	9008      	str	r0, [sp, #32]
 8007346:	2000      	movs	r0, #0
 8007348:	4606      	mov	r6, r0
 800734a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800734c:	930b      	str	r3, [sp, #44]	; 0x2c
 800734e:	3a30      	subs	r2, #48	; 0x30
 8007350:	f100 0301 	add.w	r3, r0, #1
 8007354:	d014      	beq.n	8007380 <_strtod_l+0x238>
 8007356:	9908      	ldr	r1, [sp, #32]
 8007358:	eb00 0c06 	add.w	ip, r0, r6
 800735c:	4419      	add	r1, r3
 800735e:	9108      	str	r1, [sp, #32]
 8007360:	4633      	mov	r3, r6
 8007362:	210a      	movs	r1, #10
 8007364:	4563      	cmp	r3, ip
 8007366:	d113      	bne.n	8007390 <_strtod_l+0x248>
 8007368:	1833      	adds	r3, r6, r0
 800736a:	2b08      	cmp	r3, #8
 800736c:	f106 0601 	add.w	r6, r6, #1
 8007370:	4406      	add	r6, r0
 8007372:	dc1a      	bgt.n	80073aa <_strtod_l+0x262>
 8007374:	230a      	movs	r3, #10
 8007376:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007378:	fb03 2301 	mla	r3, r3, r1, r2
 800737c:	930a      	str	r3, [sp, #40]	; 0x28
 800737e:	2300      	movs	r3, #0
 8007380:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007382:	4618      	mov	r0, r3
 8007384:	1c51      	adds	r1, r2, #1
 8007386:	9119      	str	r1, [sp, #100]	; 0x64
 8007388:	7852      	ldrb	r2, [r2, #1]
 800738a:	e7c9      	b.n	8007320 <_strtod_l+0x1d8>
 800738c:	4658      	mov	r0, fp
 800738e:	e7d2      	b.n	8007336 <_strtod_l+0x1ee>
 8007390:	2b08      	cmp	r3, #8
 8007392:	f103 0301 	add.w	r3, r3, #1
 8007396:	dc03      	bgt.n	80073a0 <_strtod_l+0x258>
 8007398:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800739a:	434f      	muls	r7, r1
 800739c:	970a      	str	r7, [sp, #40]	; 0x28
 800739e:	e7e1      	b.n	8007364 <_strtod_l+0x21c>
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	bfd8      	it	le
 80073a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80073a8:	e7dc      	b.n	8007364 <_strtod_l+0x21c>
 80073aa:	2e10      	cmp	r6, #16
 80073ac:	bfdc      	itt	le
 80073ae:	230a      	movle	r3, #10
 80073b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80073b4:	e7e3      	b.n	800737e <_strtod_l+0x236>
 80073b6:	2300      	movs	r3, #0
 80073b8:	9308      	str	r3, [sp, #32]
 80073ba:	2301      	movs	r3, #1
 80073bc:	e780      	b.n	80072c0 <_strtod_l+0x178>
 80073be:	f04f 0c00 	mov.w	ip, #0
 80073c2:	1caa      	adds	r2, r5, #2
 80073c4:	9219      	str	r2, [sp, #100]	; 0x64
 80073c6:	78aa      	ldrb	r2, [r5, #2]
 80073c8:	e788      	b.n	80072dc <_strtod_l+0x194>
 80073ca:	f04f 0c01 	mov.w	ip, #1
 80073ce:	e7f8      	b.n	80073c2 <_strtod_l+0x27a>
 80073d0:	0800b7c0 	.word	0x0800b7c0
 80073d4:	7ff00000 	.word	0x7ff00000
 80073d8:	0800b7bc 	.word	0x0800b7bc
 80073dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073de:	1c51      	adds	r1, r2, #1
 80073e0:	9119      	str	r1, [sp, #100]	; 0x64
 80073e2:	7852      	ldrb	r2, [r2, #1]
 80073e4:	2a30      	cmp	r2, #48	; 0x30
 80073e6:	d0f9      	beq.n	80073dc <_strtod_l+0x294>
 80073e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80073ec:	2908      	cmp	r1, #8
 80073ee:	f63f af7a 	bhi.w	80072e6 <_strtod_l+0x19e>
 80073f2:	3a30      	subs	r2, #48	; 0x30
 80073f4:	9209      	str	r2, [sp, #36]	; 0x24
 80073f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073f8:	920c      	str	r2, [sp, #48]	; 0x30
 80073fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073fc:	1c57      	adds	r7, r2, #1
 80073fe:	9719      	str	r7, [sp, #100]	; 0x64
 8007400:	7852      	ldrb	r2, [r2, #1]
 8007402:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007406:	f1be 0f09 	cmp.w	lr, #9
 800740a:	d938      	bls.n	800747e <_strtod_l+0x336>
 800740c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800740e:	1a7f      	subs	r7, r7, r1
 8007410:	2f08      	cmp	r7, #8
 8007412:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007416:	dc03      	bgt.n	8007420 <_strtod_l+0x2d8>
 8007418:	9909      	ldr	r1, [sp, #36]	; 0x24
 800741a:	428f      	cmp	r7, r1
 800741c:	bfa8      	it	ge
 800741e:	460f      	movge	r7, r1
 8007420:	f1bc 0f00 	cmp.w	ip, #0
 8007424:	d000      	beq.n	8007428 <_strtod_l+0x2e0>
 8007426:	427f      	negs	r7, r7
 8007428:	2e00      	cmp	r6, #0
 800742a:	d14f      	bne.n	80074cc <_strtod_l+0x384>
 800742c:	9905      	ldr	r1, [sp, #20]
 800742e:	4301      	orrs	r1, r0
 8007430:	f47f aec3 	bne.w	80071ba <_strtod_l+0x72>
 8007434:	2b00      	cmp	r3, #0
 8007436:	f47f aedb 	bne.w	80071f0 <_strtod_l+0xa8>
 800743a:	2a69      	cmp	r2, #105	; 0x69
 800743c:	d029      	beq.n	8007492 <_strtod_l+0x34a>
 800743e:	dc26      	bgt.n	800748e <_strtod_l+0x346>
 8007440:	2a49      	cmp	r2, #73	; 0x49
 8007442:	d026      	beq.n	8007492 <_strtod_l+0x34a>
 8007444:	2a4e      	cmp	r2, #78	; 0x4e
 8007446:	f47f aed3 	bne.w	80071f0 <_strtod_l+0xa8>
 800744a:	499a      	ldr	r1, [pc, #616]	; (80076b4 <_strtod_l+0x56c>)
 800744c:	a819      	add	r0, sp, #100	; 0x64
 800744e:	f001 f9a3 	bl	8008798 <__match>
 8007452:	2800      	cmp	r0, #0
 8007454:	f43f aecc 	beq.w	80071f0 <_strtod_l+0xa8>
 8007458:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b28      	cmp	r3, #40	; 0x28
 800745e:	d12f      	bne.n	80074c0 <_strtod_l+0x378>
 8007460:	4995      	ldr	r1, [pc, #596]	; (80076b8 <_strtod_l+0x570>)
 8007462:	aa1c      	add	r2, sp, #112	; 0x70
 8007464:	a819      	add	r0, sp, #100	; 0x64
 8007466:	f001 f9ab 	bl	80087c0 <__hexnan>
 800746a:	2805      	cmp	r0, #5
 800746c:	d128      	bne.n	80074c0 <_strtod_l+0x378>
 800746e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007470:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007474:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007478:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800747c:	e69d      	b.n	80071ba <_strtod_l+0x72>
 800747e:	210a      	movs	r1, #10
 8007480:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007482:	fb01 2107 	mla	r1, r1, r7, r2
 8007486:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800748a:	9209      	str	r2, [sp, #36]	; 0x24
 800748c:	e7b5      	b.n	80073fa <_strtod_l+0x2b2>
 800748e:	2a6e      	cmp	r2, #110	; 0x6e
 8007490:	e7d9      	b.n	8007446 <_strtod_l+0x2fe>
 8007492:	498a      	ldr	r1, [pc, #552]	; (80076bc <_strtod_l+0x574>)
 8007494:	a819      	add	r0, sp, #100	; 0x64
 8007496:	f001 f97f 	bl	8008798 <__match>
 800749a:	2800      	cmp	r0, #0
 800749c:	f43f aea8 	beq.w	80071f0 <_strtod_l+0xa8>
 80074a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074a2:	4987      	ldr	r1, [pc, #540]	; (80076c0 <_strtod_l+0x578>)
 80074a4:	3b01      	subs	r3, #1
 80074a6:	a819      	add	r0, sp, #100	; 0x64
 80074a8:	9319      	str	r3, [sp, #100]	; 0x64
 80074aa:	f001 f975 	bl	8008798 <__match>
 80074ae:	b910      	cbnz	r0, 80074b6 <_strtod_l+0x36e>
 80074b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074b2:	3301      	adds	r3, #1
 80074b4:	9319      	str	r3, [sp, #100]	; 0x64
 80074b6:	f04f 0800 	mov.w	r8, #0
 80074ba:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80076c4 <_strtod_l+0x57c>
 80074be:	e67c      	b.n	80071ba <_strtod_l+0x72>
 80074c0:	4881      	ldr	r0, [pc, #516]	; (80076c8 <_strtod_l+0x580>)
 80074c2:	f000 fe87 	bl	80081d4 <nan>
 80074c6:	4680      	mov	r8, r0
 80074c8:	4689      	mov	r9, r1
 80074ca:	e676      	b.n	80071ba <_strtod_l+0x72>
 80074cc:	9b08      	ldr	r3, [sp, #32]
 80074ce:	f1bb 0f00 	cmp.w	fp, #0
 80074d2:	bf08      	it	eq
 80074d4:	46b3      	moveq	fp, r6
 80074d6:	1afb      	subs	r3, r7, r3
 80074d8:	2e10      	cmp	r6, #16
 80074da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074dc:	4635      	mov	r5, r6
 80074de:	9309      	str	r3, [sp, #36]	; 0x24
 80074e0:	bfa8      	it	ge
 80074e2:	2510      	movge	r5, #16
 80074e4:	f7f8 ff7e 	bl	80003e4 <__aeabi_ui2d>
 80074e8:	2e09      	cmp	r6, #9
 80074ea:	4680      	mov	r8, r0
 80074ec:	4689      	mov	r9, r1
 80074ee:	dd13      	ble.n	8007518 <_strtod_l+0x3d0>
 80074f0:	4b76      	ldr	r3, [pc, #472]	; (80076cc <_strtod_l+0x584>)
 80074f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80074f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074fa:	f7f8 ffed 	bl	80004d8 <__aeabi_dmul>
 80074fe:	4680      	mov	r8, r0
 8007500:	4650      	mov	r0, sl
 8007502:	4689      	mov	r9, r1
 8007504:	f7f8 ff6e 	bl	80003e4 <__aeabi_ui2d>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4640      	mov	r0, r8
 800750e:	4649      	mov	r1, r9
 8007510:	f7f8 fe2c 	bl	800016c <__adddf3>
 8007514:	4680      	mov	r8, r0
 8007516:	4689      	mov	r9, r1
 8007518:	2e0f      	cmp	r6, #15
 800751a:	dc36      	bgt.n	800758a <_strtod_l+0x442>
 800751c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800751e:	2b00      	cmp	r3, #0
 8007520:	f43f ae4b 	beq.w	80071ba <_strtod_l+0x72>
 8007524:	dd22      	ble.n	800756c <_strtod_l+0x424>
 8007526:	2b16      	cmp	r3, #22
 8007528:	dc09      	bgt.n	800753e <_strtod_l+0x3f6>
 800752a:	4968      	ldr	r1, [pc, #416]	; (80076cc <_strtod_l+0x584>)
 800752c:	4642      	mov	r2, r8
 800752e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007532:	464b      	mov	r3, r9
 8007534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007538:	f7f8 ffce 	bl	80004d8 <__aeabi_dmul>
 800753c:	e7c3      	b.n	80074c6 <_strtod_l+0x37e>
 800753e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007540:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007544:	4293      	cmp	r3, r2
 8007546:	db20      	blt.n	800758a <_strtod_l+0x442>
 8007548:	4c60      	ldr	r4, [pc, #384]	; (80076cc <_strtod_l+0x584>)
 800754a:	f1c6 060f 	rsb	r6, r6, #15
 800754e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007552:	4642      	mov	r2, r8
 8007554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007558:	464b      	mov	r3, r9
 800755a:	f7f8 ffbd 	bl	80004d8 <__aeabi_dmul>
 800755e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007560:	1b9e      	subs	r6, r3, r6
 8007562:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007566:	e9d4 2300 	ldrd	r2, r3, [r4]
 800756a:	e7e5      	b.n	8007538 <_strtod_l+0x3f0>
 800756c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800756e:	3316      	adds	r3, #22
 8007570:	db0b      	blt.n	800758a <_strtod_l+0x442>
 8007572:	9b08      	ldr	r3, [sp, #32]
 8007574:	4640      	mov	r0, r8
 8007576:	1bdf      	subs	r7, r3, r7
 8007578:	4b54      	ldr	r3, [pc, #336]	; (80076cc <_strtod_l+0x584>)
 800757a:	4649      	mov	r1, r9
 800757c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007584:	f7f9 f8d2 	bl	800072c <__aeabi_ddiv>
 8007588:	e79d      	b.n	80074c6 <_strtod_l+0x37e>
 800758a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758c:	1b75      	subs	r5, r6, r5
 800758e:	441d      	add	r5, r3
 8007590:	2d00      	cmp	r5, #0
 8007592:	dd70      	ble.n	8007676 <_strtod_l+0x52e>
 8007594:	f015 030f 	ands.w	r3, r5, #15
 8007598:	d00a      	beq.n	80075b0 <_strtod_l+0x468>
 800759a:	494c      	ldr	r1, [pc, #304]	; (80076cc <_strtod_l+0x584>)
 800759c:	4642      	mov	r2, r8
 800759e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075a6:	464b      	mov	r3, r9
 80075a8:	f7f8 ff96 	bl	80004d8 <__aeabi_dmul>
 80075ac:	4680      	mov	r8, r0
 80075ae:	4689      	mov	r9, r1
 80075b0:	f035 050f 	bics.w	r5, r5, #15
 80075b4:	d04d      	beq.n	8007652 <_strtod_l+0x50a>
 80075b6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80075ba:	dd22      	ble.n	8007602 <_strtod_l+0x4ba>
 80075bc:	2600      	movs	r6, #0
 80075be:	46b3      	mov	fp, r6
 80075c0:	960b      	str	r6, [sp, #44]	; 0x2c
 80075c2:	9608      	str	r6, [sp, #32]
 80075c4:	2322      	movs	r3, #34	; 0x22
 80075c6:	f04f 0800 	mov.w	r8, #0
 80075ca:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80076c4 <_strtod_l+0x57c>
 80075ce:	6023      	str	r3, [r4, #0]
 80075d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f43f adf1 	beq.w	80071ba <_strtod_l+0x72>
 80075d8:	4620      	mov	r0, r4
 80075da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80075dc:	f7ff f934 	bl	8006848 <_Bfree>
 80075e0:	4620      	mov	r0, r4
 80075e2:	9908      	ldr	r1, [sp, #32]
 80075e4:	f7ff f930 	bl	8006848 <_Bfree>
 80075e8:	4659      	mov	r1, fp
 80075ea:	4620      	mov	r0, r4
 80075ec:	f7ff f92c 	bl	8006848 <_Bfree>
 80075f0:	4620      	mov	r0, r4
 80075f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075f4:	f7ff f928 	bl	8006848 <_Bfree>
 80075f8:	4631      	mov	r1, r6
 80075fa:	4620      	mov	r0, r4
 80075fc:	f7ff f924 	bl	8006848 <_Bfree>
 8007600:	e5db      	b.n	80071ba <_strtod_l+0x72>
 8007602:	4b33      	ldr	r3, [pc, #204]	; (80076d0 <_strtod_l+0x588>)
 8007604:	4640      	mov	r0, r8
 8007606:	9305      	str	r3, [sp, #20]
 8007608:	2300      	movs	r3, #0
 800760a:	4649      	mov	r1, r9
 800760c:	469a      	mov	sl, r3
 800760e:	112d      	asrs	r5, r5, #4
 8007610:	2d01      	cmp	r5, #1
 8007612:	dc21      	bgt.n	8007658 <_strtod_l+0x510>
 8007614:	b10b      	cbz	r3, 800761a <_strtod_l+0x4d2>
 8007616:	4680      	mov	r8, r0
 8007618:	4689      	mov	r9, r1
 800761a:	492d      	ldr	r1, [pc, #180]	; (80076d0 <_strtod_l+0x588>)
 800761c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007620:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007624:	4642      	mov	r2, r8
 8007626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800762a:	464b      	mov	r3, r9
 800762c:	f7f8 ff54 	bl	80004d8 <__aeabi_dmul>
 8007630:	4b24      	ldr	r3, [pc, #144]	; (80076c4 <_strtod_l+0x57c>)
 8007632:	460a      	mov	r2, r1
 8007634:	400b      	ands	r3, r1
 8007636:	4927      	ldr	r1, [pc, #156]	; (80076d4 <_strtod_l+0x58c>)
 8007638:	4680      	mov	r8, r0
 800763a:	428b      	cmp	r3, r1
 800763c:	d8be      	bhi.n	80075bc <_strtod_l+0x474>
 800763e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007642:	428b      	cmp	r3, r1
 8007644:	bf86      	itte	hi
 8007646:	f04f 38ff 	movhi.w	r8, #4294967295
 800764a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80076d8 <_strtod_l+0x590>
 800764e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007652:	2300      	movs	r3, #0
 8007654:	9305      	str	r3, [sp, #20]
 8007656:	e07b      	b.n	8007750 <_strtod_l+0x608>
 8007658:	07ea      	lsls	r2, r5, #31
 800765a:	d505      	bpl.n	8007668 <_strtod_l+0x520>
 800765c:	9b05      	ldr	r3, [sp, #20]
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	f7f8 ff39 	bl	80004d8 <__aeabi_dmul>
 8007666:	2301      	movs	r3, #1
 8007668:	9a05      	ldr	r2, [sp, #20]
 800766a:	f10a 0a01 	add.w	sl, sl, #1
 800766e:	3208      	adds	r2, #8
 8007670:	106d      	asrs	r5, r5, #1
 8007672:	9205      	str	r2, [sp, #20]
 8007674:	e7cc      	b.n	8007610 <_strtod_l+0x4c8>
 8007676:	d0ec      	beq.n	8007652 <_strtod_l+0x50a>
 8007678:	426d      	negs	r5, r5
 800767a:	f015 020f 	ands.w	r2, r5, #15
 800767e:	d00a      	beq.n	8007696 <_strtod_l+0x54e>
 8007680:	4b12      	ldr	r3, [pc, #72]	; (80076cc <_strtod_l+0x584>)
 8007682:	4640      	mov	r0, r8
 8007684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007688:	4649      	mov	r1, r9
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	f7f9 f84d 	bl	800072c <__aeabi_ddiv>
 8007692:	4680      	mov	r8, r0
 8007694:	4689      	mov	r9, r1
 8007696:	112d      	asrs	r5, r5, #4
 8007698:	d0db      	beq.n	8007652 <_strtod_l+0x50a>
 800769a:	2d1f      	cmp	r5, #31
 800769c:	dd1e      	ble.n	80076dc <_strtod_l+0x594>
 800769e:	2600      	movs	r6, #0
 80076a0:	46b3      	mov	fp, r6
 80076a2:	960b      	str	r6, [sp, #44]	; 0x2c
 80076a4:	9608      	str	r6, [sp, #32]
 80076a6:	2322      	movs	r3, #34	; 0x22
 80076a8:	f04f 0800 	mov.w	r8, #0
 80076ac:	f04f 0900 	mov.w	r9, #0
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	e78d      	b.n	80075d0 <_strtod_l+0x488>
 80076b4:	0800b5a8 	.word	0x0800b5a8
 80076b8:	0800b7d4 	.word	0x0800b7d4
 80076bc:	0800b5a0 	.word	0x0800b5a0
 80076c0:	0800b5d7 	.word	0x0800b5d7
 80076c4:	7ff00000 	.word	0x7ff00000
 80076c8:	0800b864 	.word	0x0800b864
 80076cc:	0800b6e8 	.word	0x0800b6e8
 80076d0:	0800b6c0 	.word	0x0800b6c0
 80076d4:	7ca00000 	.word	0x7ca00000
 80076d8:	7fefffff 	.word	0x7fefffff
 80076dc:	f015 0310 	ands.w	r3, r5, #16
 80076e0:	bf18      	it	ne
 80076e2:	236a      	movne	r3, #106	; 0x6a
 80076e4:	4640      	mov	r0, r8
 80076e6:	9305      	str	r3, [sp, #20]
 80076e8:	4649      	mov	r1, r9
 80076ea:	2300      	movs	r3, #0
 80076ec:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80079b8 <_strtod_l+0x870>
 80076f0:	07ea      	lsls	r2, r5, #31
 80076f2:	d504      	bpl.n	80076fe <_strtod_l+0x5b6>
 80076f4:	e9da 2300 	ldrd	r2, r3, [sl]
 80076f8:	f7f8 feee 	bl	80004d8 <__aeabi_dmul>
 80076fc:	2301      	movs	r3, #1
 80076fe:	106d      	asrs	r5, r5, #1
 8007700:	f10a 0a08 	add.w	sl, sl, #8
 8007704:	d1f4      	bne.n	80076f0 <_strtod_l+0x5a8>
 8007706:	b10b      	cbz	r3, 800770c <_strtod_l+0x5c4>
 8007708:	4680      	mov	r8, r0
 800770a:	4689      	mov	r9, r1
 800770c:	9b05      	ldr	r3, [sp, #20]
 800770e:	b1bb      	cbz	r3, 8007740 <_strtod_l+0x5f8>
 8007710:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007714:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007718:	2b00      	cmp	r3, #0
 800771a:	4649      	mov	r1, r9
 800771c:	dd10      	ble.n	8007740 <_strtod_l+0x5f8>
 800771e:	2b1f      	cmp	r3, #31
 8007720:	f340 8128 	ble.w	8007974 <_strtod_l+0x82c>
 8007724:	2b34      	cmp	r3, #52	; 0x34
 8007726:	bfd8      	it	le
 8007728:	f04f 33ff 	movle.w	r3, #4294967295
 800772c:	f04f 0800 	mov.w	r8, #0
 8007730:	bfcf      	iteee	gt
 8007732:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007736:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800773a:	4093      	lslle	r3, r2
 800773c:	ea03 0901 	andle.w	r9, r3, r1
 8007740:	2200      	movs	r2, #0
 8007742:	2300      	movs	r3, #0
 8007744:	4640      	mov	r0, r8
 8007746:	4649      	mov	r1, r9
 8007748:	f7f9 f92e 	bl	80009a8 <__aeabi_dcmpeq>
 800774c:	2800      	cmp	r0, #0
 800774e:	d1a6      	bne.n	800769e <_strtod_l+0x556>
 8007750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007752:	465a      	mov	r2, fp
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	4620      	mov	r0, r4
 8007758:	4633      	mov	r3, r6
 800775a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800775c:	f7ff f8dc 	bl	8006918 <__s2b>
 8007760:	900b      	str	r0, [sp, #44]	; 0x2c
 8007762:	2800      	cmp	r0, #0
 8007764:	f43f af2a 	beq.w	80075bc <_strtod_l+0x474>
 8007768:	2600      	movs	r6, #0
 800776a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800776c:	9b08      	ldr	r3, [sp, #32]
 800776e:	2a00      	cmp	r2, #0
 8007770:	eba3 0307 	sub.w	r3, r3, r7
 8007774:	bfa8      	it	ge
 8007776:	2300      	movge	r3, #0
 8007778:	46b3      	mov	fp, r6
 800777a:	9312      	str	r3, [sp, #72]	; 0x48
 800777c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007780:	9316      	str	r3, [sp, #88]	; 0x58
 8007782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007784:	4620      	mov	r0, r4
 8007786:	6859      	ldr	r1, [r3, #4]
 8007788:	f7ff f81e 	bl	80067c8 <_Balloc>
 800778c:	9008      	str	r0, [sp, #32]
 800778e:	2800      	cmp	r0, #0
 8007790:	f43f af18 	beq.w	80075c4 <_strtod_l+0x47c>
 8007794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007796:	300c      	adds	r0, #12
 8007798:	691a      	ldr	r2, [r3, #16]
 800779a:	f103 010c 	add.w	r1, r3, #12
 800779e:	3202      	adds	r2, #2
 80077a0:	0092      	lsls	r2, r2, #2
 80077a2:	f000 fd09 	bl	80081b8 <memcpy>
 80077a6:	ab1c      	add	r3, sp, #112	; 0x70
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	ab1b      	add	r3, sp, #108	; 0x6c
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	4642      	mov	r2, r8
 80077b0:	464b      	mov	r3, r9
 80077b2:	4620      	mov	r0, r4
 80077b4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80077b8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80077bc:	f7ff fbd8 	bl	8006f70 <__d2b>
 80077c0:	901a      	str	r0, [sp, #104]	; 0x68
 80077c2:	2800      	cmp	r0, #0
 80077c4:	f43f aefe 	beq.w	80075c4 <_strtod_l+0x47c>
 80077c8:	2101      	movs	r1, #1
 80077ca:	4620      	mov	r0, r4
 80077cc:	f7ff f93c 	bl	8006a48 <__i2b>
 80077d0:	4683      	mov	fp, r0
 80077d2:	2800      	cmp	r0, #0
 80077d4:	f43f aef6 	beq.w	80075c4 <_strtod_l+0x47c>
 80077d8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80077da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80077dc:	2f00      	cmp	r7, #0
 80077de:	bfab      	itete	ge
 80077e0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80077e2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80077e4:	eb07 0a03 	addge.w	sl, r7, r3
 80077e8:	1bdd      	sublt	r5, r3, r7
 80077ea:	9b05      	ldr	r3, [sp, #20]
 80077ec:	bfa8      	it	ge
 80077ee:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80077f0:	eba7 0703 	sub.w	r7, r7, r3
 80077f4:	4417      	add	r7, r2
 80077f6:	4b71      	ldr	r3, [pc, #452]	; (80079bc <_strtod_l+0x874>)
 80077f8:	f107 37ff 	add.w	r7, r7, #4294967295
 80077fc:	bfb8      	it	lt
 80077fe:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007802:	429f      	cmp	r7, r3
 8007804:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007808:	f280 80c7 	bge.w	800799a <_strtod_l+0x852>
 800780c:	1bdb      	subs	r3, r3, r7
 800780e:	2b1f      	cmp	r3, #31
 8007810:	f04f 0101 	mov.w	r1, #1
 8007814:	eba2 0203 	sub.w	r2, r2, r3
 8007818:	f300 80b3 	bgt.w	8007982 <_strtod_l+0x83a>
 800781c:	fa01 f303 	lsl.w	r3, r1, r3
 8007820:	9313      	str	r3, [sp, #76]	; 0x4c
 8007822:	2300      	movs	r3, #0
 8007824:	9310      	str	r3, [sp, #64]	; 0x40
 8007826:	eb0a 0702 	add.w	r7, sl, r2
 800782a:	9b05      	ldr	r3, [sp, #20]
 800782c:	45ba      	cmp	sl, r7
 800782e:	4415      	add	r5, r2
 8007830:	441d      	add	r5, r3
 8007832:	4653      	mov	r3, sl
 8007834:	bfa8      	it	ge
 8007836:	463b      	movge	r3, r7
 8007838:	42ab      	cmp	r3, r5
 800783a:	bfa8      	it	ge
 800783c:	462b      	movge	r3, r5
 800783e:	2b00      	cmp	r3, #0
 8007840:	bfc2      	ittt	gt
 8007842:	1aff      	subgt	r7, r7, r3
 8007844:	1aed      	subgt	r5, r5, r3
 8007846:	ebaa 0a03 	subgt.w	sl, sl, r3
 800784a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800784c:	2b00      	cmp	r3, #0
 800784e:	dd17      	ble.n	8007880 <_strtod_l+0x738>
 8007850:	4659      	mov	r1, fp
 8007852:	461a      	mov	r2, r3
 8007854:	4620      	mov	r0, r4
 8007856:	f7ff f9b5 	bl	8006bc4 <__pow5mult>
 800785a:	4683      	mov	fp, r0
 800785c:	2800      	cmp	r0, #0
 800785e:	f43f aeb1 	beq.w	80075c4 <_strtod_l+0x47c>
 8007862:	4601      	mov	r1, r0
 8007864:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007866:	4620      	mov	r0, r4
 8007868:	f7ff f904 	bl	8006a74 <__multiply>
 800786c:	900a      	str	r0, [sp, #40]	; 0x28
 800786e:	2800      	cmp	r0, #0
 8007870:	f43f aea8 	beq.w	80075c4 <_strtod_l+0x47c>
 8007874:	4620      	mov	r0, r4
 8007876:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007878:	f7fe ffe6 	bl	8006848 <_Bfree>
 800787c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800787e:	931a      	str	r3, [sp, #104]	; 0x68
 8007880:	2f00      	cmp	r7, #0
 8007882:	f300 808f 	bgt.w	80079a4 <_strtod_l+0x85c>
 8007886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007888:	2b00      	cmp	r3, #0
 800788a:	dd08      	ble.n	800789e <_strtod_l+0x756>
 800788c:	4620      	mov	r0, r4
 800788e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007890:	9908      	ldr	r1, [sp, #32]
 8007892:	f7ff f997 	bl	8006bc4 <__pow5mult>
 8007896:	9008      	str	r0, [sp, #32]
 8007898:	2800      	cmp	r0, #0
 800789a:	f43f ae93 	beq.w	80075c4 <_strtod_l+0x47c>
 800789e:	2d00      	cmp	r5, #0
 80078a0:	dd08      	ble.n	80078b4 <_strtod_l+0x76c>
 80078a2:	462a      	mov	r2, r5
 80078a4:	4620      	mov	r0, r4
 80078a6:	9908      	ldr	r1, [sp, #32]
 80078a8:	f7ff f9e6 	bl	8006c78 <__lshift>
 80078ac:	9008      	str	r0, [sp, #32]
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f43f ae88 	beq.w	80075c4 <_strtod_l+0x47c>
 80078b4:	f1ba 0f00 	cmp.w	sl, #0
 80078b8:	dd08      	ble.n	80078cc <_strtod_l+0x784>
 80078ba:	4659      	mov	r1, fp
 80078bc:	4652      	mov	r2, sl
 80078be:	4620      	mov	r0, r4
 80078c0:	f7ff f9da 	bl	8006c78 <__lshift>
 80078c4:	4683      	mov	fp, r0
 80078c6:	2800      	cmp	r0, #0
 80078c8:	f43f ae7c 	beq.w	80075c4 <_strtod_l+0x47c>
 80078cc:	4620      	mov	r0, r4
 80078ce:	9a08      	ldr	r2, [sp, #32]
 80078d0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80078d2:	f7ff fa59 	bl	8006d88 <__mdiff>
 80078d6:	4606      	mov	r6, r0
 80078d8:	2800      	cmp	r0, #0
 80078da:	f43f ae73 	beq.w	80075c4 <_strtod_l+0x47c>
 80078de:	2500      	movs	r5, #0
 80078e0:	68c3      	ldr	r3, [r0, #12]
 80078e2:	4659      	mov	r1, fp
 80078e4:	60c5      	str	r5, [r0, #12]
 80078e6:	930a      	str	r3, [sp, #40]	; 0x28
 80078e8:	f7ff fa32 	bl	8006d50 <__mcmp>
 80078ec:	42a8      	cmp	r0, r5
 80078ee:	da6b      	bge.n	80079c8 <_strtod_l+0x880>
 80078f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f2:	ea53 0308 	orrs.w	r3, r3, r8
 80078f6:	f040 808f 	bne.w	8007a18 <_strtod_l+0x8d0>
 80078fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f040 808a 	bne.w	8007a18 <_strtod_l+0x8d0>
 8007904:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007908:	0d1b      	lsrs	r3, r3, #20
 800790a:	051b      	lsls	r3, r3, #20
 800790c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007910:	f240 8082 	bls.w	8007a18 <_strtod_l+0x8d0>
 8007914:	6973      	ldr	r3, [r6, #20]
 8007916:	b913      	cbnz	r3, 800791e <_strtod_l+0x7d6>
 8007918:	6933      	ldr	r3, [r6, #16]
 800791a:	2b01      	cmp	r3, #1
 800791c:	dd7c      	ble.n	8007a18 <_strtod_l+0x8d0>
 800791e:	4631      	mov	r1, r6
 8007920:	2201      	movs	r2, #1
 8007922:	4620      	mov	r0, r4
 8007924:	f7ff f9a8 	bl	8006c78 <__lshift>
 8007928:	4659      	mov	r1, fp
 800792a:	4606      	mov	r6, r0
 800792c:	f7ff fa10 	bl	8006d50 <__mcmp>
 8007930:	2800      	cmp	r0, #0
 8007932:	dd71      	ble.n	8007a18 <_strtod_l+0x8d0>
 8007934:	9905      	ldr	r1, [sp, #20]
 8007936:	464b      	mov	r3, r9
 8007938:	4a21      	ldr	r2, [pc, #132]	; (80079c0 <_strtod_l+0x878>)
 800793a:	2900      	cmp	r1, #0
 800793c:	f000 808d 	beq.w	8007a5a <_strtod_l+0x912>
 8007940:	ea02 0109 	and.w	r1, r2, r9
 8007944:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007948:	f300 8087 	bgt.w	8007a5a <_strtod_l+0x912>
 800794c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007950:	f77f aea9 	ble.w	80076a6 <_strtod_l+0x55e>
 8007954:	4640      	mov	r0, r8
 8007956:	4649      	mov	r1, r9
 8007958:	4b1a      	ldr	r3, [pc, #104]	; (80079c4 <_strtod_l+0x87c>)
 800795a:	2200      	movs	r2, #0
 800795c:	f7f8 fdbc 	bl	80004d8 <__aeabi_dmul>
 8007960:	4b17      	ldr	r3, [pc, #92]	; (80079c0 <_strtod_l+0x878>)
 8007962:	4680      	mov	r8, r0
 8007964:	400b      	ands	r3, r1
 8007966:	4689      	mov	r9, r1
 8007968:	2b00      	cmp	r3, #0
 800796a:	f47f ae35 	bne.w	80075d8 <_strtod_l+0x490>
 800796e:	2322      	movs	r3, #34	; 0x22
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	e631      	b.n	80075d8 <_strtod_l+0x490>
 8007974:	f04f 32ff 	mov.w	r2, #4294967295
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	ea03 0808 	and.w	r8, r3, r8
 8007980:	e6de      	b.n	8007740 <_strtod_l+0x5f8>
 8007982:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007986:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800798a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800798e:	37e2      	adds	r7, #226	; 0xe2
 8007990:	fa01 f307 	lsl.w	r3, r1, r7
 8007994:	9310      	str	r3, [sp, #64]	; 0x40
 8007996:	9113      	str	r1, [sp, #76]	; 0x4c
 8007998:	e745      	b.n	8007826 <_strtod_l+0x6de>
 800799a:	2300      	movs	r3, #0
 800799c:	9310      	str	r3, [sp, #64]	; 0x40
 800799e:	2301      	movs	r3, #1
 80079a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80079a2:	e740      	b.n	8007826 <_strtod_l+0x6de>
 80079a4:	463a      	mov	r2, r7
 80079a6:	4620      	mov	r0, r4
 80079a8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079aa:	f7ff f965 	bl	8006c78 <__lshift>
 80079ae:	901a      	str	r0, [sp, #104]	; 0x68
 80079b0:	2800      	cmp	r0, #0
 80079b2:	f47f af68 	bne.w	8007886 <_strtod_l+0x73e>
 80079b6:	e605      	b.n	80075c4 <_strtod_l+0x47c>
 80079b8:	0800b7e8 	.word	0x0800b7e8
 80079bc:	fffffc02 	.word	0xfffffc02
 80079c0:	7ff00000 	.word	0x7ff00000
 80079c4:	39500000 	.word	0x39500000
 80079c8:	46ca      	mov	sl, r9
 80079ca:	d165      	bne.n	8007a98 <_strtod_l+0x950>
 80079cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079d2:	b352      	cbz	r2, 8007a2a <_strtod_l+0x8e2>
 80079d4:	4a9e      	ldr	r2, [pc, #632]	; (8007c50 <_strtod_l+0xb08>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d12a      	bne.n	8007a30 <_strtod_l+0x8e8>
 80079da:	9b05      	ldr	r3, [sp, #20]
 80079dc:	4641      	mov	r1, r8
 80079de:	b1fb      	cbz	r3, 8007a20 <_strtod_l+0x8d8>
 80079e0:	4b9c      	ldr	r3, [pc, #624]	; (8007c54 <_strtod_l+0xb0c>)
 80079e2:	f04f 32ff 	mov.w	r2, #4294967295
 80079e6:	ea09 0303 	and.w	r3, r9, r3
 80079ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079ee:	d81a      	bhi.n	8007a26 <_strtod_l+0x8de>
 80079f0:	0d1b      	lsrs	r3, r3, #20
 80079f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	4299      	cmp	r1, r3
 80079fc:	d118      	bne.n	8007a30 <_strtod_l+0x8e8>
 80079fe:	4b96      	ldr	r3, [pc, #600]	; (8007c58 <_strtod_l+0xb10>)
 8007a00:	459a      	cmp	sl, r3
 8007a02:	d102      	bne.n	8007a0a <_strtod_l+0x8c2>
 8007a04:	3101      	adds	r1, #1
 8007a06:	f43f addd 	beq.w	80075c4 <_strtod_l+0x47c>
 8007a0a:	f04f 0800 	mov.w	r8, #0
 8007a0e:	4b91      	ldr	r3, [pc, #580]	; (8007c54 <_strtod_l+0xb0c>)
 8007a10:	ea0a 0303 	and.w	r3, sl, r3
 8007a14:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007a18:	9b05      	ldr	r3, [sp, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d19a      	bne.n	8007954 <_strtod_l+0x80c>
 8007a1e:	e5db      	b.n	80075d8 <_strtod_l+0x490>
 8007a20:	f04f 33ff 	mov.w	r3, #4294967295
 8007a24:	e7e9      	b.n	80079fa <_strtod_l+0x8b2>
 8007a26:	4613      	mov	r3, r2
 8007a28:	e7e7      	b.n	80079fa <_strtod_l+0x8b2>
 8007a2a:	ea53 0308 	orrs.w	r3, r3, r8
 8007a2e:	d081      	beq.n	8007934 <_strtod_l+0x7ec>
 8007a30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a32:	b1e3      	cbz	r3, 8007a6e <_strtod_l+0x926>
 8007a34:	ea13 0f0a 	tst.w	r3, sl
 8007a38:	d0ee      	beq.n	8007a18 <_strtod_l+0x8d0>
 8007a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	4649      	mov	r1, r9
 8007a40:	9a05      	ldr	r2, [sp, #20]
 8007a42:	b1c3      	cbz	r3, 8007a76 <_strtod_l+0x92e>
 8007a44:	f7ff fb5c 	bl	8007100 <sulp>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a50:	f7f8 fb8c 	bl	800016c <__adddf3>
 8007a54:	4680      	mov	r8, r0
 8007a56:	4689      	mov	r9, r1
 8007a58:	e7de      	b.n	8007a18 <_strtod_l+0x8d0>
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a60:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007a64:	f04f 38ff 	mov.w	r8, #4294967295
 8007a68:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007a6c:	e7d4      	b.n	8007a18 <_strtod_l+0x8d0>
 8007a6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a70:	ea13 0f08 	tst.w	r3, r8
 8007a74:	e7e0      	b.n	8007a38 <_strtod_l+0x8f0>
 8007a76:	f7ff fb43 	bl	8007100 <sulp>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a82:	f7f8 fb71 	bl	8000168 <__aeabi_dsub>
 8007a86:	2200      	movs	r2, #0
 8007a88:	2300      	movs	r3, #0
 8007a8a:	4680      	mov	r8, r0
 8007a8c:	4689      	mov	r9, r1
 8007a8e:	f7f8 ff8b 	bl	80009a8 <__aeabi_dcmpeq>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d0c0      	beq.n	8007a18 <_strtod_l+0x8d0>
 8007a96:	e606      	b.n	80076a6 <_strtod_l+0x55e>
 8007a98:	4659      	mov	r1, fp
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7ff fabe 	bl	800701c <__ratio>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007aae:	f7f8 ff8f 	bl	80009d0 <__aeabi_dcmple>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d06f      	beq.n	8007b96 <_strtod_l+0xa4e>
 8007ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d17c      	bne.n	8007bb6 <_strtod_l+0xa6e>
 8007abc:	f1b8 0f00 	cmp.w	r8, #0
 8007ac0:	d159      	bne.n	8007b76 <_strtod_l+0xa2e>
 8007ac2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d17b      	bne.n	8007bc2 <_strtod_l+0xa7a>
 8007aca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ace:	2200      	movs	r2, #0
 8007ad0:	4b62      	ldr	r3, [pc, #392]	; (8007c5c <_strtod_l+0xb14>)
 8007ad2:	f7f8 ff73 	bl	80009bc <__aeabi_dcmplt>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d15a      	bne.n	8007b90 <_strtod_l+0xa48>
 8007ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ade:	2200      	movs	r2, #0
 8007ae0:	4b5f      	ldr	r3, [pc, #380]	; (8007c60 <_strtod_l+0xb18>)
 8007ae2:	f7f8 fcf9 	bl	80004d8 <__aeabi_dmul>
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	460f      	mov	r7, r1
 8007aea:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007aee:	9506      	str	r5, [sp, #24]
 8007af0:	9307      	str	r3, [sp, #28]
 8007af2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007af6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007afa:	4b56      	ldr	r3, [pc, #344]	; (8007c54 <_strtod_l+0xb0c>)
 8007afc:	4a55      	ldr	r2, [pc, #340]	; (8007c54 <_strtod_l+0xb0c>)
 8007afe:	ea0a 0303 	and.w	r3, sl, r3
 8007b02:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b04:	4b57      	ldr	r3, [pc, #348]	; (8007c64 <_strtod_l+0xb1c>)
 8007b06:	ea0a 0202 	and.w	r2, sl, r2
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	f040 80b0 	bne.w	8007c70 <_strtod_l+0xb28>
 8007b10:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007b14:	4640      	mov	r0, r8
 8007b16:	4649      	mov	r1, r9
 8007b18:	f7ff f9c2 	bl	8006ea0 <__ulp>
 8007b1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b20:	f7f8 fcda 	bl	80004d8 <__aeabi_dmul>
 8007b24:	4642      	mov	r2, r8
 8007b26:	464b      	mov	r3, r9
 8007b28:	f7f8 fb20 	bl	800016c <__adddf3>
 8007b2c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007c54 <_strtod_l+0xb0c>
 8007b30:	4a4d      	ldr	r2, [pc, #308]	; (8007c68 <_strtod_l+0xb20>)
 8007b32:	ea01 0a0a 	and.w	sl, r1, sl
 8007b36:	4592      	cmp	sl, r2
 8007b38:	4680      	mov	r8, r0
 8007b3a:	d948      	bls.n	8007bce <_strtod_l+0xa86>
 8007b3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b3e:	4b46      	ldr	r3, [pc, #280]	; (8007c58 <_strtod_l+0xb10>)
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d103      	bne.n	8007b4c <_strtod_l+0xa04>
 8007b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b46:	3301      	adds	r3, #1
 8007b48:	f43f ad3c 	beq.w	80075c4 <_strtod_l+0x47c>
 8007b4c:	f04f 38ff 	mov.w	r8, #4294967295
 8007b50:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007c58 <_strtod_l+0xb10>
 8007b54:	4620      	mov	r0, r4
 8007b56:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b58:	f7fe fe76 	bl	8006848 <_Bfree>
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	9908      	ldr	r1, [sp, #32]
 8007b60:	f7fe fe72 	bl	8006848 <_Bfree>
 8007b64:	4659      	mov	r1, fp
 8007b66:	4620      	mov	r0, r4
 8007b68:	f7fe fe6e 	bl	8006848 <_Bfree>
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f7fe fe6a 	bl	8006848 <_Bfree>
 8007b74:	e605      	b.n	8007782 <_strtod_l+0x63a>
 8007b76:	f1b8 0f01 	cmp.w	r8, #1
 8007b7a:	d103      	bne.n	8007b84 <_strtod_l+0xa3c>
 8007b7c:	f1b9 0f00 	cmp.w	r9, #0
 8007b80:	f43f ad91 	beq.w	80076a6 <_strtod_l+0x55e>
 8007b84:	2200      	movs	r2, #0
 8007b86:	4b39      	ldr	r3, [pc, #228]	; (8007c6c <_strtod_l+0xb24>)
 8007b88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007b8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b8e:	e016      	b.n	8007bbe <_strtod_l+0xa76>
 8007b90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007b92:	4f33      	ldr	r7, [pc, #204]	; (8007c60 <_strtod_l+0xb18>)
 8007b94:	e7a9      	b.n	8007aea <_strtod_l+0x9a2>
 8007b96:	4b32      	ldr	r3, [pc, #200]	; (8007c60 <_strtod_l+0xb18>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b9e:	f7f8 fc9b 	bl	80004d8 <__aeabi_dmul>
 8007ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	460f      	mov	r7, r1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d09e      	beq.n	8007aea <_strtod_l+0x9a2>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bb4:	e79d      	b.n	8007af2 <_strtod_l+0x9aa>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	4b28      	ldr	r3, [pc, #160]	; (8007c5c <_strtod_l+0xb14>)
 8007bba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bbe:	4f27      	ldr	r7, [pc, #156]	; (8007c5c <_strtod_l+0xb14>)
 8007bc0:	e797      	b.n	8007af2 <_strtod_l+0x9aa>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	4b29      	ldr	r3, [pc, #164]	; (8007c6c <_strtod_l+0xb24>)
 8007bc6:	4645      	mov	r5, r8
 8007bc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bcc:	e7f7      	b.n	8007bbe <_strtod_l+0xa76>
 8007bce:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007bd2:	9b05      	ldr	r3, [sp, #20]
 8007bd4:	46ca      	mov	sl, r9
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1bc      	bne.n	8007b54 <_strtod_l+0xa0c>
 8007bda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007be0:	0d1b      	lsrs	r3, r3, #20
 8007be2:	051b      	lsls	r3, r3, #20
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d1b5      	bne.n	8007b54 <_strtod_l+0xa0c>
 8007be8:	4628      	mov	r0, r5
 8007bea:	4639      	mov	r1, r7
 8007bec:	f7f9 fa1a 	bl	8001024 <__aeabi_d2lz>
 8007bf0:	f7f8 fc44 	bl	800047c <__aeabi_l2d>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	f7f8 fab4 	bl	8000168 <__aeabi_dsub>
 8007c00:	460b      	mov	r3, r1
 8007c02:	4602      	mov	r2, r0
 8007c04:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007c08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c0e:	ea4a 0a08 	orr.w	sl, sl, r8
 8007c12:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007c16:	d06c      	beq.n	8007cf2 <_strtod_l+0xbaa>
 8007c18:	a309      	add	r3, pc, #36	; (adr r3, 8007c40 <_strtod_l+0xaf8>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f7f8 fecd 	bl	80009bc <__aeabi_dcmplt>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	f47f acd8 	bne.w	80075d8 <_strtod_l+0x490>
 8007c28:	a307      	add	r3, pc, #28	; (adr r3, 8007c48 <_strtod_l+0xb00>)
 8007c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c32:	f7f8 fee1 	bl	80009f8 <__aeabi_dcmpgt>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d08c      	beq.n	8007b54 <_strtod_l+0xa0c>
 8007c3a:	e4cd      	b.n	80075d8 <_strtod_l+0x490>
 8007c3c:	f3af 8000 	nop.w
 8007c40:	94a03595 	.word	0x94a03595
 8007c44:	3fdfffff 	.word	0x3fdfffff
 8007c48:	35afe535 	.word	0x35afe535
 8007c4c:	3fe00000 	.word	0x3fe00000
 8007c50:	000fffff 	.word	0x000fffff
 8007c54:	7ff00000 	.word	0x7ff00000
 8007c58:	7fefffff 	.word	0x7fefffff
 8007c5c:	3ff00000 	.word	0x3ff00000
 8007c60:	3fe00000 	.word	0x3fe00000
 8007c64:	7fe00000 	.word	0x7fe00000
 8007c68:	7c9fffff 	.word	0x7c9fffff
 8007c6c:	bff00000 	.word	0xbff00000
 8007c70:	9b05      	ldr	r3, [sp, #20]
 8007c72:	b333      	cbz	r3, 8007cc2 <_strtod_l+0xb7a>
 8007c74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c7a:	d822      	bhi.n	8007cc2 <_strtod_l+0xb7a>
 8007c7c:	a328      	add	r3, pc, #160	; (adr r3, 8007d20 <_strtod_l+0xbd8>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	4628      	mov	r0, r5
 8007c84:	4639      	mov	r1, r7
 8007c86:	f7f8 fea3 	bl	80009d0 <__aeabi_dcmple>
 8007c8a:	b1a0      	cbz	r0, 8007cb6 <_strtod_l+0xb6e>
 8007c8c:	4639      	mov	r1, r7
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f7f8 fefa 	bl	8000a88 <__aeabi_d2uiz>
 8007c94:	2801      	cmp	r0, #1
 8007c96:	bf38      	it	cc
 8007c98:	2001      	movcc	r0, #1
 8007c9a:	f7f8 fba3 	bl	80003e4 <__aeabi_ui2d>
 8007c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	460f      	mov	r7, r1
 8007ca4:	bb03      	cbnz	r3, 8007ce8 <_strtod_l+0xba0>
 8007ca6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007caa:	9014      	str	r0, [sp, #80]	; 0x50
 8007cac:	9315      	str	r3, [sp, #84]	; 0x54
 8007cae:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007cb2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cba:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007cbe:	1a9b      	subs	r3, r3, r2
 8007cc0:	9311      	str	r3, [sp, #68]	; 0x44
 8007cc2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007cc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007cc6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007cca:	f7ff f8e9 	bl	8006ea0 <__ulp>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4640      	mov	r0, r8
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	f7f8 fbff 	bl	80004d8 <__aeabi_dmul>
 8007cda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cde:	f7f8 fa45 	bl	800016c <__adddf3>
 8007ce2:	4680      	mov	r8, r0
 8007ce4:	4689      	mov	r9, r1
 8007ce6:	e774      	b.n	8007bd2 <_strtod_l+0xa8a>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007cf0:	e7dd      	b.n	8007cae <_strtod_l+0xb66>
 8007cf2:	a30d      	add	r3, pc, #52	; (adr r3, 8007d28 <_strtod_l+0xbe0>)
 8007cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf8:	f7f8 fe60 	bl	80009bc <__aeabi_dcmplt>
 8007cfc:	e79b      	b.n	8007c36 <_strtod_l+0xaee>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	930e      	str	r3, [sp, #56]	; 0x38
 8007d02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	f7ff ba5b 	b.w	80071c2 <_strtod_l+0x7a>
 8007d0c:	2a65      	cmp	r2, #101	; 0x65
 8007d0e:	f43f ab52 	beq.w	80073b6 <_strtod_l+0x26e>
 8007d12:	2a45      	cmp	r2, #69	; 0x45
 8007d14:	f43f ab4f 	beq.w	80073b6 <_strtod_l+0x26e>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f7ff bb87 	b.w	800742c <_strtod_l+0x2e4>
 8007d1e:	bf00      	nop
 8007d20:	ffc00000 	.word	0xffc00000
 8007d24:	41dfffff 	.word	0x41dfffff
 8007d28:	94a03595 	.word	0x94a03595
 8007d2c:	3fcfffff 	.word	0x3fcfffff

08007d30 <_strtod_r>:
 8007d30:	4b01      	ldr	r3, [pc, #4]	; (8007d38 <_strtod_r+0x8>)
 8007d32:	f7ff ba09 	b.w	8007148 <_strtod_l>
 8007d36:	bf00      	nop
 8007d38:	2000006c 	.word	0x2000006c

08007d3c <__ssputs_r>:
 8007d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d40:	461f      	mov	r7, r3
 8007d42:	688e      	ldr	r6, [r1, #8]
 8007d44:	4682      	mov	sl, r0
 8007d46:	42be      	cmp	r6, r7
 8007d48:	460c      	mov	r4, r1
 8007d4a:	4690      	mov	r8, r2
 8007d4c:	680b      	ldr	r3, [r1, #0]
 8007d4e:	d82c      	bhi.n	8007daa <__ssputs_r+0x6e>
 8007d50:	898a      	ldrh	r2, [r1, #12]
 8007d52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d56:	d026      	beq.n	8007da6 <__ssputs_r+0x6a>
 8007d58:	6965      	ldr	r5, [r4, #20]
 8007d5a:	6909      	ldr	r1, [r1, #16]
 8007d5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d60:	eba3 0901 	sub.w	r9, r3, r1
 8007d64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d68:	1c7b      	adds	r3, r7, #1
 8007d6a:	444b      	add	r3, r9
 8007d6c:	106d      	asrs	r5, r5, #1
 8007d6e:	429d      	cmp	r5, r3
 8007d70:	bf38      	it	cc
 8007d72:	461d      	movcc	r5, r3
 8007d74:	0553      	lsls	r3, r2, #21
 8007d76:	d527      	bpl.n	8007dc8 <__ssputs_r+0x8c>
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f7fe fc99 	bl	80066b0 <_malloc_r>
 8007d7e:	4606      	mov	r6, r0
 8007d80:	b360      	cbz	r0, 8007ddc <__ssputs_r+0xa0>
 8007d82:	464a      	mov	r2, r9
 8007d84:	6921      	ldr	r1, [r4, #16]
 8007d86:	f000 fa17 	bl	80081b8 <memcpy>
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d94:	81a3      	strh	r3, [r4, #12]
 8007d96:	6126      	str	r6, [r4, #16]
 8007d98:	444e      	add	r6, r9
 8007d9a:	6026      	str	r6, [r4, #0]
 8007d9c:	463e      	mov	r6, r7
 8007d9e:	6165      	str	r5, [r4, #20]
 8007da0:	eba5 0509 	sub.w	r5, r5, r9
 8007da4:	60a5      	str	r5, [r4, #8]
 8007da6:	42be      	cmp	r6, r7
 8007da8:	d900      	bls.n	8007dac <__ssputs_r+0x70>
 8007daa:	463e      	mov	r6, r7
 8007dac:	4632      	mov	r2, r6
 8007dae:	4641      	mov	r1, r8
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	f000 f9c5 	bl	8008140 <memmove>
 8007db6:	2000      	movs	r0, #0
 8007db8:	68a3      	ldr	r3, [r4, #8]
 8007dba:	1b9b      	subs	r3, r3, r6
 8007dbc:	60a3      	str	r3, [r4, #8]
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	4433      	add	r3, r6
 8007dc2:	6023      	str	r3, [r4, #0]
 8007dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc8:	462a      	mov	r2, r5
 8007dca:	f000 fda6 	bl	800891a <_realloc_r>
 8007dce:	4606      	mov	r6, r0
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d1e0      	bne.n	8007d96 <__ssputs_r+0x5a>
 8007dd4:	4650      	mov	r0, sl
 8007dd6:	6921      	ldr	r1, [r4, #16]
 8007dd8:	f7fe fbfa 	bl	80065d0 <_free_r>
 8007ddc:	230c      	movs	r3, #12
 8007dde:	f8ca 3000 	str.w	r3, [sl]
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295
 8007de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	e7e9      	b.n	8007dc4 <__ssputs_r+0x88>

08007df0 <_svfiprintf_r>:
 8007df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df4:	4698      	mov	r8, r3
 8007df6:	898b      	ldrh	r3, [r1, #12]
 8007df8:	4607      	mov	r7, r0
 8007dfa:	061b      	lsls	r3, r3, #24
 8007dfc:	460d      	mov	r5, r1
 8007dfe:	4614      	mov	r4, r2
 8007e00:	b09d      	sub	sp, #116	; 0x74
 8007e02:	d50e      	bpl.n	8007e22 <_svfiprintf_r+0x32>
 8007e04:	690b      	ldr	r3, [r1, #16]
 8007e06:	b963      	cbnz	r3, 8007e22 <_svfiprintf_r+0x32>
 8007e08:	2140      	movs	r1, #64	; 0x40
 8007e0a:	f7fe fc51 	bl	80066b0 <_malloc_r>
 8007e0e:	6028      	str	r0, [r5, #0]
 8007e10:	6128      	str	r0, [r5, #16]
 8007e12:	b920      	cbnz	r0, 8007e1e <_svfiprintf_r+0x2e>
 8007e14:	230c      	movs	r3, #12
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1c:	e0d0      	b.n	8007fc0 <_svfiprintf_r+0x1d0>
 8007e1e:	2340      	movs	r3, #64	; 0x40
 8007e20:	616b      	str	r3, [r5, #20]
 8007e22:	2300      	movs	r3, #0
 8007e24:	9309      	str	r3, [sp, #36]	; 0x24
 8007e26:	2320      	movs	r3, #32
 8007e28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e2c:	2330      	movs	r3, #48	; 0x30
 8007e2e:	f04f 0901 	mov.w	r9, #1
 8007e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e36:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007fd8 <_svfiprintf_r+0x1e8>
 8007e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e3e:	4623      	mov	r3, r4
 8007e40:	469a      	mov	sl, r3
 8007e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e46:	b10a      	cbz	r2, 8007e4c <_svfiprintf_r+0x5c>
 8007e48:	2a25      	cmp	r2, #37	; 0x25
 8007e4a:	d1f9      	bne.n	8007e40 <_svfiprintf_r+0x50>
 8007e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e50:	d00b      	beq.n	8007e6a <_svfiprintf_r+0x7a>
 8007e52:	465b      	mov	r3, fp
 8007e54:	4622      	mov	r2, r4
 8007e56:	4629      	mov	r1, r5
 8007e58:	4638      	mov	r0, r7
 8007e5a:	f7ff ff6f 	bl	8007d3c <__ssputs_r>
 8007e5e:	3001      	adds	r0, #1
 8007e60:	f000 80a9 	beq.w	8007fb6 <_svfiprintf_r+0x1c6>
 8007e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e66:	445a      	add	r2, fp
 8007e68:	9209      	str	r2, [sp, #36]	; 0x24
 8007e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 80a1 	beq.w	8007fb6 <_svfiprintf_r+0x1c6>
 8007e74:	2300      	movs	r3, #0
 8007e76:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e7e:	f10a 0a01 	add.w	sl, sl, #1
 8007e82:	9304      	str	r3, [sp, #16]
 8007e84:	9307      	str	r3, [sp, #28]
 8007e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e8c:	4654      	mov	r4, sl
 8007e8e:	2205      	movs	r2, #5
 8007e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e94:	4850      	ldr	r0, [pc, #320]	; (8007fd8 <_svfiprintf_r+0x1e8>)
 8007e96:	f7fd fd1a 	bl	80058ce <memchr>
 8007e9a:	9a04      	ldr	r2, [sp, #16]
 8007e9c:	b9d8      	cbnz	r0, 8007ed6 <_svfiprintf_r+0xe6>
 8007e9e:	06d0      	lsls	r0, r2, #27
 8007ea0:	bf44      	itt	mi
 8007ea2:	2320      	movmi	r3, #32
 8007ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ea8:	0711      	lsls	r1, r2, #28
 8007eaa:	bf44      	itt	mi
 8007eac:	232b      	movmi	r3, #43	; 0x2b
 8007eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8007eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8007eb8:	d015      	beq.n	8007ee6 <_svfiprintf_r+0xf6>
 8007eba:	4654      	mov	r4, sl
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	f04f 0c0a 	mov.w	ip, #10
 8007ec2:	9a07      	ldr	r2, [sp, #28]
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eca:	3b30      	subs	r3, #48	; 0x30
 8007ecc:	2b09      	cmp	r3, #9
 8007ece:	d94d      	bls.n	8007f6c <_svfiprintf_r+0x17c>
 8007ed0:	b1b0      	cbz	r0, 8007f00 <_svfiprintf_r+0x110>
 8007ed2:	9207      	str	r2, [sp, #28]
 8007ed4:	e014      	b.n	8007f00 <_svfiprintf_r+0x110>
 8007ed6:	eba0 0308 	sub.w	r3, r0, r8
 8007eda:	fa09 f303 	lsl.w	r3, r9, r3
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	46a2      	mov	sl, r4
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	e7d2      	b.n	8007e8c <_svfiprintf_r+0x9c>
 8007ee6:	9b03      	ldr	r3, [sp, #12]
 8007ee8:	1d19      	adds	r1, r3, #4
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	9103      	str	r1, [sp, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	bfbb      	ittet	lt
 8007ef2:	425b      	neglt	r3, r3
 8007ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ef8:	9307      	strge	r3, [sp, #28]
 8007efa:	9307      	strlt	r3, [sp, #28]
 8007efc:	bfb8      	it	lt
 8007efe:	9204      	strlt	r2, [sp, #16]
 8007f00:	7823      	ldrb	r3, [r4, #0]
 8007f02:	2b2e      	cmp	r3, #46	; 0x2e
 8007f04:	d10c      	bne.n	8007f20 <_svfiprintf_r+0x130>
 8007f06:	7863      	ldrb	r3, [r4, #1]
 8007f08:	2b2a      	cmp	r3, #42	; 0x2a
 8007f0a:	d134      	bne.n	8007f76 <_svfiprintf_r+0x186>
 8007f0c:	9b03      	ldr	r3, [sp, #12]
 8007f0e:	3402      	adds	r4, #2
 8007f10:	1d1a      	adds	r2, r3, #4
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	9203      	str	r2, [sp, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	bfb8      	it	lt
 8007f1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f1e:	9305      	str	r3, [sp, #20]
 8007f20:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007fdc <_svfiprintf_r+0x1ec>
 8007f24:	2203      	movs	r2, #3
 8007f26:	4650      	mov	r0, sl
 8007f28:	7821      	ldrb	r1, [r4, #0]
 8007f2a:	f7fd fcd0 	bl	80058ce <memchr>
 8007f2e:	b138      	cbz	r0, 8007f40 <_svfiprintf_r+0x150>
 8007f30:	2240      	movs	r2, #64	; 0x40
 8007f32:	9b04      	ldr	r3, [sp, #16]
 8007f34:	eba0 000a 	sub.w	r0, r0, sl
 8007f38:	4082      	lsls	r2, r0
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	3401      	adds	r4, #1
 8007f3e:	9304      	str	r3, [sp, #16]
 8007f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f44:	2206      	movs	r2, #6
 8007f46:	4826      	ldr	r0, [pc, #152]	; (8007fe0 <_svfiprintf_r+0x1f0>)
 8007f48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f4c:	f7fd fcbf 	bl	80058ce <memchr>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d038      	beq.n	8007fc6 <_svfiprintf_r+0x1d6>
 8007f54:	4b23      	ldr	r3, [pc, #140]	; (8007fe4 <_svfiprintf_r+0x1f4>)
 8007f56:	bb1b      	cbnz	r3, 8007fa0 <_svfiprintf_r+0x1b0>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	3307      	adds	r3, #7
 8007f5c:	f023 0307 	bic.w	r3, r3, #7
 8007f60:	3308      	adds	r3, #8
 8007f62:	9303      	str	r3, [sp, #12]
 8007f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f66:	4433      	add	r3, r6
 8007f68:	9309      	str	r3, [sp, #36]	; 0x24
 8007f6a:	e768      	b.n	8007e3e <_svfiprintf_r+0x4e>
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	2001      	movs	r0, #1
 8007f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f74:	e7a6      	b.n	8007ec4 <_svfiprintf_r+0xd4>
 8007f76:	2300      	movs	r3, #0
 8007f78:	f04f 0c0a 	mov.w	ip, #10
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	3401      	adds	r4, #1
 8007f80:	9305      	str	r3, [sp, #20]
 8007f82:	4620      	mov	r0, r4
 8007f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f88:	3a30      	subs	r2, #48	; 0x30
 8007f8a:	2a09      	cmp	r2, #9
 8007f8c:	d903      	bls.n	8007f96 <_svfiprintf_r+0x1a6>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0c6      	beq.n	8007f20 <_svfiprintf_r+0x130>
 8007f92:	9105      	str	r1, [sp, #20]
 8007f94:	e7c4      	b.n	8007f20 <_svfiprintf_r+0x130>
 8007f96:	4604      	mov	r4, r0
 8007f98:	2301      	movs	r3, #1
 8007f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f9e:	e7f0      	b.n	8007f82 <_svfiprintf_r+0x192>
 8007fa0:	ab03      	add	r3, sp, #12
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	462a      	mov	r2, r5
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	4b0f      	ldr	r3, [pc, #60]	; (8007fe8 <_svfiprintf_r+0x1f8>)
 8007faa:	a904      	add	r1, sp, #16
 8007fac:	f7fc fd1a 	bl	80049e4 <_printf_float>
 8007fb0:	1c42      	adds	r2, r0, #1
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	d1d6      	bne.n	8007f64 <_svfiprintf_r+0x174>
 8007fb6:	89ab      	ldrh	r3, [r5, #12]
 8007fb8:	065b      	lsls	r3, r3, #25
 8007fba:	f53f af2d 	bmi.w	8007e18 <_svfiprintf_r+0x28>
 8007fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fc0:	b01d      	add	sp, #116	; 0x74
 8007fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc6:	ab03      	add	r3, sp, #12
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	462a      	mov	r2, r5
 8007fcc:	4638      	mov	r0, r7
 8007fce:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <_svfiprintf_r+0x1f8>)
 8007fd0:	a904      	add	r1, sp, #16
 8007fd2:	f7fc ffa7 	bl	8004f24 <_printf_i>
 8007fd6:	e7eb      	b.n	8007fb0 <_svfiprintf_r+0x1c0>
 8007fd8:	0800b810 	.word	0x0800b810
 8007fdc:	0800b816 	.word	0x0800b816
 8007fe0:	0800b81a 	.word	0x0800b81a
 8007fe4:	080049e5 	.word	0x080049e5
 8007fe8:	08007d3d 	.word	0x08007d3d

08007fec <__sflush_r>:
 8007fec:	898a      	ldrh	r2, [r1, #12]
 8007fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	0710      	lsls	r0, r2, #28
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	d457      	bmi.n	80080a8 <__sflush_r+0xbc>
 8007ff8:	684b      	ldr	r3, [r1, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dc04      	bgt.n	8008008 <__sflush_r+0x1c>
 8007ffe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008000:	2b00      	cmp	r3, #0
 8008002:	dc01      	bgt.n	8008008 <__sflush_r+0x1c>
 8008004:	2000      	movs	r0, #0
 8008006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800800a:	2e00      	cmp	r6, #0
 800800c:	d0fa      	beq.n	8008004 <__sflush_r+0x18>
 800800e:	2300      	movs	r3, #0
 8008010:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008014:	682f      	ldr	r7, [r5, #0]
 8008016:	6a21      	ldr	r1, [r4, #32]
 8008018:	602b      	str	r3, [r5, #0]
 800801a:	d032      	beq.n	8008082 <__sflush_r+0x96>
 800801c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	075a      	lsls	r2, r3, #29
 8008022:	d505      	bpl.n	8008030 <__sflush_r+0x44>
 8008024:	6863      	ldr	r3, [r4, #4]
 8008026:	1ac0      	subs	r0, r0, r3
 8008028:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800802a:	b10b      	cbz	r3, 8008030 <__sflush_r+0x44>
 800802c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800802e:	1ac0      	subs	r0, r0, r3
 8008030:	2300      	movs	r3, #0
 8008032:	4602      	mov	r2, r0
 8008034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008036:	4628      	mov	r0, r5
 8008038:	6a21      	ldr	r1, [r4, #32]
 800803a:	47b0      	blx	r6
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	d106      	bne.n	8008050 <__sflush_r+0x64>
 8008042:	6829      	ldr	r1, [r5, #0]
 8008044:	291d      	cmp	r1, #29
 8008046:	d82b      	bhi.n	80080a0 <__sflush_r+0xb4>
 8008048:	4a28      	ldr	r2, [pc, #160]	; (80080ec <__sflush_r+0x100>)
 800804a:	410a      	asrs	r2, r1
 800804c:	07d6      	lsls	r6, r2, #31
 800804e:	d427      	bmi.n	80080a0 <__sflush_r+0xb4>
 8008050:	2200      	movs	r2, #0
 8008052:	6062      	str	r2, [r4, #4]
 8008054:	6922      	ldr	r2, [r4, #16]
 8008056:	04d9      	lsls	r1, r3, #19
 8008058:	6022      	str	r2, [r4, #0]
 800805a:	d504      	bpl.n	8008066 <__sflush_r+0x7a>
 800805c:	1c42      	adds	r2, r0, #1
 800805e:	d101      	bne.n	8008064 <__sflush_r+0x78>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	b903      	cbnz	r3, 8008066 <__sflush_r+0x7a>
 8008064:	6560      	str	r0, [r4, #84]	; 0x54
 8008066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008068:	602f      	str	r7, [r5, #0]
 800806a:	2900      	cmp	r1, #0
 800806c:	d0ca      	beq.n	8008004 <__sflush_r+0x18>
 800806e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008072:	4299      	cmp	r1, r3
 8008074:	d002      	beq.n	800807c <__sflush_r+0x90>
 8008076:	4628      	mov	r0, r5
 8008078:	f7fe faaa 	bl	80065d0 <_free_r>
 800807c:	2000      	movs	r0, #0
 800807e:	6360      	str	r0, [r4, #52]	; 0x34
 8008080:	e7c1      	b.n	8008006 <__sflush_r+0x1a>
 8008082:	2301      	movs	r3, #1
 8008084:	4628      	mov	r0, r5
 8008086:	47b0      	blx	r6
 8008088:	1c41      	adds	r1, r0, #1
 800808a:	d1c8      	bne.n	800801e <__sflush_r+0x32>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0c5      	beq.n	800801e <__sflush_r+0x32>
 8008092:	2b1d      	cmp	r3, #29
 8008094:	d001      	beq.n	800809a <__sflush_r+0xae>
 8008096:	2b16      	cmp	r3, #22
 8008098:	d101      	bne.n	800809e <__sflush_r+0xb2>
 800809a:	602f      	str	r7, [r5, #0]
 800809c:	e7b2      	b.n	8008004 <__sflush_r+0x18>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	e7ae      	b.n	8008006 <__sflush_r+0x1a>
 80080a8:	690f      	ldr	r7, [r1, #16]
 80080aa:	2f00      	cmp	r7, #0
 80080ac:	d0aa      	beq.n	8008004 <__sflush_r+0x18>
 80080ae:	0793      	lsls	r3, r2, #30
 80080b0:	bf18      	it	ne
 80080b2:	2300      	movne	r3, #0
 80080b4:	680e      	ldr	r6, [r1, #0]
 80080b6:	bf08      	it	eq
 80080b8:	694b      	ldreq	r3, [r1, #20]
 80080ba:	1bf6      	subs	r6, r6, r7
 80080bc:	600f      	str	r7, [r1, #0]
 80080be:	608b      	str	r3, [r1, #8]
 80080c0:	2e00      	cmp	r6, #0
 80080c2:	dd9f      	ble.n	8008004 <__sflush_r+0x18>
 80080c4:	4633      	mov	r3, r6
 80080c6:	463a      	mov	r2, r7
 80080c8:	4628      	mov	r0, r5
 80080ca:	6a21      	ldr	r1, [r4, #32]
 80080cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80080d0:	47e0      	blx	ip
 80080d2:	2800      	cmp	r0, #0
 80080d4:	dc06      	bgt.n	80080e4 <__sflush_r+0xf8>
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	f04f 30ff 	mov.w	r0, #4294967295
 80080dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	e790      	b.n	8008006 <__sflush_r+0x1a>
 80080e4:	4407      	add	r7, r0
 80080e6:	1a36      	subs	r6, r6, r0
 80080e8:	e7ea      	b.n	80080c0 <__sflush_r+0xd4>
 80080ea:	bf00      	nop
 80080ec:	dfbffffe 	.word	0xdfbffffe

080080f0 <_fflush_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	690b      	ldr	r3, [r1, #16]
 80080f4:	4605      	mov	r5, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	b913      	cbnz	r3, 8008100 <_fflush_r+0x10>
 80080fa:	2500      	movs	r5, #0
 80080fc:	4628      	mov	r0, r5
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	b118      	cbz	r0, 800810a <_fflush_r+0x1a>
 8008102:	6a03      	ldr	r3, [r0, #32]
 8008104:	b90b      	cbnz	r3, 800810a <_fflush_r+0x1a>
 8008106:	f7fd fac9 	bl	800569c <__sinit>
 800810a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d0f3      	beq.n	80080fa <_fflush_r+0xa>
 8008112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008114:	07d0      	lsls	r0, r2, #31
 8008116:	d404      	bmi.n	8008122 <_fflush_r+0x32>
 8008118:	0599      	lsls	r1, r3, #22
 800811a:	d402      	bmi.n	8008122 <_fflush_r+0x32>
 800811c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800811e:	f7fd fbd4 	bl	80058ca <__retarget_lock_acquire_recursive>
 8008122:	4628      	mov	r0, r5
 8008124:	4621      	mov	r1, r4
 8008126:	f7ff ff61 	bl	8007fec <__sflush_r>
 800812a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800812c:	4605      	mov	r5, r0
 800812e:	07da      	lsls	r2, r3, #31
 8008130:	d4e4      	bmi.n	80080fc <_fflush_r+0xc>
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	059b      	lsls	r3, r3, #22
 8008136:	d4e1      	bmi.n	80080fc <_fflush_r+0xc>
 8008138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800813a:	f7fd fbc7 	bl	80058cc <__retarget_lock_release_recursive>
 800813e:	e7dd      	b.n	80080fc <_fflush_r+0xc>

08008140 <memmove>:
 8008140:	4288      	cmp	r0, r1
 8008142:	b510      	push	{r4, lr}
 8008144:	eb01 0402 	add.w	r4, r1, r2
 8008148:	d902      	bls.n	8008150 <memmove+0x10>
 800814a:	4284      	cmp	r4, r0
 800814c:	4623      	mov	r3, r4
 800814e:	d807      	bhi.n	8008160 <memmove+0x20>
 8008150:	1e43      	subs	r3, r0, #1
 8008152:	42a1      	cmp	r1, r4
 8008154:	d008      	beq.n	8008168 <memmove+0x28>
 8008156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800815a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800815e:	e7f8      	b.n	8008152 <memmove+0x12>
 8008160:	4601      	mov	r1, r0
 8008162:	4402      	add	r2, r0
 8008164:	428a      	cmp	r2, r1
 8008166:	d100      	bne.n	800816a <memmove+0x2a>
 8008168:	bd10      	pop	{r4, pc}
 800816a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800816e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008172:	e7f7      	b.n	8008164 <memmove+0x24>

08008174 <strncmp>:
 8008174:	b510      	push	{r4, lr}
 8008176:	b16a      	cbz	r2, 8008194 <strncmp+0x20>
 8008178:	3901      	subs	r1, #1
 800817a:	1884      	adds	r4, r0, r2
 800817c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008180:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008184:	429a      	cmp	r2, r3
 8008186:	d103      	bne.n	8008190 <strncmp+0x1c>
 8008188:	42a0      	cmp	r0, r4
 800818a:	d001      	beq.n	8008190 <strncmp+0x1c>
 800818c:	2a00      	cmp	r2, #0
 800818e:	d1f5      	bne.n	800817c <strncmp+0x8>
 8008190:	1ad0      	subs	r0, r2, r3
 8008192:	bd10      	pop	{r4, pc}
 8008194:	4610      	mov	r0, r2
 8008196:	e7fc      	b.n	8008192 <strncmp+0x1e>

08008198 <_sbrk_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	2300      	movs	r3, #0
 800819c:	4d05      	ldr	r5, [pc, #20]	; (80081b4 <_sbrk_r+0x1c>)
 800819e:	4604      	mov	r4, r0
 80081a0:	4608      	mov	r0, r1
 80081a2:	602b      	str	r3, [r5, #0]
 80081a4:	f7f9 f944 	bl	8001430 <_sbrk>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_sbrk_r+0x1a>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_sbrk_r+0x1a>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	20000828 	.word	0x20000828

080081b8 <memcpy>:
 80081b8:	440a      	add	r2, r1
 80081ba:	4291      	cmp	r1, r2
 80081bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80081c0:	d100      	bne.n	80081c4 <memcpy+0xc>
 80081c2:	4770      	bx	lr
 80081c4:	b510      	push	{r4, lr}
 80081c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ca:	4291      	cmp	r1, r2
 80081cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081d0:	d1f9      	bne.n	80081c6 <memcpy+0xe>
 80081d2:	bd10      	pop	{r4, pc}

080081d4 <nan>:
 80081d4:	2000      	movs	r0, #0
 80081d6:	4901      	ldr	r1, [pc, #4]	; (80081dc <nan+0x8>)
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	7ff80000 	.word	0x7ff80000

080081e0 <__assert_func>:
 80081e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081e2:	4614      	mov	r4, r2
 80081e4:	461a      	mov	r2, r3
 80081e6:	4b09      	ldr	r3, [pc, #36]	; (800820c <__assert_func+0x2c>)
 80081e8:	4605      	mov	r5, r0
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68d8      	ldr	r0, [r3, #12]
 80081ee:	b14c      	cbz	r4, 8008204 <__assert_func+0x24>
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <__assert_func+0x30>)
 80081f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081f6:	9100      	str	r1, [sp, #0]
 80081f8:	462b      	mov	r3, r5
 80081fa:	4906      	ldr	r1, [pc, #24]	; (8008214 <__assert_func+0x34>)
 80081fc:	f000 fbca 	bl	8008994 <fiprintf>
 8008200:	f000 fbda 	bl	80089b8 <abort>
 8008204:	4b04      	ldr	r3, [pc, #16]	; (8008218 <__assert_func+0x38>)
 8008206:	461c      	mov	r4, r3
 8008208:	e7f3      	b.n	80081f2 <__assert_func+0x12>
 800820a:	bf00      	nop
 800820c:	20000068 	.word	0x20000068
 8008210:	0800b829 	.word	0x0800b829
 8008214:	0800b836 	.word	0x0800b836
 8008218:	0800b864 	.word	0x0800b864

0800821c <_calloc_r>:
 800821c:	b570      	push	{r4, r5, r6, lr}
 800821e:	fba1 5402 	umull	r5, r4, r1, r2
 8008222:	b934      	cbnz	r4, 8008232 <_calloc_r+0x16>
 8008224:	4629      	mov	r1, r5
 8008226:	f7fe fa43 	bl	80066b0 <_malloc_r>
 800822a:	4606      	mov	r6, r0
 800822c:	b928      	cbnz	r0, 800823a <_calloc_r+0x1e>
 800822e:	4630      	mov	r0, r6
 8008230:	bd70      	pop	{r4, r5, r6, pc}
 8008232:	220c      	movs	r2, #12
 8008234:	2600      	movs	r6, #0
 8008236:	6002      	str	r2, [r0, #0]
 8008238:	e7f9      	b.n	800822e <_calloc_r+0x12>
 800823a:	462a      	mov	r2, r5
 800823c:	4621      	mov	r1, r4
 800823e:	f7fd fac6 	bl	80057ce <memset>
 8008242:	e7f4      	b.n	800822e <_calloc_r+0x12>

08008244 <rshift>:
 8008244:	6903      	ldr	r3, [r0, #16]
 8008246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800824a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800824e:	f100 0414 	add.w	r4, r0, #20
 8008252:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008256:	dd46      	ble.n	80082e6 <rshift+0xa2>
 8008258:	f011 011f 	ands.w	r1, r1, #31
 800825c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008260:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008264:	d10c      	bne.n	8008280 <rshift+0x3c>
 8008266:	4629      	mov	r1, r5
 8008268:	f100 0710 	add.w	r7, r0, #16
 800826c:	42b1      	cmp	r1, r6
 800826e:	d335      	bcc.n	80082dc <rshift+0x98>
 8008270:	1a9b      	subs	r3, r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	1eea      	subs	r2, r5, #3
 8008276:	4296      	cmp	r6, r2
 8008278:	bf38      	it	cc
 800827a:	2300      	movcc	r3, #0
 800827c:	4423      	add	r3, r4
 800827e:	e015      	b.n	80082ac <rshift+0x68>
 8008280:	46a1      	mov	r9, r4
 8008282:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008286:	f1c1 0820 	rsb	r8, r1, #32
 800828a:	40cf      	lsrs	r7, r1
 800828c:	f105 0e04 	add.w	lr, r5, #4
 8008290:	4576      	cmp	r6, lr
 8008292:	46f4      	mov	ip, lr
 8008294:	d816      	bhi.n	80082c4 <rshift+0x80>
 8008296:	1a9a      	subs	r2, r3, r2
 8008298:	0092      	lsls	r2, r2, #2
 800829a:	3a04      	subs	r2, #4
 800829c:	3501      	adds	r5, #1
 800829e:	42ae      	cmp	r6, r5
 80082a0:	bf38      	it	cc
 80082a2:	2200      	movcc	r2, #0
 80082a4:	18a3      	adds	r3, r4, r2
 80082a6:	50a7      	str	r7, [r4, r2]
 80082a8:	b107      	cbz	r7, 80082ac <rshift+0x68>
 80082aa:	3304      	adds	r3, #4
 80082ac:	42a3      	cmp	r3, r4
 80082ae:	eba3 0204 	sub.w	r2, r3, r4
 80082b2:	bf08      	it	eq
 80082b4:	2300      	moveq	r3, #0
 80082b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082ba:	6102      	str	r2, [r0, #16]
 80082bc:	bf08      	it	eq
 80082be:	6143      	streq	r3, [r0, #20]
 80082c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082c4:	f8dc c000 	ldr.w	ip, [ip]
 80082c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80082cc:	ea4c 0707 	orr.w	r7, ip, r7
 80082d0:	f849 7b04 	str.w	r7, [r9], #4
 80082d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082d8:	40cf      	lsrs	r7, r1
 80082da:	e7d9      	b.n	8008290 <rshift+0x4c>
 80082dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80082e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80082e4:	e7c2      	b.n	800826c <rshift+0x28>
 80082e6:	4623      	mov	r3, r4
 80082e8:	e7e0      	b.n	80082ac <rshift+0x68>

080082ea <__hexdig_fun>:
 80082ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80082ee:	2b09      	cmp	r3, #9
 80082f0:	d802      	bhi.n	80082f8 <__hexdig_fun+0xe>
 80082f2:	3820      	subs	r0, #32
 80082f4:	b2c0      	uxtb	r0, r0
 80082f6:	4770      	bx	lr
 80082f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80082fc:	2b05      	cmp	r3, #5
 80082fe:	d801      	bhi.n	8008304 <__hexdig_fun+0x1a>
 8008300:	3847      	subs	r0, #71	; 0x47
 8008302:	e7f7      	b.n	80082f4 <__hexdig_fun+0xa>
 8008304:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008308:	2b05      	cmp	r3, #5
 800830a:	d801      	bhi.n	8008310 <__hexdig_fun+0x26>
 800830c:	3827      	subs	r0, #39	; 0x27
 800830e:	e7f1      	b.n	80082f4 <__hexdig_fun+0xa>
 8008310:	2000      	movs	r0, #0
 8008312:	4770      	bx	lr

08008314 <__gethex>:
 8008314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008318:	4681      	mov	r9, r0
 800831a:	468a      	mov	sl, r1
 800831c:	4617      	mov	r7, r2
 800831e:	680a      	ldr	r2, [r1, #0]
 8008320:	b085      	sub	sp, #20
 8008322:	f102 0b02 	add.w	fp, r2, #2
 8008326:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800832a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800832e:	9302      	str	r3, [sp, #8]
 8008330:	32fe      	adds	r2, #254	; 0xfe
 8008332:	eb02 030b 	add.w	r3, r2, fp
 8008336:	46d8      	mov	r8, fp
 8008338:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	2830      	cmp	r0, #48	; 0x30
 8008340:	d0f7      	beq.n	8008332 <__gethex+0x1e>
 8008342:	f7ff ffd2 	bl	80082ea <__hexdig_fun>
 8008346:	4604      	mov	r4, r0
 8008348:	2800      	cmp	r0, #0
 800834a:	d138      	bne.n	80083be <__gethex+0xaa>
 800834c:	2201      	movs	r2, #1
 800834e:	4640      	mov	r0, r8
 8008350:	49a7      	ldr	r1, [pc, #668]	; (80085f0 <__gethex+0x2dc>)
 8008352:	f7ff ff0f 	bl	8008174 <strncmp>
 8008356:	4606      	mov	r6, r0
 8008358:	2800      	cmp	r0, #0
 800835a:	d169      	bne.n	8008430 <__gethex+0x11c>
 800835c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008360:	465d      	mov	r5, fp
 8008362:	f7ff ffc2 	bl	80082ea <__hexdig_fun>
 8008366:	2800      	cmp	r0, #0
 8008368:	d064      	beq.n	8008434 <__gethex+0x120>
 800836a:	465a      	mov	r2, fp
 800836c:	7810      	ldrb	r0, [r2, #0]
 800836e:	4690      	mov	r8, r2
 8008370:	2830      	cmp	r0, #48	; 0x30
 8008372:	f102 0201 	add.w	r2, r2, #1
 8008376:	d0f9      	beq.n	800836c <__gethex+0x58>
 8008378:	f7ff ffb7 	bl	80082ea <__hexdig_fun>
 800837c:	2301      	movs	r3, #1
 800837e:	fab0 f480 	clz	r4, r0
 8008382:	465e      	mov	r6, fp
 8008384:	0964      	lsrs	r4, r4, #5
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	4642      	mov	r2, r8
 800838a:	4615      	mov	r5, r2
 800838c:	7828      	ldrb	r0, [r5, #0]
 800838e:	3201      	adds	r2, #1
 8008390:	f7ff ffab 	bl	80082ea <__hexdig_fun>
 8008394:	2800      	cmp	r0, #0
 8008396:	d1f8      	bne.n	800838a <__gethex+0x76>
 8008398:	2201      	movs	r2, #1
 800839a:	4628      	mov	r0, r5
 800839c:	4994      	ldr	r1, [pc, #592]	; (80085f0 <__gethex+0x2dc>)
 800839e:	f7ff fee9 	bl	8008174 <strncmp>
 80083a2:	b978      	cbnz	r0, 80083c4 <__gethex+0xb0>
 80083a4:	b946      	cbnz	r6, 80083b8 <__gethex+0xa4>
 80083a6:	1c6e      	adds	r6, r5, #1
 80083a8:	4632      	mov	r2, r6
 80083aa:	4615      	mov	r5, r2
 80083ac:	7828      	ldrb	r0, [r5, #0]
 80083ae:	3201      	adds	r2, #1
 80083b0:	f7ff ff9b 	bl	80082ea <__hexdig_fun>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d1f8      	bne.n	80083aa <__gethex+0x96>
 80083b8:	1b73      	subs	r3, r6, r5
 80083ba:	009e      	lsls	r6, r3, #2
 80083bc:	e004      	b.n	80083c8 <__gethex+0xb4>
 80083be:	2400      	movs	r4, #0
 80083c0:	4626      	mov	r6, r4
 80083c2:	e7e1      	b.n	8008388 <__gethex+0x74>
 80083c4:	2e00      	cmp	r6, #0
 80083c6:	d1f7      	bne.n	80083b8 <__gethex+0xa4>
 80083c8:	782b      	ldrb	r3, [r5, #0]
 80083ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80083ce:	2b50      	cmp	r3, #80	; 0x50
 80083d0:	d13d      	bne.n	800844e <__gethex+0x13a>
 80083d2:	786b      	ldrb	r3, [r5, #1]
 80083d4:	2b2b      	cmp	r3, #43	; 0x2b
 80083d6:	d02f      	beq.n	8008438 <__gethex+0x124>
 80083d8:	2b2d      	cmp	r3, #45	; 0x2d
 80083da:	d031      	beq.n	8008440 <__gethex+0x12c>
 80083dc:	f04f 0b00 	mov.w	fp, #0
 80083e0:	1c69      	adds	r1, r5, #1
 80083e2:	7808      	ldrb	r0, [r1, #0]
 80083e4:	f7ff ff81 	bl	80082ea <__hexdig_fun>
 80083e8:	1e42      	subs	r2, r0, #1
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	2a18      	cmp	r2, #24
 80083ee:	d82e      	bhi.n	800844e <__gethex+0x13a>
 80083f0:	f1a0 0210 	sub.w	r2, r0, #16
 80083f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80083f8:	f7ff ff77 	bl	80082ea <__hexdig_fun>
 80083fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008400:	fa5f fc8c 	uxtb.w	ip, ip
 8008404:	f1bc 0f18 	cmp.w	ip, #24
 8008408:	d91d      	bls.n	8008446 <__gethex+0x132>
 800840a:	f1bb 0f00 	cmp.w	fp, #0
 800840e:	d000      	beq.n	8008412 <__gethex+0xfe>
 8008410:	4252      	negs	r2, r2
 8008412:	4416      	add	r6, r2
 8008414:	f8ca 1000 	str.w	r1, [sl]
 8008418:	b1dc      	cbz	r4, 8008452 <__gethex+0x13e>
 800841a:	9b01      	ldr	r3, [sp, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	bf14      	ite	ne
 8008420:	f04f 0800 	movne.w	r8, #0
 8008424:	f04f 0806 	moveq.w	r8, #6
 8008428:	4640      	mov	r0, r8
 800842a:	b005      	add	sp, #20
 800842c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008430:	4645      	mov	r5, r8
 8008432:	4626      	mov	r6, r4
 8008434:	2401      	movs	r4, #1
 8008436:	e7c7      	b.n	80083c8 <__gethex+0xb4>
 8008438:	f04f 0b00 	mov.w	fp, #0
 800843c:	1ca9      	adds	r1, r5, #2
 800843e:	e7d0      	b.n	80083e2 <__gethex+0xce>
 8008440:	f04f 0b01 	mov.w	fp, #1
 8008444:	e7fa      	b.n	800843c <__gethex+0x128>
 8008446:	230a      	movs	r3, #10
 8008448:	fb03 0002 	mla	r0, r3, r2, r0
 800844c:	e7d0      	b.n	80083f0 <__gethex+0xdc>
 800844e:	4629      	mov	r1, r5
 8008450:	e7e0      	b.n	8008414 <__gethex+0x100>
 8008452:	4621      	mov	r1, r4
 8008454:	eba5 0308 	sub.w	r3, r5, r8
 8008458:	3b01      	subs	r3, #1
 800845a:	2b07      	cmp	r3, #7
 800845c:	dc0a      	bgt.n	8008474 <__gethex+0x160>
 800845e:	4648      	mov	r0, r9
 8008460:	f7fe f9b2 	bl	80067c8 <_Balloc>
 8008464:	4604      	mov	r4, r0
 8008466:	b940      	cbnz	r0, 800847a <__gethex+0x166>
 8008468:	4602      	mov	r2, r0
 800846a:	21e4      	movs	r1, #228	; 0xe4
 800846c:	4b61      	ldr	r3, [pc, #388]	; (80085f4 <__gethex+0x2e0>)
 800846e:	4862      	ldr	r0, [pc, #392]	; (80085f8 <__gethex+0x2e4>)
 8008470:	f7ff feb6 	bl	80081e0 <__assert_func>
 8008474:	3101      	adds	r1, #1
 8008476:	105b      	asrs	r3, r3, #1
 8008478:	e7ef      	b.n	800845a <__gethex+0x146>
 800847a:	2300      	movs	r3, #0
 800847c:	469b      	mov	fp, r3
 800847e:	f100 0a14 	add.w	sl, r0, #20
 8008482:	f8cd a004 	str.w	sl, [sp, #4]
 8008486:	45a8      	cmp	r8, r5
 8008488:	d344      	bcc.n	8008514 <__gethex+0x200>
 800848a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800848e:	4658      	mov	r0, fp
 8008490:	f848 bb04 	str.w	fp, [r8], #4
 8008494:	eba8 080a 	sub.w	r8, r8, sl
 8008498:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800849c:	6122      	str	r2, [r4, #16]
 800849e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80084a2:	f7fe fa83 	bl	80069ac <__hi0bits>
 80084a6:	683d      	ldr	r5, [r7, #0]
 80084a8:	eba8 0800 	sub.w	r8, r8, r0
 80084ac:	45a8      	cmp	r8, r5
 80084ae:	dd59      	ble.n	8008564 <__gethex+0x250>
 80084b0:	eba8 0805 	sub.w	r8, r8, r5
 80084b4:	4641      	mov	r1, r8
 80084b6:	4620      	mov	r0, r4
 80084b8:	f7fe fe01 	bl	80070be <__any_on>
 80084bc:	4683      	mov	fp, r0
 80084be:	b1b8      	cbz	r0, 80084f0 <__gethex+0x1dc>
 80084c0:	f04f 0b01 	mov.w	fp, #1
 80084c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80084c8:	1159      	asrs	r1, r3, #5
 80084ca:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80084ce:	f003 021f 	and.w	r2, r3, #31
 80084d2:	fa0b f202 	lsl.w	r2, fp, r2
 80084d6:	420a      	tst	r2, r1
 80084d8:	d00a      	beq.n	80084f0 <__gethex+0x1dc>
 80084da:	455b      	cmp	r3, fp
 80084dc:	dd06      	ble.n	80084ec <__gethex+0x1d8>
 80084de:	4620      	mov	r0, r4
 80084e0:	f1a8 0102 	sub.w	r1, r8, #2
 80084e4:	f7fe fdeb 	bl	80070be <__any_on>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d138      	bne.n	800855e <__gethex+0x24a>
 80084ec:	f04f 0b02 	mov.w	fp, #2
 80084f0:	4641      	mov	r1, r8
 80084f2:	4620      	mov	r0, r4
 80084f4:	f7ff fea6 	bl	8008244 <rshift>
 80084f8:	4446      	add	r6, r8
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	42b3      	cmp	r3, r6
 80084fe:	da41      	bge.n	8008584 <__gethex+0x270>
 8008500:	4621      	mov	r1, r4
 8008502:	4648      	mov	r0, r9
 8008504:	f7fe f9a0 	bl	8006848 <_Bfree>
 8008508:	2300      	movs	r3, #0
 800850a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800850c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	e789      	b.n	8008428 <__gethex+0x114>
 8008514:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008518:	2a2e      	cmp	r2, #46	; 0x2e
 800851a:	d014      	beq.n	8008546 <__gethex+0x232>
 800851c:	2b20      	cmp	r3, #32
 800851e:	d106      	bne.n	800852e <__gethex+0x21a>
 8008520:	9b01      	ldr	r3, [sp, #4]
 8008522:	f843 bb04 	str.w	fp, [r3], #4
 8008526:	f04f 0b00 	mov.w	fp, #0
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	465b      	mov	r3, fp
 800852e:	7828      	ldrb	r0, [r5, #0]
 8008530:	9303      	str	r3, [sp, #12]
 8008532:	f7ff feda 	bl	80082ea <__hexdig_fun>
 8008536:	9b03      	ldr	r3, [sp, #12]
 8008538:	f000 000f 	and.w	r0, r0, #15
 800853c:	4098      	lsls	r0, r3
 800853e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008542:	3304      	adds	r3, #4
 8008544:	e79f      	b.n	8008486 <__gethex+0x172>
 8008546:	45a8      	cmp	r8, r5
 8008548:	d8e8      	bhi.n	800851c <__gethex+0x208>
 800854a:	2201      	movs	r2, #1
 800854c:	4628      	mov	r0, r5
 800854e:	4928      	ldr	r1, [pc, #160]	; (80085f0 <__gethex+0x2dc>)
 8008550:	9303      	str	r3, [sp, #12]
 8008552:	f7ff fe0f 	bl	8008174 <strncmp>
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	2800      	cmp	r0, #0
 800855a:	d1df      	bne.n	800851c <__gethex+0x208>
 800855c:	e793      	b.n	8008486 <__gethex+0x172>
 800855e:	f04f 0b03 	mov.w	fp, #3
 8008562:	e7c5      	b.n	80084f0 <__gethex+0x1dc>
 8008564:	da0b      	bge.n	800857e <__gethex+0x26a>
 8008566:	eba5 0808 	sub.w	r8, r5, r8
 800856a:	4621      	mov	r1, r4
 800856c:	4642      	mov	r2, r8
 800856e:	4648      	mov	r0, r9
 8008570:	f7fe fb82 	bl	8006c78 <__lshift>
 8008574:	4604      	mov	r4, r0
 8008576:	eba6 0608 	sub.w	r6, r6, r8
 800857a:	f100 0a14 	add.w	sl, r0, #20
 800857e:	f04f 0b00 	mov.w	fp, #0
 8008582:	e7ba      	b.n	80084fa <__gethex+0x1e6>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	42b3      	cmp	r3, r6
 8008588:	dd74      	ble.n	8008674 <__gethex+0x360>
 800858a:	1b9e      	subs	r6, r3, r6
 800858c:	42b5      	cmp	r5, r6
 800858e:	dc35      	bgt.n	80085fc <__gethex+0x2e8>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d023      	beq.n	80085de <__gethex+0x2ca>
 8008596:	2b03      	cmp	r3, #3
 8008598:	d025      	beq.n	80085e6 <__gethex+0x2d2>
 800859a:	2b01      	cmp	r3, #1
 800859c:	d115      	bne.n	80085ca <__gethex+0x2b6>
 800859e:	42b5      	cmp	r5, r6
 80085a0:	d113      	bne.n	80085ca <__gethex+0x2b6>
 80085a2:	2d01      	cmp	r5, #1
 80085a4:	d10b      	bne.n	80085be <__gethex+0x2aa>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	9a02      	ldr	r2, [sp, #8]
 80085aa:	f04f 0862 	mov.w	r8, #98	; 0x62
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	2301      	movs	r3, #1
 80085b2:	6123      	str	r3, [r4, #16]
 80085b4:	f8ca 3000 	str.w	r3, [sl]
 80085b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ba:	601c      	str	r4, [r3, #0]
 80085bc:	e734      	b.n	8008428 <__gethex+0x114>
 80085be:	4620      	mov	r0, r4
 80085c0:	1e69      	subs	r1, r5, #1
 80085c2:	f7fe fd7c 	bl	80070be <__any_on>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d1ed      	bne.n	80085a6 <__gethex+0x292>
 80085ca:	4621      	mov	r1, r4
 80085cc:	4648      	mov	r0, r9
 80085ce:	f7fe f93b 	bl	8006848 <_Bfree>
 80085d2:	2300      	movs	r3, #0
 80085d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085d6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	e724      	b.n	8008428 <__gethex+0x114>
 80085de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1f2      	bne.n	80085ca <__gethex+0x2b6>
 80085e4:	e7df      	b.n	80085a6 <__gethex+0x292>
 80085e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1dc      	bne.n	80085a6 <__gethex+0x292>
 80085ec:	e7ed      	b.n	80085ca <__gethex+0x2b6>
 80085ee:	bf00      	nop
 80085f0:	0800b7bc 	.word	0x0800b7bc
 80085f4:	0800b650 	.word	0x0800b650
 80085f8:	0800b865 	.word	0x0800b865
 80085fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8008600:	f1bb 0f00 	cmp.w	fp, #0
 8008604:	d133      	bne.n	800866e <__gethex+0x35a>
 8008606:	f1b8 0f00 	cmp.w	r8, #0
 800860a:	d004      	beq.n	8008616 <__gethex+0x302>
 800860c:	4641      	mov	r1, r8
 800860e:	4620      	mov	r0, r4
 8008610:	f7fe fd55 	bl	80070be <__any_on>
 8008614:	4683      	mov	fp, r0
 8008616:	2301      	movs	r3, #1
 8008618:	ea4f 1268 	mov.w	r2, r8, asr #5
 800861c:	f008 081f 	and.w	r8, r8, #31
 8008620:	fa03 f308 	lsl.w	r3, r3, r8
 8008624:	f04f 0802 	mov.w	r8, #2
 8008628:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800862c:	4631      	mov	r1, r6
 800862e:	4213      	tst	r3, r2
 8008630:	4620      	mov	r0, r4
 8008632:	bf18      	it	ne
 8008634:	f04b 0b02 	orrne.w	fp, fp, #2
 8008638:	1bad      	subs	r5, r5, r6
 800863a:	f7ff fe03 	bl	8008244 <rshift>
 800863e:	687e      	ldr	r6, [r7, #4]
 8008640:	f1bb 0f00 	cmp.w	fp, #0
 8008644:	d04a      	beq.n	80086dc <__gethex+0x3c8>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b02      	cmp	r3, #2
 800864a:	d016      	beq.n	800867a <__gethex+0x366>
 800864c:	2b03      	cmp	r3, #3
 800864e:	d018      	beq.n	8008682 <__gethex+0x36e>
 8008650:	2b01      	cmp	r3, #1
 8008652:	d109      	bne.n	8008668 <__gethex+0x354>
 8008654:	f01b 0f02 	tst.w	fp, #2
 8008658:	d006      	beq.n	8008668 <__gethex+0x354>
 800865a:	f8da 3000 	ldr.w	r3, [sl]
 800865e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008662:	f01b 0f01 	tst.w	fp, #1
 8008666:	d10f      	bne.n	8008688 <__gethex+0x374>
 8008668:	f048 0810 	orr.w	r8, r8, #16
 800866c:	e036      	b.n	80086dc <__gethex+0x3c8>
 800866e:	f04f 0b01 	mov.w	fp, #1
 8008672:	e7d0      	b.n	8008616 <__gethex+0x302>
 8008674:	f04f 0801 	mov.w	r8, #1
 8008678:	e7e2      	b.n	8008640 <__gethex+0x32c>
 800867a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800867c:	f1c3 0301 	rsb	r3, r3, #1
 8008680:	930f      	str	r3, [sp, #60]	; 0x3c
 8008682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d0ef      	beq.n	8008668 <__gethex+0x354>
 8008688:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800868c:	f104 0214 	add.w	r2, r4, #20
 8008690:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	2300      	movs	r3, #0
 8008698:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800869c:	4694      	mov	ip, r2
 800869e:	f852 1b04 	ldr.w	r1, [r2], #4
 80086a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80086a6:	d01e      	beq.n	80086e6 <__gethex+0x3d2>
 80086a8:	3101      	adds	r1, #1
 80086aa:	f8cc 1000 	str.w	r1, [ip]
 80086ae:	f1b8 0f02 	cmp.w	r8, #2
 80086b2:	f104 0214 	add.w	r2, r4, #20
 80086b6:	d13d      	bne.n	8008734 <__gethex+0x420>
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	42ab      	cmp	r3, r5
 80086be:	d10b      	bne.n	80086d8 <__gethex+0x3c4>
 80086c0:	2301      	movs	r3, #1
 80086c2:	1169      	asrs	r1, r5, #5
 80086c4:	f005 051f 	and.w	r5, r5, #31
 80086c8:	fa03 f505 	lsl.w	r5, r3, r5
 80086cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086d0:	421d      	tst	r5, r3
 80086d2:	bf18      	it	ne
 80086d4:	f04f 0801 	movne.w	r8, #1
 80086d8:	f048 0820 	orr.w	r8, r8, #32
 80086dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086de:	601c      	str	r4, [r3, #0]
 80086e0:	9b02      	ldr	r3, [sp, #8]
 80086e2:	601e      	str	r6, [r3, #0]
 80086e4:	e6a0      	b.n	8008428 <__gethex+0x114>
 80086e6:	4290      	cmp	r0, r2
 80086e8:	f842 3c04 	str.w	r3, [r2, #-4]
 80086ec:	d8d6      	bhi.n	800869c <__gethex+0x388>
 80086ee:	68a2      	ldr	r2, [r4, #8]
 80086f0:	4593      	cmp	fp, r2
 80086f2:	db17      	blt.n	8008724 <__gethex+0x410>
 80086f4:	6861      	ldr	r1, [r4, #4]
 80086f6:	4648      	mov	r0, r9
 80086f8:	3101      	adds	r1, #1
 80086fa:	f7fe f865 	bl	80067c8 <_Balloc>
 80086fe:	4682      	mov	sl, r0
 8008700:	b918      	cbnz	r0, 800870a <__gethex+0x3f6>
 8008702:	4602      	mov	r2, r0
 8008704:	2184      	movs	r1, #132	; 0x84
 8008706:	4b1a      	ldr	r3, [pc, #104]	; (8008770 <__gethex+0x45c>)
 8008708:	e6b1      	b.n	800846e <__gethex+0x15a>
 800870a:	6922      	ldr	r2, [r4, #16]
 800870c:	f104 010c 	add.w	r1, r4, #12
 8008710:	3202      	adds	r2, #2
 8008712:	0092      	lsls	r2, r2, #2
 8008714:	300c      	adds	r0, #12
 8008716:	f7ff fd4f 	bl	80081b8 <memcpy>
 800871a:	4621      	mov	r1, r4
 800871c:	4648      	mov	r0, r9
 800871e:	f7fe f893 	bl	8006848 <_Bfree>
 8008722:	4654      	mov	r4, sl
 8008724:	6922      	ldr	r2, [r4, #16]
 8008726:	1c51      	adds	r1, r2, #1
 8008728:	6121      	str	r1, [r4, #16]
 800872a:	2101      	movs	r1, #1
 800872c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008730:	6151      	str	r1, [r2, #20]
 8008732:	e7bc      	b.n	80086ae <__gethex+0x39a>
 8008734:	6921      	ldr	r1, [r4, #16]
 8008736:	4559      	cmp	r1, fp
 8008738:	dd0b      	ble.n	8008752 <__gethex+0x43e>
 800873a:	2101      	movs	r1, #1
 800873c:	4620      	mov	r0, r4
 800873e:	f7ff fd81 	bl	8008244 <rshift>
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	3601      	adds	r6, #1
 8008746:	42b3      	cmp	r3, r6
 8008748:	f6ff aeda 	blt.w	8008500 <__gethex+0x1ec>
 800874c:	f04f 0801 	mov.w	r8, #1
 8008750:	e7c2      	b.n	80086d8 <__gethex+0x3c4>
 8008752:	f015 051f 	ands.w	r5, r5, #31
 8008756:	d0f9      	beq.n	800874c <__gethex+0x438>
 8008758:	9b01      	ldr	r3, [sp, #4]
 800875a:	f1c5 0520 	rsb	r5, r5, #32
 800875e:	441a      	add	r2, r3
 8008760:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008764:	f7fe f922 	bl	80069ac <__hi0bits>
 8008768:	42a8      	cmp	r0, r5
 800876a:	dbe6      	blt.n	800873a <__gethex+0x426>
 800876c:	e7ee      	b.n	800874c <__gethex+0x438>
 800876e:	bf00      	nop
 8008770:	0800b650 	.word	0x0800b650

08008774 <L_shift>:
 8008774:	f1c2 0208 	rsb	r2, r2, #8
 8008778:	0092      	lsls	r2, r2, #2
 800877a:	b570      	push	{r4, r5, r6, lr}
 800877c:	f1c2 0620 	rsb	r6, r2, #32
 8008780:	6843      	ldr	r3, [r0, #4]
 8008782:	6804      	ldr	r4, [r0, #0]
 8008784:	fa03 f506 	lsl.w	r5, r3, r6
 8008788:	432c      	orrs	r4, r5
 800878a:	40d3      	lsrs	r3, r2
 800878c:	6004      	str	r4, [r0, #0]
 800878e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008792:	4288      	cmp	r0, r1
 8008794:	d3f4      	bcc.n	8008780 <L_shift+0xc>
 8008796:	bd70      	pop	{r4, r5, r6, pc}

08008798 <__match>:
 8008798:	b530      	push	{r4, r5, lr}
 800879a:	6803      	ldr	r3, [r0, #0]
 800879c:	3301      	adds	r3, #1
 800879e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087a2:	b914      	cbnz	r4, 80087aa <__match+0x12>
 80087a4:	6003      	str	r3, [r0, #0]
 80087a6:	2001      	movs	r0, #1
 80087a8:	bd30      	pop	{r4, r5, pc}
 80087aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80087b2:	2d19      	cmp	r5, #25
 80087b4:	bf98      	it	ls
 80087b6:	3220      	addls	r2, #32
 80087b8:	42a2      	cmp	r2, r4
 80087ba:	d0f0      	beq.n	800879e <__match+0x6>
 80087bc:	2000      	movs	r0, #0
 80087be:	e7f3      	b.n	80087a8 <__match+0x10>

080087c0 <__hexnan>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	2500      	movs	r5, #0
 80087c6:	680b      	ldr	r3, [r1, #0]
 80087c8:	4682      	mov	sl, r0
 80087ca:	115e      	asrs	r6, r3, #5
 80087cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80087d0:	f013 031f 	ands.w	r3, r3, #31
 80087d4:	bf18      	it	ne
 80087d6:	3604      	addne	r6, #4
 80087d8:	1f37      	subs	r7, r6, #4
 80087da:	4690      	mov	r8, r2
 80087dc:	46b9      	mov	r9, r7
 80087de:	463c      	mov	r4, r7
 80087e0:	46ab      	mov	fp, r5
 80087e2:	b087      	sub	sp, #28
 80087e4:	6801      	ldr	r1, [r0, #0]
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	f846 5c04 	str.w	r5, [r6, #-4]
 80087ec:	9502      	str	r5, [sp, #8]
 80087ee:	784a      	ldrb	r2, [r1, #1]
 80087f0:	1c4b      	adds	r3, r1, #1
 80087f2:	9303      	str	r3, [sp, #12]
 80087f4:	b342      	cbz	r2, 8008848 <__hexnan+0x88>
 80087f6:	4610      	mov	r0, r2
 80087f8:	9105      	str	r1, [sp, #20]
 80087fa:	9204      	str	r2, [sp, #16]
 80087fc:	f7ff fd75 	bl	80082ea <__hexdig_fun>
 8008800:	2800      	cmp	r0, #0
 8008802:	d14f      	bne.n	80088a4 <__hexnan+0xe4>
 8008804:	9a04      	ldr	r2, [sp, #16]
 8008806:	9905      	ldr	r1, [sp, #20]
 8008808:	2a20      	cmp	r2, #32
 800880a:	d818      	bhi.n	800883e <__hexnan+0x7e>
 800880c:	9b02      	ldr	r3, [sp, #8]
 800880e:	459b      	cmp	fp, r3
 8008810:	dd13      	ble.n	800883a <__hexnan+0x7a>
 8008812:	454c      	cmp	r4, r9
 8008814:	d206      	bcs.n	8008824 <__hexnan+0x64>
 8008816:	2d07      	cmp	r5, #7
 8008818:	dc04      	bgt.n	8008824 <__hexnan+0x64>
 800881a:	462a      	mov	r2, r5
 800881c:	4649      	mov	r1, r9
 800881e:	4620      	mov	r0, r4
 8008820:	f7ff ffa8 	bl	8008774 <L_shift>
 8008824:	4544      	cmp	r4, r8
 8008826:	d950      	bls.n	80088ca <__hexnan+0x10a>
 8008828:	2300      	movs	r3, #0
 800882a:	f1a4 0904 	sub.w	r9, r4, #4
 800882e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008832:	461d      	mov	r5, r3
 8008834:	464c      	mov	r4, r9
 8008836:	f8cd b008 	str.w	fp, [sp, #8]
 800883a:	9903      	ldr	r1, [sp, #12]
 800883c:	e7d7      	b.n	80087ee <__hexnan+0x2e>
 800883e:	2a29      	cmp	r2, #41	; 0x29
 8008840:	d155      	bne.n	80088ee <__hexnan+0x12e>
 8008842:	3102      	adds	r1, #2
 8008844:	f8ca 1000 	str.w	r1, [sl]
 8008848:	f1bb 0f00 	cmp.w	fp, #0
 800884c:	d04f      	beq.n	80088ee <__hexnan+0x12e>
 800884e:	454c      	cmp	r4, r9
 8008850:	d206      	bcs.n	8008860 <__hexnan+0xa0>
 8008852:	2d07      	cmp	r5, #7
 8008854:	dc04      	bgt.n	8008860 <__hexnan+0xa0>
 8008856:	462a      	mov	r2, r5
 8008858:	4649      	mov	r1, r9
 800885a:	4620      	mov	r0, r4
 800885c:	f7ff ff8a 	bl	8008774 <L_shift>
 8008860:	4544      	cmp	r4, r8
 8008862:	d934      	bls.n	80088ce <__hexnan+0x10e>
 8008864:	4623      	mov	r3, r4
 8008866:	f1a8 0204 	sub.w	r2, r8, #4
 800886a:	f853 1b04 	ldr.w	r1, [r3], #4
 800886e:	429f      	cmp	r7, r3
 8008870:	f842 1f04 	str.w	r1, [r2, #4]!
 8008874:	d2f9      	bcs.n	800886a <__hexnan+0xaa>
 8008876:	1b3b      	subs	r3, r7, r4
 8008878:	f023 0303 	bic.w	r3, r3, #3
 800887c:	3304      	adds	r3, #4
 800887e:	3e03      	subs	r6, #3
 8008880:	3401      	adds	r4, #1
 8008882:	42a6      	cmp	r6, r4
 8008884:	bf38      	it	cc
 8008886:	2304      	movcc	r3, #4
 8008888:	2200      	movs	r2, #0
 800888a:	4443      	add	r3, r8
 800888c:	f843 2b04 	str.w	r2, [r3], #4
 8008890:	429f      	cmp	r7, r3
 8008892:	d2fb      	bcs.n	800888c <__hexnan+0xcc>
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	b91b      	cbnz	r3, 80088a0 <__hexnan+0xe0>
 8008898:	4547      	cmp	r7, r8
 800889a:	d126      	bne.n	80088ea <__hexnan+0x12a>
 800889c:	2301      	movs	r3, #1
 800889e:	603b      	str	r3, [r7, #0]
 80088a0:	2005      	movs	r0, #5
 80088a2:	e025      	b.n	80088f0 <__hexnan+0x130>
 80088a4:	3501      	adds	r5, #1
 80088a6:	2d08      	cmp	r5, #8
 80088a8:	f10b 0b01 	add.w	fp, fp, #1
 80088ac:	dd06      	ble.n	80088bc <__hexnan+0xfc>
 80088ae:	4544      	cmp	r4, r8
 80088b0:	d9c3      	bls.n	800883a <__hexnan+0x7a>
 80088b2:	2300      	movs	r3, #0
 80088b4:	2501      	movs	r5, #1
 80088b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80088ba:	3c04      	subs	r4, #4
 80088bc:	6822      	ldr	r2, [r4, #0]
 80088be:	f000 000f 	and.w	r0, r0, #15
 80088c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80088c6:	6020      	str	r0, [r4, #0]
 80088c8:	e7b7      	b.n	800883a <__hexnan+0x7a>
 80088ca:	2508      	movs	r5, #8
 80088cc:	e7b5      	b.n	800883a <__hexnan+0x7a>
 80088ce:	9b01      	ldr	r3, [sp, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0df      	beq.n	8008894 <__hexnan+0xd4>
 80088d4:	f04f 32ff 	mov.w	r2, #4294967295
 80088d8:	f1c3 0320 	rsb	r3, r3, #32
 80088dc:	40da      	lsrs	r2, r3
 80088de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80088e2:	4013      	ands	r3, r2
 80088e4:	f846 3c04 	str.w	r3, [r6, #-4]
 80088e8:	e7d4      	b.n	8008894 <__hexnan+0xd4>
 80088ea:	3f04      	subs	r7, #4
 80088ec:	e7d2      	b.n	8008894 <__hexnan+0xd4>
 80088ee:	2004      	movs	r0, #4
 80088f0:	b007      	add	sp, #28
 80088f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088f6 <__ascii_mbtowc>:
 80088f6:	b082      	sub	sp, #8
 80088f8:	b901      	cbnz	r1, 80088fc <__ascii_mbtowc+0x6>
 80088fa:	a901      	add	r1, sp, #4
 80088fc:	b142      	cbz	r2, 8008910 <__ascii_mbtowc+0x1a>
 80088fe:	b14b      	cbz	r3, 8008914 <__ascii_mbtowc+0x1e>
 8008900:	7813      	ldrb	r3, [r2, #0]
 8008902:	600b      	str	r3, [r1, #0]
 8008904:	7812      	ldrb	r2, [r2, #0]
 8008906:	1e10      	subs	r0, r2, #0
 8008908:	bf18      	it	ne
 800890a:	2001      	movne	r0, #1
 800890c:	b002      	add	sp, #8
 800890e:	4770      	bx	lr
 8008910:	4610      	mov	r0, r2
 8008912:	e7fb      	b.n	800890c <__ascii_mbtowc+0x16>
 8008914:	f06f 0001 	mvn.w	r0, #1
 8008918:	e7f8      	b.n	800890c <__ascii_mbtowc+0x16>

0800891a <_realloc_r>:
 800891a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800891e:	4680      	mov	r8, r0
 8008920:	4614      	mov	r4, r2
 8008922:	460e      	mov	r6, r1
 8008924:	b921      	cbnz	r1, 8008930 <_realloc_r+0x16>
 8008926:	4611      	mov	r1, r2
 8008928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800892c:	f7fd bec0 	b.w	80066b0 <_malloc_r>
 8008930:	b92a      	cbnz	r2, 800893e <_realloc_r+0x24>
 8008932:	f7fd fe4d 	bl	80065d0 <_free_r>
 8008936:	4625      	mov	r5, r4
 8008938:	4628      	mov	r0, r5
 800893a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800893e:	f000 f842 	bl	80089c6 <_malloc_usable_size_r>
 8008942:	4284      	cmp	r4, r0
 8008944:	4607      	mov	r7, r0
 8008946:	d802      	bhi.n	800894e <_realloc_r+0x34>
 8008948:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800894c:	d812      	bhi.n	8008974 <_realloc_r+0x5a>
 800894e:	4621      	mov	r1, r4
 8008950:	4640      	mov	r0, r8
 8008952:	f7fd fead 	bl	80066b0 <_malloc_r>
 8008956:	4605      	mov	r5, r0
 8008958:	2800      	cmp	r0, #0
 800895a:	d0ed      	beq.n	8008938 <_realloc_r+0x1e>
 800895c:	42bc      	cmp	r4, r7
 800895e:	4622      	mov	r2, r4
 8008960:	4631      	mov	r1, r6
 8008962:	bf28      	it	cs
 8008964:	463a      	movcs	r2, r7
 8008966:	f7ff fc27 	bl	80081b8 <memcpy>
 800896a:	4631      	mov	r1, r6
 800896c:	4640      	mov	r0, r8
 800896e:	f7fd fe2f 	bl	80065d0 <_free_r>
 8008972:	e7e1      	b.n	8008938 <_realloc_r+0x1e>
 8008974:	4635      	mov	r5, r6
 8008976:	e7df      	b.n	8008938 <_realloc_r+0x1e>

08008978 <__ascii_wctomb>:
 8008978:	4603      	mov	r3, r0
 800897a:	4608      	mov	r0, r1
 800897c:	b141      	cbz	r1, 8008990 <__ascii_wctomb+0x18>
 800897e:	2aff      	cmp	r2, #255	; 0xff
 8008980:	d904      	bls.n	800898c <__ascii_wctomb+0x14>
 8008982:	228a      	movs	r2, #138	; 0x8a
 8008984:	f04f 30ff 	mov.w	r0, #4294967295
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	4770      	bx	lr
 800898c:	2001      	movs	r0, #1
 800898e:	700a      	strb	r2, [r1, #0]
 8008990:	4770      	bx	lr
	...

08008994 <fiprintf>:
 8008994:	b40e      	push	{r1, r2, r3}
 8008996:	b503      	push	{r0, r1, lr}
 8008998:	4601      	mov	r1, r0
 800899a:	ab03      	add	r3, sp, #12
 800899c:	4805      	ldr	r0, [pc, #20]	; (80089b4 <fiprintf+0x20>)
 800899e:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a2:	6800      	ldr	r0, [r0, #0]
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	f000 f83d 	bl	8008a24 <_vfiprintf_r>
 80089aa:	b002      	add	sp, #8
 80089ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80089b0:	b003      	add	sp, #12
 80089b2:	4770      	bx	lr
 80089b4:	20000068 	.word	0x20000068

080089b8 <abort>:
 80089b8:	2006      	movs	r0, #6
 80089ba:	b508      	push	{r3, lr}
 80089bc:	f000 fa0a 	bl	8008dd4 <raise>
 80089c0:	2001      	movs	r0, #1
 80089c2:	f7f8 fcc2 	bl	800134a <_exit>

080089c6 <_malloc_usable_size_r>:
 80089c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ca:	1f18      	subs	r0, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	bfbc      	itt	lt
 80089d0:	580b      	ldrlt	r3, [r1, r0]
 80089d2:	18c0      	addlt	r0, r0, r3
 80089d4:	4770      	bx	lr

080089d6 <__sfputc_r>:
 80089d6:	6893      	ldr	r3, [r2, #8]
 80089d8:	b410      	push	{r4}
 80089da:	3b01      	subs	r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	6093      	str	r3, [r2, #8]
 80089e0:	da07      	bge.n	80089f2 <__sfputc_r+0x1c>
 80089e2:	6994      	ldr	r4, [r2, #24]
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	db01      	blt.n	80089ec <__sfputc_r+0x16>
 80089e8:	290a      	cmp	r1, #10
 80089ea:	d102      	bne.n	80089f2 <__sfputc_r+0x1c>
 80089ec:	bc10      	pop	{r4}
 80089ee:	f000 b933 	b.w	8008c58 <__swbuf_r>
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	1c58      	adds	r0, r3, #1
 80089f6:	6010      	str	r0, [r2, #0]
 80089f8:	7019      	strb	r1, [r3, #0]
 80089fa:	4608      	mov	r0, r1
 80089fc:	bc10      	pop	{r4}
 80089fe:	4770      	bx	lr

08008a00 <__sfputs_r>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	4606      	mov	r6, r0
 8008a04:	460f      	mov	r7, r1
 8008a06:	4614      	mov	r4, r2
 8008a08:	18d5      	adds	r5, r2, r3
 8008a0a:	42ac      	cmp	r4, r5
 8008a0c:	d101      	bne.n	8008a12 <__sfputs_r+0x12>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e007      	b.n	8008a22 <__sfputs_r+0x22>
 8008a12:	463a      	mov	r2, r7
 8008a14:	4630      	mov	r0, r6
 8008a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1a:	f7ff ffdc 	bl	80089d6 <__sfputc_r>
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	d1f3      	bne.n	8008a0a <__sfputs_r+0xa>
 8008a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a24 <_vfiprintf_r>:
 8008a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a28:	460d      	mov	r5, r1
 8008a2a:	4614      	mov	r4, r2
 8008a2c:	4698      	mov	r8, r3
 8008a2e:	4606      	mov	r6, r0
 8008a30:	b09d      	sub	sp, #116	; 0x74
 8008a32:	b118      	cbz	r0, 8008a3c <_vfiprintf_r+0x18>
 8008a34:	6a03      	ldr	r3, [r0, #32]
 8008a36:	b90b      	cbnz	r3, 8008a3c <_vfiprintf_r+0x18>
 8008a38:	f7fc fe30 	bl	800569c <__sinit>
 8008a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a3e:	07d9      	lsls	r1, r3, #31
 8008a40:	d405      	bmi.n	8008a4e <_vfiprintf_r+0x2a>
 8008a42:	89ab      	ldrh	r3, [r5, #12]
 8008a44:	059a      	lsls	r2, r3, #22
 8008a46:	d402      	bmi.n	8008a4e <_vfiprintf_r+0x2a>
 8008a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a4a:	f7fc ff3e 	bl	80058ca <__retarget_lock_acquire_recursive>
 8008a4e:	89ab      	ldrh	r3, [r5, #12]
 8008a50:	071b      	lsls	r3, r3, #28
 8008a52:	d501      	bpl.n	8008a58 <_vfiprintf_r+0x34>
 8008a54:	692b      	ldr	r3, [r5, #16]
 8008a56:	b99b      	cbnz	r3, 8008a80 <_vfiprintf_r+0x5c>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f000 f93a 	bl	8008cd4 <__swsetup_r>
 8008a60:	b170      	cbz	r0, 8008a80 <_vfiprintf_r+0x5c>
 8008a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a64:	07dc      	lsls	r4, r3, #31
 8008a66:	d504      	bpl.n	8008a72 <_vfiprintf_r+0x4e>
 8008a68:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6c:	b01d      	add	sp, #116	; 0x74
 8008a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a72:	89ab      	ldrh	r3, [r5, #12]
 8008a74:	0598      	lsls	r0, r3, #22
 8008a76:	d4f7      	bmi.n	8008a68 <_vfiprintf_r+0x44>
 8008a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a7a:	f7fc ff27 	bl	80058cc <__retarget_lock_release_recursive>
 8008a7e:	e7f3      	b.n	8008a68 <_vfiprintf_r+0x44>
 8008a80:	2300      	movs	r3, #0
 8008a82:	9309      	str	r3, [sp, #36]	; 0x24
 8008a84:	2320      	movs	r3, #32
 8008a86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a8a:	2330      	movs	r3, #48	; 0x30
 8008a8c:	f04f 0901 	mov.w	r9, #1
 8008a90:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a94:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008c44 <_vfiprintf_r+0x220>
 8008a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a9c:	4623      	mov	r3, r4
 8008a9e:	469a      	mov	sl, r3
 8008aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aa4:	b10a      	cbz	r2, 8008aaa <_vfiprintf_r+0x86>
 8008aa6:	2a25      	cmp	r2, #37	; 0x25
 8008aa8:	d1f9      	bne.n	8008a9e <_vfiprintf_r+0x7a>
 8008aaa:	ebba 0b04 	subs.w	fp, sl, r4
 8008aae:	d00b      	beq.n	8008ac8 <_vfiprintf_r+0xa4>
 8008ab0:	465b      	mov	r3, fp
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7ff ffa2 	bl	8008a00 <__sfputs_r>
 8008abc:	3001      	adds	r0, #1
 8008abe:	f000 80a9 	beq.w	8008c14 <_vfiprintf_r+0x1f0>
 8008ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ac4:	445a      	add	r2, fp
 8008ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 80a1 	beq.w	8008c14 <_vfiprintf_r+0x1f0>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008adc:	f10a 0a01 	add.w	sl, sl, #1
 8008ae0:	9304      	str	r3, [sp, #16]
 8008ae2:	9307      	str	r3, [sp, #28]
 8008ae4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ae8:	931a      	str	r3, [sp, #104]	; 0x68
 8008aea:	4654      	mov	r4, sl
 8008aec:	2205      	movs	r2, #5
 8008aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af2:	4854      	ldr	r0, [pc, #336]	; (8008c44 <_vfiprintf_r+0x220>)
 8008af4:	f7fc feeb 	bl	80058ce <memchr>
 8008af8:	9a04      	ldr	r2, [sp, #16]
 8008afa:	b9d8      	cbnz	r0, 8008b34 <_vfiprintf_r+0x110>
 8008afc:	06d1      	lsls	r1, r2, #27
 8008afe:	bf44      	itt	mi
 8008b00:	2320      	movmi	r3, #32
 8008b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b06:	0713      	lsls	r3, r2, #28
 8008b08:	bf44      	itt	mi
 8008b0a:	232b      	movmi	r3, #43	; 0x2b
 8008b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b10:	f89a 3000 	ldrb.w	r3, [sl]
 8008b14:	2b2a      	cmp	r3, #42	; 0x2a
 8008b16:	d015      	beq.n	8008b44 <_vfiprintf_r+0x120>
 8008b18:	4654      	mov	r4, sl
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	f04f 0c0a 	mov.w	ip, #10
 8008b20:	9a07      	ldr	r2, [sp, #28]
 8008b22:	4621      	mov	r1, r4
 8008b24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b28:	3b30      	subs	r3, #48	; 0x30
 8008b2a:	2b09      	cmp	r3, #9
 8008b2c:	d94d      	bls.n	8008bca <_vfiprintf_r+0x1a6>
 8008b2e:	b1b0      	cbz	r0, 8008b5e <_vfiprintf_r+0x13a>
 8008b30:	9207      	str	r2, [sp, #28]
 8008b32:	e014      	b.n	8008b5e <_vfiprintf_r+0x13a>
 8008b34:	eba0 0308 	sub.w	r3, r0, r8
 8008b38:	fa09 f303 	lsl.w	r3, r9, r3
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	46a2      	mov	sl, r4
 8008b40:	9304      	str	r3, [sp, #16]
 8008b42:	e7d2      	b.n	8008aea <_vfiprintf_r+0xc6>
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	1d19      	adds	r1, r3, #4
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	9103      	str	r1, [sp, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	bfbb      	ittet	lt
 8008b50:	425b      	neglt	r3, r3
 8008b52:	f042 0202 	orrlt.w	r2, r2, #2
 8008b56:	9307      	strge	r3, [sp, #28]
 8008b58:	9307      	strlt	r3, [sp, #28]
 8008b5a:	bfb8      	it	lt
 8008b5c:	9204      	strlt	r2, [sp, #16]
 8008b5e:	7823      	ldrb	r3, [r4, #0]
 8008b60:	2b2e      	cmp	r3, #46	; 0x2e
 8008b62:	d10c      	bne.n	8008b7e <_vfiprintf_r+0x15a>
 8008b64:	7863      	ldrb	r3, [r4, #1]
 8008b66:	2b2a      	cmp	r3, #42	; 0x2a
 8008b68:	d134      	bne.n	8008bd4 <_vfiprintf_r+0x1b0>
 8008b6a:	9b03      	ldr	r3, [sp, #12]
 8008b6c:	3402      	adds	r4, #2
 8008b6e:	1d1a      	adds	r2, r3, #4
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	9203      	str	r2, [sp, #12]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	bfb8      	it	lt
 8008b78:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b7c:	9305      	str	r3, [sp, #20]
 8008b7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c48 <_vfiprintf_r+0x224>
 8008b82:	2203      	movs	r2, #3
 8008b84:	4650      	mov	r0, sl
 8008b86:	7821      	ldrb	r1, [r4, #0]
 8008b88:	f7fc fea1 	bl	80058ce <memchr>
 8008b8c:	b138      	cbz	r0, 8008b9e <_vfiprintf_r+0x17a>
 8008b8e:	2240      	movs	r2, #64	; 0x40
 8008b90:	9b04      	ldr	r3, [sp, #16]
 8008b92:	eba0 000a 	sub.w	r0, r0, sl
 8008b96:	4082      	lsls	r2, r0
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	3401      	adds	r4, #1
 8008b9c:	9304      	str	r3, [sp, #16]
 8008b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba2:	2206      	movs	r2, #6
 8008ba4:	4829      	ldr	r0, [pc, #164]	; (8008c4c <_vfiprintf_r+0x228>)
 8008ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008baa:	f7fc fe90 	bl	80058ce <memchr>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d03f      	beq.n	8008c32 <_vfiprintf_r+0x20e>
 8008bb2:	4b27      	ldr	r3, [pc, #156]	; (8008c50 <_vfiprintf_r+0x22c>)
 8008bb4:	bb1b      	cbnz	r3, 8008bfe <_vfiprintf_r+0x1da>
 8008bb6:	9b03      	ldr	r3, [sp, #12]
 8008bb8:	3307      	adds	r3, #7
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	9303      	str	r3, [sp, #12]
 8008bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc4:	443b      	add	r3, r7
 8008bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc8:	e768      	b.n	8008a9c <_vfiprintf_r+0x78>
 8008bca:	460c      	mov	r4, r1
 8008bcc:	2001      	movs	r0, #1
 8008bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bd2:	e7a6      	b.n	8008b22 <_vfiprintf_r+0xfe>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f04f 0c0a 	mov.w	ip, #10
 8008bda:	4619      	mov	r1, r3
 8008bdc:	3401      	adds	r4, #1
 8008bde:	9305      	str	r3, [sp, #20]
 8008be0:	4620      	mov	r0, r4
 8008be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008be6:	3a30      	subs	r2, #48	; 0x30
 8008be8:	2a09      	cmp	r2, #9
 8008bea:	d903      	bls.n	8008bf4 <_vfiprintf_r+0x1d0>
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d0c6      	beq.n	8008b7e <_vfiprintf_r+0x15a>
 8008bf0:	9105      	str	r1, [sp, #20]
 8008bf2:	e7c4      	b.n	8008b7e <_vfiprintf_r+0x15a>
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bfc:	e7f0      	b.n	8008be0 <_vfiprintf_r+0x1bc>
 8008bfe:	ab03      	add	r3, sp, #12
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	462a      	mov	r2, r5
 8008c04:	4630      	mov	r0, r6
 8008c06:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <_vfiprintf_r+0x230>)
 8008c08:	a904      	add	r1, sp, #16
 8008c0a:	f7fb feeb 	bl	80049e4 <_printf_float>
 8008c0e:	4607      	mov	r7, r0
 8008c10:	1c78      	adds	r0, r7, #1
 8008c12:	d1d6      	bne.n	8008bc2 <_vfiprintf_r+0x19e>
 8008c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c16:	07d9      	lsls	r1, r3, #31
 8008c18:	d405      	bmi.n	8008c26 <_vfiprintf_r+0x202>
 8008c1a:	89ab      	ldrh	r3, [r5, #12]
 8008c1c:	059a      	lsls	r2, r3, #22
 8008c1e:	d402      	bmi.n	8008c26 <_vfiprintf_r+0x202>
 8008c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c22:	f7fc fe53 	bl	80058cc <__retarget_lock_release_recursive>
 8008c26:	89ab      	ldrh	r3, [r5, #12]
 8008c28:	065b      	lsls	r3, r3, #25
 8008c2a:	f53f af1d 	bmi.w	8008a68 <_vfiprintf_r+0x44>
 8008c2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c30:	e71c      	b.n	8008a6c <_vfiprintf_r+0x48>
 8008c32:	ab03      	add	r3, sp, #12
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	462a      	mov	r2, r5
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <_vfiprintf_r+0x230>)
 8008c3c:	a904      	add	r1, sp, #16
 8008c3e:	f7fc f971 	bl	8004f24 <_printf_i>
 8008c42:	e7e4      	b.n	8008c0e <_vfiprintf_r+0x1ea>
 8008c44:	0800b810 	.word	0x0800b810
 8008c48:	0800b816 	.word	0x0800b816
 8008c4c:	0800b81a 	.word	0x0800b81a
 8008c50:	080049e5 	.word	0x080049e5
 8008c54:	08008a01 	.word	0x08008a01

08008c58 <__swbuf_r>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	460e      	mov	r6, r1
 8008c5c:	4614      	mov	r4, r2
 8008c5e:	4605      	mov	r5, r0
 8008c60:	b118      	cbz	r0, 8008c6a <__swbuf_r+0x12>
 8008c62:	6a03      	ldr	r3, [r0, #32]
 8008c64:	b90b      	cbnz	r3, 8008c6a <__swbuf_r+0x12>
 8008c66:	f7fc fd19 	bl	800569c <__sinit>
 8008c6a:	69a3      	ldr	r3, [r4, #24]
 8008c6c:	60a3      	str	r3, [r4, #8]
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	071a      	lsls	r2, r3, #28
 8008c72:	d525      	bpl.n	8008cc0 <__swbuf_r+0x68>
 8008c74:	6923      	ldr	r3, [r4, #16]
 8008c76:	b31b      	cbz	r3, 8008cc0 <__swbuf_r+0x68>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	6922      	ldr	r2, [r4, #16]
 8008c7c:	b2f6      	uxtb	r6, r6
 8008c7e:	1a98      	subs	r0, r3, r2
 8008c80:	6963      	ldr	r3, [r4, #20]
 8008c82:	4637      	mov	r7, r6
 8008c84:	4283      	cmp	r3, r0
 8008c86:	dc04      	bgt.n	8008c92 <__swbuf_r+0x3a>
 8008c88:	4621      	mov	r1, r4
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f7ff fa30 	bl	80080f0 <_fflush_r>
 8008c90:	b9e0      	cbnz	r0, 8008ccc <__swbuf_r+0x74>
 8008c92:	68a3      	ldr	r3, [r4, #8]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	60a3      	str	r3, [r4, #8]
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	6022      	str	r2, [r4, #0]
 8008c9e:	701e      	strb	r6, [r3, #0]
 8008ca0:	6962      	ldr	r2, [r4, #20]
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d004      	beq.n	8008cb2 <__swbuf_r+0x5a>
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	07db      	lsls	r3, r3, #31
 8008cac:	d506      	bpl.n	8008cbc <__swbuf_r+0x64>
 8008cae:	2e0a      	cmp	r6, #10
 8008cb0:	d104      	bne.n	8008cbc <__swbuf_r+0x64>
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f7ff fa1b 	bl	80080f0 <_fflush_r>
 8008cba:	b938      	cbnz	r0, 8008ccc <__swbuf_r+0x74>
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f000 f806 	bl	8008cd4 <__swsetup_r>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d0d5      	beq.n	8008c78 <__swbuf_r+0x20>
 8008ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8008cd0:	e7f4      	b.n	8008cbc <__swbuf_r+0x64>
	...

08008cd4 <__swsetup_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4b2a      	ldr	r3, [pc, #168]	; (8008d80 <__swsetup_r+0xac>)
 8008cd8:	4605      	mov	r5, r0
 8008cda:	6818      	ldr	r0, [r3, #0]
 8008cdc:	460c      	mov	r4, r1
 8008cde:	b118      	cbz	r0, 8008ce8 <__swsetup_r+0x14>
 8008ce0:	6a03      	ldr	r3, [r0, #32]
 8008ce2:	b90b      	cbnz	r3, 8008ce8 <__swsetup_r+0x14>
 8008ce4:	f7fc fcda 	bl	800569c <__sinit>
 8008ce8:	89a3      	ldrh	r3, [r4, #12]
 8008cea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cee:	0718      	lsls	r0, r3, #28
 8008cf0:	d422      	bmi.n	8008d38 <__swsetup_r+0x64>
 8008cf2:	06d9      	lsls	r1, r3, #27
 8008cf4:	d407      	bmi.n	8008d06 <__swsetup_r+0x32>
 8008cf6:	2309      	movs	r3, #9
 8008cf8:	602b      	str	r3, [r5, #0]
 8008cfa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008d02:	81a3      	strh	r3, [r4, #12]
 8008d04:	e034      	b.n	8008d70 <__swsetup_r+0x9c>
 8008d06:	0758      	lsls	r0, r3, #29
 8008d08:	d512      	bpl.n	8008d30 <__swsetup_r+0x5c>
 8008d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d0c:	b141      	cbz	r1, 8008d20 <__swsetup_r+0x4c>
 8008d0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d12:	4299      	cmp	r1, r3
 8008d14:	d002      	beq.n	8008d1c <__swsetup_r+0x48>
 8008d16:	4628      	mov	r0, r5
 8008d18:	f7fd fc5a 	bl	80065d0 <_free_r>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	6363      	str	r3, [r4, #52]	; 0x34
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	6063      	str	r3, [r4, #4]
 8008d2c:	6923      	ldr	r3, [r4, #16]
 8008d2e:	6023      	str	r3, [r4, #0]
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	f043 0308 	orr.w	r3, r3, #8
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	6923      	ldr	r3, [r4, #16]
 8008d3a:	b94b      	cbnz	r3, 8008d50 <__swsetup_r+0x7c>
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d46:	d003      	beq.n	8008d50 <__swsetup_r+0x7c>
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f000 f883 	bl	8008e56 <__smakebuf_r>
 8008d50:	89a0      	ldrh	r0, [r4, #12]
 8008d52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d56:	f010 0301 	ands.w	r3, r0, #1
 8008d5a:	d00a      	beq.n	8008d72 <__swsetup_r+0x9e>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60a3      	str	r3, [r4, #8]
 8008d60:	6963      	ldr	r3, [r4, #20]
 8008d62:	425b      	negs	r3, r3
 8008d64:	61a3      	str	r3, [r4, #24]
 8008d66:	6923      	ldr	r3, [r4, #16]
 8008d68:	b943      	cbnz	r3, 8008d7c <__swsetup_r+0xa8>
 8008d6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d6e:	d1c4      	bne.n	8008cfa <__swsetup_r+0x26>
 8008d70:	bd38      	pop	{r3, r4, r5, pc}
 8008d72:	0781      	lsls	r1, r0, #30
 8008d74:	bf58      	it	pl
 8008d76:	6963      	ldrpl	r3, [r4, #20]
 8008d78:	60a3      	str	r3, [r4, #8]
 8008d7a:	e7f4      	b.n	8008d66 <__swsetup_r+0x92>
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	e7f7      	b.n	8008d70 <__swsetup_r+0x9c>
 8008d80:	20000068 	.word	0x20000068

08008d84 <_raise_r>:
 8008d84:	291f      	cmp	r1, #31
 8008d86:	b538      	push	{r3, r4, r5, lr}
 8008d88:	4604      	mov	r4, r0
 8008d8a:	460d      	mov	r5, r1
 8008d8c:	d904      	bls.n	8008d98 <_raise_r+0x14>
 8008d8e:	2316      	movs	r3, #22
 8008d90:	6003      	str	r3, [r0, #0]
 8008d92:	f04f 30ff 	mov.w	r0, #4294967295
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008d9a:	b112      	cbz	r2, 8008da2 <_raise_r+0x1e>
 8008d9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008da0:	b94b      	cbnz	r3, 8008db6 <_raise_r+0x32>
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 f830 	bl	8008e08 <_getpid_r>
 8008da8:	462a      	mov	r2, r5
 8008daa:	4601      	mov	r1, r0
 8008dac:	4620      	mov	r0, r4
 8008dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008db2:	f000 b817 	b.w	8008de4 <_kill_r>
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d00a      	beq.n	8008dd0 <_raise_r+0x4c>
 8008dba:	1c59      	adds	r1, r3, #1
 8008dbc:	d103      	bne.n	8008dc6 <_raise_r+0x42>
 8008dbe:	2316      	movs	r3, #22
 8008dc0:	6003      	str	r3, [r0, #0]
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	e7e7      	b.n	8008d96 <_raise_r+0x12>
 8008dc6:	2400      	movs	r4, #0
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008dce:	4798      	blx	r3
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	e7e0      	b.n	8008d96 <_raise_r+0x12>

08008dd4 <raise>:
 8008dd4:	4b02      	ldr	r3, [pc, #8]	; (8008de0 <raise+0xc>)
 8008dd6:	4601      	mov	r1, r0
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	f7ff bfd3 	b.w	8008d84 <_raise_r>
 8008dde:	bf00      	nop
 8008de0:	20000068 	.word	0x20000068

08008de4 <_kill_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	2300      	movs	r3, #0
 8008de8:	4d06      	ldr	r5, [pc, #24]	; (8008e04 <_kill_r+0x20>)
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	4611      	mov	r1, r2
 8008df0:	602b      	str	r3, [r5, #0]
 8008df2:	f7f8 fa9a 	bl	800132a <_kill>
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	d102      	bne.n	8008e00 <_kill_r+0x1c>
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	b103      	cbz	r3, 8008e00 <_kill_r+0x1c>
 8008dfe:	6023      	str	r3, [r4, #0]
 8008e00:	bd38      	pop	{r3, r4, r5, pc}
 8008e02:	bf00      	nop
 8008e04:	20000828 	.word	0x20000828

08008e08 <_getpid_r>:
 8008e08:	f7f8 ba88 	b.w	800131c <_getpid>

08008e0c <__swhatbuf_r>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	460c      	mov	r4, r1
 8008e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e14:	4615      	mov	r5, r2
 8008e16:	2900      	cmp	r1, #0
 8008e18:	461e      	mov	r6, r3
 8008e1a:	b096      	sub	sp, #88	; 0x58
 8008e1c:	da0c      	bge.n	8008e38 <__swhatbuf_r+0x2c>
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	2100      	movs	r1, #0
 8008e22:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e26:	bf0c      	ite	eq
 8008e28:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008e2c:	2340      	movne	r3, #64	; 0x40
 8008e2e:	2000      	movs	r0, #0
 8008e30:	6031      	str	r1, [r6, #0]
 8008e32:	602b      	str	r3, [r5, #0]
 8008e34:	b016      	add	sp, #88	; 0x58
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	466a      	mov	r2, sp
 8008e3a:	f000 f849 	bl	8008ed0 <_fstat_r>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	dbed      	blt.n	8008e1e <__swhatbuf_r+0x12>
 8008e42:	9901      	ldr	r1, [sp, #4]
 8008e44:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008e48:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008e4c:	4259      	negs	r1, r3
 8008e4e:	4159      	adcs	r1, r3
 8008e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e54:	e7eb      	b.n	8008e2e <__swhatbuf_r+0x22>

08008e56 <__smakebuf_r>:
 8008e56:	898b      	ldrh	r3, [r1, #12]
 8008e58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e5a:	079d      	lsls	r5, r3, #30
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	460c      	mov	r4, r1
 8008e60:	d507      	bpl.n	8008e72 <__smakebuf_r+0x1c>
 8008e62:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e66:	6023      	str	r3, [r4, #0]
 8008e68:	6123      	str	r3, [r4, #16]
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	6163      	str	r3, [r4, #20]
 8008e6e:	b002      	add	sp, #8
 8008e70:	bd70      	pop	{r4, r5, r6, pc}
 8008e72:	466a      	mov	r2, sp
 8008e74:	ab01      	add	r3, sp, #4
 8008e76:	f7ff ffc9 	bl	8008e0c <__swhatbuf_r>
 8008e7a:	9900      	ldr	r1, [sp, #0]
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f7fd fc16 	bl	80066b0 <_malloc_r>
 8008e84:	b948      	cbnz	r0, 8008e9a <__smakebuf_r+0x44>
 8008e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8a:	059a      	lsls	r2, r3, #22
 8008e8c:	d4ef      	bmi.n	8008e6e <__smakebuf_r+0x18>
 8008e8e:	f023 0303 	bic.w	r3, r3, #3
 8008e92:	f043 0302 	orr.w	r3, r3, #2
 8008e96:	81a3      	strh	r3, [r4, #12]
 8008e98:	e7e3      	b.n	8008e62 <__smakebuf_r+0xc>
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	6020      	str	r0, [r4, #0]
 8008e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	9b00      	ldr	r3, [sp, #0]
 8008ea6:	6120      	str	r0, [r4, #16]
 8008ea8:	6163      	str	r3, [r4, #20]
 8008eaa:	9b01      	ldr	r3, [sp, #4]
 8008eac:	b15b      	cbz	r3, 8008ec6 <__smakebuf_r+0x70>
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eb4:	f000 f81e 	bl	8008ef4 <_isatty_r>
 8008eb8:	b128      	cbz	r0, 8008ec6 <__smakebuf_r+0x70>
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	f023 0303 	bic.w	r3, r3, #3
 8008ec0:	f043 0301 	orr.w	r3, r3, #1
 8008ec4:	81a3      	strh	r3, [r4, #12]
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	431d      	orrs	r5, r3
 8008eca:	81a5      	strh	r5, [r4, #12]
 8008ecc:	e7cf      	b.n	8008e6e <__smakebuf_r+0x18>
	...

08008ed0 <_fstat_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	4d06      	ldr	r5, [pc, #24]	; (8008ef0 <_fstat_r+0x20>)
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	4608      	mov	r0, r1
 8008eda:	4611      	mov	r1, r2
 8008edc:	602b      	str	r3, [r5, #0]
 8008ede:	f7f8 fa82 	bl	80013e6 <_fstat>
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	d102      	bne.n	8008eec <_fstat_r+0x1c>
 8008ee6:	682b      	ldr	r3, [r5, #0]
 8008ee8:	b103      	cbz	r3, 8008eec <_fstat_r+0x1c>
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	bd38      	pop	{r3, r4, r5, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000828 	.word	0x20000828

08008ef4 <_isatty_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4d05      	ldr	r5, [pc, #20]	; (8008f10 <_isatty_r+0x1c>)
 8008efa:	4604      	mov	r4, r0
 8008efc:	4608      	mov	r0, r1
 8008efe:	602b      	str	r3, [r5, #0]
 8008f00:	f7f8 fa80 	bl	8001404 <_isatty>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_isatty_r+0x1a>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_isatty_r+0x1a>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	20000828 	.word	0x20000828

08008f14 <pow>:
 8008f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f18:	4614      	mov	r4, r2
 8008f1a:	461d      	mov	r5, r3
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	4689      	mov	r9, r1
 8008f20:	f000 ff1e 	bl	8009d60 <__ieee754_pow>
 8008f24:	4622      	mov	r2, r4
 8008f26:	4606      	mov	r6, r0
 8008f28:	460f      	mov	r7, r1
 8008f2a:	462b      	mov	r3, r5
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	4629      	mov	r1, r5
 8008f30:	f7f7 fd6c 	bl	8000a0c <__aeabi_dcmpun>
 8008f34:	bbc8      	cbnz	r0, 8008faa <pow+0x96>
 8008f36:	2200      	movs	r2, #0
 8008f38:	2300      	movs	r3, #0
 8008f3a:	4640      	mov	r0, r8
 8008f3c:	4649      	mov	r1, r9
 8008f3e:	f7f7 fd33 	bl	80009a8 <__aeabi_dcmpeq>
 8008f42:	b1b8      	cbz	r0, 8008f74 <pow+0x60>
 8008f44:	2200      	movs	r2, #0
 8008f46:	2300      	movs	r3, #0
 8008f48:	4620      	mov	r0, r4
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	f7f7 fd2c 	bl	80009a8 <__aeabi_dcmpeq>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d141      	bne.n	8008fd8 <pow+0xc4>
 8008f54:	4620      	mov	r0, r4
 8008f56:	4629      	mov	r1, r5
 8008f58:	f000 faae 	bl	80094b8 <finite>
 8008f5c:	b328      	cbz	r0, 8008faa <pow+0x96>
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2300      	movs	r3, #0
 8008f62:	4620      	mov	r0, r4
 8008f64:	4629      	mov	r1, r5
 8008f66:	f7f7 fd29 	bl	80009bc <__aeabi_dcmplt>
 8008f6a:	b1f0      	cbz	r0, 8008faa <pow+0x96>
 8008f6c:	f7fc fc82 	bl	8005874 <__errno>
 8008f70:	2322      	movs	r3, #34	; 0x22
 8008f72:	e019      	b.n	8008fa8 <pow+0x94>
 8008f74:	4630      	mov	r0, r6
 8008f76:	4639      	mov	r1, r7
 8008f78:	f000 fa9e 	bl	80094b8 <finite>
 8008f7c:	b9c8      	cbnz	r0, 8008fb2 <pow+0x9e>
 8008f7e:	4640      	mov	r0, r8
 8008f80:	4649      	mov	r1, r9
 8008f82:	f000 fa99 	bl	80094b8 <finite>
 8008f86:	b1a0      	cbz	r0, 8008fb2 <pow+0x9e>
 8008f88:	4620      	mov	r0, r4
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	f000 fa94 	bl	80094b8 <finite>
 8008f90:	b178      	cbz	r0, 8008fb2 <pow+0x9e>
 8008f92:	4632      	mov	r2, r6
 8008f94:	463b      	mov	r3, r7
 8008f96:	4630      	mov	r0, r6
 8008f98:	4639      	mov	r1, r7
 8008f9a:	f7f7 fd37 	bl	8000a0c <__aeabi_dcmpun>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d0e4      	beq.n	8008f6c <pow+0x58>
 8008fa2:	f7fc fc67 	bl	8005874 <__errno>
 8008fa6:	2321      	movs	r3, #33	; 0x21
 8008fa8:	6003      	str	r3, [r0, #0]
 8008faa:	4630      	mov	r0, r6
 8008fac:	4639      	mov	r1, r7
 8008fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	4639      	mov	r1, r7
 8008fba:	f7f7 fcf5 	bl	80009a8 <__aeabi_dcmpeq>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d0f3      	beq.n	8008faa <pow+0x96>
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	4649      	mov	r1, r9
 8008fc6:	f000 fa77 	bl	80094b8 <finite>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d0ed      	beq.n	8008faa <pow+0x96>
 8008fce:	4620      	mov	r0, r4
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	f000 fa71 	bl	80094b8 <finite>
 8008fd6:	e7c8      	b.n	8008f6a <pow+0x56>
 8008fd8:	2600      	movs	r6, #0
 8008fda:	4f01      	ldr	r7, [pc, #4]	; (8008fe0 <pow+0xcc>)
 8008fdc:	e7e5      	b.n	8008faa <pow+0x96>
 8008fde:	bf00      	nop
 8008fe0:	3ff00000 	.word	0x3ff00000

08008fe4 <sqrt>:
 8008fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460f      	mov	r7, r1
 8008fea:	f000 fa6b 	bl	80094c4 <__ieee754_sqrt>
 8008fee:	4632      	mov	r2, r6
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	460d      	mov	r5, r1
 8008ff4:	463b      	mov	r3, r7
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	4639      	mov	r1, r7
 8008ffa:	f7f7 fd07 	bl	8000a0c <__aeabi_dcmpun>
 8008ffe:	b990      	cbnz	r0, 8009026 <sqrt+0x42>
 8009000:	2200      	movs	r2, #0
 8009002:	2300      	movs	r3, #0
 8009004:	4630      	mov	r0, r6
 8009006:	4639      	mov	r1, r7
 8009008:	f7f7 fcd8 	bl	80009bc <__aeabi_dcmplt>
 800900c:	b158      	cbz	r0, 8009026 <sqrt+0x42>
 800900e:	f7fc fc31 	bl	8005874 <__errno>
 8009012:	2321      	movs	r3, #33	; 0x21
 8009014:	2200      	movs	r2, #0
 8009016:	6003      	str	r3, [r0, #0]
 8009018:	2300      	movs	r3, #0
 800901a:	4610      	mov	r0, r2
 800901c:	4619      	mov	r1, r3
 800901e:	f7f7 fb85 	bl	800072c <__aeabi_ddiv>
 8009022:	4604      	mov	r4, r0
 8009024:	460d      	mov	r5, r1
 8009026:	4620      	mov	r0, r4
 8009028:	4629      	mov	r1, r5
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800902c:	0000      	movs	r0, r0
	...

08009030 <atan>:
 8009030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	4bb6      	ldr	r3, [pc, #728]	; (8009310 <atan+0x2e0>)
 8009036:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800903a:	429e      	cmp	r6, r3
 800903c:	4604      	mov	r4, r0
 800903e:	460d      	mov	r5, r1
 8009040:	468b      	mov	fp, r1
 8009042:	dd17      	ble.n	8009074 <atan+0x44>
 8009044:	4bb3      	ldr	r3, [pc, #716]	; (8009314 <atan+0x2e4>)
 8009046:	429e      	cmp	r6, r3
 8009048:	dc01      	bgt.n	800904e <atan+0x1e>
 800904a:	d109      	bne.n	8009060 <atan+0x30>
 800904c:	b140      	cbz	r0, 8009060 <atan+0x30>
 800904e:	4622      	mov	r2, r4
 8009050:	462b      	mov	r3, r5
 8009052:	4620      	mov	r0, r4
 8009054:	4629      	mov	r1, r5
 8009056:	f7f7 f889 	bl	800016c <__adddf3>
 800905a:	4604      	mov	r4, r0
 800905c:	460d      	mov	r5, r1
 800905e:	e005      	b.n	800906c <atan+0x3c>
 8009060:	f1bb 0f00 	cmp.w	fp, #0
 8009064:	4cac      	ldr	r4, [pc, #688]	; (8009318 <atan+0x2e8>)
 8009066:	f300 8121 	bgt.w	80092ac <atan+0x27c>
 800906a:	4dac      	ldr	r5, [pc, #688]	; (800931c <atan+0x2ec>)
 800906c:	4620      	mov	r0, r4
 800906e:	4629      	mov	r1, r5
 8009070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009074:	4baa      	ldr	r3, [pc, #680]	; (8009320 <atan+0x2f0>)
 8009076:	429e      	cmp	r6, r3
 8009078:	dc11      	bgt.n	800909e <atan+0x6e>
 800907a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800907e:	429e      	cmp	r6, r3
 8009080:	dc0a      	bgt.n	8009098 <atan+0x68>
 8009082:	a38b      	add	r3, pc, #556	; (adr r3, 80092b0 <atan+0x280>)
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	f7f7 f870 	bl	800016c <__adddf3>
 800908c:	2200      	movs	r2, #0
 800908e:	4ba5      	ldr	r3, [pc, #660]	; (8009324 <atan+0x2f4>)
 8009090:	f7f7 fcb2 	bl	80009f8 <__aeabi_dcmpgt>
 8009094:	2800      	cmp	r0, #0
 8009096:	d1e9      	bne.n	800906c <atan+0x3c>
 8009098:	f04f 3aff 	mov.w	sl, #4294967295
 800909c:	e027      	b.n	80090ee <atan+0xbe>
 800909e:	f000 f997 	bl	80093d0 <fabs>
 80090a2:	4ba1      	ldr	r3, [pc, #644]	; (8009328 <atan+0x2f8>)
 80090a4:	4604      	mov	r4, r0
 80090a6:	429e      	cmp	r6, r3
 80090a8:	460d      	mov	r5, r1
 80090aa:	f300 80b8 	bgt.w	800921e <atan+0x1ee>
 80090ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80090b2:	429e      	cmp	r6, r3
 80090b4:	f300 809c 	bgt.w	80091f0 <atan+0x1c0>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	f7f7 f856 	bl	800016c <__adddf3>
 80090c0:	2200      	movs	r2, #0
 80090c2:	4b98      	ldr	r3, [pc, #608]	; (8009324 <atan+0x2f4>)
 80090c4:	f7f7 f850 	bl	8000168 <__aeabi_dsub>
 80090c8:	2200      	movs	r2, #0
 80090ca:	4606      	mov	r6, r0
 80090cc:	460f      	mov	r7, r1
 80090ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090d2:	4620      	mov	r0, r4
 80090d4:	4629      	mov	r1, r5
 80090d6:	f7f7 f849 	bl	800016c <__adddf3>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4630      	mov	r0, r6
 80090e0:	4639      	mov	r1, r7
 80090e2:	f7f7 fb23 	bl	800072c <__aeabi_ddiv>
 80090e6:	f04f 0a00 	mov.w	sl, #0
 80090ea:	4604      	mov	r4, r0
 80090ec:	460d      	mov	r5, r1
 80090ee:	4622      	mov	r2, r4
 80090f0:	462b      	mov	r3, r5
 80090f2:	4620      	mov	r0, r4
 80090f4:	4629      	mov	r1, r5
 80090f6:	f7f7 f9ef 	bl	80004d8 <__aeabi_dmul>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	4680      	mov	r8, r0
 8009100:	4689      	mov	r9, r1
 8009102:	f7f7 f9e9 	bl	80004d8 <__aeabi_dmul>
 8009106:	a36c      	add	r3, pc, #432	; (adr r3, 80092b8 <atan+0x288>)
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	4606      	mov	r6, r0
 800910e:	460f      	mov	r7, r1
 8009110:	f7f7 f9e2 	bl	80004d8 <__aeabi_dmul>
 8009114:	a36a      	add	r3, pc, #424	; (adr r3, 80092c0 <atan+0x290>)
 8009116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911a:	f7f7 f827 	bl	800016c <__adddf3>
 800911e:	4632      	mov	r2, r6
 8009120:	463b      	mov	r3, r7
 8009122:	f7f7 f9d9 	bl	80004d8 <__aeabi_dmul>
 8009126:	a368      	add	r3, pc, #416	; (adr r3, 80092c8 <atan+0x298>)
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	f7f7 f81e 	bl	800016c <__adddf3>
 8009130:	4632      	mov	r2, r6
 8009132:	463b      	mov	r3, r7
 8009134:	f7f7 f9d0 	bl	80004d8 <__aeabi_dmul>
 8009138:	a365      	add	r3, pc, #404	; (adr r3, 80092d0 <atan+0x2a0>)
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	f7f7 f815 	bl	800016c <__adddf3>
 8009142:	4632      	mov	r2, r6
 8009144:	463b      	mov	r3, r7
 8009146:	f7f7 f9c7 	bl	80004d8 <__aeabi_dmul>
 800914a:	a363      	add	r3, pc, #396	; (adr r3, 80092d8 <atan+0x2a8>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	f7f7 f80c 	bl	800016c <__adddf3>
 8009154:	4632      	mov	r2, r6
 8009156:	463b      	mov	r3, r7
 8009158:	f7f7 f9be 	bl	80004d8 <__aeabi_dmul>
 800915c:	a360      	add	r3, pc, #384	; (adr r3, 80092e0 <atan+0x2b0>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	f7f7 f803 	bl	800016c <__adddf3>
 8009166:	4642      	mov	r2, r8
 8009168:	464b      	mov	r3, r9
 800916a:	f7f7 f9b5 	bl	80004d8 <__aeabi_dmul>
 800916e:	a35e      	add	r3, pc, #376	; (adr r3, 80092e8 <atan+0x2b8>)
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	4680      	mov	r8, r0
 8009176:	4689      	mov	r9, r1
 8009178:	4630      	mov	r0, r6
 800917a:	4639      	mov	r1, r7
 800917c:	f7f7 f9ac 	bl	80004d8 <__aeabi_dmul>
 8009180:	a35b      	add	r3, pc, #364	; (adr r3, 80092f0 <atan+0x2c0>)
 8009182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009186:	f7f6 ffef 	bl	8000168 <__aeabi_dsub>
 800918a:	4632      	mov	r2, r6
 800918c:	463b      	mov	r3, r7
 800918e:	f7f7 f9a3 	bl	80004d8 <__aeabi_dmul>
 8009192:	a359      	add	r3, pc, #356	; (adr r3, 80092f8 <atan+0x2c8>)
 8009194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009198:	f7f6 ffe6 	bl	8000168 <__aeabi_dsub>
 800919c:	4632      	mov	r2, r6
 800919e:	463b      	mov	r3, r7
 80091a0:	f7f7 f99a 	bl	80004d8 <__aeabi_dmul>
 80091a4:	a356      	add	r3, pc, #344	; (adr r3, 8009300 <atan+0x2d0>)
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	f7f6 ffdd 	bl	8000168 <__aeabi_dsub>
 80091ae:	4632      	mov	r2, r6
 80091b0:	463b      	mov	r3, r7
 80091b2:	f7f7 f991 	bl	80004d8 <__aeabi_dmul>
 80091b6:	a354      	add	r3, pc, #336	; (adr r3, 8009308 <atan+0x2d8>)
 80091b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091bc:	f7f6 ffd4 	bl	8000168 <__aeabi_dsub>
 80091c0:	4632      	mov	r2, r6
 80091c2:	463b      	mov	r3, r7
 80091c4:	f7f7 f988 	bl	80004d8 <__aeabi_dmul>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4640      	mov	r0, r8
 80091ce:	4649      	mov	r1, r9
 80091d0:	f7f6 ffcc 	bl	800016c <__adddf3>
 80091d4:	4622      	mov	r2, r4
 80091d6:	462b      	mov	r3, r5
 80091d8:	f7f7 f97e 	bl	80004d8 <__aeabi_dmul>
 80091dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	d144      	bne.n	8009270 <atan+0x240>
 80091e6:	4620      	mov	r0, r4
 80091e8:	4629      	mov	r1, r5
 80091ea:	f7f6 ffbd 	bl	8000168 <__aeabi_dsub>
 80091ee:	e734      	b.n	800905a <atan+0x2a>
 80091f0:	2200      	movs	r2, #0
 80091f2:	4b4c      	ldr	r3, [pc, #304]	; (8009324 <atan+0x2f4>)
 80091f4:	f7f6 ffb8 	bl	8000168 <__aeabi_dsub>
 80091f8:	2200      	movs	r2, #0
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	4620      	mov	r0, r4
 8009200:	4629      	mov	r1, r5
 8009202:	4b48      	ldr	r3, [pc, #288]	; (8009324 <atan+0x2f4>)
 8009204:	f7f6 ffb2 	bl	800016c <__adddf3>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	4630      	mov	r0, r6
 800920e:	4639      	mov	r1, r7
 8009210:	f7f7 fa8c 	bl	800072c <__aeabi_ddiv>
 8009214:	f04f 0a01 	mov.w	sl, #1
 8009218:	4604      	mov	r4, r0
 800921a:	460d      	mov	r5, r1
 800921c:	e767      	b.n	80090ee <atan+0xbe>
 800921e:	4b43      	ldr	r3, [pc, #268]	; (800932c <atan+0x2fc>)
 8009220:	429e      	cmp	r6, r3
 8009222:	da1a      	bge.n	800925a <atan+0x22a>
 8009224:	2200      	movs	r2, #0
 8009226:	4b42      	ldr	r3, [pc, #264]	; (8009330 <atan+0x300>)
 8009228:	f7f6 ff9e 	bl	8000168 <__aeabi_dsub>
 800922c:	2200      	movs	r2, #0
 800922e:	4606      	mov	r6, r0
 8009230:	460f      	mov	r7, r1
 8009232:	4620      	mov	r0, r4
 8009234:	4629      	mov	r1, r5
 8009236:	4b3e      	ldr	r3, [pc, #248]	; (8009330 <atan+0x300>)
 8009238:	f7f7 f94e 	bl	80004d8 <__aeabi_dmul>
 800923c:	2200      	movs	r2, #0
 800923e:	4b39      	ldr	r3, [pc, #228]	; (8009324 <atan+0x2f4>)
 8009240:	f7f6 ff94 	bl	800016c <__adddf3>
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	4630      	mov	r0, r6
 800924a:	4639      	mov	r1, r7
 800924c:	f7f7 fa6e 	bl	800072c <__aeabi_ddiv>
 8009250:	f04f 0a02 	mov.w	sl, #2
 8009254:	4604      	mov	r4, r0
 8009256:	460d      	mov	r5, r1
 8009258:	e749      	b.n	80090ee <atan+0xbe>
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	2000      	movs	r0, #0
 8009260:	4934      	ldr	r1, [pc, #208]	; (8009334 <atan+0x304>)
 8009262:	f7f7 fa63 	bl	800072c <__aeabi_ddiv>
 8009266:	f04f 0a03 	mov.w	sl, #3
 800926a:	4604      	mov	r4, r0
 800926c:	460d      	mov	r5, r1
 800926e:	e73e      	b.n	80090ee <atan+0xbe>
 8009270:	4b31      	ldr	r3, [pc, #196]	; (8009338 <atan+0x308>)
 8009272:	4e32      	ldr	r6, [pc, #200]	; (800933c <atan+0x30c>)
 8009274:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927c:	f7f6 ff74 	bl	8000168 <__aeabi_dsub>
 8009280:	4622      	mov	r2, r4
 8009282:	462b      	mov	r3, r5
 8009284:	f7f6 ff70 	bl	8000168 <__aeabi_dsub>
 8009288:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009294:	f7f6 ff68 	bl	8000168 <__aeabi_dsub>
 8009298:	f1bb 0f00 	cmp.w	fp, #0
 800929c:	4604      	mov	r4, r0
 800929e:	460d      	mov	r5, r1
 80092a0:	f6bf aee4 	bge.w	800906c <atan+0x3c>
 80092a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092a8:	461d      	mov	r5, r3
 80092aa:	e6df      	b.n	800906c <atan+0x3c>
 80092ac:	4d24      	ldr	r5, [pc, #144]	; (8009340 <atan+0x310>)
 80092ae:	e6dd      	b.n	800906c <atan+0x3c>
 80092b0:	8800759c 	.word	0x8800759c
 80092b4:	7e37e43c 	.word	0x7e37e43c
 80092b8:	e322da11 	.word	0xe322da11
 80092bc:	3f90ad3a 	.word	0x3f90ad3a
 80092c0:	24760deb 	.word	0x24760deb
 80092c4:	3fa97b4b 	.word	0x3fa97b4b
 80092c8:	a0d03d51 	.word	0xa0d03d51
 80092cc:	3fb10d66 	.word	0x3fb10d66
 80092d0:	c54c206e 	.word	0xc54c206e
 80092d4:	3fb745cd 	.word	0x3fb745cd
 80092d8:	920083ff 	.word	0x920083ff
 80092dc:	3fc24924 	.word	0x3fc24924
 80092e0:	5555550d 	.word	0x5555550d
 80092e4:	3fd55555 	.word	0x3fd55555
 80092e8:	2c6a6c2f 	.word	0x2c6a6c2f
 80092ec:	bfa2b444 	.word	0xbfa2b444
 80092f0:	52defd9a 	.word	0x52defd9a
 80092f4:	3fadde2d 	.word	0x3fadde2d
 80092f8:	af749a6d 	.word	0xaf749a6d
 80092fc:	3fb3b0f2 	.word	0x3fb3b0f2
 8009300:	fe231671 	.word	0xfe231671
 8009304:	3fbc71c6 	.word	0x3fbc71c6
 8009308:	9998ebc4 	.word	0x9998ebc4
 800930c:	3fc99999 	.word	0x3fc99999
 8009310:	440fffff 	.word	0x440fffff
 8009314:	7ff00000 	.word	0x7ff00000
 8009318:	54442d18 	.word	0x54442d18
 800931c:	bff921fb 	.word	0xbff921fb
 8009320:	3fdbffff 	.word	0x3fdbffff
 8009324:	3ff00000 	.word	0x3ff00000
 8009328:	3ff2ffff 	.word	0x3ff2ffff
 800932c:	40038000 	.word	0x40038000
 8009330:	3ff80000 	.word	0x3ff80000
 8009334:	bff00000 	.word	0xbff00000
 8009338:	0800b8e8 	.word	0x0800b8e8
 800933c:	0800b8c8 	.word	0x0800b8c8
 8009340:	3ff921fb 	.word	0x3ff921fb

08009344 <cos>:
 8009344:	b530      	push	{r4, r5, lr}
 8009346:	4a20      	ldr	r2, [pc, #128]	; (80093c8 <cos+0x84>)
 8009348:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800934c:	4293      	cmp	r3, r2
 800934e:	b087      	sub	sp, #28
 8009350:	dc06      	bgt.n	8009360 <cos+0x1c>
 8009352:	2200      	movs	r2, #0
 8009354:	2300      	movs	r3, #0
 8009356:	b007      	add	sp, #28
 8009358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800935c:	f000 b98c 	b.w	8009678 <__kernel_cos>
 8009360:	4a1a      	ldr	r2, [pc, #104]	; (80093cc <cos+0x88>)
 8009362:	4293      	cmp	r3, r2
 8009364:	dd05      	ble.n	8009372 <cos+0x2e>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	f7f6 fefd 	bl	8000168 <__aeabi_dsub>
 800936e:	b007      	add	sp, #28
 8009370:	bd30      	pop	{r4, r5, pc}
 8009372:	aa02      	add	r2, sp, #8
 8009374:	f001 fa0c 	bl	800a790 <__ieee754_rem_pio2>
 8009378:	f000 0003 	and.w	r0, r0, #3
 800937c:	2801      	cmp	r0, #1
 800937e:	d009      	beq.n	8009394 <cos+0x50>
 8009380:	2802      	cmp	r0, #2
 8009382:	d011      	beq.n	80093a8 <cos+0x64>
 8009384:	b9b8      	cbnz	r0, 80093b6 <cos+0x72>
 8009386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800938a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800938e:	f000 f973 	bl	8009678 <__kernel_cos>
 8009392:	e7ec      	b.n	800936e <cos+0x2a>
 8009394:	9000      	str	r0, [sp, #0]
 8009396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800939a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800939e:	f000 fa2b 	bl	80097f8 <__kernel_sin>
 80093a2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80093a6:	e7e2      	b.n	800936e <cos+0x2a>
 80093a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093b0:	f000 f962 	bl	8009678 <__kernel_cos>
 80093b4:	e7f5      	b.n	80093a2 <cos+0x5e>
 80093b6:	2301      	movs	r3, #1
 80093b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093c2:	f000 fa19 	bl	80097f8 <__kernel_sin>
 80093c6:	e7d2      	b.n	800936e <cos+0x2a>
 80093c8:	3fe921fb 	.word	0x3fe921fb
 80093cc:	7fefffff 	.word	0x7fefffff

080093d0 <fabs>:
 80093d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093d4:	4619      	mov	r1, r3
 80093d6:	4770      	bx	lr

080093d8 <sin>:
 80093d8:	b530      	push	{r4, r5, lr}
 80093da:	4a20      	ldr	r2, [pc, #128]	; (800945c <sin+0x84>)
 80093dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093e0:	4293      	cmp	r3, r2
 80093e2:	b087      	sub	sp, #28
 80093e4:	dc06      	bgt.n	80093f4 <sin+0x1c>
 80093e6:	2300      	movs	r3, #0
 80093e8:	2200      	movs	r2, #0
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	2300      	movs	r3, #0
 80093ee:	f000 fa03 	bl	80097f8 <__kernel_sin>
 80093f2:	e006      	b.n	8009402 <sin+0x2a>
 80093f4:	4a1a      	ldr	r2, [pc, #104]	; (8009460 <sin+0x88>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	dd05      	ble.n	8009406 <sin+0x2e>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	f7f6 feb3 	bl	8000168 <__aeabi_dsub>
 8009402:	b007      	add	sp, #28
 8009404:	bd30      	pop	{r4, r5, pc}
 8009406:	aa02      	add	r2, sp, #8
 8009408:	f001 f9c2 	bl	800a790 <__ieee754_rem_pio2>
 800940c:	f000 0003 	and.w	r0, r0, #3
 8009410:	2801      	cmp	r0, #1
 8009412:	d009      	beq.n	8009428 <sin+0x50>
 8009414:	2802      	cmp	r0, #2
 8009416:	d00e      	beq.n	8009436 <sin+0x5e>
 8009418:	b9c0      	cbnz	r0, 800944c <sin+0x74>
 800941a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800941e:	2301      	movs	r3, #1
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009426:	e7e2      	b.n	80093ee <sin+0x16>
 8009428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800942c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009430:	f000 f922 	bl	8009678 <__kernel_cos>
 8009434:	e7e5      	b.n	8009402 <sin+0x2a>
 8009436:	2301      	movs	r3, #1
 8009438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009442:	f000 f9d9 	bl	80097f8 <__kernel_sin>
 8009446:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800944a:	e7da      	b.n	8009402 <sin+0x2a>
 800944c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009454:	f000 f910 	bl	8009678 <__kernel_cos>
 8009458:	e7f5      	b.n	8009446 <sin+0x6e>
 800945a:	bf00      	nop
 800945c:	3fe921fb 	.word	0x3fe921fb
 8009460:	7fefffff 	.word	0x7fefffff

08009464 <tan>:
 8009464:	b530      	push	{r4, r5, lr}
 8009466:	4a12      	ldr	r2, [pc, #72]	; (80094b0 <tan+0x4c>)
 8009468:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800946c:	4293      	cmp	r3, r2
 800946e:	b087      	sub	sp, #28
 8009470:	dc06      	bgt.n	8009480 <tan+0x1c>
 8009472:	2301      	movs	r3, #1
 8009474:	2200      	movs	r2, #0
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	2300      	movs	r3, #0
 800947a:	f000 fa75 	bl	8009968 <__kernel_tan>
 800947e:	e006      	b.n	800948e <tan+0x2a>
 8009480:	4a0c      	ldr	r2, [pc, #48]	; (80094b4 <tan+0x50>)
 8009482:	4293      	cmp	r3, r2
 8009484:	dd05      	ble.n	8009492 <tan+0x2e>
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	f7f6 fe6d 	bl	8000168 <__aeabi_dsub>
 800948e:	b007      	add	sp, #28
 8009490:	bd30      	pop	{r4, r5, pc}
 8009492:	aa02      	add	r2, sp, #8
 8009494:	f001 f97c 	bl	800a790 <__ieee754_rem_pio2>
 8009498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800949c:	0040      	lsls	r0, r0, #1
 800949e:	f000 0002 	and.w	r0, r0, #2
 80094a2:	f1c0 0001 	rsb	r0, r0, #1
 80094a6:	9000      	str	r0, [sp, #0]
 80094a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ac:	e7e5      	b.n	800947a <tan+0x16>
 80094ae:	bf00      	nop
 80094b0:	3fe921fb 	.word	0x3fe921fb
 80094b4:	7fefffff 	.word	0x7fefffff

080094b8 <finite>:
 80094b8:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80094bc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80094c0:	0fc0      	lsrs	r0, r0, #31
 80094c2:	4770      	bx	lr

080094c4 <__ieee754_sqrt>:
 80094c4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8009668 <__ieee754_sqrt+0x1a4>
 80094c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80094d0:	460b      	mov	r3, r1
 80094d2:	4606      	mov	r6, r0
 80094d4:	460d      	mov	r5, r1
 80094d6:	460a      	mov	r2, r1
 80094d8:	4604      	mov	r4, r0
 80094da:	d10e      	bne.n	80094fa <__ieee754_sqrt+0x36>
 80094dc:	4602      	mov	r2, r0
 80094de:	f7f6 fffb 	bl	80004d8 <__aeabi_dmul>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4630      	mov	r0, r6
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7f6 fe3f 	bl	800016c <__adddf3>
 80094ee:	4606      	mov	r6, r0
 80094f0:	460d      	mov	r5, r1
 80094f2:	4630      	mov	r0, r6
 80094f4:	4629      	mov	r1, r5
 80094f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fa:	2900      	cmp	r1, #0
 80094fc:	dc0d      	bgt.n	800951a <__ieee754_sqrt+0x56>
 80094fe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009502:	ea5c 0c00 	orrs.w	ip, ip, r0
 8009506:	d0f4      	beq.n	80094f2 <__ieee754_sqrt+0x2e>
 8009508:	b139      	cbz	r1, 800951a <__ieee754_sqrt+0x56>
 800950a:	4602      	mov	r2, r0
 800950c:	f7f6 fe2c 	bl	8000168 <__aeabi_dsub>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	f7f7 f90a 	bl	800072c <__aeabi_ddiv>
 8009518:	e7e9      	b.n	80094ee <__ieee754_sqrt+0x2a>
 800951a:	1512      	asrs	r2, r2, #20
 800951c:	f000 8089 	beq.w	8009632 <__ieee754_sqrt+0x16e>
 8009520:	2500      	movs	r5, #0
 8009522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009526:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800952a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800952e:	07d2      	lsls	r2, r2, #31
 8009530:	bf5c      	itt	pl
 8009532:	005b      	lslpl	r3, r3, #1
 8009534:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009538:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800953c:	bf58      	it	pl
 800953e:	0064      	lslpl	r4, r4, #1
 8009540:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009544:	0062      	lsls	r2, r4, #1
 8009546:	2016      	movs	r0, #22
 8009548:	4629      	mov	r1, r5
 800954a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800954e:	1076      	asrs	r6, r6, #1
 8009550:	190f      	adds	r7, r1, r4
 8009552:	429f      	cmp	r7, r3
 8009554:	bfde      	ittt	le
 8009556:	1bdb      	suble	r3, r3, r7
 8009558:	1939      	addle	r1, r7, r4
 800955a:	192d      	addle	r5, r5, r4
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	3801      	subs	r0, #1
 8009560:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009564:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009568:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800956c:	d1f0      	bne.n	8009550 <__ieee754_sqrt+0x8c>
 800956e:	4604      	mov	r4, r0
 8009570:	2720      	movs	r7, #32
 8009572:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8009576:	428b      	cmp	r3, r1
 8009578:	eb0c 0e00 	add.w	lr, ip, r0
 800957c:	dc02      	bgt.n	8009584 <__ieee754_sqrt+0xc0>
 800957e:	d113      	bne.n	80095a8 <__ieee754_sqrt+0xe4>
 8009580:	4596      	cmp	lr, r2
 8009582:	d811      	bhi.n	80095a8 <__ieee754_sqrt+0xe4>
 8009584:	f1be 0f00 	cmp.w	lr, #0
 8009588:	eb0e 000c 	add.w	r0, lr, ip
 800958c:	da56      	bge.n	800963c <__ieee754_sqrt+0x178>
 800958e:	2800      	cmp	r0, #0
 8009590:	db54      	blt.n	800963c <__ieee754_sqrt+0x178>
 8009592:	f101 0801 	add.w	r8, r1, #1
 8009596:	1a5b      	subs	r3, r3, r1
 8009598:	4641      	mov	r1, r8
 800959a:	4596      	cmp	lr, r2
 800959c:	bf88      	it	hi
 800959e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80095a2:	eba2 020e 	sub.w	r2, r2, lr
 80095a6:	4464      	add	r4, ip
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	3f01      	subs	r7, #1
 80095ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80095b0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80095b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80095b8:	d1dd      	bne.n	8009576 <__ieee754_sqrt+0xb2>
 80095ba:	4313      	orrs	r3, r2
 80095bc:	d01b      	beq.n	80095f6 <__ieee754_sqrt+0x132>
 80095be:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800966c <__ieee754_sqrt+0x1a8>
 80095c2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009670 <__ieee754_sqrt+0x1ac>
 80095c6:	e9da 0100 	ldrd	r0, r1, [sl]
 80095ca:	e9db 2300 	ldrd	r2, r3, [fp]
 80095ce:	f7f6 fdcb 	bl	8000168 <__aeabi_dsub>
 80095d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4640      	mov	r0, r8
 80095dc:	4649      	mov	r1, r9
 80095de:	f7f7 f9f7 	bl	80009d0 <__aeabi_dcmple>
 80095e2:	b140      	cbz	r0, 80095f6 <__ieee754_sqrt+0x132>
 80095e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80095e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80095ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80095f0:	d126      	bne.n	8009640 <__ieee754_sqrt+0x17c>
 80095f2:	463c      	mov	r4, r7
 80095f4:	3501      	adds	r5, #1
 80095f6:	106b      	asrs	r3, r5, #1
 80095f8:	0864      	lsrs	r4, r4, #1
 80095fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80095fe:	07ea      	lsls	r2, r5, #31
 8009600:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009604:	bf48      	it	mi
 8009606:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800960a:	4620      	mov	r0, r4
 800960c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009610:	e76d      	b.n	80094ee <__ieee754_sqrt+0x2a>
 8009612:	0ae3      	lsrs	r3, r4, #11
 8009614:	3915      	subs	r1, #21
 8009616:	0564      	lsls	r4, r4, #21
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0fa      	beq.n	8009612 <__ieee754_sqrt+0x14e>
 800961c:	02d8      	lsls	r0, r3, #11
 800961e:	d50a      	bpl.n	8009636 <__ieee754_sqrt+0x172>
 8009620:	f1c2 0020 	rsb	r0, r2, #32
 8009624:	fa24 f000 	lsr.w	r0, r4, r0
 8009628:	1e55      	subs	r5, r2, #1
 800962a:	4094      	lsls	r4, r2
 800962c:	4303      	orrs	r3, r0
 800962e:	1b4a      	subs	r2, r1, r5
 8009630:	e776      	b.n	8009520 <__ieee754_sqrt+0x5c>
 8009632:	4611      	mov	r1, r2
 8009634:	e7f0      	b.n	8009618 <__ieee754_sqrt+0x154>
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	3201      	adds	r2, #1
 800963a:	e7ef      	b.n	800961c <__ieee754_sqrt+0x158>
 800963c:	4688      	mov	r8, r1
 800963e:	e7aa      	b.n	8009596 <__ieee754_sqrt+0xd2>
 8009640:	f7f6 fd94 	bl	800016c <__adddf3>
 8009644:	e9da 8900 	ldrd	r8, r9, [sl]
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4640      	mov	r0, r8
 800964e:	4649      	mov	r1, r9
 8009650:	f7f7 f9b4 	bl	80009bc <__aeabi_dcmplt>
 8009654:	b120      	cbz	r0, 8009660 <__ieee754_sqrt+0x19c>
 8009656:	1ca1      	adds	r1, r4, #2
 8009658:	bf08      	it	eq
 800965a:	3501      	addeq	r5, #1
 800965c:	3402      	adds	r4, #2
 800965e:	e7ca      	b.n	80095f6 <__ieee754_sqrt+0x132>
 8009660:	3401      	adds	r4, #1
 8009662:	f024 0401 	bic.w	r4, r4, #1
 8009666:	e7c6      	b.n	80095f6 <__ieee754_sqrt+0x132>
 8009668:	7ff00000 	.word	0x7ff00000
 800966c:	200001d8 	.word	0x200001d8
 8009670:	200001e0 	.word	0x200001e0
 8009674:	00000000 	.word	0x00000000

08009678 <__kernel_cos>:
 8009678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009680:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009684:	4680      	mov	r8, r0
 8009686:	460f      	mov	r7, r1
 8009688:	e9cd 2300 	strd	r2, r3, [sp]
 800968c:	da04      	bge.n	8009698 <__kernel_cos+0x20>
 800968e:	f7f7 f9d3 	bl	8000a38 <__aeabi_d2iz>
 8009692:	2800      	cmp	r0, #0
 8009694:	f000 8086 	beq.w	80097a4 <__kernel_cos+0x12c>
 8009698:	4642      	mov	r2, r8
 800969a:	463b      	mov	r3, r7
 800969c:	4640      	mov	r0, r8
 800969e:	4639      	mov	r1, r7
 80096a0:	f7f6 ff1a 	bl	80004d8 <__aeabi_dmul>
 80096a4:	2200      	movs	r2, #0
 80096a6:	4b4e      	ldr	r3, [pc, #312]	; (80097e0 <__kernel_cos+0x168>)
 80096a8:	4604      	mov	r4, r0
 80096aa:	460d      	mov	r5, r1
 80096ac:	f7f6 ff14 	bl	80004d8 <__aeabi_dmul>
 80096b0:	a33f      	add	r3, pc, #252	; (adr r3, 80097b0 <__kernel_cos+0x138>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	4682      	mov	sl, r0
 80096b8:	468b      	mov	fp, r1
 80096ba:	4620      	mov	r0, r4
 80096bc:	4629      	mov	r1, r5
 80096be:	f7f6 ff0b 	bl	80004d8 <__aeabi_dmul>
 80096c2:	a33d      	add	r3, pc, #244	; (adr r3, 80097b8 <__kernel_cos+0x140>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	f7f6 fd50 	bl	800016c <__adddf3>
 80096cc:	4622      	mov	r2, r4
 80096ce:	462b      	mov	r3, r5
 80096d0:	f7f6 ff02 	bl	80004d8 <__aeabi_dmul>
 80096d4:	a33a      	add	r3, pc, #232	; (adr r3, 80097c0 <__kernel_cos+0x148>)
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	f7f6 fd45 	bl	8000168 <__aeabi_dsub>
 80096de:	4622      	mov	r2, r4
 80096e0:	462b      	mov	r3, r5
 80096e2:	f7f6 fef9 	bl	80004d8 <__aeabi_dmul>
 80096e6:	a338      	add	r3, pc, #224	; (adr r3, 80097c8 <__kernel_cos+0x150>)
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	f7f6 fd3e 	bl	800016c <__adddf3>
 80096f0:	4622      	mov	r2, r4
 80096f2:	462b      	mov	r3, r5
 80096f4:	f7f6 fef0 	bl	80004d8 <__aeabi_dmul>
 80096f8:	a335      	add	r3, pc, #212	; (adr r3, 80097d0 <__kernel_cos+0x158>)
 80096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fe:	f7f6 fd33 	bl	8000168 <__aeabi_dsub>
 8009702:	4622      	mov	r2, r4
 8009704:	462b      	mov	r3, r5
 8009706:	f7f6 fee7 	bl	80004d8 <__aeabi_dmul>
 800970a:	a333      	add	r3, pc, #204	; (adr r3, 80097d8 <__kernel_cos+0x160>)
 800970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009710:	f7f6 fd2c 	bl	800016c <__adddf3>
 8009714:	4622      	mov	r2, r4
 8009716:	462b      	mov	r3, r5
 8009718:	f7f6 fede 	bl	80004d8 <__aeabi_dmul>
 800971c:	4622      	mov	r2, r4
 800971e:	462b      	mov	r3, r5
 8009720:	f7f6 feda 	bl	80004d8 <__aeabi_dmul>
 8009724:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009728:	4604      	mov	r4, r0
 800972a:	460d      	mov	r5, r1
 800972c:	4640      	mov	r0, r8
 800972e:	4639      	mov	r1, r7
 8009730:	f7f6 fed2 	bl	80004d8 <__aeabi_dmul>
 8009734:	460b      	mov	r3, r1
 8009736:	4602      	mov	r2, r0
 8009738:	4629      	mov	r1, r5
 800973a:	4620      	mov	r0, r4
 800973c:	f7f6 fd14 	bl	8000168 <__aeabi_dsub>
 8009740:	4b28      	ldr	r3, [pc, #160]	; (80097e4 <__kernel_cos+0x16c>)
 8009742:	4680      	mov	r8, r0
 8009744:	429e      	cmp	r6, r3
 8009746:	4689      	mov	r9, r1
 8009748:	dc0e      	bgt.n	8009768 <__kernel_cos+0xf0>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4650      	mov	r0, sl
 8009750:	4659      	mov	r1, fp
 8009752:	f7f6 fd09 	bl	8000168 <__aeabi_dsub>
 8009756:	4602      	mov	r2, r0
 8009758:	2000      	movs	r0, #0
 800975a:	460b      	mov	r3, r1
 800975c:	4922      	ldr	r1, [pc, #136]	; (80097e8 <__kernel_cos+0x170>)
 800975e:	f7f6 fd03 	bl	8000168 <__aeabi_dsub>
 8009762:	b003      	add	sp, #12
 8009764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009768:	2400      	movs	r4, #0
 800976a:	4b20      	ldr	r3, [pc, #128]	; (80097ec <__kernel_cos+0x174>)
 800976c:	4622      	mov	r2, r4
 800976e:	429e      	cmp	r6, r3
 8009770:	bfcc      	ite	gt
 8009772:	4d1f      	ldrgt	r5, [pc, #124]	; (80097f0 <__kernel_cos+0x178>)
 8009774:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009778:	462b      	mov	r3, r5
 800977a:	2000      	movs	r0, #0
 800977c:	491a      	ldr	r1, [pc, #104]	; (80097e8 <__kernel_cos+0x170>)
 800977e:	f7f6 fcf3 	bl	8000168 <__aeabi_dsub>
 8009782:	4622      	mov	r2, r4
 8009784:	4606      	mov	r6, r0
 8009786:	460f      	mov	r7, r1
 8009788:	462b      	mov	r3, r5
 800978a:	4650      	mov	r0, sl
 800978c:	4659      	mov	r1, fp
 800978e:	f7f6 fceb 	bl	8000168 <__aeabi_dsub>
 8009792:	4642      	mov	r2, r8
 8009794:	464b      	mov	r3, r9
 8009796:	f7f6 fce7 	bl	8000168 <__aeabi_dsub>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4630      	mov	r0, r6
 80097a0:	4639      	mov	r1, r7
 80097a2:	e7dc      	b.n	800975e <__kernel_cos+0xe6>
 80097a4:	2000      	movs	r0, #0
 80097a6:	4910      	ldr	r1, [pc, #64]	; (80097e8 <__kernel_cos+0x170>)
 80097a8:	e7db      	b.n	8009762 <__kernel_cos+0xea>
 80097aa:	bf00      	nop
 80097ac:	f3af 8000 	nop.w
 80097b0:	be8838d4 	.word	0xbe8838d4
 80097b4:	bda8fae9 	.word	0xbda8fae9
 80097b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80097bc:	3e21ee9e 	.word	0x3e21ee9e
 80097c0:	809c52ad 	.word	0x809c52ad
 80097c4:	3e927e4f 	.word	0x3e927e4f
 80097c8:	19cb1590 	.word	0x19cb1590
 80097cc:	3efa01a0 	.word	0x3efa01a0
 80097d0:	16c15177 	.word	0x16c15177
 80097d4:	3f56c16c 	.word	0x3f56c16c
 80097d8:	5555554c 	.word	0x5555554c
 80097dc:	3fa55555 	.word	0x3fa55555
 80097e0:	3fe00000 	.word	0x3fe00000
 80097e4:	3fd33332 	.word	0x3fd33332
 80097e8:	3ff00000 	.word	0x3ff00000
 80097ec:	3fe90000 	.word	0x3fe90000
 80097f0:	3fd20000 	.word	0x3fd20000
 80097f4:	00000000 	.word	0x00000000

080097f8 <__kernel_sin>:
 80097f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097fc:	b086      	sub	sp, #24
 80097fe:	e9cd 2300 	strd	r2, r3, [sp]
 8009802:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009806:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800980a:	4682      	mov	sl, r0
 800980c:	460c      	mov	r4, r1
 800980e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009810:	da03      	bge.n	800981a <__kernel_sin+0x22>
 8009812:	f7f7 f911 	bl	8000a38 <__aeabi_d2iz>
 8009816:	2800      	cmp	r0, #0
 8009818:	d050      	beq.n	80098bc <__kernel_sin+0xc4>
 800981a:	4652      	mov	r2, sl
 800981c:	4623      	mov	r3, r4
 800981e:	4650      	mov	r0, sl
 8009820:	4621      	mov	r1, r4
 8009822:	f7f6 fe59 	bl	80004d8 <__aeabi_dmul>
 8009826:	4606      	mov	r6, r0
 8009828:	460f      	mov	r7, r1
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4650      	mov	r0, sl
 8009830:	4621      	mov	r1, r4
 8009832:	f7f6 fe51 	bl	80004d8 <__aeabi_dmul>
 8009836:	a33e      	add	r3, pc, #248	; (adr r3, 8009930 <__kernel_sin+0x138>)
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	4680      	mov	r8, r0
 800983e:	4689      	mov	r9, r1
 8009840:	4630      	mov	r0, r6
 8009842:	4639      	mov	r1, r7
 8009844:	f7f6 fe48 	bl	80004d8 <__aeabi_dmul>
 8009848:	a33b      	add	r3, pc, #236	; (adr r3, 8009938 <__kernel_sin+0x140>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	f7f6 fc8b 	bl	8000168 <__aeabi_dsub>
 8009852:	4632      	mov	r2, r6
 8009854:	463b      	mov	r3, r7
 8009856:	f7f6 fe3f 	bl	80004d8 <__aeabi_dmul>
 800985a:	a339      	add	r3, pc, #228	; (adr r3, 8009940 <__kernel_sin+0x148>)
 800985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009860:	f7f6 fc84 	bl	800016c <__adddf3>
 8009864:	4632      	mov	r2, r6
 8009866:	463b      	mov	r3, r7
 8009868:	f7f6 fe36 	bl	80004d8 <__aeabi_dmul>
 800986c:	a336      	add	r3, pc, #216	; (adr r3, 8009948 <__kernel_sin+0x150>)
 800986e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009872:	f7f6 fc79 	bl	8000168 <__aeabi_dsub>
 8009876:	4632      	mov	r2, r6
 8009878:	463b      	mov	r3, r7
 800987a:	f7f6 fe2d 	bl	80004d8 <__aeabi_dmul>
 800987e:	a334      	add	r3, pc, #208	; (adr r3, 8009950 <__kernel_sin+0x158>)
 8009880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009884:	f7f6 fc72 	bl	800016c <__adddf3>
 8009888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800988c:	b9dd      	cbnz	r5, 80098c6 <__kernel_sin+0xce>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4630      	mov	r0, r6
 8009894:	4639      	mov	r1, r7
 8009896:	f7f6 fe1f 	bl	80004d8 <__aeabi_dmul>
 800989a:	a32f      	add	r3, pc, #188	; (adr r3, 8009958 <__kernel_sin+0x160>)
 800989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a0:	f7f6 fc62 	bl	8000168 <__aeabi_dsub>
 80098a4:	4642      	mov	r2, r8
 80098a6:	464b      	mov	r3, r9
 80098a8:	f7f6 fe16 	bl	80004d8 <__aeabi_dmul>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	4650      	mov	r0, sl
 80098b2:	4621      	mov	r1, r4
 80098b4:	f7f6 fc5a 	bl	800016c <__adddf3>
 80098b8:	4682      	mov	sl, r0
 80098ba:	460c      	mov	r4, r1
 80098bc:	4650      	mov	r0, sl
 80098be:	4621      	mov	r1, r4
 80098c0:	b006      	add	sp, #24
 80098c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c6:	2200      	movs	r2, #0
 80098c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098cc:	4b24      	ldr	r3, [pc, #144]	; (8009960 <__kernel_sin+0x168>)
 80098ce:	f7f6 fe03 	bl	80004d8 <__aeabi_dmul>
 80098d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098da:	4640      	mov	r0, r8
 80098dc:	4649      	mov	r1, r9
 80098de:	f7f6 fdfb 	bl	80004d8 <__aeabi_dmul>
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098ea:	f7f6 fc3d 	bl	8000168 <__aeabi_dsub>
 80098ee:	4632      	mov	r2, r6
 80098f0:	463b      	mov	r3, r7
 80098f2:	f7f6 fdf1 	bl	80004d8 <__aeabi_dmul>
 80098f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098fa:	f7f6 fc35 	bl	8000168 <__aeabi_dsub>
 80098fe:	a316      	add	r3, pc, #88	; (adr r3, 8009958 <__kernel_sin+0x160>)
 8009900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009904:	4606      	mov	r6, r0
 8009906:	460f      	mov	r7, r1
 8009908:	4640      	mov	r0, r8
 800990a:	4649      	mov	r1, r9
 800990c:	f7f6 fde4 	bl	80004d8 <__aeabi_dmul>
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	4630      	mov	r0, r6
 8009916:	4639      	mov	r1, r7
 8009918:	f7f6 fc28 	bl	800016c <__adddf3>
 800991c:	4602      	mov	r2, r0
 800991e:	460b      	mov	r3, r1
 8009920:	4650      	mov	r0, sl
 8009922:	4621      	mov	r1, r4
 8009924:	f7f6 fc20 	bl	8000168 <__aeabi_dsub>
 8009928:	e7c6      	b.n	80098b8 <__kernel_sin+0xc0>
 800992a:	bf00      	nop
 800992c:	f3af 8000 	nop.w
 8009930:	5acfd57c 	.word	0x5acfd57c
 8009934:	3de5d93a 	.word	0x3de5d93a
 8009938:	8a2b9ceb 	.word	0x8a2b9ceb
 800993c:	3e5ae5e6 	.word	0x3e5ae5e6
 8009940:	57b1fe7d 	.word	0x57b1fe7d
 8009944:	3ec71de3 	.word	0x3ec71de3
 8009948:	19c161d5 	.word	0x19c161d5
 800994c:	3f2a01a0 	.word	0x3f2a01a0
 8009950:	1110f8a6 	.word	0x1110f8a6
 8009954:	3f811111 	.word	0x3f811111
 8009958:	55555549 	.word	0x55555549
 800995c:	3fc55555 	.word	0x3fc55555
 8009960:	3fe00000 	.word	0x3fe00000
 8009964:	00000000 	.word	0x00000000

08009968 <__kernel_tan>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	b08b      	sub	sp, #44	; 0x2c
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	4bd9      	ldr	r3, [pc, #868]	; (8009cd8 <__kernel_tan+0x370>)
 8009972:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009976:	429e      	cmp	r6, r3
 8009978:	4604      	mov	r4, r0
 800997a:	460d      	mov	r5, r1
 800997c:	4682      	mov	sl, r0
 800997e:	468b      	mov	fp, r1
 8009980:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009982:	9202      	str	r2, [sp, #8]
 8009984:	9107      	str	r1, [sp, #28]
 8009986:	dc58      	bgt.n	8009a3a <__kernel_tan+0xd2>
 8009988:	f7f7 f856 	bl	8000a38 <__aeabi_d2iz>
 800998c:	4605      	mov	r5, r0
 800998e:	2800      	cmp	r0, #0
 8009990:	d178      	bne.n	8009a84 <__kernel_tan+0x11c>
 8009992:	1c7b      	adds	r3, r7, #1
 8009994:	4323      	orrs	r3, r4
 8009996:	4333      	orrs	r3, r6
 8009998:	d110      	bne.n	80099bc <__kernel_tan+0x54>
 800999a:	4620      	mov	r0, r4
 800999c:	4659      	mov	r1, fp
 800999e:	f7ff fd17 	bl	80093d0 <fabs>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	2000      	movs	r0, #0
 80099a8:	49cc      	ldr	r1, [pc, #816]	; (8009cdc <__kernel_tan+0x374>)
 80099aa:	f7f6 febf 	bl	800072c <__aeabi_ddiv>
 80099ae:	4682      	mov	sl, r0
 80099b0:	468b      	mov	fp, r1
 80099b2:	4650      	mov	r0, sl
 80099b4:	4659      	mov	r1, fp
 80099b6:	b00b      	add	sp, #44	; 0x2c
 80099b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099bc:	2f01      	cmp	r7, #1
 80099be:	d0f8      	beq.n	80099b2 <__kernel_tan+0x4a>
 80099c0:	4620      	mov	r0, r4
 80099c2:	4659      	mov	r1, fp
 80099c4:	9a02      	ldr	r2, [sp, #8]
 80099c6:	9b00      	ldr	r3, [sp, #0]
 80099c8:	f7f6 fbd0 	bl	800016c <__adddf3>
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	460f      	mov	r7, r1
 80099d2:	2000      	movs	r0, #0
 80099d4:	49c2      	ldr	r1, [pc, #776]	; (8009ce0 <__kernel_tan+0x378>)
 80099d6:	f7f6 fea9 	bl	800072c <__aeabi_ddiv>
 80099da:	462e      	mov	r6, r5
 80099dc:	4689      	mov	r9, r1
 80099de:	4652      	mov	r2, sl
 80099e0:	465b      	mov	r3, fp
 80099e2:	4680      	mov	r8, r0
 80099e4:	462c      	mov	r4, r5
 80099e6:	4630      	mov	r0, r6
 80099e8:	460d      	mov	r5, r1
 80099ea:	4639      	mov	r1, r7
 80099ec:	f7f6 fbbc 	bl	8000168 <__aeabi_dsub>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	9802      	ldr	r0, [sp, #8]
 80099f6:	9900      	ldr	r1, [sp, #0]
 80099f8:	f7f6 fbb6 	bl	8000168 <__aeabi_dsub>
 80099fc:	4632      	mov	r2, r6
 80099fe:	464b      	mov	r3, r9
 8009a00:	f7f6 fd6a 	bl	80004d8 <__aeabi_dmul>
 8009a04:	4632      	mov	r2, r6
 8009a06:	4682      	mov	sl, r0
 8009a08:	468b      	mov	fp, r1
 8009a0a:	464b      	mov	r3, r9
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	4639      	mov	r1, r7
 8009a10:	f7f6 fd62 	bl	80004d8 <__aeabi_dmul>
 8009a14:	2200      	movs	r2, #0
 8009a16:	4bb1      	ldr	r3, [pc, #708]	; (8009cdc <__kernel_tan+0x374>)
 8009a18:	f7f6 fba8 	bl	800016c <__adddf3>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4650      	mov	r0, sl
 8009a22:	4659      	mov	r1, fp
 8009a24:	f7f6 fba2 	bl	800016c <__adddf3>
 8009a28:	4642      	mov	r2, r8
 8009a2a:	464b      	mov	r3, r9
 8009a2c:	f7f6 fd54 	bl	80004d8 <__aeabi_dmul>
 8009a30:	4622      	mov	r2, r4
 8009a32:	462b      	mov	r3, r5
 8009a34:	f7f6 fb9a 	bl	800016c <__adddf3>
 8009a38:	e7b9      	b.n	80099ae <__kernel_tan+0x46>
 8009a3a:	4baa      	ldr	r3, [pc, #680]	; (8009ce4 <__kernel_tan+0x37c>)
 8009a3c:	429e      	cmp	r6, r3
 8009a3e:	dd21      	ble.n	8009a84 <__kernel_tan+0x11c>
 8009a40:	2900      	cmp	r1, #0
 8009a42:	da06      	bge.n	8009a52 <__kernel_tan+0xea>
 8009a44:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009a48:	469b      	mov	fp, r3
 8009a4a:	9b00      	ldr	r3, [sp, #0]
 8009a4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	4652      	mov	r2, sl
 8009a54:	a182      	add	r1, pc, #520	; (adr r1, 8009c60 <__kernel_tan+0x2f8>)
 8009a56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a5a:	465b      	mov	r3, fp
 8009a5c:	f7f6 fb84 	bl	8000168 <__aeabi_dsub>
 8009a60:	4604      	mov	r4, r0
 8009a62:	460d      	mov	r5, r1
 8009a64:	a180      	add	r1, pc, #512	; (adr r1, 8009c68 <__kernel_tan+0x300>)
 8009a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a6a:	9a02      	ldr	r2, [sp, #8]
 8009a6c:	9b00      	ldr	r3, [sp, #0]
 8009a6e:	f7f6 fb7b 	bl	8000168 <__aeabi_dsub>
 8009a72:	462b      	mov	r3, r5
 8009a74:	4622      	mov	r2, r4
 8009a76:	f7f6 fb79 	bl	800016c <__adddf3>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	4682      	mov	sl, r0
 8009a7e:	468b      	mov	fp, r1
 8009a80:	9302      	str	r3, [sp, #8]
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	4652      	mov	r2, sl
 8009a86:	465b      	mov	r3, fp
 8009a88:	4650      	mov	r0, sl
 8009a8a:	4659      	mov	r1, fp
 8009a8c:	f7f6 fd24 	bl	80004d8 <__aeabi_dmul>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	4680      	mov	r8, r0
 8009a96:	4689      	mov	r9, r1
 8009a98:	f7f6 fd1e 	bl	80004d8 <__aeabi_dmul>
 8009a9c:	4642      	mov	r2, r8
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	460d      	mov	r5, r1
 8009aa2:	464b      	mov	r3, r9
 8009aa4:	4650      	mov	r0, sl
 8009aa6:	4659      	mov	r1, fp
 8009aa8:	f7f6 fd16 	bl	80004d8 <__aeabi_dmul>
 8009aac:	a370      	add	r3, pc, #448	; (adr r3, 8009c70 <__kernel_tan+0x308>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	f7f6 fd0d 	bl	80004d8 <__aeabi_dmul>
 8009abe:	a36e      	add	r3, pc, #440	; (adr r3, 8009c78 <__kernel_tan+0x310>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7f6 fb52 	bl	800016c <__adddf3>
 8009ac8:	4622      	mov	r2, r4
 8009aca:	462b      	mov	r3, r5
 8009acc:	f7f6 fd04 	bl	80004d8 <__aeabi_dmul>
 8009ad0:	a36b      	add	r3, pc, #428	; (adr r3, 8009c80 <__kernel_tan+0x318>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f7f6 fb49 	bl	800016c <__adddf3>
 8009ada:	4622      	mov	r2, r4
 8009adc:	462b      	mov	r3, r5
 8009ade:	f7f6 fcfb 	bl	80004d8 <__aeabi_dmul>
 8009ae2:	a369      	add	r3, pc, #420	; (adr r3, 8009c88 <__kernel_tan+0x320>)
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	f7f6 fb40 	bl	800016c <__adddf3>
 8009aec:	4622      	mov	r2, r4
 8009aee:	462b      	mov	r3, r5
 8009af0:	f7f6 fcf2 	bl	80004d8 <__aeabi_dmul>
 8009af4:	a366      	add	r3, pc, #408	; (adr r3, 8009c90 <__kernel_tan+0x328>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f7f6 fb37 	bl	800016c <__adddf3>
 8009afe:	4622      	mov	r2, r4
 8009b00:	462b      	mov	r3, r5
 8009b02:	f7f6 fce9 	bl	80004d8 <__aeabi_dmul>
 8009b06:	a364      	add	r3, pc, #400	; (adr r3, 8009c98 <__kernel_tan+0x330>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 fb2e 	bl	800016c <__adddf3>
 8009b10:	4642      	mov	r2, r8
 8009b12:	464b      	mov	r3, r9
 8009b14:	f7f6 fce0 	bl	80004d8 <__aeabi_dmul>
 8009b18:	a361      	add	r3, pc, #388	; (adr r3, 8009ca0 <__kernel_tan+0x338>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b22:	4620      	mov	r0, r4
 8009b24:	4629      	mov	r1, r5
 8009b26:	f7f6 fcd7 	bl	80004d8 <__aeabi_dmul>
 8009b2a:	a35f      	add	r3, pc, #380	; (adr r3, 8009ca8 <__kernel_tan+0x340>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fb1c 	bl	800016c <__adddf3>
 8009b34:	4622      	mov	r2, r4
 8009b36:	462b      	mov	r3, r5
 8009b38:	f7f6 fcce 	bl	80004d8 <__aeabi_dmul>
 8009b3c:	a35c      	add	r3, pc, #368	; (adr r3, 8009cb0 <__kernel_tan+0x348>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	f7f6 fb13 	bl	800016c <__adddf3>
 8009b46:	4622      	mov	r2, r4
 8009b48:	462b      	mov	r3, r5
 8009b4a:	f7f6 fcc5 	bl	80004d8 <__aeabi_dmul>
 8009b4e:	a35a      	add	r3, pc, #360	; (adr r3, 8009cb8 <__kernel_tan+0x350>)
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	f7f6 fb0a 	bl	800016c <__adddf3>
 8009b58:	4622      	mov	r2, r4
 8009b5a:	462b      	mov	r3, r5
 8009b5c:	f7f6 fcbc 	bl	80004d8 <__aeabi_dmul>
 8009b60:	a357      	add	r3, pc, #348	; (adr r3, 8009cc0 <__kernel_tan+0x358>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f7f6 fb01 	bl	800016c <__adddf3>
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	462b      	mov	r3, r5
 8009b6e:	f7f6 fcb3 	bl	80004d8 <__aeabi_dmul>
 8009b72:	a355      	add	r3, pc, #340	; (adr r3, 8009cc8 <__kernel_tan+0x360>)
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	f7f6 faf8 	bl	800016c <__adddf3>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b84:	f7f6 faf2 	bl	800016c <__adddf3>
 8009b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b8c:	f7f6 fca4 	bl	80004d8 <__aeabi_dmul>
 8009b90:	9a02      	ldr	r2, [sp, #8]
 8009b92:	9b00      	ldr	r3, [sp, #0]
 8009b94:	f7f6 faea 	bl	800016c <__adddf3>
 8009b98:	4642      	mov	r2, r8
 8009b9a:	464b      	mov	r3, r9
 8009b9c:	f7f6 fc9c 	bl	80004d8 <__aeabi_dmul>
 8009ba0:	9a02      	ldr	r2, [sp, #8]
 8009ba2:	9b00      	ldr	r3, [sp, #0]
 8009ba4:	f7f6 fae2 	bl	800016c <__adddf3>
 8009ba8:	a349      	add	r3, pc, #292	; (adr r3, 8009cd0 <__kernel_tan+0x368>)
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	4604      	mov	r4, r0
 8009bb0:	460d      	mov	r5, r1
 8009bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bb6:	f7f6 fc8f 	bl	80004d8 <__aeabi_dmul>
 8009bba:	4622      	mov	r2, r4
 8009bbc:	462b      	mov	r3, r5
 8009bbe:	f7f6 fad5 	bl	800016c <__adddf3>
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	e9cd 0100 	strd	r0, r1, [sp]
 8009bc8:	4602      	mov	r2, r0
 8009bca:	4659      	mov	r1, fp
 8009bcc:	4650      	mov	r0, sl
 8009bce:	f7f6 facd 	bl	800016c <__adddf3>
 8009bd2:	4b44      	ldr	r3, [pc, #272]	; (8009ce4 <__kernel_tan+0x37c>)
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	429e      	cmp	r6, r3
 8009bd8:	460d      	mov	r5, r1
 8009bda:	f340 8085 	ble.w	8009ce8 <__kernel_tan+0x380>
 8009bde:	4638      	mov	r0, r7
 8009be0:	f7f6 fc10 	bl	8000404 <__aeabi_i2d>
 8009be4:	4622      	mov	r2, r4
 8009be6:	4680      	mov	r8, r0
 8009be8:	4689      	mov	r9, r1
 8009bea:	462b      	mov	r3, r5
 8009bec:	4620      	mov	r0, r4
 8009bee:	4629      	mov	r1, r5
 8009bf0:	f7f6 fc72 	bl	80004d8 <__aeabi_dmul>
 8009bf4:	4642      	mov	r2, r8
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	460f      	mov	r7, r1
 8009bfa:	464b      	mov	r3, r9
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	4629      	mov	r1, r5
 8009c00:	f7f6 fab4 	bl	800016c <__adddf3>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4630      	mov	r0, r6
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	f7f6 fd8e 	bl	800072c <__aeabi_ddiv>
 8009c10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c14:	f7f6 faa8 	bl	8000168 <__aeabi_dsub>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4650      	mov	r0, sl
 8009c1e:	4659      	mov	r1, fp
 8009c20:	f7f6 faa2 	bl	8000168 <__aeabi_dsub>
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	f7f6 faa0 	bl	800016c <__adddf3>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4640      	mov	r0, r8
 8009c32:	4649      	mov	r1, r9
 8009c34:	f7f6 fa98 	bl	8000168 <__aeabi_dsub>
 8009c38:	9b07      	ldr	r3, [sp, #28]
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	179b      	asrs	r3, r3, #30
 8009c3e:	f003 0302 	and.w	r3, r3, #2
 8009c42:	f1c3 0001 	rsb	r0, r3, #1
 8009c46:	460d      	mov	r5, r1
 8009c48:	f7f6 fbdc 	bl	8000404 <__aeabi_i2d>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4620      	mov	r0, r4
 8009c52:	4629      	mov	r1, r5
 8009c54:	f7f6 fc40 	bl	80004d8 <__aeabi_dmul>
 8009c58:	e6a9      	b.n	80099ae <__kernel_tan+0x46>
 8009c5a:	bf00      	nop
 8009c5c:	f3af 8000 	nop.w
 8009c60:	54442d18 	.word	0x54442d18
 8009c64:	3fe921fb 	.word	0x3fe921fb
 8009c68:	33145c07 	.word	0x33145c07
 8009c6c:	3c81a626 	.word	0x3c81a626
 8009c70:	74bf7ad4 	.word	0x74bf7ad4
 8009c74:	3efb2a70 	.word	0x3efb2a70
 8009c78:	32f0a7e9 	.word	0x32f0a7e9
 8009c7c:	3f12b80f 	.word	0x3f12b80f
 8009c80:	1a8d1068 	.word	0x1a8d1068
 8009c84:	3f3026f7 	.word	0x3f3026f7
 8009c88:	fee08315 	.word	0xfee08315
 8009c8c:	3f57dbc8 	.word	0x3f57dbc8
 8009c90:	e96e8493 	.word	0xe96e8493
 8009c94:	3f8226e3 	.word	0x3f8226e3
 8009c98:	1bb341fe 	.word	0x1bb341fe
 8009c9c:	3faba1ba 	.word	0x3faba1ba
 8009ca0:	db605373 	.word	0xdb605373
 8009ca4:	bef375cb 	.word	0xbef375cb
 8009ca8:	a03792a6 	.word	0xa03792a6
 8009cac:	3f147e88 	.word	0x3f147e88
 8009cb0:	f2f26501 	.word	0xf2f26501
 8009cb4:	3f4344d8 	.word	0x3f4344d8
 8009cb8:	c9560328 	.word	0xc9560328
 8009cbc:	3f6d6d22 	.word	0x3f6d6d22
 8009cc0:	8406d637 	.word	0x8406d637
 8009cc4:	3f9664f4 	.word	0x3f9664f4
 8009cc8:	1110fe7a 	.word	0x1110fe7a
 8009ccc:	3fc11111 	.word	0x3fc11111
 8009cd0:	55555563 	.word	0x55555563
 8009cd4:	3fd55555 	.word	0x3fd55555
 8009cd8:	3e2fffff 	.word	0x3e2fffff
 8009cdc:	3ff00000 	.word	0x3ff00000
 8009ce0:	bff00000 	.word	0xbff00000
 8009ce4:	3fe59427 	.word	0x3fe59427
 8009ce8:	2f01      	cmp	r7, #1
 8009cea:	d031      	beq.n	8009d50 <__kernel_tan+0x3e8>
 8009cec:	460f      	mov	r7, r1
 8009cee:	4602      	mov	r2, r0
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	4918      	ldr	r1, [pc, #96]	; (8009d58 <__kernel_tan+0x3f0>)
 8009cf6:	f7f6 fd19 	bl	800072c <__aeabi_ddiv>
 8009cfa:	2600      	movs	r6, #0
 8009cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d04:	4652      	mov	r2, sl
 8009d06:	465b      	mov	r3, fp
 8009d08:	4630      	mov	r0, r6
 8009d0a:	4639      	mov	r1, r7
 8009d0c:	f7f6 fa2c 	bl	8000168 <__aeabi_dsub>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d18:	f7f6 fa26 	bl	8000168 <__aeabi_dsub>
 8009d1c:	4632      	mov	r2, r6
 8009d1e:	462b      	mov	r3, r5
 8009d20:	f7f6 fbda 	bl	80004d8 <__aeabi_dmul>
 8009d24:	4632      	mov	r2, r6
 8009d26:	4682      	mov	sl, r0
 8009d28:	468b      	mov	fp, r1
 8009d2a:	462b      	mov	r3, r5
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	4639      	mov	r1, r7
 8009d30:	f7f6 fbd2 	bl	80004d8 <__aeabi_dmul>
 8009d34:	2200      	movs	r2, #0
 8009d36:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <__kernel_tan+0x3f4>)
 8009d38:	f7f6 fa18 	bl	800016c <__adddf3>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4650      	mov	r0, sl
 8009d42:	4659      	mov	r1, fp
 8009d44:	f7f6 fa12 	bl	800016c <__adddf3>
 8009d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d4c:	4634      	mov	r4, r6
 8009d4e:	e66d      	b.n	8009a2c <__kernel_tan+0xc4>
 8009d50:	4682      	mov	sl, r0
 8009d52:	468b      	mov	fp, r1
 8009d54:	e62d      	b.n	80099b2 <__kernel_tan+0x4a>
 8009d56:	bf00      	nop
 8009d58:	bff00000 	.word	0xbff00000
 8009d5c:	3ff00000 	.word	0x3ff00000

08009d60 <__ieee754_pow>:
 8009d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d64:	b093      	sub	sp, #76	; 0x4c
 8009d66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d6a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009d6e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009d72:	4689      	mov	r9, r1
 8009d74:	ea56 0102 	orrs.w	r1, r6, r2
 8009d78:	4680      	mov	r8, r0
 8009d7a:	d111      	bne.n	8009da0 <__ieee754_pow+0x40>
 8009d7c:	1803      	adds	r3, r0, r0
 8009d7e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009d82:	4152      	adcs	r2, r2
 8009d84:	4299      	cmp	r1, r3
 8009d86:	4b82      	ldr	r3, [pc, #520]	; (8009f90 <__ieee754_pow+0x230>)
 8009d88:	4193      	sbcs	r3, r2
 8009d8a:	f080 84ba 	bcs.w	800a702 <__ieee754_pow+0x9a2>
 8009d8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d92:	4640      	mov	r0, r8
 8009d94:	4649      	mov	r1, r9
 8009d96:	f7f6 f9e9 	bl	800016c <__adddf3>
 8009d9a:	4683      	mov	fp, r0
 8009d9c:	468c      	mov	ip, r1
 8009d9e:	e06f      	b.n	8009e80 <__ieee754_pow+0x120>
 8009da0:	4b7c      	ldr	r3, [pc, #496]	; (8009f94 <__ieee754_pow+0x234>)
 8009da2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009da6:	429c      	cmp	r4, r3
 8009da8:	464d      	mov	r5, r9
 8009daa:	4682      	mov	sl, r0
 8009dac:	dc06      	bgt.n	8009dbc <__ieee754_pow+0x5c>
 8009dae:	d101      	bne.n	8009db4 <__ieee754_pow+0x54>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d1ec      	bne.n	8009d8e <__ieee754_pow+0x2e>
 8009db4:	429e      	cmp	r6, r3
 8009db6:	dc01      	bgt.n	8009dbc <__ieee754_pow+0x5c>
 8009db8:	d10f      	bne.n	8009dda <__ieee754_pow+0x7a>
 8009dba:	b172      	cbz	r2, 8009dda <__ieee754_pow+0x7a>
 8009dbc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009dc0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009dc4:	ea55 050a 	orrs.w	r5, r5, sl
 8009dc8:	d1e1      	bne.n	8009d8e <__ieee754_pow+0x2e>
 8009dca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009dce:	18db      	adds	r3, r3, r3
 8009dd0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009dd4:	4152      	adcs	r2, r2
 8009dd6:	429d      	cmp	r5, r3
 8009dd8:	e7d5      	b.n	8009d86 <__ieee754_pow+0x26>
 8009dda:	2d00      	cmp	r5, #0
 8009ddc:	da39      	bge.n	8009e52 <__ieee754_pow+0xf2>
 8009dde:	4b6e      	ldr	r3, [pc, #440]	; (8009f98 <__ieee754_pow+0x238>)
 8009de0:	429e      	cmp	r6, r3
 8009de2:	dc52      	bgt.n	8009e8a <__ieee754_pow+0x12a>
 8009de4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009de8:	429e      	cmp	r6, r3
 8009dea:	f340 849d 	ble.w	800a728 <__ieee754_pow+0x9c8>
 8009dee:	1533      	asrs	r3, r6, #20
 8009df0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009df4:	2b14      	cmp	r3, #20
 8009df6:	dd0f      	ble.n	8009e18 <__ieee754_pow+0xb8>
 8009df8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009dfc:	fa22 f103 	lsr.w	r1, r2, r3
 8009e00:	fa01 f303 	lsl.w	r3, r1, r3
 8009e04:	4293      	cmp	r3, r2
 8009e06:	f040 848f 	bne.w	800a728 <__ieee754_pow+0x9c8>
 8009e0a:	f001 0101 	and.w	r1, r1, #1
 8009e0e:	f1c1 0302 	rsb	r3, r1, #2
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	b182      	cbz	r2, 8009e38 <__ieee754_pow+0xd8>
 8009e16:	e05d      	b.n	8009ed4 <__ieee754_pow+0x174>
 8009e18:	2a00      	cmp	r2, #0
 8009e1a:	d159      	bne.n	8009ed0 <__ieee754_pow+0x170>
 8009e1c:	f1c3 0314 	rsb	r3, r3, #20
 8009e20:	fa46 f103 	asr.w	r1, r6, r3
 8009e24:	fa01 f303 	lsl.w	r3, r1, r3
 8009e28:	42b3      	cmp	r3, r6
 8009e2a:	f040 847a 	bne.w	800a722 <__ieee754_pow+0x9c2>
 8009e2e:	f001 0101 	and.w	r1, r1, #1
 8009e32:	f1c1 0302 	rsb	r3, r1, #2
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	4b58      	ldr	r3, [pc, #352]	; (8009f9c <__ieee754_pow+0x23c>)
 8009e3a:	429e      	cmp	r6, r3
 8009e3c:	d132      	bne.n	8009ea4 <__ieee754_pow+0x144>
 8009e3e:	2f00      	cmp	r7, #0
 8009e40:	f280 846b 	bge.w	800a71a <__ieee754_pow+0x9ba>
 8009e44:	4642      	mov	r2, r8
 8009e46:	464b      	mov	r3, r9
 8009e48:	2000      	movs	r0, #0
 8009e4a:	4954      	ldr	r1, [pc, #336]	; (8009f9c <__ieee754_pow+0x23c>)
 8009e4c:	f7f6 fc6e 	bl	800072c <__aeabi_ddiv>
 8009e50:	e7a3      	b.n	8009d9a <__ieee754_pow+0x3a>
 8009e52:	2300      	movs	r3, #0
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	2a00      	cmp	r2, #0
 8009e58:	d13c      	bne.n	8009ed4 <__ieee754_pow+0x174>
 8009e5a:	4b4e      	ldr	r3, [pc, #312]	; (8009f94 <__ieee754_pow+0x234>)
 8009e5c:	429e      	cmp	r6, r3
 8009e5e:	d1eb      	bne.n	8009e38 <__ieee754_pow+0xd8>
 8009e60:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009e64:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009e68:	ea53 030a 	orrs.w	r3, r3, sl
 8009e6c:	f000 8449 	beq.w	800a702 <__ieee754_pow+0x9a2>
 8009e70:	4b4b      	ldr	r3, [pc, #300]	; (8009fa0 <__ieee754_pow+0x240>)
 8009e72:	429c      	cmp	r4, r3
 8009e74:	dd0b      	ble.n	8009e8e <__ieee754_pow+0x12e>
 8009e76:	2f00      	cmp	r7, #0
 8009e78:	f2c0 8449 	blt.w	800a70e <__ieee754_pow+0x9ae>
 8009e7c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009e80:	4658      	mov	r0, fp
 8009e82:	4661      	mov	r1, ip
 8009e84:	b013      	add	sp, #76	; 0x4c
 8009e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8a:	2302      	movs	r3, #2
 8009e8c:	e7e2      	b.n	8009e54 <__ieee754_pow+0xf4>
 8009e8e:	2f00      	cmp	r7, #0
 8009e90:	f04f 0b00 	mov.w	fp, #0
 8009e94:	f04f 0c00 	mov.w	ip, #0
 8009e98:	daf2      	bge.n	8009e80 <__ieee754_pow+0x120>
 8009e9a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009e9e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009ea2:	e7ed      	b.n	8009e80 <__ieee754_pow+0x120>
 8009ea4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009ea8:	d106      	bne.n	8009eb8 <__ieee754_pow+0x158>
 8009eaa:	4642      	mov	r2, r8
 8009eac:	464b      	mov	r3, r9
 8009eae:	4640      	mov	r0, r8
 8009eb0:	4649      	mov	r1, r9
 8009eb2:	f7f6 fb11 	bl	80004d8 <__aeabi_dmul>
 8009eb6:	e770      	b.n	8009d9a <__ieee754_pow+0x3a>
 8009eb8:	4b3a      	ldr	r3, [pc, #232]	; (8009fa4 <__ieee754_pow+0x244>)
 8009eba:	429f      	cmp	r7, r3
 8009ebc:	d10a      	bne.n	8009ed4 <__ieee754_pow+0x174>
 8009ebe:	2d00      	cmp	r5, #0
 8009ec0:	db08      	blt.n	8009ed4 <__ieee754_pow+0x174>
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	b013      	add	sp, #76	; 0x4c
 8009ec8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	f7ff bafa 	b.w	80094c4 <__ieee754_sqrt>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	4640      	mov	r0, r8
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	f7ff fa7a 	bl	80093d0 <fabs>
 8009edc:	4683      	mov	fp, r0
 8009ede:	468c      	mov	ip, r1
 8009ee0:	f1ba 0f00 	cmp.w	sl, #0
 8009ee4:	d128      	bne.n	8009f38 <__ieee754_pow+0x1d8>
 8009ee6:	b124      	cbz	r4, 8009ef2 <__ieee754_pow+0x192>
 8009ee8:	4b2c      	ldr	r3, [pc, #176]	; (8009f9c <__ieee754_pow+0x23c>)
 8009eea:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d122      	bne.n	8009f38 <__ieee754_pow+0x1d8>
 8009ef2:	2f00      	cmp	r7, #0
 8009ef4:	da07      	bge.n	8009f06 <__ieee754_pow+0x1a6>
 8009ef6:	465a      	mov	r2, fp
 8009ef8:	4663      	mov	r3, ip
 8009efa:	2000      	movs	r0, #0
 8009efc:	4927      	ldr	r1, [pc, #156]	; (8009f9c <__ieee754_pow+0x23c>)
 8009efe:	f7f6 fc15 	bl	800072c <__aeabi_ddiv>
 8009f02:	4683      	mov	fp, r0
 8009f04:	468c      	mov	ip, r1
 8009f06:	2d00      	cmp	r5, #0
 8009f08:	daba      	bge.n	8009e80 <__ieee754_pow+0x120>
 8009f0a:	9b00      	ldr	r3, [sp, #0]
 8009f0c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009f10:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009f14:	431c      	orrs	r4, r3
 8009f16:	d108      	bne.n	8009f2a <__ieee754_pow+0x1ca>
 8009f18:	465a      	mov	r2, fp
 8009f1a:	4663      	mov	r3, ip
 8009f1c:	4658      	mov	r0, fp
 8009f1e:	4661      	mov	r1, ip
 8009f20:	f7f6 f922 	bl	8000168 <__aeabi_dsub>
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	e790      	b.n	8009e4c <__ieee754_pow+0xec>
 8009f2a:	9b00      	ldr	r3, [sp, #0]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d1a7      	bne.n	8009e80 <__ieee754_pow+0x120>
 8009f30:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009f34:	469c      	mov	ip, r3
 8009f36:	e7a3      	b.n	8009e80 <__ieee754_pow+0x120>
 8009f38:	0feb      	lsrs	r3, r5, #31
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	930c      	str	r3, [sp, #48]	; 0x30
 8009f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f40:	9b00      	ldr	r3, [sp, #0]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	d104      	bne.n	8009f50 <__ieee754_pow+0x1f0>
 8009f46:	4642      	mov	r2, r8
 8009f48:	464b      	mov	r3, r9
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	e7e7      	b.n	8009f20 <__ieee754_pow+0x1c0>
 8009f50:	4b15      	ldr	r3, [pc, #84]	; (8009fa8 <__ieee754_pow+0x248>)
 8009f52:	429e      	cmp	r6, r3
 8009f54:	f340 80f6 	ble.w	800a144 <__ieee754_pow+0x3e4>
 8009f58:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009f5c:	429e      	cmp	r6, r3
 8009f5e:	4b10      	ldr	r3, [pc, #64]	; (8009fa0 <__ieee754_pow+0x240>)
 8009f60:	dd09      	ble.n	8009f76 <__ieee754_pow+0x216>
 8009f62:	429c      	cmp	r4, r3
 8009f64:	dc0c      	bgt.n	8009f80 <__ieee754_pow+0x220>
 8009f66:	2f00      	cmp	r7, #0
 8009f68:	da0c      	bge.n	8009f84 <__ieee754_pow+0x224>
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	b013      	add	sp, #76	; 0x4c
 8009f6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f72:	f000 bea2 	b.w	800acba <__math_oflow>
 8009f76:	429c      	cmp	r4, r3
 8009f78:	dbf5      	blt.n	8009f66 <__ieee754_pow+0x206>
 8009f7a:	4b08      	ldr	r3, [pc, #32]	; (8009f9c <__ieee754_pow+0x23c>)
 8009f7c:	429c      	cmp	r4, r3
 8009f7e:	dd15      	ble.n	8009fac <__ieee754_pow+0x24c>
 8009f80:	2f00      	cmp	r7, #0
 8009f82:	dcf2      	bgt.n	8009f6a <__ieee754_pow+0x20a>
 8009f84:	2000      	movs	r0, #0
 8009f86:	b013      	add	sp, #76	; 0x4c
 8009f88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	f000 be90 	b.w	800acb0 <__math_uflow>
 8009f90:	fff00000 	.word	0xfff00000
 8009f94:	7ff00000 	.word	0x7ff00000
 8009f98:	433fffff 	.word	0x433fffff
 8009f9c:	3ff00000 	.word	0x3ff00000
 8009fa0:	3fefffff 	.word	0x3fefffff
 8009fa4:	3fe00000 	.word	0x3fe00000
 8009fa8:	41e00000 	.word	0x41e00000
 8009fac:	4661      	mov	r1, ip
 8009fae:	2200      	movs	r2, #0
 8009fb0:	4658      	mov	r0, fp
 8009fb2:	4b5f      	ldr	r3, [pc, #380]	; (800a130 <__ieee754_pow+0x3d0>)
 8009fb4:	f7f6 f8d8 	bl	8000168 <__aeabi_dsub>
 8009fb8:	a355      	add	r3, pc, #340	; (adr r3, 800a110 <__ieee754_pow+0x3b0>)
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	460d      	mov	r5, r1
 8009fc2:	f7f6 fa89 	bl	80004d8 <__aeabi_dmul>
 8009fc6:	a354      	add	r3, pc, #336	; (adr r3, 800a118 <__ieee754_pow+0x3b8>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	4606      	mov	r6, r0
 8009fce:	460f      	mov	r7, r1
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	4629      	mov	r1, r5
 8009fd4:	f7f6 fa80 	bl	80004d8 <__aeabi_dmul>
 8009fd8:	2200      	movs	r2, #0
 8009fda:	4682      	mov	sl, r0
 8009fdc:	468b      	mov	fp, r1
 8009fde:	4620      	mov	r0, r4
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4b54      	ldr	r3, [pc, #336]	; (800a134 <__ieee754_pow+0x3d4>)
 8009fe4:	f7f6 fa78 	bl	80004d8 <__aeabi_dmul>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	a14c      	add	r1, pc, #304	; (adr r1, 800a120 <__ieee754_pow+0x3c0>)
 8009fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ff2:	f7f6 f8b9 	bl	8000168 <__aeabi_dsub>
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	462b      	mov	r3, r5
 8009ffa:	f7f6 fa6d 	bl	80004d8 <__aeabi_dmul>
 8009ffe:	4602      	mov	r2, r0
 800a000:	460b      	mov	r3, r1
 800a002:	2000      	movs	r0, #0
 800a004:	494c      	ldr	r1, [pc, #304]	; (800a138 <__ieee754_pow+0x3d8>)
 800a006:	f7f6 f8af 	bl	8000168 <__aeabi_dsub>
 800a00a:	4622      	mov	r2, r4
 800a00c:	462b      	mov	r3, r5
 800a00e:	4680      	mov	r8, r0
 800a010:	4689      	mov	r9, r1
 800a012:	4620      	mov	r0, r4
 800a014:	4629      	mov	r1, r5
 800a016:	f7f6 fa5f 	bl	80004d8 <__aeabi_dmul>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4640      	mov	r0, r8
 800a020:	4649      	mov	r1, r9
 800a022:	f7f6 fa59 	bl	80004d8 <__aeabi_dmul>
 800a026:	a340      	add	r3, pc, #256	; (adr r3, 800a128 <__ieee754_pow+0x3c8>)
 800a028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02c:	f7f6 fa54 	bl	80004d8 <__aeabi_dmul>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4650      	mov	r0, sl
 800a036:	4659      	mov	r1, fp
 800a038:	f7f6 f896 	bl	8000168 <__aeabi_dsub>
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	4604      	mov	r4, r0
 800a042:	460d      	mov	r5, r1
 800a044:	4630      	mov	r0, r6
 800a046:	4639      	mov	r1, r7
 800a048:	f7f6 f890 	bl	800016c <__adddf3>
 800a04c:	2000      	movs	r0, #0
 800a04e:	4632      	mov	r2, r6
 800a050:	463b      	mov	r3, r7
 800a052:	4682      	mov	sl, r0
 800a054:	468b      	mov	fp, r1
 800a056:	f7f6 f887 	bl	8000168 <__aeabi_dsub>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4620      	mov	r0, r4
 800a060:	4629      	mov	r1, r5
 800a062:	f7f6 f881 	bl	8000168 <__aeabi_dsub>
 800a066:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a06a:	9b00      	ldr	r3, [sp, #0]
 800a06c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a06e:	3b01      	subs	r3, #1
 800a070:	4313      	orrs	r3, r2
 800a072:	f04f 0600 	mov.w	r6, #0
 800a076:	f04f 0200 	mov.w	r2, #0
 800a07a:	bf0c      	ite	eq
 800a07c:	4b2f      	ldreq	r3, [pc, #188]	; (800a13c <__ieee754_pow+0x3dc>)
 800a07e:	4b2c      	ldrne	r3, [pc, #176]	; (800a130 <__ieee754_pow+0x3d0>)
 800a080:	4604      	mov	r4, r0
 800a082:	460d      	mov	r5, r1
 800a084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a088:	e9cd 2300 	strd	r2, r3, [sp]
 800a08c:	4632      	mov	r2, r6
 800a08e:	463b      	mov	r3, r7
 800a090:	f7f6 f86a 	bl	8000168 <__aeabi_dsub>
 800a094:	4652      	mov	r2, sl
 800a096:	465b      	mov	r3, fp
 800a098:	f7f6 fa1e 	bl	80004d8 <__aeabi_dmul>
 800a09c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0a0:	4680      	mov	r8, r0
 800a0a2:	4689      	mov	r9, r1
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	f7f6 fa16 	bl	80004d8 <__aeabi_dmul>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4640      	mov	r0, r8
 800a0b2:	4649      	mov	r1, r9
 800a0b4:	f7f6 f85a 	bl	800016c <__adddf3>
 800a0b8:	4632      	mov	r2, r6
 800a0ba:	463b      	mov	r3, r7
 800a0bc:	4680      	mov	r8, r0
 800a0be:	4689      	mov	r9, r1
 800a0c0:	4650      	mov	r0, sl
 800a0c2:	4659      	mov	r1, fp
 800a0c4:	f7f6 fa08 	bl	80004d8 <__aeabi_dmul>
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	460d      	mov	r5, r1
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a0d8:	f7f6 f848 	bl	800016c <__adddf3>
 800a0dc:	4b18      	ldr	r3, [pc, #96]	; (800a140 <__ieee754_pow+0x3e0>)
 800a0de:	4682      	mov	sl, r0
 800a0e0:	4299      	cmp	r1, r3
 800a0e2:	460f      	mov	r7, r1
 800a0e4:	460e      	mov	r6, r1
 800a0e6:	f340 82e7 	ble.w	800a6b8 <__ieee754_pow+0x958>
 800a0ea:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a0ee:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a0f2:	4303      	orrs	r3, r0
 800a0f4:	f000 81e2 	beq.w	800a4bc <__ieee754_pow+0x75c>
 800a0f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2300      	movs	r3, #0
 800a100:	f7f6 fc5c 	bl	80009bc <__aeabi_dcmplt>
 800a104:	3800      	subs	r0, #0
 800a106:	bf18      	it	ne
 800a108:	2001      	movne	r0, #1
 800a10a:	e72f      	b.n	8009f6c <__ieee754_pow+0x20c>
 800a10c:	f3af 8000 	nop.w
 800a110:	60000000 	.word	0x60000000
 800a114:	3ff71547 	.word	0x3ff71547
 800a118:	f85ddf44 	.word	0xf85ddf44
 800a11c:	3e54ae0b 	.word	0x3e54ae0b
 800a120:	55555555 	.word	0x55555555
 800a124:	3fd55555 	.word	0x3fd55555
 800a128:	652b82fe 	.word	0x652b82fe
 800a12c:	3ff71547 	.word	0x3ff71547
 800a130:	3ff00000 	.word	0x3ff00000
 800a134:	3fd00000 	.word	0x3fd00000
 800a138:	3fe00000 	.word	0x3fe00000
 800a13c:	bff00000 	.word	0xbff00000
 800a140:	408fffff 	.word	0x408fffff
 800a144:	4bd4      	ldr	r3, [pc, #848]	; (800a498 <__ieee754_pow+0x738>)
 800a146:	2200      	movs	r2, #0
 800a148:	402b      	ands	r3, r5
 800a14a:	b943      	cbnz	r3, 800a15e <__ieee754_pow+0x3fe>
 800a14c:	4658      	mov	r0, fp
 800a14e:	4661      	mov	r1, ip
 800a150:	4bd2      	ldr	r3, [pc, #840]	; (800a49c <__ieee754_pow+0x73c>)
 800a152:	f7f6 f9c1 	bl	80004d8 <__aeabi_dmul>
 800a156:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a15a:	4683      	mov	fp, r0
 800a15c:	460c      	mov	r4, r1
 800a15e:	1523      	asrs	r3, r4, #20
 800a160:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a164:	4413      	add	r3, r2
 800a166:	930b      	str	r3, [sp, #44]	; 0x2c
 800a168:	4bcd      	ldr	r3, [pc, #820]	; (800a4a0 <__ieee754_pow+0x740>)
 800a16a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a16e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a172:	429c      	cmp	r4, r3
 800a174:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a178:	dd08      	ble.n	800a18c <__ieee754_pow+0x42c>
 800a17a:	4bca      	ldr	r3, [pc, #808]	; (800a4a4 <__ieee754_pow+0x744>)
 800a17c:	429c      	cmp	r4, r3
 800a17e:	f340 8164 	ble.w	800a44a <__ieee754_pow+0x6ea>
 800a182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a184:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a188:	3301      	adds	r3, #1
 800a18a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a18c:	2600      	movs	r6, #0
 800a18e:	00f3      	lsls	r3, r6, #3
 800a190:	930d      	str	r3, [sp, #52]	; 0x34
 800a192:	4bc5      	ldr	r3, [pc, #788]	; (800a4a8 <__ieee754_pow+0x748>)
 800a194:	4658      	mov	r0, fp
 800a196:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a19a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a19e:	4629      	mov	r1, r5
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a1a6:	4623      	mov	r3, r4
 800a1a8:	f7f5 ffde 	bl	8000168 <__aeabi_dsub>
 800a1ac:	46da      	mov	sl, fp
 800a1ae:	462b      	mov	r3, r5
 800a1b0:	4652      	mov	r2, sl
 800a1b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a1b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1ba:	f7f5 ffd7 	bl	800016c <__adddf3>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	49b9      	ldr	r1, [pc, #740]	; (800a4ac <__ieee754_pow+0x74c>)
 800a1c6:	f7f6 fab1 	bl	800072c <__aeabi_ddiv>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a1d2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a1d6:	f7f6 f97f 	bl	80004d8 <__aeabi_dmul>
 800a1da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a1de:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a1e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	46ab      	mov	fp, r5
 800a1ec:	106d      	asrs	r5, r5, #1
 800a1ee:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a1f2:	9304      	str	r3, [sp, #16]
 800a1f4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a1f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a1fc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a200:	4640      	mov	r0, r8
 800a202:	4649      	mov	r1, r9
 800a204:	4614      	mov	r4, r2
 800a206:	461d      	mov	r5, r3
 800a208:	f7f6 f966 	bl	80004d8 <__aeabi_dmul>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a214:	f7f5 ffa8 	bl	8000168 <__aeabi_dsub>
 800a218:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a21c:	4606      	mov	r6, r0
 800a21e:	460f      	mov	r7, r1
 800a220:	4620      	mov	r0, r4
 800a222:	4629      	mov	r1, r5
 800a224:	f7f5 ffa0 	bl	8000168 <__aeabi_dsub>
 800a228:	4602      	mov	r2, r0
 800a22a:	460b      	mov	r3, r1
 800a22c:	4650      	mov	r0, sl
 800a22e:	4659      	mov	r1, fp
 800a230:	f7f5 ff9a 	bl	8000168 <__aeabi_dsub>
 800a234:	4642      	mov	r2, r8
 800a236:	464b      	mov	r3, r9
 800a238:	f7f6 f94e 	bl	80004d8 <__aeabi_dmul>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	4630      	mov	r0, r6
 800a242:	4639      	mov	r1, r7
 800a244:	f7f5 ff90 	bl	8000168 <__aeabi_dsub>
 800a248:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a24c:	f7f6 f944 	bl	80004d8 <__aeabi_dmul>
 800a250:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a254:	4682      	mov	sl, r0
 800a256:	468b      	mov	fp, r1
 800a258:	4610      	mov	r0, r2
 800a25a:	4619      	mov	r1, r3
 800a25c:	f7f6 f93c 	bl	80004d8 <__aeabi_dmul>
 800a260:	a37b      	add	r3, pc, #492	; (adr r3, 800a450 <__ieee754_pow+0x6f0>)
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	4604      	mov	r4, r0
 800a268:	460d      	mov	r5, r1
 800a26a:	f7f6 f935 	bl	80004d8 <__aeabi_dmul>
 800a26e:	a37a      	add	r3, pc, #488	; (adr r3, 800a458 <__ieee754_pow+0x6f8>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	f7f5 ff7a 	bl	800016c <__adddf3>
 800a278:	4622      	mov	r2, r4
 800a27a:	462b      	mov	r3, r5
 800a27c:	f7f6 f92c 	bl	80004d8 <__aeabi_dmul>
 800a280:	a377      	add	r3, pc, #476	; (adr r3, 800a460 <__ieee754_pow+0x700>)
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	f7f5 ff71 	bl	800016c <__adddf3>
 800a28a:	4622      	mov	r2, r4
 800a28c:	462b      	mov	r3, r5
 800a28e:	f7f6 f923 	bl	80004d8 <__aeabi_dmul>
 800a292:	a375      	add	r3, pc, #468	; (adr r3, 800a468 <__ieee754_pow+0x708>)
 800a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a298:	f7f5 ff68 	bl	800016c <__adddf3>
 800a29c:	4622      	mov	r2, r4
 800a29e:	462b      	mov	r3, r5
 800a2a0:	f7f6 f91a 	bl	80004d8 <__aeabi_dmul>
 800a2a4:	a372      	add	r3, pc, #456	; (adr r3, 800a470 <__ieee754_pow+0x710>)
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	f7f5 ff5f 	bl	800016c <__adddf3>
 800a2ae:	4622      	mov	r2, r4
 800a2b0:	462b      	mov	r3, r5
 800a2b2:	f7f6 f911 	bl	80004d8 <__aeabi_dmul>
 800a2b6:	a370      	add	r3, pc, #448	; (adr r3, 800a478 <__ieee754_pow+0x718>)
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	f7f5 ff56 	bl	800016c <__adddf3>
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	460f      	mov	r7, r1
 800a2c6:	462b      	mov	r3, r5
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	f7f6 f904 	bl	80004d8 <__aeabi_dmul>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	4639      	mov	r1, r7
 800a2d8:	f7f6 f8fe 	bl	80004d8 <__aeabi_dmul>
 800a2dc:	4604      	mov	r4, r0
 800a2de:	460d      	mov	r5, r1
 800a2e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2e4:	4642      	mov	r2, r8
 800a2e6:	464b      	mov	r3, r9
 800a2e8:	f7f5 ff40 	bl	800016c <__adddf3>
 800a2ec:	4652      	mov	r2, sl
 800a2ee:	465b      	mov	r3, fp
 800a2f0:	f7f6 f8f2 	bl	80004d8 <__aeabi_dmul>
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	462b      	mov	r3, r5
 800a2f8:	f7f5 ff38 	bl	800016c <__adddf3>
 800a2fc:	4642      	mov	r2, r8
 800a2fe:	4606      	mov	r6, r0
 800a300:	460f      	mov	r7, r1
 800a302:	464b      	mov	r3, r9
 800a304:	4640      	mov	r0, r8
 800a306:	4649      	mov	r1, r9
 800a308:	f7f6 f8e6 	bl	80004d8 <__aeabi_dmul>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a314:	2200      	movs	r2, #0
 800a316:	4b66      	ldr	r3, [pc, #408]	; (800a4b0 <__ieee754_pow+0x750>)
 800a318:	f7f5 ff28 	bl	800016c <__adddf3>
 800a31c:	4632      	mov	r2, r6
 800a31e:	463b      	mov	r3, r7
 800a320:	f7f5 ff24 	bl	800016c <__adddf3>
 800a324:	2400      	movs	r4, #0
 800a326:	460d      	mov	r5, r1
 800a328:	4622      	mov	r2, r4
 800a32a:	460b      	mov	r3, r1
 800a32c:	4640      	mov	r0, r8
 800a32e:	4649      	mov	r1, r9
 800a330:	f7f6 f8d2 	bl	80004d8 <__aeabi_dmul>
 800a334:	2200      	movs	r2, #0
 800a336:	4680      	mov	r8, r0
 800a338:	4689      	mov	r9, r1
 800a33a:	4620      	mov	r0, r4
 800a33c:	4629      	mov	r1, r5
 800a33e:	4b5c      	ldr	r3, [pc, #368]	; (800a4b0 <__ieee754_pow+0x750>)
 800a340:	f7f5 ff12 	bl	8000168 <__aeabi_dsub>
 800a344:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a348:	f7f5 ff0e 	bl	8000168 <__aeabi_dsub>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4630      	mov	r0, r6
 800a352:	4639      	mov	r1, r7
 800a354:	f7f5 ff08 	bl	8000168 <__aeabi_dsub>
 800a358:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a35c:	f7f6 f8bc 	bl	80004d8 <__aeabi_dmul>
 800a360:	4622      	mov	r2, r4
 800a362:	4606      	mov	r6, r0
 800a364:	460f      	mov	r7, r1
 800a366:	462b      	mov	r3, r5
 800a368:	4650      	mov	r0, sl
 800a36a:	4659      	mov	r1, fp
 800a36c:	f7f6 f8b4 	bl	80004d8 <__aeabi_dmul>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	4630      	mov	r0, r6
 800a376:	4639      	mov	r1, r7
 800a378:	f7f5 fef8 	bl	800016c <__adddf3>
 800a37c:	2400      	movs	r4, #0
 800a37e:	4606      	mov	r6, r0
 800a380:	460f      	mov	r7, r1
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	4640      	mov	r0, r8
 800a388:	4649      	mov	r1, r9
 800a38a:	f7f5 feef 	bl	800016c <__adddf3>
 800a38e:	a33c      	add	r3, pc, #240	; (adr r3, 800a480 <__ieee754_pow+0x720>)
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	4620      	mov	r0, r4
 800a396:	460d      	mov	r5, r1
 800a398:	f7f6 f89e 	bl	80004d8 <__aeabi_dmul>
 800a39c:	4642      	mov	r2, r8
 800a39e:	464b      	mov	r3, r9
 800a3a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	f7f5 fede 	bl	8000168 <__aeabi_dsub>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	f7f5 fed8 	bl	8000168 <__aeabi_dsub>
 800a3b8:	a333      	add	r3, pc, #204	; (adr r3, 800a488 <__ieee754_pow+0x728>)
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	f7f6 f88b 	bl	80004d8 <__aeabi_dmul>
 800a3c2:	a333      	add	r3, pc, #204	; (adr r3, 800a490 <__ieee754_pow+0x730>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	4606      	mov	r6, r0
 800a3ca:	460f      	mov	r7, r1
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	f7f6 f882 	bl	80004d8 <__aeabi_dmul>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4630      	mov	r0, r6
 800a3da:	4639      	mov	r1, r7
 800a3dc:	f7f5 fec6 	bl	800016c <__adddf3>
 800a3e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3e2:	4b34      	ldr	r3, [pc, #208]	; (800a4b4 <__ieee754_pow+0x754>)
 800a3e4:	4413      	add	r3, r2
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	f7f5 febf 	bl	800016c <__adddf3>
 800a3ee:	4680      	mov	r8, r0
 800a3f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a3f2:	4689      	mov	r9, r1
 800a3f4:	f7f6 f806 	bl	8000404 <__aeabi_i2d>
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	460d      	mov	r5, r1
 800a3fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a402:	4b2d      	ldr	r3, [pc, #180]	; (800a4b8 <__ieee754_pow+0x758>)
 800a404:	4413      	add	r3, r2
 800a406:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a40a:	4642      	mov	r2, r8
 800a40c:	464b      	mov	r3, r9
 800a40e:	f7f5 fead 	bl	800016c <__adddf3>
 800a412:	4632      	mov	r2, r6
 800a414:	463b      	mov	r3, r7
 800a416:	f7f5 fea9 	bl	800016c <__adddf3>
 800a41a:	4622      	mov	r2, r4
 800a41c:	462b      	mov	r3, r5
 800a41e:	f7f5 fea5 	bl	800016c <__adddf3>
 800a422:	2000      	movs	r0, #0
 800a424:	4622      	mov	r2, r4
 800a426:	462b      	mov	r3, r5
 800a428:	4682      	mov	sl, r0
 800a42a:	468b      	mov	fp, r1
 800a42c:	f7f5 fe9c 	bl	8000168 <__aeabi_dsub>
 800a430:	4632      	mov	r2, r6
 800a432:	463b      	mov	r3, r7
 800a434:	f7f5 fe98 	bl	8000168 <__aeabi_dsub>
 800a438:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a43c:	f7f5 fe94 	bl	8000168 <__aeabi_dsub>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4640      	mov	r0, r8
 800a446:	4649      	mov	r1, r9
 800a448:	e60b      	b.n	800a062 <__ieee754_pow+0x302>
 800a44a:	2601      	movs	r6, #1
 800a44c:	e69f      	b.n	800a18e <__ieee754_pow+0x42e>
 800a44e:	bf00      	nop
 800a450:	4a454eef 	.word	0x4a454eef
 800a454:	3fca7e28 	.word	0x3fca7e28
 800a458:	93c9db65 	.word	0x93c9db65
 800a45c:	3fcd864a 	.word	0x3fcd864a
 800a460:	a91d4101 	.word	0xa91d4101
 800a464:	3fd17460 	.word	0x3fd17460
 800a468:	518f264d 	.word	0x518f264d
 800a46c:	3fd55555 	.word	0x3fd55555
 800a470:	db6fabff 	.word	0xdb6fabff
 800a474:	3fdb6db6 	.word	0x3fdb6db6
 800a478:	33333303 	.word	0x33333303
 800a47c:	3fe33333 	.word	0x3fe33333
 800a480:	e0000000 	.word	0xe0000000
 800a484:	3feec709 	.word	0x3feec709
 800a488:	dc3a03fd 	.word	0xdc3a03fd
 800a48c:	3feec709 	.word	0x3feec709
 800a490:	145b01f5 	.word	0x145b01f5
 800a494:	be3e2fe0 	.word	0xbe3e2fe0
 800a498:	7ff00000 	.word	0x7ff00000
 800a49c:	43400000 	.word	0x43400000
 800a4a0:	0003988e 	.word	0x0003988e
 800a4a4:	000bb679 	.word	0x000bb679
 800a4a8:	0800b908 	.word	0x0800b908
 800a4ac:	3ff00000 	.word	0x3ff00000
 800a4b0:	40080000 	.word	0x40080000
 800a4b4:	0800b928 	.word	0x0800b928
 800a4b8:	0800b918 	.word	0x0800b918
 800a4bc:	a39c      	add	r3, pc, #624	; (adr r3, 800a730 <__ieee754_pow+0x9d0>)
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	4649      	mov	r1, r9
 800a4c6:	f7f5 fe51 	bl	800016c <__adddf3>
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4d0:	462b      	mov	r3, r5
 800a4d2:	4650      	mov	r0, sl
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	f7f5 fe47 	bl	8000168 <__aeabi_dsub>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4e2:	f7f6 fa89 	bl	80009f8 <__aeabi_dcmpgt>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	f47f ae06 	bne.w	800a0f8 <__ieee754_pow+0x398>
 800a4ec:	4aa2      	ldr	r2, [pc, #648]	; (800a778 <__ieee754_pow+0xa18>)
 800a4ee:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	f340 8100 	ble.w	800a6f8 <__ieee754_pow+0x998>
 800a4f8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a4fc:	151b      	asrs	r3, r3, #20
 800a4fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a502:	fa4a fa03 	asr.w	sl, sl, r3
 800a506:	44b2      	add	sl, r6
 800a508:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a50c:	489b      	ldr	r0, [pc, #620]	; (800a77c <__ieee754_pow+0xa1c>)
 800a50e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a512:	4108      	asrs	r0, r1
 800a514:	ea00 030a 	and.w	r3, r0, sl
 800a518:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a51c:	f1c1 0114 	rsb	r1, r1, #20
 800a520:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a524:	fa4a fa01 	asr.w	sl, sl, r1
 800a528:	2e00      	cmp	r6, #0
 800a52a:	f04f 0200 	mov.w	r2, #0
 800a52e:	4620      	mov	r0, r4
 800a530:	4629      	mov	r1, r5
 800a532:	bfb8      	it	lt
 800a534:	f1ca 0a00 	rsblt	sl, sl, #0
 800a538:	f7f5 fe16 	bl	8000168 <__aeabi_dsub>
 800a53c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a544:	2400      	movs	r4, #0
 800a546:	4642      	mov	r2, r8
 800a548:	464b      	mov	r3, r9
 800a54a:	f7f5 fe0f 	bl	800016c <__adddf3>
 800a54e:	a37a      	add	r3, pc, #488	; (adr r3, 800a738 <__ieee754_pow+0x9d8>)
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	4620      	mov	r0, r4
 800a556:	460d      	mov	r5, r1
 800a558:	f7f5 ffbe 	bl	80004d8 <__aeabi_dmul>
 800a55c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a560:	4606      	mov	r6, r0
 800a562:	460f      	mov	r7, r1
 800a564:	4620      	mov	r0, r4
 800a566:	4629      	mov	r1, r5
 800a568:	f7f5 fdfe 	bl	8000168 <__aeabi_dsub>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	4640      	mov	r0, r8
 800a572:	4649      	mov	r1, r9
 800a574:	f7f5 fdf8 	bl	8000168 <__aeabi_dsub>
 800a578:	a371      	add	r3, pc, #452	; (adr r3, 800a740 <__ieee754_pow+0x9e0>)
 800a57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57e:	f7f5 ffab 	bl	80004d8 <__aeabi_dmul>
 800a582:	a371      	add	r3, pc, #452	; (adr r3, 800a748 <__ieee754_pow+0x9e8>)
 800a584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a588:	4680      	mov	r8, r0
 800a58a:	4689      	mov	r9, r1
 800a58c:	4620      	mov	r0, r4
 800a58e:	4629      	mov	r1, r5
 800a590:	f7f5 ffa2 	bl	80004d8 <__aeabi_dmul>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4640      	mov	r0, r8
 800a59a:	4649      	mov	r1, r9
 800a59c:	f7f5 fde6 	bl	800016c <__adddf3>
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	460d      	mov	r5, r1
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	4639      	mov	r1, r7
 800a5ac:	f7f5 fdde 	bl	800016c <__adddf3>
 800a5b0:	4632      	mov	r2, r6
 800a5b2:	463b      	mov	r3, r7
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	4689      	mov	r9, r1
 800a5b8:	f7f5 fdd6 	bl	8000168 <__aeabi_dsub>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	f7f5 fdd0 	bl	8000168 <__aeabi_dsub>
 800a5c8:	4642      	mov	r2, r8
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	460f      	mov	r7, r1
 800a5ce:	464b      	mov	r3, r9
 800a5d0:	4640      	mov	r0, r8
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	f7f5 ff80 	bl	80004d8 <__aeabi_dmul>
 800a5d8:	a35d      	add	r3, pc, #372	; (adr r3, 800a750 <__ieee754_pow+0x9f0>)
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	4604      	mov	r4, r0
 800a5e0:	460d      	mov	r5, r1
 800a5e2:	f7f5 ff79 	bl	80004d8 <__aeabi_dmul>
 800a5e6:	a35c      	add	r3, pc, #368	; (adr r3, 800a758 <__ieee754_pow+0x9f8>)
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	f7f5 fdbc 	bl	8000168 <__aeabi_dsub>
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	462b      	mov	r3, r5
 800a5f4:	f7f5 ff70 	bl	80004d8 <__aeabi_dmul>
 800a5f8:	a359      	add	r3, pc, #356	; (adr r3, 800a760 <__ieee754_pow+0xa00>)
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	f7f5 fdb5 	bl	800016c <__adddf3>
 800a602:	4622      	mov	r2, r4
 800a604:	462b      	mov	r3, r5
 800a606:	f7f5 ff67 	bl	80004d8 <__aeabi_dmul>
 800a60a:	a357      	add	r3, pc, #348	; (adr r3, 800a768 <__ieee754_pow+0xa08>)
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	f7f5 fdaa 	bl	8000168 <__aeabi_dsub>
 800a614:	4622      	mov	r2, r4
 800a616:	462b      	mov	r3, r5
 800a618:	f7f5 ff5e 	bl	80004d8 <__aeabi_dmul>
 800a61c:	a354      	add	r3, pc, #336	; (adr r3, 800a770 <__ieee754_pow+0xa10>)
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	f7f5 fda3 	bl	800016c <__adddf3>
 800a626:	4622      	mov	r2, r4
 800a628:	462b      	mov	r3, r5
 800a62a:	f7f5 ff55 	bl	80004d8 <__aeabi_dmul>
 800a62e:	4602      	mov	r2, r0
 800a630:	460b      	mov	r3, r1
 800a632:	4640      	mov	r0, r8
 800a634:	4649      	mov	r1, r9
 800a636:	f7f5 fd97 	bl	8000168 <__aeabi_dsub>
 800a63a:	4604      	mov	r4, r0
 800a63c:	460d      	mov	r5, r1
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	4640      	mov	r0, r8
 800a644:	4649      	mov	r1, r9
 800a646:	f7f5 ff47 	bl	80004d8 <__aeabi_dmul>
 800a64a:	2200      	movs	r2, #0
 800a64c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a650:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a654:	4620      	mov	r0, r4
 800a656:	4629      	mov	r1, r5
 800a658:	f7f5 fd86 	bl	8000168 <__aeabi_dsub>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a664:	f7f6 f862 	bl	800072c <__aeabi_ddiv>
 800a668:	4632      	mov	r2, r6
 800a66a:	4604      	mov	r4, r0
 800a66c:	460d      	mov	r5, r1
 800a66e:	463b      	mov	r3, r7
 800a670:	4640      	mov	r0, r8
 800a672:	4649      	mov	r1, r9
 800a674:	f7f5 ff30 	bl	80004d8 <__aeabi_dmul>
 800a678:	4632      	mov	r2, r6
 800a67a:	463b      	mov	r3, r7
 800a67c:	f7f5 fd76 	bl	800016c <__adddf3>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	4620      	mov	r0, r4
 800a686:	4629      	mov	r1, r5
 800a688:	f7f5 fd6e 	bl	8000168 <__aeabi_dsub>
 800a68c:	4642      	mov	r2, r8
 800a68e:	464b      	mov	r3, r9
 800a690:	f7f5 fd6a 	bl	8000168 <__aeabi_dsub>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	2000      	movs	r0, #0
 800a69a:	4939      	ldr	r1, [pc, #228]	; (800a780 <__ieee754_pow+0xa20>)
 800a69c:	f7f5 fd64 	bl	8000168 <__aeabi_dsub>
 800a6a0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a6a4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a6a8:	da29      	bge.n	800a6fe <__ieee754_pow+0x99e>
 800a6aa:	4652      	mov	r2, sl
 800a6ac:	f000 fa64 	bl	800ab78 <scalbn>
 800a6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6b4:	f7ff bbfd 	b.w	8009eb2 <__ieee754_pow+0x152>
 800a6b8:	4b32      	ldr	r3, [pc, #200]	; (800a784 <__ieee754_pow+0xa24>)
 800a6ba:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a6be:	429f      	cmp	r7, r3
 800a6c0:	f77f af14 	ble.w	800a4ec <__ieee754_pow+0x78c>
 800a6c4:	4b30      	ldr	r3, [pc, #192]	; (800a788 <__ieee754_pow+0xa28>)
 800a6c6:	440b      	add	r3, r1
 800a6c8:	4303      	orrs	r3, r0
 800a6ca:	d009      	beq.n	800a6e0 <__ieee754_pow+0x980>
 800a6cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f7f6 f972 	bl	80009bc <__aeabi_dcmplt>
 800a6d8:	3800      	subs	r0, #0
 800a6da:	bf18      	it	ne
 800a6dc:	2001      	movne	r0, #1
 800a6de:	e452      	b.n	8009f86 <__ieee754_pow+0x226>
 800a6e0:	4622      	mov	r2, r4
 800a6e2:	462b      	mov	r3, r5
 800a6e4:	f7f5 fd40 	bl	8000168 <__aeabi_dsub>
 800a6e8:	4642      	mov	r2, r8
 800a6ea:	464b      	mov	r3, r9
 800a6ec:	f7f6 f97a 	bl	80009e4 <__aeabi_dcmpge>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	f43f aefb 	beq.w	800a4ec <__ieee754_pow+0x78c>
 800a6f6:	e7e9      	b.n	800a6cc <__ieee754_pow+0x96c>
 800a6f8:	f04f 0a00 	mov.w	sl, #0
 800a6fc:	e720      	b.n	800a540 <__ieee754_pow+0x7e0>
 800a6fe:	4621      	mov	r1, r4
 800a700:	e7d6      	b.n	800a6b0 <__ieee754_pow+0x950>
 800a702:	f04f 0b00 	mov.w	fp, #0
 800a706:	f8df c078 	ldr.w	ip, [pc, #120]	; 800a780 <__ieee754_pow+0xa20>
 800a70a:	f7ff bbb9 	b.w	8009e80 <__ieee754_pow+0x120>
 800a70e:	f04f 0b00 	mov.w	fp, #0
 800a712:	f04f 0c00 	mov.w	ip, #0
 800a716:	f7ff bbb3 	b.w	8009e80 <__ieee754_pow+0x120>
 800a71a:	4640      	mov	r0, r8
 800a71c:	4649      	mov	r1, r9
 800a71e:	f7ff bb3c 	b.w	8009d9a <__ieee754_pow+0x3a>
 800a722:	9200      	str	r2, [sp, #0]
 800a724:	f7ff bb88 	b.w	8009e38 <__ieee754_pow+0xd8>
 800a728:	2300      	movs	r3, #0
 800a72a:	f7ff bb72 	b.w	8009e12 <__ieee754_pow+0xb2>
 800a72e:	bf00      	nop
 800a730:	652b82fe 	.word	0x652b82fe
 800a734:	3c971547 	.word	0x3c971547
 800a738:	00000000 	.word	0x00000000
 800a73c:	3fe62e43 	.word	0x3fe62e43
 800a740:	fefa39ef 	.word	0xfefa39ef
 800a744:	3fe62e42 	.word	0x3fe62e42
 800a748:	0ca86c39 	.word	0x0ca86c39
 800a74c:	be205c61 	.word	0xbe205c61
 800a750:	72bea4d0 	.word	0x72bea4d0
 800a754:	3e663769 	.word	0x3e663769
 800a758:	c5d26bf1 	.word	0xc5d26bf1
 800a75c:	3ebbbd41 	.word	0x3ebbbd41
 800a760:	af25de2c 	.word	0xaf25de2c
 800a764:	3f11566a 	.word	0x3f11566a
 800a768:	16bebd93 	.word	0x16bebd93
 800a76c:	3f66c16c 	.word	0x3f66c16c
 800a770:	5555553e 	.word	0x5555553e
 800a774:	3fc55555 	.word	0x3fc55555
 800a778:	3fe00000 	.word	0x3fe00000
 800a77c:	fff00000 	.word	0xfff00000
 800a780:	3ff00000 	.word	0x3ff00000
 800a784:	4090cbff 	.word	0x4090cbff
 800a788:	3f6f3400 	.word	0x3f6f3400
 800a78c:	00000000 	.word	0x00000000

0800a790 <__ieee754_rem_pio2>:
 800a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	4614      	mov	r4, r2
 800a796:	4ac2      	ldr	r2, [pc, #776]	; (800aaa0 <__ieee754_rem_pio2+0x310>)
 800a798:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a79c:	b08d      	sub	sp, #52	; 0x34
 800a79e:	4592      	cmp	sl, r2
 800a7a0:	9104      	str	r1, [sp, #16]
 800a7a2:	dc07      	bgt.n	800a7b4 <__ieee754_rem_pio2+0x24>
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e9c4 0100 	strd	r0, r1, [r4]
 800a7ac:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a7b0:	2500      	movs	r5, #0
 800a7b2:	e024      	b.n	800a7fe <__ieee754_rem_pio2+0x6e>
 800a7b4:	4abb      	ldr	r2, [pc, #748]	; (800aaa4 <__ieee754_rem_pio2+0x314>)
 800a7b6:	4592      	cmp	sl, r2
 800a7b8:	dc72      	bgt.n	800a8a0 <__ieee754_rem_pio2+0x110>
 800a7ba:	9b04      	ldr	r3, [sp, #16]
 800a7bc:	4dba      	ldr	r5, [pc, #744]	; (800aaa8 <__ieee754_rem_pio2+0x318>)
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	a3a9      	add	r3, pc, #676	; (adr r3, 800aa68 <__ieee754_rem_pio2+0x2d8>)
 800a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c6:	dd36      	ble.n	800a836 <__ieee754_rem_pio2+0xa6>
 800a7c8:	f7f5 fcce 	bl	8000168 <__aeabi_dsub>
 800a7cc:	45aa      	cmp	sl, r5
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	460f      	mov	r7, r1
 800a7d2:	d018      	beq.n	800a806 <__ieee754_rem_pio2+0x76>
 800a7d4:	a3a6      	add	r3, pc, #664	; (adr r3, 800aa70 <__ieee754_rem_pio2+0x2e0>)
 800a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7da:	f7f5 fcc5 	bl	8000168 <__aeabi_dsub>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	e9c4 2300 	strd	r2, r3, [r4]
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	f7f5 fcbd 	bl	8000168 <__aeabi_dsub>
 800a7ee:	a3a0      	add	r3, pc, #640	; (adr r3, 800aa70 <__ieee754_rem_pio2+0x2e0>)
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	f7f5 fcb8 	bl	8000168 <__aeabi_dsub>
 800a7f8:	2501      	movs	r5, #1
 800a7fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7fe:	4628      	mov	r0, r5
 800a800:	b00d      	add	sp, #52	; 0x34
 800a802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a806:	a39c      	add	r3, pc, #624	; (adr r3, 800aa78 <__ieee754_rem_pio2+0x2e8>)
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	f7f5 fcac 	bl	8000168 <__aeabi_dsub>
 800a810:	a39b      	add	r3, pc, #620	; (adr r3, 800aa80 <__ieee754_rem_pio2+0x2f0>)
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	4606      	mov	r6, r0
 800a818:	460f      	mov	r7, r1
 800a81a:	f7f5 fca5 	bl	8000168 <__aeabi_dsub>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	4630      	mov	r0, r6
 800a824:	e9c4 2300 	strd	r2, r3, [r4]
 800a828:	4639      	mov	r1, r7
 800a82a:	f7f5 fc9d 	bl	8000168 <__aeabi_dsub>
 800a82e:	a394      	add	r3, pc, #592	; (adr r3, 800aa80 <__ieee754_rem_pio2+0x2f0>)
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	e7de      	b.n	800a7f4 <__ieee754_rem_pio2+0x64>
 800a836:	f7f5 fc99 	bl	800016c <__adddf3>
 800a83a:	45aa      	cmp	sl, r5
 800a83c:	4606      	mov	r6, r0
 800a83e:	460f      	mov	r7, r1
 800a840:	d016      	beq.n	800a870 <__ieee754_rem_pio2+0xe0>
 800a842:	a38b      	add	r3, pc, #556	; (adr r3, 800aa70 <__ieee754_rem_pio2+0x2e0>)
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	f7f5 fc90 	bl	800016c <__adddf3>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4630      	mov	r0, r6
 800a852:	e9c4 2300 	strd	r2, r3, [r4]
 800a856:	4639      	mov	r1, r7
 800a858:	f7f5 fc86 	bl	8000168 <__aeabi_dsub>
 800a85c:	a384      	add	r3, pc, #528	; (adr r3, 800aa70 <__ieee754_rem_pio2+0x2e0>)
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	f7f5 fc83 	bl	800016c <__adddf3>
 800a866:	f04f 35ff 	mov.w	r5, #4294967295
 800a86a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a86e:	e7c6      	b.n	800a7fe <__ieee754_rem_pio2+0x6e>
 800a870:	a381      	add	r3, pc, #516	; (adr r3, 800aa78 <__ieee754_rem_pio2+0x2e8>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f7f5 fc79 	bl	800016c <__adddf3>
 800a87a:	a381      	add	r3, pc, #516	; (adr r3, 800aa80 <__ieee754_rem_pio2+0x2f0>)
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	4606      	mov	r6, r0
 800a882:	460f      	mov	r7, r1
 800a884:	f7f5 fc72 	bl	800016c <__adddf3>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4630      	mov	r0, r6
 800a88e:	e9c4 2300 	strd	r2, r3, [r4]
 800a892:	4639      	mov	r1, r7
 800a894:	f7f5 fc68 	bl	8000168 <__aeabi_dsub>
 800a898:	a379      	add	r3, pc, #484	; (adr r3, 800aa80 <__ieee754_rem_pio2+0x2f0>)
 800a89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89e:	e7e0      	b.n	800a862 <__ieee754_rem_pio2+0xd2>
 800a8a0:	4a82      	ldr	r2, [pc, #520]	; (800aaac <__ieee754_rem_pio2+0x31c>)
 800a8a2:	4592      	cmp	sl, r2
 800a8a4:	f300 80d4 	bgt.w	800aa50 <__ieee754_rem_pio2+0x2c0>
 800a8a8:	f7fe fd92 	bl	80093d0 <fabs>
 800a8ac:	a376      	add	r3, pc, #472	; (adr r3, 800aa88 <__ieee754_rem_pio2+0x2f8>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	4606      	mov	r6, r0
 800a8b4:	460f      	mov	r7, r1
 800a8b6:	f7f5 fe0f 	bl	80004d8 <__aeabi_dmul>
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	4b7c      	ldr	r3, [pc, #496]	; (800aab0 <__ieee754_rem_pio2+0x320>)
 800a8be:	f7f5 fc55 	bl	800016c <__adddf3>
 800a8c2:	f7f6 f8b9 	bl	8000a38 <__aeabi_d2iz>
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	f7f5 fd9c 	bl	8000404 <__aeabi_i2d>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8d4:	a364      	add	r3, pc, #400	; (adr r3, 800aa68 <__ieee754_rem_pio2+0x2d8>)
 800a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8da:	f7f5 fdfd 	bl	80004d8 <__aeabi_dmul>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	f7f5 fc3f 	bl	8000168 <__aeabi_dsub>
 800a8ea:	a361      	add	r3, pc, #388	; (adr r3, 800aa70 <__ieee754_rem_pio2+0x2e0>)
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	4680      	mov	r8, r0
 800a8f2:	4689      	mov	r9, r1
 800a8f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8f8:	f7f5 fdee 	bl	80004d8 <__aeabi_dmul>
 800a8fc:	2d1f      	cmp	r5, #31
 800a8fe:	4606      	mov	r6, r0
 800a900:	460f      	mov	r7, r1
 800a902:	dc0e      	bgt.n	800a922 <__ieee754_rem_pio2+0x192>
 800a904:	4b6b      	ldr	r3, [pc, #428]	; (800aab4 <__ieee754_rem_pio2+0x324>)
 800a906:	1e6a      	subs	r2, r5, #1
 800a908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90c:	4553      	cmp	r3, sl
 800a90e:	d008      	beq.n	800a922 <__ieee754_rem_pio2+0x192>
 800a910:	4632      	mov	r2, r6
 800a912:	463b      	mov	r3, r7
 800a914:	4640      	mov	r0, r8
 800a916:	4649      	mov	r1, r9
 800a918:	f7f5 fc26 	bl	8000168 <__aeabi_dsub>
 800a91c:	e9c4 0100 	strd	r0, r1, [r4]
 800a920:	e012      	b.n	800a948 <__ieee754_rem_pio2+0x1b8>
 800a922:	463b      	mov	r3, r7
 800a924:	4632      	mov	r2, r6
 800a926:	4640      	mov	r0, r8
 800a928:	4649      	mov	r1, r9
 800a92a:	f7f5 fc1d 	bl	8000168 <__aeabi_dsub>
 800a92e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800a932:	9305      	str	r3, [sp, #20]
 800a934:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a938:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800a93c:	2b10      	cmp	r3, #16
 800a93e:	dc1f      	bgt.n	800a980 <__ieee754_rem_pio2+0x1f0>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	e9c4 2300 	strd	r2, r3, [r4]
 800a948:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800a94c:	4640      	mov	r0, r8
 800a94e:	4653      	mov	r3, sl
 800a950:	4649      	mov	r1, r9
 800a952:	f7f5 fc09 	bl	8000168 <__aeabi_dsub>
 800a956:	4632      	mov	r2, r6
 800a958:	463b      	mov	r3, r7
 800a95a:	f7f5 fc05 	bl	8000168 <__aeabi_dsub>
 800a95e:	460b      	mov	r3, r1
 800a960:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a964:	9904      	ldr	r1, [sp, #16]
 800a966:	4602      	mov	r2, r0
 800a968:	2900      	cmp	r1, #0
 800a96a:	f6bf af48 	bge.w	800a7fe <__ieee754_rem_pio2+0x6e>
 800a96e:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800a972:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a976:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a97a:	60e3      	str	r3, [r4, #12]
 800a97c:	426d      	negs	r5, r5
 800a97e:	e73e      	b.n	800a7fe <__ieee754_rem_pio2+0x6e>
 800a980:	a33d      	add	r3, pc, #244	; (adr r3, 800aa78 <__ieee754_rem_pio2+0x2e8>)
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a98a:	f7f5 fda5 	bl	80004d8 <__aeabi_dmul>
 800a98e:	4606      	mov	r6, r0
 800a990:	460f      	mov	r7, r1
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	4640      	mov	r0, r8
 800a998:	4649      	mov	r1, r9
 800a99a:	f7f5 fbe5 	bl	8000168 <__aeabi_dsub>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4682      	mov	sl, r0
 800a9a4:	468b      	mov	fp, r1
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	f7f5 fbdd 	bl	8000168 <__aeabi_dsub>
 800a9ae:	4632      	mov	r2, r6
 800a9b0:	463b      	mov	r3, r7
 800a9b2:	f7f5 fbd9 	bl	8000168 <__aeabi_dsub>
 800a9b6:	a332      	add	r3, pc, #200	; (adr r3, 800aa80 <__ieee754_rem_pio2+0x2f0>)
 800a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9bc:	4606      	mov	r6, r0
 800a9be:	460f      	mov	r7, r1
 800a9c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9c4:	f7f5 fd88 	bl	80004d8 <__aeabi_dmul>
 800a9c8:	4632      	mov	r2, r6
 800a9ca:	463b      	mov	r3, r7
 800a9cc:	f7f5 fbcc 	bl	8000168 <__aeabi_dsub>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	4606      	mov	r6, r0
 800a9d6:	460f      	mov	r7, r1
 800a9d8:	4650      	mov	r0, sl
 800a9da:	4659      	mov	r1, fp
 800a9dc:	f7f5 fbc4 	bl	8000168 <__aeabi_dsub>
 800a9e0:	9a05      	ldr	r2, [sp, #20]
 800a9e2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	2b31      	cmp	r3, #49	; 0x31
 800a9ea:	dc06      	bgt.n	800a9fa <__ieee754_rem_pio2+0x26a>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	46d0      	mov	r8, sl
 800a9f2:	46d9      	mov	r9, fp
 800a9f4:	e9c4 2300 	strd	r2, r3, [r4]
 800a9f8:	e7a6      	b.n	800a948 <__ieee754_rem_pio2+0x1b8>
 800a9fa:	a325      	add	r3, pc, #148	; (adr r3, 800aa90 <__ieee754_rem_pio2+0x300>)
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa04:	f7f5 fd68 	bl	80004d8 <__aeabi_dmul>
 800aa08:	4606      	mov	r6, r0
 800aa0a:	460f      	mov	r7, r1
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4650      	mov	r0, sl
 800aa12:	4659      	mov	r1, fp
 800aa14:	f7f5 fba8 	bl	8000168 <__aeabi_dsub>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	4680      	mov	r8, r0
 800aa1e:	4689      	mov	r9, r1
 800aa20:	4650      	mov	r0, sl
 800aa22:	4659      	mov	r1, fp
 800aa24:	f7f5 fba0 	bl	8000168 <__aeabi_dsub>
 800aa28:	4632      	mov	r2, r6
 800aa2a:	463b      	mov	r3, r7
 800aa2c:	f7f5 fb9c 	bl	8000168 <__aeabi_dsub>
 800aa30:	a319      	add	r3, pc, #100	; (adr r3, 800aa98 <__ieee754_rem_pio2+0x308>)
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	4606      	mov	r6, r0
 800aa38:	460f      	mov	r7, r1
 800aa3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa3e:	f7f5 fd4b 	bl	80004d8 <__aeabi_dmul>
 800aa42:	4632      	mov	r2, r6
 800aa44:	463b      	mov	r3, r7
 800aa46:	f7f5 fb8f 	bl	8000168 <__aeabi_dsub>
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	460f      	mov	r7, r1
 800aa4e:	e75f      	b.n	800a910 <__ieee754_rem_pio2+0x180>
 800aa50:	4a19      	ldr	r2, [pc, #100]	; (800aab8 <__ieee754_rem_pio2+0x328>)
 800aa52:	4592      	cmp	sl, r2
 800aa54:	dd32      	ble.n	800aabc <__ieee754_rem_pio2+0x32c>
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	f7f5 fb85 	bl	8000168 <__aeabi_dsub>
 800aa5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa62:	e9c4 0100 	strd	r0, r1, [r4]
 800aa66:	e6a3      	b.n	800a7b0 <__ieee754_rem_pio2+0x20>
 800aa68:	54400000 	.word	0x54400000
 800aa6c:	3ff921fb 	.word	0x3ff921fb
 800aa70:	1a626331 	.word	0x1a626331
 800aa74:	3dd0b461 	.word	0x3dd0b461
 800aa78:	1a600000 	.word	0x1a600000
 800aa7c:	3dd0b461 	.word	0x3dd0b461
 800aa80:	2e037073 	.word	0x2e037073
 800aa84:	3ba3198a 	.word	0x3ba3198a
 800aa88:	6dc9c883 	.word	0x6dc9c883
 800aa8c:	3fe45f30 	.word	0x3fe45f30
 800aa90:	2e000000 	.word	0x2e000000
 800aa94:	3ba3198a 	.word	0x3ba3198a
 800aa98:	252049c1 	.word	0x252049c1
 800aa9c:	397b839a 	.word	0x397b839a
 800aaa0:	3fe921fb 	.word	0x3fe921fb
 800aaa4:	4002d97b 	.word	0x4002d97b
 800aaa8:	3ff921fb 	.word	0x3ff921fb
 800aaac:	413921fb 	.word	0x413921fb
 800aab0:	3fe00000 	.word	0x3fe00000
 800aab4:	0800b938 	.word	0x0800b938
 800aab8:	7fefffff 	.word	0x7fefffff
 800aabc:	ea4f 552a 	mov.w	r5, sl, asr #20
 800aac0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800aac4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800aac8:	460f      	mov	r7, r1
 800aaca:	4606      	mov	r6, r0
 800aacc:	f7f5 ffb4 	bl	8000a38 <__aeabi_d2iz>
 800aad0:	f7f5 fc98 	bl	8000404 <__aeabi_i2d>
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	4630      	mov	r0, r6
 800aada:	4639      	mov	r1, r7
 800aadc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aae0:	f7f5 fb42 	bl	8000168 <__aeabi_dsub>
 800aae4:	2200      	movs	r2, #0
 800aae6:	4b22      	ldr	r3, [pc, #136]	; (800ab70 <__ieee754_rem_pio2+0x3e0>)
 800aae8:	f7f5 fcf6 	bl	80004d8 <__aeabi_dmul>
 800aaec:	460f      	mov	r7, r1
 800aaee:	4606      	mov	r6, r0
 800aaf0:	f7f5 ffa2 	bl	8000a38 <__aeabi_d2iz>
 800aaf4:	f7f5 fc86 	bl	8000404 <__aeabi_i2d>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	4630      	mov	r0, r6
 800aafe:	4639      	mov	r1, r7
 800ab00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab04:	f7f5 fb30 	bl	8000168 <__aeabi_dsub>
 800ab08:	2200      	movs	r2, #0
 800ab0a:	4b19      	ldr	r3, [pc, #100]	; (800ab70 <__ieee754_rem_pio2+0x3e0>)
 800ab0c:	f7f5 fce4 	bl	80004d8 <__aeabi_dmul>
 800ab10:	f04f 0803 	mov.w	r8, #3
 800ab14:	2600      	movs	r6, #0
 800ab16:	2700      	movs	r7, #0
 800ab18:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ab1c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ab20:	4632      	mov	r2, r6
 800ab22:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ab26:	463b      	mov	r3, r7
 800ab28:	46c2      	mov	sl, r8
 800ab2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab2e:	f7f5 ff3b 	bl	80009a8 <__aeabi_dcmpeq>
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d1f4      	bne.n	800ab20 <__ieee754_rem_pio2+0x390>
 800ab36:	4b0f      	ldr	r3, [pc, #60]	; (800ab74 <__ieee754_rem_pio2+0x3e4>)
 800ab38:	462a      	mov	r2, r5
 800ab3a:	9301      	str	r3, [sp, #4]
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	4621      	mov	r1, r4
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	a806      	add	r0, sp, #24
 800ab44:	4653      	mov	r3, sl
 800ab46:	f000 f8bd 	bl	800acc4 <__kernel_rem_pio2>
 800ab4a:	9b04      	ldr	r3, [sp, #16]
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f6bf ae55 	bge.w	800a7fe <__ieee754_rem_pio2+0x6e>
 800ab54:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ab58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab5c:	e9c4 2300 	strd	r2, r3, [r4]
 800ab60:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ab64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab68:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ab6c:	e706      	b.n	800a97c <__ieee754_rem_pio2+0x1ec>
 800ab6e:	bf00      	nop
 800ab70:	41700000 	.word	0x41700000
 800ab74:	0800b9b8 	.word	0x0800b9b8

0800ab78 <scalbn>:
 800ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7a:	4616      	mov	r6, r2
 800ab7c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	460b      	mov	r3, r1
 800ab86:	b992      	cbnz	r2, 800abae <scalbn+0x36>
 800ab88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab8c:	4303      	orrs	r3, r0
 800ab8e:	d03c      	beq.n	800ac0a <scalbn+0x92>
 800ab90:	4b31      	ldr	r3, [pc, #196]	; (800ac58 <scalbn+0xe0>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	f7f5 fca0 	bl	80004d8 <__aeabi_dmul>
 800ab98:	4b30      	ldr	r3, [pc, #192]	; (800ac5c <scalbn+0xe4>)
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	429e      	cmp	r6, r3
 800ab9e:	460d      	mov	r5, r1
 800aba0:	da0f      	bge.n	800abc2 <scalbn+0x4a>
 800aba2:	a329      	add	r3, pc, #164	; (adr r3, 800ac48 <scalbn+0xd0>)
 800aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba8:	f7f5 fc96 	bl	80004d8 <__aeabi_dmul>
 800abac:	e006      	b.n	800abbc <scalbn+0x44>
 800abae:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800abb2:	42ba      	cmp	r2, r7
 800abb4:	d109      	bne.n	800abca <scalbn+0x52>
 800abb6:	4602      	mov	r2, r0
 800abb8:	f7f5 fad8 	bl	800016c <__adddf3>
 800abbc:	4604      	mov	r4, r0
 800abbe:	460d      	mov	r5, r1
 800abc0:	e023      	b.n	800ac0a <scalbn+0x92>
 800abc2:	460b      	mov	r3, r1
 800abc4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800abc8:	3a36      	subs	r2, #54	; 0x36
 800abca:	f24c 3150 	movw	r1, #50000	; 0xc350
 800abce:	428e      	cmp	r6, r1
 800abd0:	dd0e      	ble.n	800abf0 <scalbn+0x78>
 800abd2:	a31f      	add	r3, pc, #124	; (adr r3, 800ac50 <scalbn+0xd8>)
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800abdc:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800abe0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800abe4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800abe8:	481d      	ldr	r0, [pc, #116]	; (800ac60 <scalbn+0xe8>)
 800abea:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800abee:	e7db      	b.n	800aba8 <scalbn+0x30>
 800abf0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800abf4:	4432      	add	r2, r6
 800abf6:	428a      	cmp	r2, r1
 800abf8:	dceb      	bgt.n	800abd2 <scalbn+0x5a>
 800abfa:	2a00      	cmp	r2, #0
 800abfc:	dd08      	ble.n	800ac10 <scalbn+0x98>
 800abfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac02:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac06:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac10:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ac14:	da0c      	bge.n	800ac30 <scalbn+0xb8>
 800ac16:	a30c      	add	r3, pc, #48	; (adr r3, 800ac48 <scalbn+0xd0>)
 800ac18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ac20:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ac24:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800ac28:	480e      	ldr	r0, [pc, #56]	; (800ac64 <scalbn+0xec>)
 800ac2a:	f041 011f 	orr.w	r1, r1, #31
 800ac2e:	e7bb      	b.n	800aba8 <scalbn+0x30>
 800ac30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac34:	3236      	adds	r2, #54	; 0x36
 800ac36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac3e:	4620      	mov	r0, r4
 800ac40:	4629      	mov	r1, r5
 800ac42:	2200      	movs	r2, #0
 800ac44:	4b08      	ldr	r3, [pc, #32]	; (800ac68 <scalbn+0xf0>)
 800ac46:	e7af      	b.n	800aba8 <scalbn+0x30>
 800ac48:	c2f8f359 	.word	0xc2f8f359
 800ac4c:	01a56e1f 	.word	0x01a56e1f
 800ac50:	8800759c 	.word	0x8800759c
 800ac54:	7e37e43c 	.word	0x7e37e43c
 800ac58:	43500000 	.word	0x43500000
 800ac5c:	ffff3cb0 	.word	0xffff3cb0
 800ac60:	8800759c 	.word	0x8800759c
 800ac64:	c2f8f359 	.word	0xc2f8f359
 800ac68:	3c900000 	.word	0x3c900000

0800ac6c <with_errno>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	4604      	mov	r4, r0
 800ac70:	460d      	mov	r5, r1
 800ac72:	4616      	mov	r6, r2
 800ac74:	f7fa fdfe 	bl	8005874 <__errno>
 800ac78:	4629      	mov	r1, r5
 800ac7a:	6006      	str	r6, [r0, #0]
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	bd70      	pop	{r4, r5, r6, pc}

0800ac80 <xflow>:
 800ac80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac82:	4615      	mov	r5, r2
 800ac84:	461c      	mov	r4, r3
 800ac86:	b180      	cbz	r0, 800acaa <xflow+0x2a>
 800ac88:	4610      	mov	r0, r2
 800ac8a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ac8e:	e9cd 0100 	strd	r0, r1, [sp]
 800ac92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac96:	4628      	mov	r0, r5
 800ac98:	4621      	mov	r1, r4
 800ac9a:	f7f5 fc1d 	bl	80004d8 <__aeabi_dmul>
 800ac9e:	2222      	movs	r2, #34	; 0x22
 800aca0:	b003      	add	sp, #12
 800aca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aca6:	f7ff bfe1 	b.w	800ac6c <with_errno>
 800acaa:	4610      	mov	r0, r2
 800acac:	4619      	mov	r1, r3
 800acae:	e7ee      	b.n	800ac8e <xflow+0xe>

0800acb0 <__math_uflow>:
 800acb0:	2200      	movs	r2, #0
 800acb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800acb6:	f7ff bfe3 	b.w	800ac80 <xflow>

0800acba <__math_oflow>:
 800acba:	2200      	movs	r2, #0
 800acbc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800acc0:	f7ff bfde 	b.w	800ac80 <xflow>

0800acc4 <__kernel_rem_pio2>:
 800acc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800accc:	9308      	str	r3, [sp, #32]
 800acce:	9106      	str	r1, [sp, #24]
 800acd0:	4bb6      	ldr	r3, [pc, #728]	; (800afac <__kernel_rem_pio2+0x2e8>)
 800acd2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800acd4:	f112 0f14 	cmn.w	r2, #20
 800acd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800acdc:	bfa8      	it	ge
 800acde:	1ed4      	subge	r4, r2, #3
 800ace0:	9302      	str	r3, [sp, #8]
 800ace2:	9b08      	ldr	r3, [sp, #32]
 800ace4:	bfb8      	it	lt
 800ace6:	2400      	movlt	r4, #0
 800ace8:	f103 33ff 	add.w	r3, r3, #4294967295
 800acec:	9307      	str	r3, [sp, #28]
 800acee:	bfa4      	itt	ge
 800acf0:	2318      	movge	r3, #24
 800acf2:	fb94 f4f3 	sdivge	r4, r4, r3
 800acf6:	f06f 0317 	mvn.w	r3, #23
 800acfa:	fb04 3303 	mla	r3, r4, r3, r3
 800acfe:	eb03 0b02 	add.w	fp, r3, r2
 800ad02:	9a07      	ldr	r2, [sp, #28]
 800ad04:	9b02      	ldr	r3, [sp, #8]
 800ad06:	1aa7      	subs	r7, r4, r2
 800ad08:	eb03 0802 	add.w	r8, r3, r2
 800ad0c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ad0e:	2500      	movs	r5, #0
 800ad10:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ad14:	2200      	movs	r2, #0
 800ad16:	2300      	movs	r3, #0
 800ad18:	9009      	str	r0, [sp, #36]	; 0x24
 800ad1a:	ae20      	add	r6, sp, #128	; 0x80
 800ad1c:	4545      	cmp	r5, r8
 800ad1e:	dd14      	ble.n	800ad4a <__kernel_rem_pio2+0x86>
 800ad20:	f04f 0800 	mov.w	r8, #0
 800ad24:	9a08      	ldr	r2, [sp, #32]
 800ad26:	ab20      	add	r3, sp, #128	; 0x80
 800ad28:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800ad2c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800ad30:	9b02      	ldr	r3, [sp, #8]
 800ad32:	4598      	cmp	r8, r3
 800ad34:	dc35      	bgt.n	800ada2 <__kernel_rem_pio2+0xde>
 800ad36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f1a3 0908 	sub.w	r9, r3, #8
 800ad3e:	2300      	movs	r3, #0
 800ad40:	462f      	mov	r7, r5
 800ad42:	2600      	movs	r6, #0
 800ad44:	e9cd 2300 	strd	r2, r3, [sp]
 800ad48:	e01f      	b.n	800ad8a <__kernel_rem_pio2+0xc6>
 800ad4a:	42ef      	cmn	r7, r5
 800ad4c:	d40b      	bmi.n	800ad66 <__kernel_rem_pio2+0xa2>
 800ad4e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ad52:	e9cd 2300 	strd	r2, r3, [sp]
 800ad56:	f7f5 fb55 	bl	8000404 <__aeabi_i2d>
 800ad5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad5e:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ad62:	3501      	adds	r5, #1
 800ad64:	e7da      	b.n	800ad1c <__kernel_rem_pio2+0x58>
 800ad66:	4610      	mov	r0, r2
 800ad68:	4619      	mov	r1, r3
 800ad6a:	e7f8      	b.n	800ad5e <__kernel_rem_pio2+0x9a>
 800ad6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad70:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800ad74:	f7f5 fbb0 	bl	80004d8 <__aeabi_dmul>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad80:	f7f5 f9f4 	bl	800016c <__adddf3>
 800ad84:	e9cd 0100 	strd	r0, r1, [sp]
 800ad88:	3601      	adds	r6, #1
 800ad8a:	9b07      	ldr	r3, [sp, #28]
 800ad8c:	3f08      	subs	r7, #8
 800ad8e:	429e      	cmp	r6, r3
 800ad90:	ddec      	ble.n	800ad6c <__kernel_rem_pio2+0xa8>
 800ad92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad96:	f108 0801 	add.w	r8, r8, #1
 800ad9a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800ad9e:	3508      	adds	r5, #8
 800ada0:	e7c6      	b.n	800ad30 <__kernel_rem_pio2+0x6c>
 800ada2:	9b02      	ldr	r3, [sp, #8]
 800ada4:	aa0c      	add	r2, sp, #48	; 0x30
 800ada6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800adac:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800adae:	9e02      	ldr	r6, [sp, #8]
 800adb0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800adb4:	930a      	str	r3, [sp, #40]	; 0x28
 800adb6:	ab98      	add	r3, sp, #608	; 0x260
 800adb8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800adbc:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800adc0:	ab70      	add	r3, sp, #448	; 0x1c0
 800adc2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800adc6:	46d0      	mov	r8, sl
 800adc8:	46b1      	mov	r9, r6
 800adca:	af0c      	add	r7, sp, #48	; 0x30
 800adcc:	9700      	str	r7, [sp, #0]
 800adce:	f1b9 0f00 	cmp.w	r9, #0
 800add2:	f1a8 0808 	sub.w	r8, r8, #8
 800add6:	dc70      	bgt.n	800aeba <__kernel_rem_pio2+0x1f6>
 800add8:	465a      	mov	r2, fp
 800adda:	4620      	mov	r0, r4
 800addc:	4629      	mov	r1, r5
 800adde:	f7ff fecb 	bl	800ab78 <scalbn>
 800ade2:	2200      	movs	r2, #0
 800ade4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ade8:	4604      	mov	r4, r0
 800adea:	460d      	mov	r5, r1
 800adec:	f7f5 fb74 	bl	80004d8 <__aeabi_dmul>
 800adf0:	f000 faaa 	bl	800b348 <floor>
 800adf4:	2200      	movs	r2, #0
 800adf6:	4b6e      	ldr	r3, [pc, #440]	; (800afb0 <__kernel_rem_pio2+0x2ec>)
 800adf8:	f7f5 fb6e 	bl	80004d8 <__aeabi_dmul>
 800adfc:	4602      	mov	r2, r0
 800adfe:	460b      	mov	r3, r1
 800ae00:	4620      	mov	r0, r4
 800ae02:	4629      	mov	r1, r5
 800ae04:	f7f5 f9b0 	bl	8000168 <__aeabi_dsub>
 800ae08:	460d      	mov	r5, r1
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	f7f5 fe14 	bl	8000a38 <__aeabi_d2iz>
 800ae10:	9004      	str	r0, [sp, #16]
 800ae12:	f7f5 faf7 	bl	8000404 <__aeabi_i2d>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	f7f5 f9a3 	bl	8000168 <__aeabi_dsub>
 800ae22:	f1bb 0f00 	cmp.w	fp, #0
 800ae26:	4680      	mov	r8, r0
 800ae28:	4689      	mov	r9, r1
 800ae2a:	dd6f      	ble.n	800af0c <__kernel_rem_pio2+0x248>
 800ae2c:	1e71      	subs	r1, r6, #1
 800ae2e:	ab0c      	add	r3, sp, #48	; 0x30
 800ae30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae34:	9c04      	ldr	r4, [sp, #16]
 800ae36:	f1cb 0018 	rsb	r0, fp, #24
 800ae3a:	fa43 f200 	asr.w	r2, r3, r0
 800ae3e:	4414      	add	r4, r2
 800ae40:	4082      	lsls	r2, r0
 800ae42:	1a9b      	subs	r3, r3, r2
 800ae44:	aa0c      	add	r2, sp, #48	; 0x30
 800ae46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ae4a:	f1cb 0217 	rsb	r2, fp, #23
 800ae4e:	9404      	str	r4, [sp, #16]
 800ae50:	4113      	asrs	r3, r2
 800ae52:	9300      	str	r3, [sp, #0]
 800ae54:	9b00      	ldr	r3, [sp, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	dd66      	ble.n	800af28 <__kernel_rem_pio2+0x264>
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ae60:	4614      	mov	r4, r2
 800ae62:	9b04      	ldr	r3, [sp, #16]
 800ae64:	3301      	adds	r3, #1
 800ae66:	9304      	str	r3, [sp, #16]
 800ae68:	4296      	cmp	r6, r2
 800ae6a:	f300 80ad 	bgt.w	800afc8 <__kernel_rem_pio2+0x304>
 800ae6e:	f1bb 0f00 	cmp.w	fp, #0
 800ae72:	dd07      	ble.n	800ae84 <__kernel_rem_pio2+0x1c0>
 800ae74:	f1bb 0f01 	cmp.w	fp, #1
 800ae78:	f000 80b5 	beq.w	800afe6 <__kernel_rem_pio2+0x322>
 800ae7c:	f1bb 0f02 	cmp.w	fp, #2
 800ae80:	f000 80bb 	beq.w	800affa <__kernel_rem_pio2+0x336>
 800ae84:	9b00      	ldr	r3, [sp, #0]
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d14e      	bne.n	800af28 <__kernel_rem_pio2+0x264>
 800ae8a:	4642      	mov	r2, r8
 800ae8c:	464b      	mov	r3, r9
 800ae8e:	2000      	movs	r0, #0
 800ae90:	4948      	ldr	r1, [pc, #288]	; (800afb4 <__kernel_rem_pio2+0x2f0>)
 800ae92:	f7f5 f969 	bl	8000168 <__aeabi_dsub>
 800ae96:	4680      	mov	r8, r0
 800ae98:	4689      	mov	r9, r1
 800ae9a:	2c00      	cmp	r4, #0
 800ae9c:	d044      	beq.n	800af28 <__kernel_rem_pio2+0x264>
 800ae9e:	465a      	mov	r2, fp
 800aea0:	2000      	movs	r0, #0
 800aea2:	4944      	ldr	r1, [pc, #272]	; (800afb4 <__kernel_rem_pio2+0x2f0>)
 800aea4:	f7ff fe68 	bl	800ab78 <scalbn>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4640      	mov	r0, r8
 800aeae:	4649      	mov	r1, r9
 800aeb0:	f7f5 f95a 	bl	8000168 <__aeabi_dsub>
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	4689      	mov	r9, r1
 800aeb8:	e036      	b.n	800af28 <__kernel_rem_pio2+0x264>
 800aeba:	2200      	movs	r2, #0
 800aebc:	4b3e      	ldr	r3, [pc, #248]	; (800afb8 <__kernel_rem_pio2+0x2f4>)
 800aebe:	4620      	mov	r0, r4
 800aec0:	4629      	mov	r1, r5
 800aec2:	f7f5 fb09 	bl	80004d8 <__aeabi_dmul>
 800aec6:	f7f5 fdb7 	bl	8000a38 <__aeabi_d2iz>
 800aeca:	f7f5 fa9b 	bl	8000404 <__aeabi_i2d>
 800aece:	4602      	mov	r2, r0
 800aed0:	460b      	mov	r3, r1
 800aed2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aed6:	2200      	movs	r2, #0
 800aed8:	4b38      	ldr	r3, [pc, #224]	; (800afbc <__kernel_rem_pio2+0x2f8>)
 800aeda:	f7f5 fafd 	bl	80004d8 <__aeabi_dmul>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	4620      	mov	r0, r4
 800aee4:	4629      	mov	r1, r5
 800aee6:	f7f5 f93f 	bl	8000168 <__aeabi_dsub>
 800aeea:	f7f5 fda5 	bl	8000a38 <__aeabi_d2iz>
 800aeee:	9b00      	ldr	r3, [sp, #0]
 800aef0:	f109 39ff 	add.w	r9, r9, #4294967295
 800aef4:	f843 0b04 	str.w	r0, [r3], #4
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aefe:	e9d8 2300 	ldrd	r2, r3, [r8]
 800af02:	f7f5 f933 	bl	800016c <__adddf3>
 800af06:	4604      	mov	r4, r0
 800af08:	460d      	mov	r5, r1
 800af0a:	e760      	b.n	800adce <__kernel_rem_pio2+0x10a>
 800af0c:	d105      	bne.n	800af1a <__kernel_rem_pio2+0x256>
 800af0e:	1e73      	subs	r3, r6, #1
 800af10:	aa0c      	add	r2, sp, #48	; 0x30
 800af12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af16:	15db      	asrs	r3, r3, #23
 800af18:	e79b      	b.n	800ae52 <__kernel_rem_pio2+0x18e>
 800af1a:	2200      	movs	r2, #0
 800af1c:	4b28      	ldr	r3, [pc, #160]	; (800afc0 <__kernel_rem_pio2+0x2fc>)
 800af1e:	f7f5 fd61 	bl	80009e4 <__aeabi_dcmpge>
 800af22:	2800      	cmp	r0, #0
 800af24:	d13e      	bne.n	800afa4 <__kernel_rem_pio2+0x2e0>
 800af26:	9000      	str	r0, [sp, #0]
 800af28:	2200      	movs	r2, #0
 800af2a:	2300      	movs	r3, #0
 800af2c:	4640      	mov	r0, r8
 800af2e:	4649      	mov	r1, r9
 800af30:	f7f5 fd3a 	bl	80009a8 <__aeabi_dcmpeq>
 800af34:	2800      	cmp	r0, #0
 800af36:	f000 80b2 	beq.w	800b09e <__kernel_rem_pio2+0x3da>
 800af3a:	1e74      	subs	r4, r6, #1
 800af3c:	4623      	mov	r3, r4
 800af3e:	2200      	movs	r2, #0
 800af40:	9902      	ldr	r1, [sp, #8]
 800af42:	428b      	cmp	r3, r1
 800af44:	da60      	bge.n	800b008 <__kernel_rem_pio2+0x344>
 800af46:	2a00      	cmp	r2, #0
 800af48:	d075      	beq.n	800b036 <__kernel_rem_pio2+0x372>
 800af4a:	ab0c      	add	r3, sp, #48	; 0x30
 800af4c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800af50:	f1ab 0b18 	sub.w	fp, fp, #24
 800af54:	2b00      	cmp	r3, #0
 800af56:	f000 80a0 	beq.w	800b09a <__kernel_rem_pio2+0x3d6>
 800af5a:	465a      	mov	r2, fp
 800af5c:	2000      	movs	r0, #0
 800af5e:	4915      	ldr	r1, [pc, #84]	; (800afb4 <__kernel_rem_pio2+0x2f0>)
 800af60:	f7ff fe0a 	bl	800ab78 <scalbn>
 800af64:	46a2      	mov	sl, r4
 800af66:	4606      	mov	r6, r0
 800af68:	460f      	mov	r7, r1
 800af6a:	f04f 0800 	mov.w	r8, #0
 800af6e:	ab70      	add	r3, sp, #448	; 0x1c0
 800af70:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800afb8 <__kernel_rem_pio2+0x2f4>
 800af74:	00e5      	lsls	r5, r4, #3
 800af76:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800af7a:	f1ba 0f00 	cmp.w	sl, #0
 800af7e:	f280 80c4 	bge.w	800b10a <__kernel_rem_pio2+0x446>
 800af82:	4626      	mov	r6, r4
 800af84:	2e00      	cmp	r6, #0
 800af86:	f2c0 80f6 	blt.w	800b176 <__kernel_rem_pio2+0x4b2>
 800af8a:	4b0e      	ldr	r3, [pc, #56]	; (800afc4 <__kernel_rem_pio2+0x300>)
 800af8c:	f04f 0a00 	mov.w	sl, #0
 800af90:	9307      	str	r3, [sp, #28]
 800af92:	ab70      	add	r3, sp, #448	; 0x1c0
 800af94:	f04f 0b00 	mov.w	fp, #0
 800af98:	f04f 0800 	mov.w	r8, #0
 800af9c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800afa0:	1ba7      	subs	r7, r4, r6
 800afa2:	e0dc      	b.n	800b15e <__kernel_rem_pio2+0x49a>
 800afa4:	2302      	movs	r3, #2
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	e757      	b.n	800ae5a <__kernel_rem_pio2+0x196>
 800afaa:	bf00      	nop
 800afac:	0800bb00 	.word	0x0800bb00
 800afb0:	40200000 	.word	0x40200000
 800afb4:	3ff00000 	.word	0x3ff00000
 800afb8:	3e700000 	.word	0x3e700000
 800afbc:	41700000 	.word	0x41700000
 800afc0:	3fe00000 	.word	0x3fe00000
 800afc4:	0800bac0 	.word	0x0800bac0
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	b944      	cbnz	r4, 800afde <__kernel_rem_pio2+0x31a>
 800afcc:	b11b      	cbz	r3, 800afd6 <__kernel_rem_pio2+0x312>
 800afce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800afd2:	603b      	str	r3, [r7, #0]
 800afd4:	2301      	movs	r3, #1
 800afd6:	461c      	mov	r4, r3
 800afd8:	3201      	adds	r2, #1
 800afda:	3704      	adds	r7, #4
 800afdc:	e744      	b.n	800ae68 <__kernel_rem_pio2+0x1a4>
 800afde:	1acb      	subs	r3, r1, r3
 800afe0:	603b      	str	r3, [r7, #0]
 800afe2:	4623      	mov	r3, r4
 800afe4:	e7f7      	b.n	800afd6 <__kernel_rem_pio2+0x312>
 800afe6:	1e72      	subs	r2, r6, #1
 800afe8:	ab0c      	add	r3, sp, #48	; 0x30
 800afea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aff2:	a90c      	add	r1, sp, #48	; 0x30
 800aff4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aff8:	e744      	b.n	800ae84 <__kernel_rem_pio2+0x1c0>
 800affa:	1e72      	subs	r2, r6, #1
 800affc:	ab0c      	add	r3, sp, #48	; 0x30
 800affe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b002:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b006:	e7f4      	b.n	800aff2 <__kernel_rem_pio2+0x32e>
 800b008:	a90c      	add	r1, sp, #48	; 0x30
 800b00a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b00e:	3b01      	subs	r3, #1
 800b010:	430a      	orrs	r2, r1
 800b012:	e795      	b.n	800af40 <__kernel_rem_pio2+0x27c>
 800b014:	3301      	adds	r3, #1
 800b016:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b01a:	2900      	cmp	r1, #0
 800b01c:	d0fa      	beq.n	800b014 <__kernel_rem_pio2+0x350>
 800b01e:	9a08      	ldr	r2, [sp, #32]
 800b020:	a920      	add	r1, sp, #128	; 0x80
 800b022:	18b2      	adds	r2, r6, r2
 800b024:	f106 0801 	add.w	r8, r6, #1
 800b028:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800b02c:	18f4      	adds	r4, r6, r3
 800b02e:	4544      	cmp	r4, r8
 800b030:	da04      	bge.n	800b03c <__kernel_rem_pio2+0x378>
 800b032:	4626      	mov	r6, r4
 800b034:	e6bf      	b.n	800adb6 <__kernel_rem_pio2+0xf2>
 800b036:	2301      	movs	r3, #1
 800b038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b03a:	e7ec      	b.n	800b016 <__kernel_rem_pio2+0x352>
 800b03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b03e:	f04f 0900 	mov.w	r9, #0
 800b042:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b046:	f7f5 f9dd 	bl	8000404 <__aeabi_i2d>
 800b04a:	2600      	movs	r6, #0
 800b04c:	2700      	movs	r7, #0
 800b04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b050:	e9c5 0100 	strd	r0, r1, [r5]
 800b054:	3b08      	subs	r3, #8
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	9504      	str	r5, [sp, #16]
 800b05a:	9b07      	ldr	r3, [sp, #28]
 800b05c:	4599      	cmp	r9, r3
 800b05e:	dd05      	ble.n	800b06c <__kernel_rem_pio2+0x3a8>
 800b060:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800b064:	f108 0801 	add.w	r8, r8, #1
 800b068:	3508      	adds	r5, #8
 800b06a:	e7e0      	b.n	800b02e <__kernel_rem_pio2+0x36a>
 800b06c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b070:	9900      	ldr	r1, [sp, #0]
 800b072:	f109 0901 	add.w	r9, r9, #1
 800b076:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800b07a:	9100      	str	r1, [sp, #0]
 800b07c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800b080:	f8cd c010 	str.w	ip, [sp, #16]
 800b084:	f7f5 fa28 	bl	80004d8 <__aeabi_dmul>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	4630      	mov	r0, r6
 800b08e:	4639      	mov	r1, r7
 800b090:	f7f5 f86c 	bl	800016c <__adddf3>
 800b094:	4606      	mov	r6, r0
 800b096:	460f      	mov	r7, r1
 800b098:	e7df      	b.n	800b05a <__kernel_rem_pio2+0x396>
 800b09a:	3c01      	subs	r4, #1
 800b09c:	e755      	b.n	800af4a <__kernel_rem_pio2+0x286>
 800b09e:	f1cb 0200 	rsb	r2, fp, #0
 800b0a2:	4640      	mov	r0, r8
 800b0a4:	4649      	mov	r1, r9
 800b0a6:	f7ff fd67 	bl	800ab78 <scalbn>
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	4ba3      	ldr	r3, [pc, #652]	; (800b33c <__kernel_rem_pio2+0x678>)
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	460d      	mov	r5, r1
 800b0b2:	f7f5 fc97 	bl	80009e4 <__aeabi_dcmpge>
 800b0b6:	b1f8      	cbz	r0, 800b0f8 <__kernel_rem_pio2+0x434>
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	4ba1      	ldr	r3, [pc, #644]	; (800b340 <__kernel_rem_pio2+0x67c>)
 800b0bc:	4620      	mov	r0, r4
 800b0be:	4629      	mov	r1, r5
 800b0c0:	f7f5 fa0a 	bl	80004d8 <__aeabi_dmul>
 800b0c4:	f7f5 fcb8 	bl	8000a38 <__aeabi_d2iz>
 800b0c8:	4607      	mov	r7, r0
 800b0ca:	f7f5 f99b 	bl	8000404 <__aeabi_i2d>
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	4b9a      	ldr	r3, [pc, #616]	; (800b33c <__kernel_rem_pio2+0x678>)
 800b0d2:	f7f5 fa01 	bl	80004d8 <__aeabi_dmul>
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4602      	mov	r2, r0
 800b0da:	4629      	mov	r1, r5
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f7f5 f843 	bl	8000168 <__aeabi_dsub>
 800b0e2:	f7f5 fca9 	bl	8000a38 <__aeabi_d2iz>
 800b0e6:	1c74      	adds	r4, r6, #1
 800b0e8:	ab0c      	add	r3, sp, #48	; 0x30
 800b0ea:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b0ee:	f10b 0b18 	add.w	fp, fp, #24
 800b0f2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800b0f6:	e730      	b.n	800af5a <__kernel_rem_pio2+0x296>
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	f7f5 fc9c 	bl	8000a38 <__aeabi_d2iz>
 800b100:	ab0c      	add	r3, sp, #48	; 0x30
 800b102:	4634      	mov	r4, r6
 800b104:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b108:	e727      	b.n	800af5a <__kernel_rem_pio2+0x296>
 800b10a:	ab0c      	add	r3, sp, #48	; 0x30
 800b10c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b110:	f7f5 f978 	bl	8000404 <__aeabi_i2d>
 800b114:	4632      	mov	r2, r6
 800b116:	463b      	mov	r3, r7
 800b118:	f7f5 f9de 	bl	80004d8 <__aeabi_dmul>
 800b11c:	4642      	mov	r2, r8
 800b11e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800b122:	464b      	mov	r3, r9
 800b124:	4630      	mov	r0, r6
 800b126:	4639      	mov	r1, r7
 800b128:	f7f5 f9d6 	bl	80004d8 <__aeabi_dmul>
 800b12c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b130:	4606      	mov	r6, r0
 800b132:	460f      	mov	r7, r1
 800b134:	e721      	b.n	800af7a <__kernel_rem_pio2+0x2b6>
 800b136:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b13a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b13e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800b142:	f8cd c01c 	str.w	ip, [sp, #28]
 800b146:	f7f5 f9c7 	bl	80004d8 <__aeabi_dmul>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	4650      	mov	r0, sl
 800b150:	4659      	mov	r1, fp
 800b152:	f7f5 f80b 	bl	800016c <__adddf3>
 800b156:	4682      	mov	sl, r0
 800b158:	468b      	mov	fp, r1
 800b15a:	f108 0801 	add.w	r8, r8, #1
 800b15e:	9b02      	ldr	r3, [sp, #8]
 800b160:	4598      	cmp	r8, r3
 800b162:	dc01      	bgt.n	800b168 <__kernel_rem_pio2+0x4a4>
 800b164:	45b8      	cmp	r8, r7
 800b166:	dde6      	ble.n	800b136 <__kernel_rem_pio2+0x472>
 800b168:	ab48      	add	r3, sp, #288	; 0x120
 800b16a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b16e:	e9c7 ab00 	strd	sl, fp, [r7]
 800b172:	3e01      	subs	r6, #1
 800b174:	e706      	b.n	800af84 <__kernel_rem_pio2+0x2c0>
 800b176:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b178:	2b02      	cmp	r3, #2
 800b17a:	dc09      	bgt.n	800b190 <__kernel_rem_pio2+0x4cc>
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	dc32      	bgt.n	800b1e6 <__kernel_rem_pio2+0x522>
 800b180:	d058      	beq.n	800b234 <__kernel_rem_pio2+0x570>
 800b182:	9b04      	ldr	r3, [sp, #16]
 800b184:	f003 0007 	and.w	r0, r3, #7
 800b188:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b190:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b192:	2b03      	cmp	r3, #3
 800b194:	d1f5      	bne.n	800b182 <__kernel_rem_pio2+0x4be>
 800b196:	ab48      	add	r3, sp, #288	; 0x120
 800b198:	441d      	add	r5, r3
 800b19a:	46aa      	mov	sl, r5
 800b19c:	46a3      	mov	fp, r4
 800b19e:	f1bb 0f00 	cmp.w	fp, #0
 800b1a2:	dc74      	bgt.n	800b28e <__kernel_rem_pio2+0x5ca>
 800b1a4:	46aa      	mov	sl, r5
 800b1a6:	46a3      	mov	fp, r4
 800b1a8:	f1bb 0f01 	cmp.w	fp, #1
 800b1ac:	f300 808e 	bgt.w	800b2cc <__kernel_rem_pio2+0x608>
 800b1b0:	2700      	movs	r7, #0
 800b1b2:	463e      	mov	r6, r7
 800b1b4:	2c01      	cmp	r4, #1
 800b1b6:	f300 80a8 	bgt.w	800b30a <__kernel_rem_pio2+0x646>
 800b1ba:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800b1be:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800b1c2:	9b00      	ldr	r3, [sp, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f040 80aa 	bne.w	800b31e <__kernel_rem_pio2+0x65a>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	462a      	mov	r2, r5
 800b1ce:	9806      	ldr	r0, [sp, #24]
 800b1d0:	e9c0 2300 	strd	r2, r3, [r0]
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b1dc:	463a      	mov	r2, r7
 800b1de:	4633      	mov	r3, r6
 800b1e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b1e4:	e7cd      	b.n	800b182 <__kernel_rem_pio2+0x4be>
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	46a0      	mov	r8, r4
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	ab48      	add	r3, sp, #288	; 0x120
 800b1ee:	441d      	add	r5, r3
 800b1f0:	f1b8 0f00 	cmp.w	r8, #0
 800b1f4:	da38      	bge.n	800b268 <__kernel_rem_pio2+0x5a4>
 800b1f6:	9b00      	ldr	r3, [sp, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d03c      	beq.n	800b276 <__kernel_rem_pio2+0x5b2>
 800b1fc:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800b200:	4602      	mov	r2, r0
 800b202:	462b      	mov	r3, r5
 800b204:	9d06      	ldr	r5, [sp, #24]
 800b206:	2601      	movs	r6, #1
 800b208:	e9c5 2300 	strd	r2, r3, [r5]
 800b20c:	460b      	mov	r3, r1
 800b20e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b212:	f7f4 ffa9 	bl	8000168 <__aeabi_dsub>
 800b216:	4684      	mov	ip, r0
 800b218:	460f      	mov	r7, r1
 800b21a:	ad48      	add	r5, sp, #288	; 0x120
 800b21c:	42b4      	cmp	r4, r6
 800b21e:	da2c      	bge.n	800b27a <__kernel_rem_pio2+0x5b6>
 800b220:	9b00      	ldr	r3, [sp, #0]
 800b222:	b10b      	cbz	r3, 800b228 <__kernel_rem_pio2+0x564>
 800b224:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b228:	4662      	mov	r2, ip
 800b22a:	463b      	mov	r3, r7
 800b22c:	9906      	ldr	r1, [sp, #24]
 800b22e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b232:	e7a6      	b.n	800b182 <__kernel_rem_pio2+0x4be>
 800b234:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800b236:	ab48      	add	r3, sp, #288	; 0x120
 800b238:	4637      	mov	r7, r6
 800b23a:	441d      	add	r5, r3
 800b23c:	2c00      	cmp	r4, #0
 800b23e:	da09      	bge.n	800b254 <__kernel_rem_pio2+0x590>
 800b240:	9b00      	ldr	r3, [sp, #0]
 800b242:	b10b      	cbz	r3, 800b248 <__kernel_rem_pio2+0x584>
 800b244:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b248:	4632      	mov	r2, r6
 800b24a:	463b      	mov	r3, r7
 800b24c:	9906      	ldr	r1, [sp, #24]
 800b24e:	e9c1 2300 	strd	r2, r3, [r1]
 800b252:	e796      	b.n	800b182 <__kernel_rem_pio2+0x4be>
 800b254:	4630      	mov	r0, r6
 800b256:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b25a:	4639      	mov	r1, r7
 800b25c:	f7f4 ff86 	bl	800016c <__adddf3>
 800b260:	3c01      	subs	r4, #1
 800b262:	4606      	mov	r6, r0
 800b264:	460f      	mov	r7, r1
 800b266:	e7e9      	b.n	800b23c <__kernel_rem_pio2+0x578>
 800b268:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b26c:	f7f4 ff7e 	bl	800016c <__adddf3>
 800b270:	f108 38ff 	add.w	r8, r8, #4294967295
 800b274:	e7bc      	b.n	800b1f0 <__kernel_rem_pio2+0x52c>
 800b276:	460d      	mov	r5, r1
 800b278:	e7c2      	b.n	800b200 <__kernel_rem_pio2+0x53c>
 800b27a:	4660      	mov	r0, ip
 800b27c:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800b280:	4639      	mov	r1, r7
 800b282:	f7f4 ff73 	bl	800016c <__adddf3>
 800b286:	3601      	adds	r6, #1
 800b288:	4684      	mov	ip, r0
 800b28a:	460f      	mov	r7, r1
 800b28c:	e7c6      	b.n	800b21c <__kernel_rem_pio2+0x558>
 800b28e:	e9da 6700 	ldrd	r6, r7, [sl]
 800b292:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800b296:	4632      	mov	r2, r6
 800b298:	463b      	mov	r3, r7
 800b29a:	4640      	mov	r0, r8
 800b29c:	4649      	mov	r1, r9
 800b29e:	f7f4 ff65 	bl	800016c <__adddf3>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2aa:	4640      	mov	r0, r8
 800b2ac:	4649      	mov	r1, r9
 800b2ae:	f7f4 ff5b 	bl	8000168 <__aeabi_dsub>
 800b2b2:	4632      	mov	r2, r6
 800b2b4:	463b      	mov	r3, r7
 800b2b6:	f7f4 ff59 	bl	800016c <__adddf3>
 800b2ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2be:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b2c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2c6:	e9ca 2300 	strd	r2, r3, [sl]
 800b2ca:	e768      	b.n	800b19e <__kernel_rem_pio2+0x4da>
 800b2cc:	e9da 8900 	ldrd	r8, r9, [sl]
 800b2d0:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800b2d4:	4642      	mov	r2, r8
 800b2d6:	464b      	mov	r3, r9
 800b2d8:	4630      	mov	r0, r6
 800b2da:	4639      	mov	r1, r7
 800b2dc:	f7f4 ff46 	bl	800016c <__adddf3>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	f7f4 ff3c 	bl	8000168 <__aeabi_dsub>
 800b2f0:	4642      	mov	r2, r8
 800b2f2:	464b      	mov	r3, r9
 800b2f4:	f7f4 ff3a 	bl	800016c <__adddf3>
 800b2f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2fc:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b300:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b304:	e9ca 2300 	strd	r2, r3, [sl]
 800b308:	e74e      	b.n	800b1a8 <__kernel_rem_pio2+0x4e4>
 800b30a:	4638      	mov	r0, r7
 800b30c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b310:	4631      	mov	r1, r6
 800b312:	f7f4 ff2b 	bl	800016c <__adddf3>
 800b316:	3c01      	subs	r4, #1
 800b318:	4607      	mov	r7, r0
 800b31a:	460e      	mov	r6, r1
 800b31c:	e74a      	b.n	800b1b4 <__kernel_rem_pio2+0x4f0>
 800b31e:	9b06      	ldr	r3, [sp, #24]
 800b320:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b324:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b328:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b32c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b330:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b334:	601d      	str	r5, [r3, #0]
 800b336:	615e      	str	r6, [r3, #20]
 800b338:	e723      	b.n	800b182 <__kernel_rem_pio2+0x4be>
 800b33a:	bf00      	nop
 800b33c:	41700000 	.word	0x41700000
 800b340:	3e700000 	.word	0x3e700000
 800b344:	00000000 	.word	0x00000000

0800b348 <floor>:
 800b348:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b350:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b354:	2e13      	cmp	r6, #19
 800b356:	460b      	mov	r3, r1
 800b358:	4607      	mov	r7, r0
 800b35a:	460c      	mov	r4, r1
 800b35c:	4605      	mov	r5, r0
 800b35e:	dc32      	bgt.n	800b3c6 <floor+0x7e>
 800b360:	2e00      	cmp	r6, #0
 800b362:	da14      	bge.n	800b38e <floor+0x46>
 800b364:	a334      	add	r3, pc, #208	; (adr r3, 800b438 <floor+0xf0>)
 800b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36a:	f7f4 feff 	bl	800016c <__adddf3>
 800b36e:	2200      	movs	r2, #0
 800b370:	2300      	movs	r3, #0
 800b372:	f7f5 fb41 	bl	80009f8 <__aeabi_dcmpgt>
 800b376:	b138      	cbz	r0, 800b388 <floor+0x40>
 800b378:	2c00      	cmp	r4, #0
 800b37a:	da56      	bge.n	800b42a <floor+0xe2>
 800b37c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b380:	4325      	orrs	r5, r4
 800b382:	d055      	beq.n	800b430 <floor+0xe8>
 800b384:	2500      	movs	r5, #0
 800b386:	4c2e      	ldr	r4, [pc, #184]	; (800b440 <floor+0xf8>)
 800b388:	4623      	mov	r3, r4
 800b38a:	462f      	mov	r7, r5
 800b38c:	e025      	b.n	800b3da <floor+0x92>
 800b38e:	4a2d      	ldr	r2, [pc, #180]	; (800b444 <floor+0xfc>)
 800b390:	fa42 f806 	asr.w	r8, r2, r6
 800b394:	ea01 0208 	and.w	r2, r1, r8
 800b398:	4302      	orrs	r2, r0
 800b39a:	d01e      	beq.n	800b3da <floor+0x92>
 800b39c:	a326      	add	r3, pc, #152	; (adr r3, 800b438 <floor+0xf0>)
 800b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a2:	f7f4 fee3 	bl	800016c <__adddf3>
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f7f5 fb25 	bl	80009f8 <__aeabi_dcmpgt>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d0ea      	beq.n	800b388 <floor+0x40>
 800b3b2:	2c00      	cmp	r4, #0
 800b3b4:	bfbe      	ittt	lt
 800b3b6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b3ba:	4133      	asrlt	r3, r6
 800b3bc:	18e4      	addlt	r4, r4, r3
 800b3be:	2500      	movs	r5, #0
 800b3c0:	ea24 0408 	bic.w	r4, r4, r8
 800b3c4:	e7e0      	b.n	800b388 <floor+0x40>
 800b3c6:	2e33      	cmp	r6, #51	; 0x33
 800b3c8:	dd0b      	ble.n	800b3e2 <floor+0x9a>
 800b3ca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b3ce:	d104      	bne.n	800b3da <floor+0x92>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	f7f4 fecb 	bl	800016c <__adddf3>
 800b3d6:	4607      	mov	r7, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	4638      	mov	r0, r7
 800b3dc:	4619      	mov	r1, r3
 800b3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3e2:	f04f 38ff 	mov.w	r8, #4294967295
 800b3e6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b3ea:	fa28 f802 	lsr.w	r8, r8, r2
 800b3ee:	ea10 0f08 	tst.w	r0, r8
 800b3f2:	d0f2      	beq.n	800b3da <floor+0x92>
 800b3f4:	a310      	add	r3, pc, #64	; (adr r3, 800b438 <floor+0xf0>)
 800b3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fa:	f7f4 feb7 	bl	800016c <__adddf3>
 800b3fe:	2200      	movs	r2, #0
 800b400:	2300      	movs	r3, #0
 800b402:	f7f5 faf9 	bl	80009f8 <__aeabi_dcmpgt>
 800b406:	2800      	cmp	r0, #0
 800b408:	d0be      	beq.n	800b388 <floor+0x40>
 800b40a:	2c00      	cmp	r4, #0
 800b40c:	da0a      	bge.n	800b424 <floor+0xdc>
 800b40e:	2e14      	cmp	r6, #20
 800b410:	d101      	bne.n	800b416 <floor+0xce>
 800b412:	3401      	adds	r4, #1
 800b414:	e006      	b.n	800b424 <floor+0xdc>
 800b416:	2301      	movs	r3, #1
 800b418:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b41c:	40b3      	lsls	r3, r6
 800b41e:	441d      	add	r5, r3
 800b420:	42af      	cmp	r7, r5
 800b422:	d8f6      	bhi.n	800b412 <floor+0xca>
 800b424:	ea25 0508 	bic.w	r5, r5, r8
 800b428:	e7ae      	b.n	800b388 <floor+0x40>
 800b42a:	2500      	movs	r5, #0
 800b42c:	462c      	mov	r4, r5
 800b42e:	e7ab      	b.n	800b388 <floor+0x40>
 800b430:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b434:	e7a8      	b.n	800b388 <floor+0x40>
 800b436:	bf00      	nop
 800b438:	8800759c 	.word	0x8800759c
 800b43c:	7e37e43c 	.word	0x7e37e43c
 800b440:	bff00000 	.word	0xbff00000
 800b444:	000fffff 	.word	0x000fffff

0800b448 <_init>:
 800b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44a:	bf00      	nop
 800b44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b44e:	bc08      	pop	{r3}
 800b450:	469e      	mov	lr, r3
 800b452:	4770      	bx	lr

0800b454 <_fini>:
 800b454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b456:	bf00      	nop
 800b458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b45a:	bc08      	pop	{r3}
 800b45c:	469e      	mov	lr, r3
 800b45e:	4770      	bx	lr
